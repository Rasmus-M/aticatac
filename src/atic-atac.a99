* Atic Atac for Sinclair ZX Spectrum
* (c) 1983 Ashby Computers and Graphics Ltd.
* 
* Disassembled by obo
* 
* Differences from original release:
* 6009: C0->00 - disable protection check on FRAMES sysvar after loading
* 7E91: B0->05 - new LSB of JP (HL) instruction (below)
* 7E92: 5C->D5 - new MSB of JP (HL) instruction
* 971F: D4->D3 - fixed typo in congratulations message
* D505: 00->E9 - JP (HL) instruction moved from printer buffer



* Data block at 5e00
menu_selection:                        ; >5e00
       byte >00
charset_addr:                          ; >5e01
       data _be4c
last_frames:                           ; >5e03
       byte >00
in_handlers:                           ; >5e04
       byte >00                                                      ; flag set but never read
rand8:                                 ; >5e05
       data >0000                                                    ; only low 8 bits are
                                                                     ; meaningfully random
       bss 9
width_bytes:                           ; >5e10
       byte >02
height_lines:                          ; >5e11
       byte >12
counter_low:                           ; >5e12
       byte >3A
counter_high:                          ; >5e13
       byte >F5
game_flags:                            ; >5e14
       byte >AC                                                      ; b0 set if room content
                                                                     ; drawn
saved_graphic:                         ; >5e15
       byte >36
saved_x:                               ; >5e16
       byte >28
saved_y:                               ; >5e17
       byte >97
some_height:                           ; >5e18
       byte >00
some_width:                            ; >5e19
       byte >00
room_attr:                             ; >5e1a
       byte >00
room_ptr:                              ; >5e1b
       data >2C00
room_width:                            ; >5e1d
       byte >30
room_height:                           ; >5e1e
       byte >0E
pickup_flags:                          ; >5e1f
       byte >00
pickup_pressed:                        ; >5e20
       byte >00
lives:                                 ; >5e21
       byte >00
text_attr:                             ; >5e22
       byte >C5
line_counter:                          ; >5e23
       byte >00
line_flags:                            ; >5e24
       byte >3A
num_creatures:                         ; >5e25
       byte >EF                                                      ; number of creatures
                                                                     ; processed this frame
last_creat_room:                       ; >5e26
       byte >22
creature_delay:                        ; >5e27
       byte >22
player_energy:                         ; >5e28
       byte >AF
chicken_level:                         ; >5e29
       byte >3A                                                      ; last drawn chicken level
score_bcd:                             ; >5e2a
       byte >F5,>AC,>36
in_doorway:                            ; >5e2d
       byte >0E
door_timer:                            ; >5e2e
       byte >00
walk_counter:                          ; >5e2f
       byte >00
inventory1:                            ; >5e30
       byte >06,>00,>00,>2C
inventory2:                            ; >5e34
       byte >30,>0E,>00,>00
inventory3:                            ; >5e38
       byte >00,>00,>00,>3A
flash_timer:                           ; >5e3c
       byte >EF                                                      ; score flash timer
clock_hours:                           ; >5e3d
       byte >22
clock_minutes:                         ; >5e3e
       byte >22
clock_seconds:                         ; >5e3f
       byte >AF
visited_rooms:                         ; >5e40
       byte >3A,>F5,>C0,>32,>33,>34,>32,>34,>0E,>00                  ; {visit rooms bit array
       byte >00,>80,>5B,>00,>0D,>80,>EF,>22,>22,>0D                  ; }

* Data block at 5e54
visited_percent:                       ; >5e54
       byte >80
food_ptr:                              ; >5e55
       data >0000

       ;                               ;                   

* Routine at 6000
start:                                 ; >6000
       limi 0                          ; DI                ; 
       li   sp,menu_selection          ; LD SP,$5E00       ; 
_6004:                                 ; >6004
       movb @zx_frames+>0001,a         ; LD A,($5C79)      ; 
       cb   a,@bytes+>25               ; CP $25            ; is frames MSB as expected?
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       b    @reset_menu                ; JP $7C19          ; 

* Initial game state data
player_init:                           ; >600d
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at 6015
weapon_init:                           ; >6015
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at 601d
sound_init:                            ; >601d
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at 6025
acg_key_init:                          ; >6025
       byte >8C,>00,>00,>58,>58,>46,>00,>00
       byte >8D,>00,>00,>58,>58,>46,>00,>00
       byte >8E,>00,>00,>58,>58,>46,>00,>00

* green key
green_key_init:                        ; >603d
       byte >81,>05,>00,>70,>60,>44,>00,>00

* red key
red_key_init:                          ; >6045
       byte >81,>17,>00,>80,>40,>42,>00,>00

* cyan key
cyan_key_init:                         ; >604d
       byte >81,>53,>00,>58,>58,>45,>00,>00

* yellow key
       byte >81,>66,>00,>30,>87,>46,>00,>00

* Data block at 605d
       byte >80,>09,>00,>40,>40,>42,>00,>00                          ; leaf
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; tombstone1
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; tombstone2
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; tombstone3
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; tombstone4
       byte >8A,>05,>00,>40,>70,>46,>00,>00                          ; crucafix
       byte >8B,>30,>00,>40,>70,>45,>00,>00                          ; spanner
       byte >82,>3B,>00,>60,>60,>44,>00,>00                          ; wine
       byte >83,>48,>00,>70,>70,>45,>00,>00                          ; coin
       byte >84,>64,>00,>80,>80,>46,>00,>00                          ; wing
       byte >85,>6B,>00,>40,>40,>45,>00,>00                          ; whip
       byte >86,>13,>00,>50,>50,>44,>00,>00                          ; frog's leg
       byte >87,>84,>00,>60,>40,>43,>00,>00                          ; jewel
       byte >88,>1F,>00,>70,>70,>42,>00,>00                          ; money bag
       byte >89,>49,>00,>50,>40,>47,>00,>00                          ; skull

* Data block at 60d5
food_init:                             ; >60d5
       byte >50,>27,>00,>57,>67,>43,>00,>00                          ; can
       byte >50,>7F,>00,>40,>40,>46,>00,>00
       byte >50,>1E,>00,>50,>57,>46,>00,>00
       byte >50,>0C,>00,>60,>60,>43,>00,>00
       byte >50,>67,>00,>57,>40,>42,>00,>00
       byte >50,>41,>00,>57,>67,>42,>00,>00
       byte >51,>75,>00,>30,>40,>44,>00,>00                          ; candy
       byte >51,>83,>00,>30,>40,>46,>00,>00
       byte >51,>0C,>00,>60,>70,>42,>00,>00
       byte >51,>68,>00,>57,>40,>43,>00,>00
       byte >51,>45,>00,>57,>46,>45,>00,>00
       byte >51,>46,>00,>43,>7B,>45,>00,>00
       byte >52,>86,>00,>47,>60,>43,>00,>00                          ; chop
       byte >52,>6E,>00,>60,>77,>42,>00,>00
       byte >52,>7D,>00,>57,>67,>43,>00,>00
       byte >52,>6A,>00,>30,>67,>42,>00,>00
       byte >52,>3E,>00,>43,>7B,>42,>00,>00
       byte >52,>35,>00,>57,>67,>43,>00,>00
       byte >53,>2B,>00,>40,>80,>46,>00,>00                          ; lollipop
       byte >53,>8A,>00,>57,>67,>45,>00,>00
       byte >53,>09,>00,>80,>90,>44,>00,>00
       byte >53,>70,>00,>80,>90,>43,>00,>00
       byte >53,>74,>00,>57,>87,>42,>00,>00
       byte >53,>33,>00,>57,>67,>45,>00,>00
       byte >54,>78,>00,>37,>37,>47,>00,>00                          ; icecream
       byte >54,>8A,>00,>7F,>7F,>47,>00,>00
       byte >54,>0B,>00,>57,>67,>46,>00,>00
       byte >54,>65,>00,>57,>87,>46,>00,>00
       byte >54,>53,>00,>43,>7B,>47,>00,>00
       byte >54,>4C,>00,>6B,>7B,>46,>00,>00
       byte >55,>7B,>00,>50,>60,>45,>00,>00                          ; pudding
       byte >55,>87,>00,>57,>67,>45,>00,>00
       byte >55,>0D,>00,>30,>67,>43,>00,>00
       byte >55,>66,>00,>43,>87,>43,>00,>00
       byte >55,>53,>00,>6B,>7B,>42,>00,>00
       byte >55,>4F,>00,>57,>67,>47,>00,>00
       byte >56,>7E,>00,>37,>80,>44,>00,>00                          ; apple
       byte >56,>8C,>00,>57,>67,>44,>00,>00
       byte >56,>70,>00,>30,>90,>44,>00,>00
       byte >56,>66,>00,>6B,>87,>44,>00,>00
       byte >56,>3C,>00,>43,>7B,>42,>00,>00
       byte >56,>39,>00,>43,>7B,>42,>00,>00
       byte >57,>7E,>00,>87,>80,>47,>00,>00                          ; bottle
       byte >57,>24,>00,>60,>70,>47,>00,>00
       byte >57,>70,>00,>57,>90,>47,>00,>00
       byte >57,>12,>00,>57,>40,>47,>00,>00
       byte >57,>5E,>00,>57,>67,>47,>00,>00
       byte >57,>1D,>00,>30,>67,>47,>00,>00
       byte >50,>17,>00,>40,>40,>42,>00,>00                          ; can
       byte >50,>73,>00,>30,>67,>42,>00,>00
       byte >50,>07,>00,>57,>67,>43,>00,>00
       byte >50,>02,>00,>57,>67,>43,>00,>00
       byte >51,>0F,>00,>57,>67,>43,>00,>00                          ; candy
       byte >51,>3A,>00,>30,>48,>43,>00,>00
       byte >51,>41,>00,>80,>67,>42,>00,>00
       byte >51,>85,>00,>43,>7B,>42,>00,>00
       byte >52,>6C,>00,>57,>47,>43,>00,>00                          ; chop
       byte >52,>3A,>00,>57,>48,>43,>00,>00
       byte >52,>69,>00,>30,>40,>03,>00,>00
       byte >52,>80,>00,>30,>40,>03,>00,>00
       byte >53,>04,>00,>57,>67,>42,>00,>00                          ; lollipop
       byte >53,>4B,>00,>30,>88,>42,>00,>00
       byte >53,>11,>00,>57,>67,>46,>00,>00
       byte >53,>80,>00,>57,>40,>44,>00,>00
       byte >54,>69,>00,>30,>67,>46,>00,>00                          ; icecream
       byte >54,>35,>00,>57,>90,>46,>00,>00
       byte >54,>69,>00,>30,>90,>46,>00,>00
       byte >54,>80,>00,>80,>80,>44,>00,>00
       byte >55,>57,>00,>57,>40,>46,>00,>00                          ; pudding
       byte >55,>35,>00,>57,>40,>46,>00,>00
       byte >55,>25,>00,>6B,>7B,>43,>00,>00
       byte >55,>1B,>00,>57,>67,>44,>00,>00
       byte >56,>58,>00,>57,>40,>44,>00,>00                          ; apple
       byte >56,>4E,>00,>67,>40,>42,>00,>00
       byte >56,>37,>00,>57,>67,>46,>00,>00
       byte >56,>85,>00,>6B,>7B,>44,>00,>00
       byte >57,>5B,>00,>57,>67,>47,>00,>00                          ; bottle
       byte >57,>4E,>00,>40,>67,>47,>00,>00
       byte >57,>49,>00,>57,>67,>47,>00,>00
       byte >57,>28,>00,>57,>67,>47,>00,>00
       byte >A1,>50,>00,>57,>40,>42,>00,>00                          ; mushroom
       byte >A1,>43,>00,>6B,>54,>42,>01,>00
       byte >A1,>40,>00,>43,>7B,>42,>02,>00
       byte >A1,>8F,>00,>57,>8F,>42,>03,>00
       byte >A1,>8F,>00,>43,>7B,>42,>04,>00
       byte >A1,>8F,>00,>6B,>7B,>42,>05,>00
       byte >A1,>45,>00,>80,>67,>42,>06,>00
       byte >A1,>38,>00,>6B,>54,>42,>07,>00
       byte >A1,>74,>00,>30,>40,>42,>06,>00
       byte >A1,>74,>00,>30,>88,>42,>05,>00
       byte >A1,>74,>00,>78,>88,>42,>04,>00
       byte >A1,>74,>00,>80,>40,>42,>03,>00
       byte >A1,>54,>00,>57,>40,>42,>02,>00
       byte >A1,>3B,>00,>43,>7B,>42,>01,>00
       byte >A1,>3B,>00,>6B,>7B,>42,>00,>00
       byte >A1,>53,>00,>80,>40,>42,>01,>00

* Data block at 63d5
       byte >31,>00,>00,>00,>00,>00,>00,>00                          ; blank

* Data block at 63dd
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; creature 1
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; creature 2
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; creature 3

* Data block at 640d
byte_640d:                             ; >640d
       byte >70,>17,>00,>50,>50,>47,>00,>00,>00,>00,>00,>68,>68,>00,>00,>00 ; mummy
       byte >7C,>6D,>00,>50,>50,>44,>00,>00,>00,>00,>00,>72,>72,>00,>00,>00 ; dracula
       byte >78,>43,>00,>50,>50,>43,>00,>00,>00,>00,>00,>72,>72,>00,>00,>00 ; devil
       byte >74,>55,>00,>50,>50,>42,>00,>00,>00,>00,>00,>50,>60,>00,>00,>00 ; frankenstein
       byte >9C,>56,>00,>58,>38,>42,>00,>00,>00,>00,>00,>50,>60,>00,>00,>00 ; hunchback

* Key: _r/_g/_b/_y suffix for locked door colours, _s for stairs (one end is
* large doorway)
door_07_00:                            ; >645d
       byte >02,>07,>34,>50,>1F,>00,>04,>56
       byte >02,>00,>34,>50,>B7,>80,>04,>06
door_19_00:                            ; >646d
       byte >02,>19,>34,>A0,>6F,>60,>B7,>03
       byte >02,>00,>34,>08,>6F,>E0,>06,>03
door_01_00_c:                          ; >647d
       byte >0A,>01,>34,>50,>B7,>80,>04,>06
       byte >0A,>00,>34,>50,>1F,>00,>04,>56
door_02_01:                            ; >648d
       byte >02,>02,>34,>A0,>6F,>60,>B7,>03
       byte >02,>01,>34,>08,>6F,>E0,>06,>03
door_03_02:                            ; >649d
       byte >02,>03,>34,>A0,>6F,>60,>B7,>03
       byte >02,>02,>34,>08,>6F,>E0,>06,>03
door_04_03:                            ; >64ad
       byte >02,>04,>34,>50,>1F,>00,>04,>56
       byte >02,>03,>34,>50,>B7,>80,>04,>06
door_19_04:                            ; >64bd
       byte >02,>19,>34,>08,>6F,>E0,>06,>03
       byte >02,>04,>34,>80,>6F,>60,>B7,>03
door_05_04:                            ; >64cd
       byte >02,>05,>34,>50,>1F,>00,>04,>56
       byte >02,>04,>34,>50,>B7,>80,>04,>06
door_06_05:                            ; >64dd
       byte >02,>06,>34,>08,>6F,>E0,>06,>03
       byte >02,>05,>34,>A0,>6F,>60,>B7,>03
door_1a_06_s:                          ; >64ed
       byte >03,>1A,>38,>48,>B6,>80,>16,>08
       byte >02,>06,>34,>50,>3F,>00,>04,>56
door_08_06_g:                          ; >64fd
       byte >09,>08,>34,>50,>1F,>00,>04,>56
       byte >09,>06,>34,>50,>97,>80,>04,>06
door_07_06:                            ; >650d
       byte >02,>07,>34,>08,>6F,>E0,>06,>03
       byte >02,>06,>34,>A0,>6F,>60,>B7,>03
door_09_08:                            ; >651d
       byte >02,>09,>34,>50,>1F,>00,>04,>57
       byte >02,>08,>34,>50,>B7,>80,>04,>06
door_0a_09:                            ; >652d
       byte >02,>0A,>34,>A0,>6F,>60,>B7,>03
       byte >02,>09,>34,>08,>6F,>E0,>06,>03
door_0b_0a:                            ; >653d
       byte >02,>0B,>34,>A0,>6F,>60,>B7,>03
       byte >02,>0A,>34,>08,>6F,>E0,>06,>03
door_0c_0b:                            ; >654d
       byte >02,>0C,>34,>A0,>6F,>60,>B7,>03
       byte >02,>0B,>34,>08,>6F,>E0,>06,>03
door_0d_0c:                            ; >655d
       byte >02,>0D,>34,>A0,>6F,>60,>B7,>03
       byte >02,>0C,>34,>08,>6F,>E0,>06,>03
door_0e_0d:                            ; >656d
       byte >02,>0E,>34,>50,>B7,>80,>04,>06
       byte >02,>0D,>34,>50,>1F,>00,>04,>56
door_0f_0e:                            ; >657d
       byte >02,>0F,>34,>50,>B7,>80,>04,>06
       byte >02,>0E,>34,>50,>1F,>00,>04,>56
door_10_0f:                            ; >658d
       byte >02,>10,>34,>50,>B7,>80,>04,>06
       byte >02,>0F,>34,>50,>1F,>00,>04,>56
door_11_10_r:                          ; >659d
       byte >08,>11,>34,>50,>B7,>80,>04,>06
       byte >08,>10,>34,>50,>1F,>00,>04,>56
door_12_11:                            ; >65ad
       byte >02,>12,>34,>50,>B7,>80,>04,>06
       byte >02,>11,>34,>50,>1F,>00,>04,>56
door_13_12:                            ; >65bd
       byte >02,>13,>34,>50,>B7,>80,>04,>06
       byte >02,>12,>34,>50,>1F,>00,>04,>56
door_14_13:                            ; >65cd
       byte >02,>14,>34,>08,>6F,>E0,>06,>03
       byte >02,>13,>34,>A0,>6F,>60,>B7,>03
door_15_14:                            ; >65dd
       byte >02,>15,>34,>08,>6F,>E0,>06,>03
       byte >02,>14,>34,>A0,>6F,>60,>B7,>03
door_16_15:                            ; >65ed
       byte >02,>16,>34,>08,>6F,>E0,>06,>03
       byte >02,>15,>34,>A0,>6F,>60,>B7,>03
door_17_16_r:                          ; >65fd
       byte >08,>17,>34,>08,>6F,>E0,>06,>03
       byte >08,>16,>34,>A0,>6F,>60,>B7,>03
door_18_17_g:                          ; >660d
       byte >09,>18,>34,>50,>1F,>00,>04,>56
       byte >09,>17,>34,>50,>B7,>80,>04,>06
door_18_02:                            ; >661d
       byte >02,>18,>34,>50,>B7,>80,>04,>06
       byte >02,>02,>34,>50,>3F,>00,>04,>56
door_1a_1b:                            ; >662d
       byte >02,>1A,>34,>50,>28,>00,>04,>56
       byte >02,>1B,>34,>50,>B7,>80,>04,>06
door_1b_1c_s:                          ; >663d
       byte >02,>1B,>34,>A0,>6F,>60,>B7,>03
       byte >03,>1C,>74,>08,>77,>E0,>08,>F5
door_1c_1d:                            ; >664d
       byte >02,>1C,>34,>98,>6F,>60,>AF,>03
       byte >01,>1D,>34,>18,>6F,>E0,>06,>03
door_1e_1f:                            ; >665d
       byte >02,>1E,>34,>50,>1F,>00,>04,>56
       byte >02,>1F,>34,>50,>B7,>80,>04,>06
door_1f_20:                            ; >666d
       byte >02,>1F,>34,>08,>6F,>E0,>06,>03
       byte >02,>20,>34,>A0,>6F,>60,>B7,>03
door_20_21:                            ; >667d
       byte >02,>20,>34,>08,>6F,>E0,>06,>03
       byte >02,>21,>34,>A0,>6F,>60,>B7,>03
door_21_22:                            ; >668d
       byte >02,>21,>34,>50,>B7,>80,>04,>06
       byte >02,>22,>34,>50,>1F,>00,>04,>56
door_22_23:                            ; >669d
       byte >02,>22,>34,>50,>B7,>80,>04,>06
       byte >02,>23,>34,>50,>1F,>00,>04,>56
door_23_24:                            ; >66ad
       byte >02,>23,>34,>A0,>6F,>60,>B7,>03
       byte >02,>24,>34,>08,>6F,>E0,>06,>03
door_24_25:                            ; >66bd
       byte >02,>24,>34,>A0,>6F,>60,>B7,>03
       byte >02,>25,>34,>08,>6F,>E0,>06,>03
door_25_1e_c:                          ; >66cd
       byte >0A,>25,>34,>50,>1F,>00,>04,>56
       byte >0A,>1E,>34,>50,>B7,>80,>04,>06
door_24_26_s:                          ; >66dd
       byte >02,>24,>34,>50,>3F,>00,>04,>56
       byte >03,>26,>38,>48,>B6,>80,>16,>08
door_03_26:                            ; >66ed
       byte >02,>02,>34,>50,>97,>80,>04,>06
       byte >02,>26,>34,>50,>28,>00,>04,>56
door_27_28:                            ; >66fd
       byte >02,>27,>34,>50,>B7,>80,>04,>06
       byte >02,>28,>34,>50,>1F,>00,>04,>56
door_28_29_c:                          ; >670d
       byte >0A,>28,>34,>50,>B7,>80,>04,>06
       byte >0A,>29,>34,>50,>1F,>00,>04,>56
door_29_2a:                            ; >671d
       byte >02,>29,>34,>08,>6F,>E0,>06,>03
       byte >02,>2A,>34,>A0,>6F,>60,>B7,>03
door_2a_2b:                            ; >672d
       byte >02,>2A,>34,>08,>6F,>E0,>06,>03
       byte >02,>2B,>34,>A0,>6F,>60,>B7,>03
door_2b_2c:                            ; >673d
       byte >02,>2B,>34,>50,>1F,>00,>04,>56
       byte >02,>2C,>34,>50,>B7,>80,>04,>06
door_2c_2d:                            ; >674d
       byte >02,>2C,>34,>50,>1F,>00,>04,>56
       byte >02,>2D,>34,>50,>B7,>80,>04,>06
door_2d_2e_g:                          ; >675d
       byte >09,>2D,>34,>A0,>6F,>60,>B7,>03
       byte >09,>2E,>34,>08,>6F,>E0,>06,>03
door_2e_27:                            ; >676d
       byte >02,>2E,>34,>A0,>6F,>60,>B7,>03
       byte >02,>27,>34,>08,>6F,>E0,>06,>03
door_27_2f_s:                          ; >677d
       byte >02,>27,>34,>50,>1F,>00,>04,>56
       byte >03,>2F,>38,>48,>B6,>80,>16,>08
door_20_2f_y:                          ; >678d
       byte >0B,>20,>34,>50,>97,>80,>04,>06
       byte >0B,>2F,>34,>50,>28,>00,>04,>56
door_30_31:                            ; >679d
       byte >01,>30,>34,>50,>A7,>80,>04,>06
       byte >01,>31,>34,>50,>27,>00,>04,>56
door_31_32:                            ; >67ad
       byte >01,>31,>34,>50,>AF,>80,>04,>06
       byte >01,>32,>34,>50,>27,>00,>04,>56
door_32_33:                            ; >67bd
       byte >01,>32,>34,>50,>AF,>80,>04,>06
       byte >01,>33,>34,>50,>2F,>00,>04,>56
door_33_34:                            ; >67cd
       byte >01,>33,>34,>50,>A7,>80,>04,>06
       byte >01,>34,>34,>50,>27,>00,>04,>56
door_34_35:                            ; >67dd
       byte >01,>34,>34,>50,>AF,>80,>04,>06
       byte >01,>35,>34,>50,>2F,>00,>04,>56
door_33_36:                            ; >67ed
       byte >01,>33,>34,>90,>6F,>60,>B7,>03
       byte >01,>36,>34,>10,>6F,>E0,>06,>03
door_36_37:                            ; >67fd
       byte >01,>36,>34,>98,>6F,>60,>B7,>03
       byte >01,>37,>34,>10,>6F,>E0,>06,>03
door_37_38:                            ; >680d
       byte >01,>37,>34,>98,>6F,>60,>B7,>03
       byte >01,>38,>34,>18,>6F,>E0,>06,>03
door_38_39:                            ; >681d
       byte >01,>38,>34,>50,>A7,>80,>04,>06
       byte >01,>39,>34,>50,>2F,>00,>04,>56
door_38_3a_g:                          ; >682d
       byte >0D,>38,>34,>90,>6F,>60,>B7,>03
       byte >0D,>3A,>34,>18,>6F,>E0,>06,>03
door_39_3b:                            ; >683d
       byte >01,>39,>34,>90,>6F,>60,>B7,>03
       byte >01,>3B,>34,>18,>6F,>E0,>06,>03
door_3a_3b:                            ; >684d
       byte >01,>3A,>34,>50,>A7,>80,>04,>06
       byte >01,>3B,>34,>50,>2F,>00,>04,>56
door_3b_3c_g:                          ; >685d
       byte >0D,>3B,>34,>50,>A7,>80,>04,>06
       byte >0D,>3C,>34,>50,>2F,>00,>04,>56
door_3b_3d:                            ; >686d
       byte >01,>3B,>34,>90,>6F,>60,>B7,>03
       byte >01,>3D,>34,>18,>6F,>E0,>06,>03
door_3c_3e:                            ; >687d
       byte >01,>3C,>34,>90,>6F,>60,>B7,>03
       byte >01,>3E,>34,>18,>6F,>E0,>06,>03
door_3d_3e:                            ; >688d
       byte >01,>3D,>34,>50,>A7,>80,>04,>06
       byte >01,>3E,>34,>50,>2F,>00,>04,>56
door_3d_3f_c:                          ; >689d
       byte >0E,>3D,>34,>90,>6F,>60,>B7,>03
       byte >0E,>3F,>34,>10,>6F,>E0,>06,>03
door_34_40:                            ; >68ad
       byte >01,>3F,>34,>98,>6F,>60,>B7,>03
       byte >01,>40,>34,>18,>6F,>E0,>06,>03
door_40_41:                            ; >68bd
       byte >01,>40,>34,>90,>6F,>60,>B7,>03
       byte >01,>41,>34,>18,>6F,>E0,>06,>03
door_40_42:                            ; >68cd
       byte >01,>40,>34,>50,>2F,>00,>04,>56
       byte >01,>42,>34,>50,>AF,>80,>04,>06
door_42_43:                            ; >68dd
       byte >01,>42,>34,>50,>27,>00,>04,>56
       byte >01,>43,>34,>50,>A7,>80,>04,>06
door_43_44:                            ; >68ed
       byte >01,>43,>34,>90,>6F,>60,>B7,>03
       byte >01,>44,>34,>10,>6F,>E0,>06,>03
door_44_45_r:                          ; >68fd
       byte >0C,>44,>34,>98,>6F,>60,>B7,>03
       byte >0C,>45,>34,>18,>6F,>E0,>06,>03
door_43_46:                            ; >690d
       byte >01,>43,>34,>50,>2F,>00,>04,>56
       byte >01,>46,>34,>50,>A7,>80,>04,>06
door_46_47:                            ; >691d
       byte >01,>46,>34,>18,>6F,>E0,>06,>03
       byte >01,>47,>34,>98,>6F,>60,>B7,>03
door_47_48_r:                          ; >692d
       byte >0C,>47,>34,>10,>6F,>E0,>06,>03
       byte >0C,>48,>34,>90,>6F,>60,>B7,>03
door_48_49:                            ; >693d
       byte >01,>48,>34,>50,>A7,>80,>04,>06
       byte >01,>49,>34,>50,>27,>00,>04,>56
door_48_4a_c:                          ; >694d
       byte >0E,>48,>34,>18,>6F,>E0,>06,>03
       byte >0E,>4A,>34,>98,>6F,>60,>B7,>03
door_4a_4b:                            ; >695d
       byte >01,>4A,>34,>10,>6F,>E0,>06,>03
       byte >01,>4B,>34,>90,>6F,>60,>B7,>03
door_4b_4c:                            ; >696d
       byte >01,>4B,>34,>50,>2F,>00,>04,>56
       byte >01,>4C,>34,>50,>A7,>80,>04,>06
door_48_4d:                            ; >697d
       byte >01,>48,>34,>50,>2F,>00,>04,>56
       byte >01,>4D,>34,>50,>AF,>80,>04,>06
door_4d_4e_r:                          ; >698d
       byte >0C,>4D,>34,>50,>27,>00,>04,>56
       byte >0C,>4E,>34,>50,>A7,>80,>04,>06
door_4e_4f:                            ; >699d
       byte >01,>4E,>34,>90,>6F,>60,>B7,>03
       byte >01,>4F,>34,>10,>6F,>E0,>06,>03
door_4f_50:                            ; >69ad
       byte >01,>4F,>34,>98,>6F,>60,>B7,>03
       byte >01,>50,>34,>18,>6F,>E0,>06,>03
door_50_51:                            ; >69bd
       byte >01,>50,>34,>50,>A7,>80,>04,>06
       byte >01,>51,>34,>50,>27,>00,>04,>56
door_50_52_g:                          ; >69cd
       byte >0D,>50,>34,>90,>6F,>60,>B7,>03
       byte >0D,>52,>34,>10,>6F,>E0,>06,>03
door_52_53:                            ; >69dd
       byte >01,>52,>34,>98,>6F,>60,>B7,>03
       byte >01,>53,>34,>18,>6F,>E0,>06,>03
door_1d_43:                            ; >69ed
       byte >01,>1D,>34,>90,>6F,>60,>B7,>03
       byte >01,>43,>34,>18,>6F,>E0,>06,>03
door_46_51:                            ; >69fd
       byte >01,>46,>34,>50,>2F,>00,>04,>56
       byte >01,>51,>34,>50,>AF,>80,>04,>06
door_4c_55:                            ; >6a0d
       byte >01,>4C,>34,>18,>6F,>E0,>06,>03
       byte >01,>55,>34,>90,>6F,>60,>B7,>03
door_54_55:                            ; >6a1d
       byte >01,>54,>34,>90,>6F,>60,>B7,>03
       byte >01,>55,>34,>18,>6F,>E0,>06,>03
door_54_30:                            ; >6a2d
       byte >01,>54,>34,>18,>6F,>E0,>06,>03
       byte >01,>30,>34,>90,>6F,>60,>B7,>03
door_2d_75:                            ; >6a3d
       byte >02,>2D,>34,>08,>6F,>E0,>06,>03
       byte >02,>75,>34,>A0,>6F,>60,>B7,>03
door_75_76:                            ; >6a4d
       byte >02,>75,>34,>50,>B7,>80,>04,>06
       byte >02,>76,>34,>50,>1F,>00,>04,>56
door_76_77:                            ; >6a5d
       byte >02,>76,>34,>A0,>6F,>60,>B7,>03
       byte >02,>77,>34,>08,>6F,>E0,>06,>03
door_77_78:                            ; >6a6d
       byte >02,>77,>34,>A0,>6F,>60,>B7,>03
       byte >02,>78,>34,>08,>6F,>E0,>06,>03
door_78_79:                            ; >6a7d
       byte >02,>78,>34,>50,>B7,>80,>04,>06
       byte >02,>79,>34,>50,>1F,>00,>04,>56
door_79_7a:                            ; >6a8d
       byte >02,>79,>34,>50,>B7,>80,>04,>06
       byte >02,>7A,>34,>50,>1F,>00,>04,>56
door_7a_7b:                            ; >6a9d
       byte >02,>7A,>34,>08,>6F,>E0,>06,>03
       byte >02,>7B,>34,>A0,>6F,>60,>B7,>03
door_7b_7c_y:                          ; >6aad
       byte >0B,>7B,>34,>08,>6F,>E0,>06,>03
       byte >0B,>7C,>34,>A0,>6F,>60,>B7,>03
door_7c_7d_y:                          ; >6abd
       byte >0B,>7C,>34,>50,>1F,>00,>04,>56
       byte >0B,>7D,>34,>50,>B7,>80,>04,>06
door_7d_76:                            ; >6acd
       byte >02,>7D,>34,>50,>1F,>00,>04,>56
       byte >02,>76,>34,>50,>B7,>80,>04,>06
door_7a_7e_r:                          ; >6add
       byte >08,>7A,>34,>A0,>6F,>60,>B7,>03
       byte >08,>7E,>34,>08,>6F,>E0,>06,>03
door_7e_29:                            ; >6aed
       byte >02,>7E,>34,>50,>1F,>00,>04,>56
       byte >02,>29,>34,>50,>B7,>80,>04,>06
door_21_88:                            ; >6afd
       byte >02,>21,>34,>50,>1F,>00,>04,>56
       byte >02,>88,>34,>50,>B7,>80,>04,>06
door_7f_80_g:                          ; >6b0d
       byte >09,>7F,>34,>A0,>6F,>60,>B7,>03
       byte >09,>80,>34,>08,>6F,>E0,>06,>03
door_80_82:                            ; >6b1d
       byte >02,>80,>34,>50,>B7,>80,>04,>06
       byte >02,>82,>34,>50,>1F,>00,>04,>56
door_82_81:                            ; >6b2d
       byte >02,>82,>34,>08,>6F,>E0,>06,>03
       byte >02,>81,>34,>A0,>6F,>60,>B7,>03
door_81_7f:                            ; >6b3d
       byte >02,>81,>34,>50,>1F,>00,>04,>56
       byte >02,>7F,>34,>50,>B7,>80,>04,>06
door_82_87_c:                          ; >6b4d
       byte >0A,>82,>34,>A0,>6F,>60,>B7,>03
       byte >0A,>87,>34,>08,>6F,>E0,>06,>03
door_87_88:                            ; >6b5d
       byte >02,>87,>34,>A0,>6F,>60,>B7,>03
       byte >02,>88,>34,>08,>6F,>E0,>06,>03
door_87_8b:                            ; >6b6d
       byte >02,>87,>34,>50,>B7,>80,>04,>06
       byte >02,>8B,>34,>50,>1F,>00,>04,>56
door_8b_8c:                            ; >6b7d
       byte >02,>8B,>34,>50,>B7,>80,>04,>06
       byte >02,>8C,>34,>50,>1F,>00,>04,>56
door_8c_8d_g:                          ; >6b8d
       byte >09,>8C,>34,>50,>B7,>80,>04,>06
       byte >09,>8D,>34,>50,>1F,>00,>04,>56
door_83_84_r:                          ; >6b9d
       byte >08,>83,>34,>A0,>6F,>60,>B7,>03
       byte >08,>84,>34,>08,>6F,>E0,>06,>03
door_84_86:                            ; >6bad
       byte >02,>84,>34,>50,>B7,>80,>04,>06
       byte >02,>86,>34,>50,>1F,>00,>04,>56
door_86_85:                            ; >6bbd
       byte >02,>86,>34,>08,>6F,>E0,>06,>03
       byte >02,>85,>34,>A0,>6F,>60,>B7,>03
door_85_83:                            ; >6bcd
       byte >02,>85,>34,>50,>1F,>00,>04,>56
       byte >02,>83,>34,>50,>B7,>80,>04,>06
door_84_89_y:                          ; >6bdd
       byte >0B,>84,>34,>A0,>6F,>60,>B7,>03
       byte >0B,>89,>34,>08,>6F,>E0,>06,>03
door_89_8d:                            ; >6bed
       byte >02,>89,>34,>50,>1F,>00,>04,>56
       byte >02,>8D,>34,>50,>B7,>80,>04,>06
door_89_8a:                            ; >6bfd
       byte >02,>89,>34,>A0,>6F,>60,>B7,>03
       byte >02,>8A,>34,>08,>6F,>E0,>06,>03
door_8a_23_g:                          ; >6c0d
       byte >09,>8A,>34,>50,>1F,>00,>04,>56
       byte >09,>23,>34,>50,>B7,>80,>04,>06
door_13_73:                            ; >6c1d
       byte >02,>13,>34,>08,>6F,>E0,>06,>03
       byte >02,>73,>34,>A0,>6F,>60,>B7,>03
door_11_6b:                            ; >6c2d
       byte >02,>11,>34,>80,>6F,>60,>B7,>03
       byte >02,>6B,>34,>08,>6F,>E0,>06,>03
door_6b_6c:                            ; >6c3d
       byte >02,>6B,>34,>A0,>6F,>60,>B7,>03
       byte >02,>6C,>34,>08,>6F,>E0,>06,>03
door_6c_03_c:                          ; >6c4d
       byte >0A,>6C,>34,>A0,>6F,>60,>B7,>03
       byte >0A,>03,>34,>08,>6F,>E0,>06,>03
door_0f_6d_g:                          ; >6c5d
       byte >09,>0F,>34,>80,>6F,>60,>B7,>03
       byte >09,>6D,>34,>08,>6F,>E0,>06,>03
door_6d_6e:                            ; >6c6d
       byte >02,>6D,>34,>A0,>6F,>60,>B7,>03
       byte >02,>6E,>34,>08,>6F,>E0,>06,>03
door_6e_05:                            ; >6c7d
       byte >02,>6E,>34,>A0,>6F,>60,>B7,>03
       byte >02,>05,>34,>08,>6F,>E0,>06,>03
door_0d_6f_c:                          ; >6c8d
       byte >0A,>0D,>34,>50,>B7,>80,>04,>06
       byte >0A,>6F,>34,>50,>1F,>00,>04,>56
door_6f_70:                            ; >6c9d
       byte >02,>6F,>34,>50,>B7,>80,>04,>06
       byte >02,>70,>34,>70,>1F,>00,>04,>56
door_70_71_s:                          ; >6cad
       byte >02,>70,>34,>30,>1F,>00,>04,>56
       byte >03,>71,>38,>48,>B6,>80,>16,>08
door_71_72_s:                          ; >6cbd
       byte >02,>71,>34,>50,>28,>00,>04,>56
       byte >03,>72,>38,>48,>B6,>80,>16,>08
door_72_35:                            ; >6ccd
       byte >02,>72,>34,>50,>28,>00,>04,>56
       byte >01,>35,>34,>50,>A7,>80,>04,>06
door_30_74:                            ; >6cdd
       byte >01,>30,>34,>18,>6F,>E0,>06,>03
       byte >01,>74,>34,>90,>6F,>60,>B7,>03
door_56_57:                            ; >6ced
       byte >02,>56,>34,>A0,>6F,>60,>B7,>03
       byte >02,>57,>34,>08,>6F,>E0,>06,>03
door_57_58_g:                          ; >6cfd
       byte >09,>57,>34,>A0,>6F,>60,>B7,>03
       byte >09,>58,>34,>08,>6F,>E0,>06,>03
door_58_59:                            ; >6d0d
       byte >02,>58,>34,>A0,>6F,>60,>B7,>03
       byte >02,>59,>34,>08,>6F,>E0,>06,>03
door_5a_5b:                            ; >6d1d
       byte >02,>5A,>34,>A0,>6F,>60,>B7,>03
       byte >02,>5B,>34,>08,>6F,>E0,>06,>03
door_5b_5c_r:                          ; >6d2d
       byte >08,>5B,>34,>A0,>6F,>60,>B7,>03
       byte >08,>5C,>34,>08,>6F,>E0,>06,>03
door_5c_5d_g:                          ; >6d3d
       byte >09,>5C,>34,>A0,>6F,>60,>B7,>03
       byte >09,>5D,>34,>08,>6F,>E0,>06,>03
door_5e_5f_r:                          ; >6d4d
       byte >08,>5E,>34,>A0,>6F,>60,>B7,>03
       byte >08,>5F,>34,>08,>6F,>E0,>06,>03
door_5f_60_r:                          ; >6d5d
       byte >08,>5F,>34,>A0,>6F,>60,>B7,>03
       byte >08,>60,>34,>08,>6F,>E0,>06,>03
door_60_61:                            ; >6d6d
       byte >02,>60,>34,>A0,>6F,>60,>B7,>03
       byte >02,>61,>34,>08,>6F,>E0,>06,>03
door_62_63:                            ; >6d7d
       byte >02,>62,>34,>A0,>6F,>60,>B7,>03
       byte >02,>63,>34,>08,>6F,>E0,>06,>03
door_63_64:                            ; >6d8d
       byte >02,>63,>34,>A0,>6F,>60,>B7,>03
       byte >02,>64,>34,>08,>6F,>E0,>06,>03
door_64_65_y:                          ; >6d9d
       byte >0B,>64,>34,>A0,>6F,>60,>B7,>03
       byte >0B,>65,>34,>08,>6F,>E0,>06,>03
door_56_5a:                            ; >6dad
       byte >02,>56,>34,>50,>B7,>80,>04,>06
       byte >02,>5A,>34,>50,>1F,>00,>04,>56
door_5a_5e_c:                          ; >6dbd
       byte >0A,>5A,>34,>50,>B7,>80,>04,>06
       byte >0A,>5E,>34,>50,>1F,>00,>04,>56
door_5e_62:                            ; >6dcd
       byte >02,>5E,>34,>50,>B7,>80,>04,>06
       byte >02,>62,>34,>50,>1F,>00,>04,>56
door_57_5b:                            ; >6ddd
       byte >02,>57,>34,>50,>B7,>80,>04,>06
       byte >02,>5B,>34,>50,>1F,>00,>04,>56
door_5b_5f_g:                          ; >6ded
       byte >09,>5B,>34,>30,>B7,>80,>04,>06
       byte >09,>5F,>34,>30,>1F,>00,>04,>56
door_5f_63_c:                          ; >6dfd
       byte >0A,>5F,>34,>50,>B7,>80,>04,>06
       byte >0A,>63,>34,>50,>1F,>00,>04,>56
door_58_5c:                            ; >6e0d
       byte >02,>58,>34,>50,>B7,>80,>04,>06
       byte >02,>5C,>34,>50,>1F,>00,>04,>56
door_5c_60_r:                          ; >6e1d
       byte >08,>5C,>34,>70,>B7,>80,>04,>06
       byte >08,>60,>34,>70,>1F,>00,>04,>56
door_60_64_c:                          ; >6e2d
       byte >0A,>60,>34,>50,>B7,>80,>04,>06
       byte >0A,>64,>34,>50,>1F,>00,>04,>56
door_59_5d_y:                          ; >6e3d
       byte >0B,>59,>34,>50,>B7,>80,>04,>06
       byte >0B,>5D,>34,>50,>1F,>00,>04,>56
door_5d_61:                            ; >6e4d
       byte >02,>5D,>34,>50,>B7,>80,>04,>06
       byte >02,>61,>34,>50,>1F,>00,>04,>56
door_61_65:                            ; >6e5d
       byte >02,>61,>34,>50,>B7,>80,>04,>06
       byte >02,>65,>34,>50,>1F,>00,>04,>56
door_67_56_c:                          ; >6e6d
       byte >0A,>67,>34,>50,>B7,>80,>04,>06
       byte >0A,>56,>34,>50,>1F,>00,>04,>56
door_68_59_r:                          ; >6e7d
       byte >08,>68,>34,>50,>B7,>80,>04,>06
       byte >08,>59,>34,>50,>1F,>00,>04,>56
door_69_56_y:                          ; >6e8d
       byte >0B,>69,>34,>A0,>6F,>60,>B7,>03
       byte >0B,>56,>34,>08,>6F,>E0,>06,>03
door_6a_62_g:                          ; >6e9d
       byte >09,>6A,>34,>A0,>6F,>60,>B7,>03
       byte >09,>62,>34,>08,>6F,>E0,>06,>03
door_66_5b_y:                          ; >6ead
       byte >0B,>66,>34,>30,>1F,>00,>04,>56
       byte >0B,>5B,>34,>70,>B7,>80,>04,>06
door_66_5c_y:                          ; >6ebd
       byte >0B,>66,>34,>70,>1F,>00,>04,>56
       byte >0B,>5C,>34,>30,>B7,>80,>04,>06
door_66_5f_y:                          ; >6ecd
       byte >0B,>66,>34,>30,>B7,>80,>04,>06
       byte >0B,>5F,>34,>70,>1F,>00,>04,>56
door_66_60_y:                          ; >6edd
       byte >0B,>66,>34,>70,>B7,>80,>04,>06
       byte >0B,>60,>34,>30,>1F,>00,>04,>56
door_65_1b:                            ; >6eed
       byte >02,>65,>34,>A0,>6F,>60,>B7,>03
       byte >02,>1B,>34,>08,>6F,>E0,>06,>03
door_40_8f:                            ; >6efd
       byte >01,>40,>34,>50,>A7,>80,>04,>06
       byte >01,>8F,>34,>50,>2F,>00,>04,>56
door_54_90:                            ; >6f0d
       byte >01,>54,>34,>50,>A7,>80,>04,>06
       byte >01,>90,>34,>50,>2F,>00,>04,>56
door_90_91:                            ; >6f1d
       byte >01,>90,>34,>50,>A7,>80,>04,>06
       byte >01,>91,>34,>50,>2F,>00,>04,>56
door_91_92:                            ; >6f2d
       byte >01,>91,>34,>90,>6F,>60,>B7,>03
       byte >01,>92,>34,>18,>6F,>E0,>06,>03
door_92_93:                            ; >6f3d
       byte >01,>92,>34,>90,>6F,>60,>B7,>03
       byte >01,>93,>34,>18,>6F,>E0,>06,>03
door_93_94:                            ; >6f4d
       byte >01,>93,>34,>90,>6F,>60,>B7,>03
       byte >01,>94,>34,>18,>6F,>E0,>06,>03
door_3a_94:                            ; >6f5d
       byte >01,>3A,>34,>50,>2F,>00,>04,>56
       byte >01,>94,>34,>50,>A7,>80,>04,>06
trap_73_74:                            ; >6f6d
       byte >19,>73,>34,>50,>70,>03,>24,>E4
       byte >1B,>74,>34,>48,>74,>03,>00,>00
trap_03_65:                            ; >6f7d
       byte >19,>03,>34,>30,>70,>03,>24,>E4
       byte >1B,>65,>34,>38,>74,>03,>00,>00
trap_61_4b:                            ; >6f8d
       byte >19,>61,>34,>50,>70,>03,>24,>E4
       byte >1B,>4B,>34,>48,>74,>03,>00,>00
trap_2d_8d:                            ; >6f9d
       byte >19,>2D,>34,>50,>90,>03,>24,>E4
       byte >1B,>8D,>34,>48,>94,>03,>00,>00
trap_76_84:                            ; >6fad
       byte >19,>76,>34,>50,>70,>03,>24,>E4
       byte >1B,>84,>34,>48,>74,>03,>00,>00
trap_8b_6c:                            ; >6fbd
       byte >19,>8B,>34,>50,>70,>03,>24,>E4
       byte >1B,>6C,>34,>48,>74,>03,>00,>00
trap_8d_6e:                            ; >6fcd
       byte >19,>8D,>34,>50,>50,>03,>24,>E4
       byte >1B,>6E,>34,>48,>54,>03,>00,>00
trap_21_03:                            ; >6fdd
       byte >19,>21,>34,>70,>70,>03,>24,>E4
       byte >1B,>03,>34,>68,>74,>03,>00,>00
trap_15_66:                            ; >6fed
       byte >19,>15,>34,>50,>80,>03,>24,>E4
       byte >1B,>66,>34,>48,>74,>03,>00,>00
trap_78_8a:                            ; >6ffd
       byte >19,>78,>34,>70,>70,>03,>24,>E4
       byte >1B,>8A,>34,>68,>74,>03,>00,>00
trap_29_09:                            ; >700d
       byte >19,>29,>34,>50,>80,>03,>24,>E4
       byte >1B,>09,>34,>48,>74,>03,>00,>00
picture_0b_0c:                         ; >701d
       byte >11,>0B,>00,>50,>97,>81,>00,>00
       byte >11,>0C,>00,>50,>97,>81,>00,>00
barrels_91_3d:                         ; >702d
       byte >27,>91,>00,>50,>8F,>00,>00,>00
       byte >27,>3D,>00,>5F,>5F,>00,>00,>00
knight_1f_21:                          ; >703d
       byte >1E,>1F,>00,>98,>67,>60,>00,>00
       byte >1E,>21,>00,>08,>67,>E0,>00,>00
knight_25_23:                          ; >704d
       byte >1E,>25,>00,>98,>67,>60,>00,>00
       byte >1E,>23,>00,>08,>67,>E0,>00,>00
knight_00_06:                          ; >705d
       byte >1E,>00,>00,>98,>3F,>60,>00,>00
       byte >1E,>06,>00,>38,>47,>00,>00,>00
knight_00_06_2:                        ; >706d
       byte >1E,>00,>00,>98,>8F,>60,>00,>00
       byte >1E,>06,>00,>78,>47,>00,>00,>00
knight_01_03:                          ; >707d
       byte >1E,>01,>00,>58,>27,>00,>00,>00
       byte >1E,>03,>00,>58,>27,>00,>00,>00
knight_05_07:                          ; >708d
       byte >1E,>05,>00,>58,>B7,>80,>00,>00
       byte >1E,>07,>00,>58,>B7,>80,>00,>00
knight_17_15:                          ; >709d
       byte >1E,>17,>00,>58,>27,>00,>00,>00
       byte >1E,>15,>00,>78,>97,>80,>00,>00
knight_15_13:                          ; >70ad
       byte >1E,>15,>00,>38,>97,>80,>00,>00
       byte >1E,>13,>00,>58,>27,>00,>00,>00
knight_88_8a:                          ; >70bd
       byte >1E,>88,>00,>08,>3F,>E0,>00,>00
       byte >1E,>8A,>00,>08,>47,>E0,>00,>00
knight_88_8a_2:                        ; >70cd
       byte >1E,>88,>00,>08,>8F,>E0,>00,>00
       byte >1E,>8A,>00,>08,>87,>E0,>00,>00
knight_27_2b:                          ; >70dd
       byte >1E,>27,>00,>38,>27,>00,>00,>00
       byte >1E,>2B,>00,>38,>27,>00,>00,>00
knight_27_2b_2:                        ; >70ed
       byte >1E,>27,>00,>78,>27,>00,>00,>00
       byte >1E,>2B,>00,>78,>27,>00,>00,>00
knight_56_24:                          ; >70fd
       byte >1E,>56,>00,>38,>27,>00,>00,>00
       byte >1E,>24,>00,>38,>47,>00,>00,>00
knight_56_24_2:                        ; >710d
       byte >1E,>56,>00,>78,>27,>00,>00,>00
       byte >1E,>24,>00,>78,>47,>00,>00,>00
knight_7c_7a:                          ; >711d
       byte >1E,>7C,>00,>38,>27,>00,>00,>00
       byte >1E,>7A,>00,>38,>27,>00,>00,>00
knight_7c_7a_2:                        ; >712d
       byte >1E,>7C,>00,>78,>27,>00,>00,>00
       byte >1E,>7A,>00,>78,>27,>00,>00,>00
knight_09_7f:                          ; >713d
       byte >1E,>09,>00,>08,>3F,>E0,>00,>00
       byte >1E,>7F,>00,>38,>B7,>80,>00,>00
knight_09_7f_2:                        ; >714d
       byte >1E,>09,>00,>08,>8F,>E0,>00,>00
       byte >1E,>7F,>00,>78,>B7,>80,>00,>00
table_0d_13:                           ; >715d
       byte >12,>0D,>00,>38,>50,>04,>CC,>49
       byte >12,>13,>00,>70,>90,>04,>CC,>49
table_63_5d:                           ; >716d
       byte >12,>63,>00,>38,>50,>04,>CC,>49
       byte >12,>5D,>00,>70,>50,>04,>CC,>49
table_18_88:                           ; >717d
       byte >12,>18,>00,>48,>50,>04,>CC,>49
       byte >12,>88,>00,>70,>50,>04,>CC,>49
table_7a_81:                           ; >718d
       byte >12,>7A,>00,>38,>50,>04,>CC,>49
       byte >12,>81,>00,>70,>50,>04,>CC,>49
table_18_6d:                           ; >719d
       byte >12,>18,>00,>58,>80,>04,>CC,>49
       byte >12,>6D,>00,>30,>90,>04,>CC,>49
table_5b_5c:                           ; >71ad
       byte >12,>5B,>00,>38,>50,>04,>CC,>49
       byte >12,>5C,>00,>70,>50,>04,>CC,>49
table_6a_1b:                           ; >71bd
       byte >12,>6A,>00,>78,>98,>04,>CC,>49
       byte >12,>1B,>00,>70,>50,>04,>CC,>49
table_2e_7d:                           ; >71cd
       byte >12,>2E,>00,>38,>57,>04,>CC,>49
       byte >12,>7D,>00,>48,>50,>04,>CC,>49
table_2e_7d_2:                         ; >71dd
       byte >12,>2E,>00,>60,>7F,>04,>CC,>49
       byte >12,>7D,>00,>58,>80,>04,>CC,>49
table_2a_2d:                           ; >71ed
       byte >12,>2A,>00,>38,>57,>04,>CC,>49
       byte >12,>2D,>00,>30,>80,>04,>CC,>49
table_2a_2d_2:                         ; >71fd
       byte >12,>2A,>00,>60,>7F,>04,>CC,>49
       byte >12,>2D,>00,>70,>80,>04,>CC,>49
shields_8d_8c:                         ; >720d
       byte >1C,>8D,>00,>28,>67,>E0,>00,>00
       byte >1D,>8C,>00,>28,>67,>E0,>00,>00
trophies_8b_8c:                        ; >721d
       byte >15,>8B,>00,>88,>6F,>40,>00,>00
       byte >16,>8C,>00,>88,>67,>40,>00,>00
shields_16_14:                         ; >722d
       byte >1C,>16,>00,>58,>37,>00,>00,>00
       byte >1D,>14,>00,>58,>97,>80,>00,>00
trophies_0e_12:                        ; >723d
       byte >15,>0E,>00,>28,>57,>E0,>00,>00
       byte >16,>12,>00,>88,>6F,>40,>00,>00
shields_0f_11:                         ; >724d
       byte >1C,>0F,>00,>28,>67,>E0,>00,>00
       byte >1D,>11,>00,>28,>67,>E0,>00,>00
trophies_10_73:                        ; >725d
       byte >15,>10,>00,>88,>6F,>40,>00,>00
       byte >16,>73,>00,>58,>97,>80,>00,>00
shields_08_18:                         ; >726d
       byte >1C,>08,>00,>88,>67,>40,>00,>00
       byte >1D,>18,>00,>88,>67,>40,>00,>00
trophies_6f_0e:                        ; >727d
       byte >15,>6F,>00,>28,>67,>E0,>00,>00
       byte >16,>0E,>00,>28,>77,>E0,>00,>00
pic_shi_00_19:                         ; >728d
       byte >25,>00,>00,>28,>17,>00,>00,>00
       byte >1D,>19,>00,>58,>37,>00,>00,>00
pic_tro_00_0b:                         ; >729d
       byte >11,>00,>00,>78,>1C,>00,>00,>00
       byte >16,>0B,>00,>58,>37,>00,>00,>00
shields_00_19:                         ; >72ad
       byte >1C,>00,>00,>38,>B7,>80,>00,>00
       byte >1D,>19,>00,>58,>97,>80,>00,>00
trophies_00_0b:                        ; >72bd
       byte >15,>00,>00,>78,>B7,>80,>00,>00
       byte >16,>0B,>00,>58,>97,>81,>00,>00
pic_tro_04_15:                         ; >72cd
       byte >11,>04,>00,>28,>47,>E1,>00,>00
       byte >15,>15,>00,>58,>37,>00,>00,>00
tro_pic_04_14:                         ; >72dd
       byte >16,>04,>00,>28,>87,>E0,>00,>00
       byte >25,>14,>00,>58,>37,>00,>00,>00
pic_tro_73_6e:                         ; >72ed
       byte >11,>73,>00,>58,>3C,>00,>00,>00
       byte >16,>6E,>00,>58,>B7,>80,>00,>00
shi_pic_6d_0e:                         ; >72fd
       byte >1C,>6D,>00,>58,>B7,>80,>00,>00
       byte >25,>0E,>00,>88,>6F,>40,>00,>00
pic_shi_07_06:                         ; >730d
       byte >25,>07,>00,>A8,>6F,>40,>00,>00
       byte >1C,>06,>00,>38,>97,>80,>00,>00
shields_06_01:                         ; >731d
       byte >1C,>06,>00,>78,>97,>80,>00,>00
       byte >1D,>01,>00,>A8,>67,>40,>00,>00
pic_shi_18_17:                         ; >732d
       byte >11,>18,>00,>28,>6F,>E1,>00,>00
       byte >1D,>17,>00,>A8,>67,>40,>00,>00
trophies_87_89:                        ; >733d
       byte >15,>87,>00,>38,>17,>00,>00,>00
       byte >16,>89,>00,>38,>B7,>80,>00,>00
trophies_87_89_2:                      ; >734d
       byte >16,>87,>00,>78,>17,>00,>00,>00
       byte >15,>89,>00,>78,>B7,>80,>00,>00
shi_pic_00_82:                         ; >735d
       byte >1D,>00,>00,>08,>47,>E0,>00,>00
       byte >16,>82,>00,>38,>B7,>80,>00,>00
trophies_00_82:                        ; >736d
       byte >16,>00,>00,>08,>87,>E0,>00,>00
       byte >15,>82,>00,>78,>B7,>80,>00,>00
pic_shi_66_61:                         ; >737d
       byte >11,>66,>00,>A0,>47,>61,>00,>00
       byte >1D,>61,>00,>A8,>6F,>60,>00,>00
tro_pic_66_5d:                         ; >738d
       byte >15,>66,>00,>A8,>87,>60,>00,>00
       byte >25,>5D,>00,>A8,>6F,>60,>00,>00
tro_shi_66_65:                         ; >739d
       byte >16,>66,>00,>08,>47,>E0,>00,>00
       byte >1D,>65,>00,>58,>B7,>80,>00,>00
shi_tro_66_64:                         ; >73ad
       byte >1C,>66,>00,>08,>87,>E0,>00,>00
       byte >16,>64,>00,>58,>B7,>80,>00,>00
pic_tro_63_62:                         ; >73bd
       byte >11,>63,>00,>58,>B7,>81,>00,>00
       byte >15,>62,>00,>50,>B7,>80,>00,>00
trophies_70_0d:                        ; >73cd
       byte >16,>70,>00,>38,>B7,>80,>00,>00
       byte >15,>0D,>00,>08,>6F,>E0,>00,>00
shi_tro_70_0c:                         ; >73dd
       byte >1D,>70,>00,>78,>B7,>80,>00,>00
       byte >16,>0C,>00,>58,>37,>00,>00,>00
trophies_09_7f:                        ; >73ed
       byte >16,>09,>00,>A8,>47,>40,>00,>00
       byte >15,>7F,>00,>08,>60,>E0,>00,>00
pic_shi_09_7f:                         ; >73fd
       byte >11,>09,>00,>A0,>87,>41,>00,>00
       byte >1D,>7F,>00,>58,>17,>00,>00,>00
tro_pic_5a_27:                         ; >740d
       byte >15,>5A,>00,>08,>47,>E0,>00,>00
       byte >25,>27,>00,>A8,>47,>60,>00,>00
tro_shi_5a_27:                         ; >741d
       byte >16,>5A,>00,>08,>87,>E0,>00,>00
       byte >1D,>27,>00,>A8,>87,>60,>00,>00
shi_tro_29_7e:                         ; >742d
       byte >1C,>29,>00,>A8,>47,>60,>00,>00
       byte >16,>7E,>00,>A8,>60,>60,>00,>00
pic_tro_29_7e:                         ; >743d
       byte >11,>29,>00,>A0,>87,>61,>00,>00
       byte >15,>7E,>00,>58,>B7,>80,>00,>00
clock_0d_13:                           ; >744d
       byte >10,>0D,>34,>30,>27,>01,>04,>56
       byte >10,>13,>34,>30,>B7,>81,>04,>06
clock_09_17:                           ; >745d
       byte >10,>09,>34,>30,>27,>01,>04,>56
       byte >10,>17,>34,>30,>B7,>81,>04,>06
clock_17_35:                           ; >746d
       byte >10,>35,>34,>88,>6F,>61,>B7,>03
       byte >10,>8F,>34,>18,>6F,>E1,>06,>03
clock_67_68:                           ; >747d
       byte >10,>67,>34,>98,>6F,>61,>B7,>03
       byte >10,>68,>34,>08,>6F,>E1,>06,>03
clock_8d_22:                           ; >748d
       byte >10,>8D,>34,>78,>4F,>61,>B7,>03
       byte >10,>22,>34,>28,>6F,>E1,>06,>03
clock_75_0a:                           ; >749d
       byte >10,>76,>34,>30,>27,>01,>04,>56
       byte >10,>75,>34,>30,>B7,>81,>04,>06
bookcase_0a_16:                        ; >74ad
       byte >17,>0A,>34,>40,>47,>00,>04,>56
       byte >17,>16,>34,>40,>97,>80,>04,>06
bookcase_3d_49:                        ; >74bd
       byte >17,>3D,>34,>48,>37,>00,>04,>56
       byte >17,>49,>34,>50,>AF,>80,>04,>06
bookcase_69_6a:                        ; >74cd
       byte >17,>69,>34,>40,>B7,>80,>04,>06
       byte >17,>6A,>34,>40,>27,>00,>04,>56
bookcase_6c_6e:                        ; >74dd
       byte >17,>6C,>34,>40,>B7,>80,>04,>06
       byte >17,>6E,>34,>40,>27,>00,>04,>56
bookcase_3e_41:                        ; >74ed
       byte >17,>3E,>34,>88,>77,>60,>B7,>03
       byte >17,>41,>34,>48,>A7,>80,>04,>06
barrel_45_53:                          ; >74fd
       byte >1A,>45,>34,>50,>37,>00,>04,>56
       byte >1A,>53,>34,>50,>A4,>A0,>04,>06
barrel_4c_4e:                          ; >750d
       byte >1A,>4C,>34,>88,>6F,>40,>B7,>03
       byte >1A,>4E,>34,>18,>6F,>E0,>06,>03
barrel_4e_38:                          ; >751d
       byte >1A,>38,>34,>50,>37,>00,>04,>56
       byte >1A,>4B,>34,>50,>A7,>A0,>04,>06
barrel_6b_6d:                          ; >752d
       byte >1A,>6B,>34,>50,>B7,>A0,>04,>06
       byte >1A,>6D,>34,>50,>27,>00,>04,>56
barrel_8a_08:                          ; >753d
       byte >1A,>8A,>34,>98,>6F,>60,>B7,>03
       byte >1A,>08,>34,>28,>6F,>E1,>06,>03
acgexit_00_8e:                         ; >754d
       byte >24,>00,>C4,>98,>7F,>40,>BA,>D6
       byte >24,>8E,>C4,>00,>7F,>E0,>08,>D6
skeleton_53_8f:                        ; >755d
       byte >26,>53,>00,>80,>77,>61,>00,>00
       byte >26,>8F,>00,>80,>77,>61,>00,>00
skeleton_33_55:                        ; >756d
       byte >26,>33,>00,>18,>6F,>E1,>00,>00
       byte >26,>55,>00,>50,>A7,>81,>00,>00

* Data block at 757d
room_table:                            ; >757d
       data room_00,room_01,room_02,room_03,room_04,room_05,room_06,room_07 ; &00
       data room_08,room_09,room_0a,room_0b,room_0c,room_0d,room_0e,room_0f ; &08
       data room_10,room_11,room_12,room_13,room_14,room_15,room_16,room_17 ; &10
       data room_18,room_19,room_1a,room_1b,room_1c,room_1d,room_1e,room_1f ; &18
       data room_20,room_21,room_22,room_23,room_24,room_25,room_26,room_27 ; &20
       data room_28,room_29,room_2a,room_2b,room_2c,room_2d,room_2e,room_2f ; &28
       data room_30,room_31,room_32,room_33,room_34,room_35,room_36,room_37 ; &30
       data room_38,room_39,room_3a,room_3b,room_3c,room_3d,room_3e,room_3f ; &38
       data room_40,room_41,room_42,room_43,room_44,room_45,room_46,room_47 ; &40
       data room_48,room_49,room_4a,room_4b,room_4c,room_4d,room_4e,room_4f ; &48
       data room_50,room_51,room_52,room_53,room_54,room_55,room_56,room_57 ; &50
       data room_58,room_59,room_5a,room_5b,room_5c,room_5d,room_5e,room_5f ; &58
       data room_60,room_61,room_62,room_63,room_64,room_65,room_66,room_67 ; &60
       data room_68,room_69,room_6a,room_6b,room_6c,room_6d,room_6e,room_6f ; &68
       data room_70,room_71,room_72,room_73,room_74,room_75,room_76,room_77 ; &70
       data room_78,room_79,room_7a,room_7b,room_7c,room_7d,room_7e,room_7f ; &78
       data room_80,room_81,room_82,room_83,room_84,room_85,room_86,room_87 ; &80
       data room_88,room_89,room_8a,room_8b,room_8c,room_8d,room_8e,room_8f ; &88
       data room_90,room_91,room_92,room_93,room_94,room_none        ; &90

* Data block at 76a9
room_00:                               ; >76a9
       data door_07_00
       data door_19_00
       data door_01_00_c
       data acgexit_00_8e
       data knight_00_06
       data knight_00_06_2
       data pic_shi_00_19
       data pic_tro_00_0b
       data shields_00_19
       data trophies_00_0b
       data shi_pic_00_82
       data trophies_00_82
       data >0000
room_01:                               ; >76c3
       data door_01_00_c
       data door_02_01
       data knight_01_03
       data shields_06_01
       data >0000
room_02:                               ; >76cd
       data door_02_01
       data door_03_02
       data door_18_02
       data door_03_26
       data >0000
room_03:                               ; >76d7
       data door_03_02
       data door_04_03
       data door_6c_03_c
       data trap_03_65
       data trap_21_03
       data knight_01_03
       data >0000
room_04:                               ; >76e5
       data door_04_03
       data door_19_04
       data door_05_04
       data pic_tro_04_15
       data tro_pic_04_14
       data >0000
room_05:                               ; >76f1
       data door_05_04
       data door_06_05
       data door_6e_05
       data knight_05_07
       data >0000
room_06:                               ; >76fb
       data door_06_05
       data door_1a_06_s
       data door_08_06_g
       data door_07_06
       data knight_00_06
       data knight_00_06_2
       data pic_shi_07_06
       data shields_06_01
       data >0000
room_07:                               ; >770d
       data door_07_00
       data door_07_06
       data knight_05_07
       data pic_shi_07_06
       data >0000
room_08:                               ; >7717
       data door_08_06_g
       data door_09_08
       data shields_08_18
       data barrel_8a_08
       data >0000
room_09:                               ; >7721
       data door_09_08
       data door_0a_09
       data trap_29_09
       data clock_09_17
       data knight_09_7f
       data knight_09_7f_2
       data trophies_09_7f
       data pic_shi_09_7f
       data >0000
room_0a:                               ; >7733
       data door_0a_09
       data door_0b_0a
       data bookcase_0a_16
       data trophies_00_0b
       data >0000
room_0b:                               ; >773d
       data door_0b_0a
       data door_0c_0b
       data picture_0b_0c
       data pic_tro_00_0b
       data >0000
room_0c:                               ; >7747
       data door_0c_0b
       data door_0d_0c
       data picture_0b_0c
       data shi_tro_70_0c
       data >0000
room_0d:                               ; >7751
       data door_0d_0c
       data door_0e_0d
       data door_0d_6f_c
       data clock_0d_13
       data table_0d_13
       data trophies_70_0d
       data >0000
room_0e:                               ; >775f
       data door_0e_0d
       data door_0f_0e
       data trophies_0e_12
       data trophies_6f_0e
       data shi_pic_6d_0e
       data >0000
room_0f:                               ; >776b
       data door_0f_0e
       data door_10_0f
       data door_0f_6d_g
       data shields_0f_11
       data >0000
room_10:                               ; >7775
       data door_10_0f
       data door_11_10_r
       data trophies_10_73
       data >0000
room_11:                               ; >777d
       data door_11_10_r
       data door_12_11
       data door_11_6b
       data shields_0f_11
       data >0000
room_12:                               ; >7787
       data door_12_11
       data door_13_12
       data trophies_0e_12
       data >0000
room_13:                               ; >778f
       data door_13_12
       data door_14_13
       data door_13_73
       data table_0d_13
       data clock_0d_13
       data knight_15_13
       data >0000
room_14:                               ; >779d
       data door_14_13
       data door_15_14
       data shields_16_14
       data tro_pic_04_14
       data >0000
room_15:                               ; >77a7
       data door_15_14
       data door_16_15
       data trap_15_66
       data pic_tro_04_15
       data knight_17_15
       data knight_15_13
       data >0000
room_16:                               ; >77b5
       data door_16_15
       data door_17_16_r
       data shields_16_14
       data bookcase_0a_16
       data >0000
room_17:                               ; >77bf
       data door_17_16_r
       data door_18_17_g
       data clock_09_17
       data pic_shi_18_17
       data knight_17_15
       data >0000
room_18:                               ; >77cb
       data door_18_17_g
       data door_18_02
       data shields_08_18
       data table_18_88
       data table_18_6d
       data pic_shi_18_17
       data >0000
room_19:                               ; >77d9
       data door_19_00
       data door_19_04
       data pic_shi_00_19
       data shields_00_19
       data >0000
room_1a:                               ; >77e3
       data door_1a_06_s
       data door_1a_1b
       data >0000
room_1b:                               ; >77e9
       data door_1a_1b
       data door_1b_1c_s
       data door_65_1b
       data table_6a_1b
       data >0000
room_1c:                               ; >77f3
       data door_1b_1c_s
       data door_1c_1d
       data >0000
room_1d:                               ; >77f9
       data door_1c_1d
       data door_1d_43
       data >0000
room_1e:                               ; >77ff
       data door_1e_1f
       data door_25_1e_c
       data >0000
room_1f:                               ; >7805
       data door_1e_1f
       data door_1f_20
       data knight_1f_21
       data >0000
room_20:                               ; >780d
       data door_1f_20
       data door_20_21
       data door_20_2f_y
       data >0000
room_21:                               ; >7815
       data door_20_21
       data door_21_22
       data door_21_88
       data trap_21_03
       data knight_1f_21
       data >0000
room_22:                               ; >7821
       data door_21_22
       data door_22_23
       data clock_8d_22
       data >0000
room_23:                               ; >7829
       data door_22_23
       data door_23_24
       data door_8a_23_g
       data knight_25_23
       data >0000
room_24:                               ; >7833
       data door_23_24
       data door_24_25
       data door_24_26_s
       data knight_56_24
       data knight_56_24_2
       data >0000
room_25:                               ; >783f
       data door_24_25
       data door_25_1e_c
       data knight_25_23
       data >0000
room_26:                               ; >7847
       data door_24_26_s
       data door_03_26
       data >0000
room_27:                               ; >784d
       data door_27_28
       data door_2e_27
       data door_27_2f_s
       data knight_27_2b
       data knight_27_2b_2
       data tro_pic_5a_27
       data tro_shi_5a_27
       data >0000
room_28:                               ; >785d
       data door_27_28
       data door_28_29_c
       data >0000
room_29:                               ; >7863
       data door_28_29_c
       data door_29_2a
       data door_7e_29
       data trap_29_09
       data shi_tro_29_7e
       data pic_tro_29_7e
       data >0000
room_2a:                               ; >7871
       data door_29_2a
       data door_2a_2b
       data table_2a_2d
       data table_2a_2d_2
       data >0000
room_2b:                               ; >787b
       data door_2a_2b
       data door_2b_2c
       data knight_27_2b
       data knight_27_2b_2
       data >0000
room_2c:                               ; >7885
       data door_2b_2c
       data door_2c_2d
       data >0000
room_2d:                               ; >788b
       data door_2c_2d
       data door_2d_2e_g
       data door_2d_75
       data trap_2d_8d
       data table_2a_2d
       data table_2a_2d_2
       data >0000
room_2e:                               ; >7899
       data door_2d_2e_g
       data door_2e_27
       data table_2e_7d
       data table_2e_7d_2
       data >0000
room_2f:                               ; >78a3
       data door_27_2f_s
       data door_20_2f_y
       data >0000
room_30:                               ; >78a9
       data door_30_31
       data door_54_30
       data door_30_74
       data >0000
room_31:                               ; >78b1
       data door_30_31
       data door_31_32
       data >0000
room_32:                               ; >78b7
       data door_31_32
       data door_32_33
       data >0000
room_33:                               ; >78bd
       data door_32_33
       data door_33_34
       data door_33_36
       data skeleton_33_55
       data >0000
room_34:                               ; >78c7
       data door_33_34
       data door_34_35
       data >0000
room_35:                               ; >78cd
       data door_34_35
       data door_72_35
       data clock_17_35
       data >0000
room_36:                               ; >78d5
       data door_33_36
       data door_36_37
       data >0000
room_37:                               ; >78db
       data door_36_37
       data door_37_38
       data >0000
room_38:                               ; >78e1
       data door_37_38
       data door_38_39
       data door_38_3a_g
       data barrel_4e_38
       data >0000
room_39:                               ; >78eb
       data door_38_39
       data door_39_3b
       data >0000
room_3a:                               ; >78f1
       data door_38_3a_g
       data door_3a_3b
       data door_3a_94
       data >0000
room_3b:                               ; >78f9
       data door_39_3b
       data door_3a_3b
       data door_3b_3c_g
       data door_3b_3d
       data >0000
room_3c:                               ; >7903
       data door_3b_3c_g
       data door_3c_3e
       data >0000
room_3d:                               ; >7909
       data door_3b_3d
       data door_3d_3e
       data door_3d_3f_c
       data bookcase_3d_49
       data barrels_91_3d
       data >0000
room_3e:                               ; >7915
       data door_3c_3e
       data door_3d_3e
       data bookcase_3e_41
       data >0000
room_3f:                               ; >791d
       data door_3d_3f_c
       data door_34_40
       data >0000
room_40:                               ; >7923
       data door_34_40
       data door_40_41
       data door_40_42
       data door_40_8f
       data >0000
room_41:                               ; >792d
       data door_40_41
       data bookcase_3e_41
       data >0000
room_42:                               ; >7933
       data door_40_42
       data door_42_43
       data >0000
room_43:                               ; >7939
       data door_42_43
       data door_43_44
       data door_43_46
       data door_1d_43
       data >0000
room_44:                               ; >7943
       data door_43_44
       data door_44_45_r
       data >0000
room_45:                               ; >7949
       data door_44_45_r
       data barrel_45_53
       data >0000
room_46:                               ; >794f
       data door_43_46
       data door_46_47
       data door_46_51
       data >0000
room_47:                               ; >7957
       data door_46_47
       data door_47_48_r
       data >0000
room_48:                               ; >795d
       data door_47_48_r
       data door_48_49
       data door_48_4a_c
       data door_48_4d
       data >0000
room_49:                               ; >7967
       data door_48_49
       data bookcase_3d_49
       data >0000
room_4a:                               ; >796d
       data door_48_4a_c
       data door_4a_4b
       data >0000
room_4b:                               ; >7973
       data door_4a_4b
       data door_4b_4c
       data trap_61_4b
       data barrel_4e_38
       data >0000
room_4c:                               ; >797d
       data door_4b_4c
       data door_4c_55
       data barrel_4c_4e
       data >0000
room_4d:                               ; >7985
       data door_48_4d
       data door_4d_4e_r
       data >0000
room_4e:                               ; >798b
       data door_4d_4e_r
       data door_4e_4f
       data barrel_4c_4e
       data >0000
room_4f:                               ; >7993
       data door_4e_4f
       data door_4f_50
       data >0000
room_50:                               ; >7999
       data door_4f_50
       data door_50_51
       data door_50_52_g
       data >0000
room_51:                               ; >79a1
       data door_50_51
       data door_46_51
       data >0000
room_52:                               ; >79a7
       data door_50_52_g
       data door_52_53
       data >0000
room_53:                               ; >79ad
       data door_52_53
       data barrel_45_53
       data skeleton_53_8f
       data >0000
room_54:                               ; >79b5
       data door_54_55
       data door_54_30
       data door_54_90
       data >0000
room_55:                               ; >79bd
       data door_4c_55
       data door_54_55
       data skeleton_33_55
       data >0000
room_56:                               ; >79c5
       data door_56_57
       data door_56_5a
       data door_67_56_c
       data door_69_56_y
       data knight_56_24
       data knight_56_24_2
       data >0000
room_57:                               ; >79d3
       data door_56_57
       data door_57_58_g
       data door_57_5b
       data >0000
room_58:                               ; >79db
       data door_57_58_g
       data door_58_59
       data door_58_5c
       data >0000
room_59:                               ; >79e3
       data door_58_59
       data door_59_5d_y
       data door_68_59_r
       data >0000
room_5a:                               ; >79eb
       data door_5a_5b
       data door_56_5a
       data door_5a_5e_c
       data tro_pic_5a_27
       data tro_shi_5a_27
       data >0000
room_5b:                               ; >79f7
       data door_5a_5b
       data door_5b_5c_r
       data door_57_5b
       data door_5b_5f_g
       data door_66_5b_y
       data table_5b_5c
       data >0000
room_5c:                               ; >7a05
       data door_5b_5c_r
       data door_5c_5d_g
       data door_58_5c
       data door_5c_60_r
       data door_66_5c_y
       data table_5b_5c
       data >0000
room_5d:                               ; >7a13
       data door_5c_5d_g
       data door_59_5d_y
       data door_5d_61
       data table_63_5d
       data tro_pic_66_5d
       data >0000
room_5e:                               ; >7a1f
       data door_5e_5f_r
       data door_5a_5e_c
       data door_5e_62
       data >0000
room_5f:                               ; >7a27
       data door_5e_5f_r
       data door_5f_60_r
       data door_5b_5f_g
       data door_5f_63_c
       data door_66_5f_y
       data >0000
room_60:                               ; >7a33
       data door_5f_60_r
       data door_60_61
       data door_5c_60_r
       data door_60_64_c
       data door_66_60_y
       data >0000
room_61:                               ; >7a3f
       data door_60_61
       data door_5d_61
       data door_61_65
       data trap_61_4b
       data pic_shi_66_61
       data >0000
room_62:                               ; >7a4b
       data door_62_63
       data door_5e_62
       data door_6a_62_g
       data pic_tro_63_62
       data >0000
room_63:                               ; >7a55
       data door_62_63
       data door_63_64
       data door_5f_63_c
       data table_63_5d
       data pic_tro_63_62
       data >0000
room_64:                               ; >7a61
       data door_63_64
       data door_64_65_y
       data door_60_64_c
       data shi_tro_66_64
       data >0000
room_65:                               ; >7a6b
       data door_64_65_y
       data door_61_65
       data door_65_1b
       data trap_03_65
       data tro_shi_66_65
       data >0000
room_66:                               ; >7a77
       data door_66_5b_y
       data door_66_5c_y
       data door_66_5f_y
       data door_66_60_y
       data trap_15_66
       data pic_shi_66_61
       data tro_pic_66_5d
       data tro_shi_66_65
       data shi_tro_66_64
       data >0000
room_67:                               ; >7a8b
       data door_67_56_c
       data clock_67_68
       data >0000
room_68:                               ; >7a91
       data door_68_59_r
       data clock_67_68
       data >0000
room_69:                               ; >7a97
       data door_69_56_y
       data bookcase_69_6a
       data >0000
room_6a:                               ; >7a9d
       data door_6a_62_g
       data bookcase_69_6a
       data table_6a_1b
       data >0000
room_6b:                               ; >7aa5
       data door_11_6b
       data door_6b_6c
       data barrel_6b_6d
       data >0000
room_6c:                               ; >7aad
       data door_6b_6c
       data door_6c_03_c
       data trap_8b_6c
       data bookcase_6c_6e
       data >0000
room_6d:                               ; >7ab7
       data door_0f_6d_g
       data door_6d_6e
       data barrel_6b_6d
       data shi_pic_6d_0e
       data table_18_6d
       data >0000
room_6e:                               ; >7ac3
       data door_6d_6e
       data door_6e_05
       data trap_8d_6e
       data bookcase_6c_6e
       data pic_tro_73_6e
       data >0000
room_6f:                               ; >7acf
       data door_0d_6f_c
       data door_6f_70
       data trophies_6f_0e
       data >0000
room_70:                               ; >7ad7
       data door_6f_70
       data door_70_71_s
       data trophies_70_0d
       data shi_tro_70_0c
       data >0000
room_71:                               ; >7ae1
       data door_70_71_s
       data door_71_72_s
       data >0000
room_72:                               ; >7ae7
       data door_71_72_s
       data door_72_35
       data >0000
room_73:                               ; >7aed
       data door_13_73
       data trap_73_74
       data trophies_10_73
       data pic_tro_73_6e
       data >0000
room_74:                               ; >7af7
       data door_30_74
       data trap_73_74
       data >0000
room_75:                               ; >7afd
       data door_2d_75
       data door_75_76
       data clock_75_0a
       data >0000
room_76:                               ; >7b05
       data door_75_76
       data door_76_77
       data door_7d_76
       data trap_76_84
       data clock_75_0a
       data >0000
room_77:                               ; >7b11
       data door_76_77
       data door_77_78
       data >0000
room_78:                               ; >7b17
       data door_77_78
       data door_78_79
       data trap_78_8a
       data >0000
room_79:                               ; >7b1f
       data door_78_79
       data door_79_7a
       data >0000
room_7a:                               ; >7b25
       data door_79_7a
       data door_7a_7b
       data door_7a_7e_r
       data table_7a_81
       data knight_7c_7a
       data knight_7c_7a_2
       data >0000
room_7b:                               ; >7b33
       data door_7a_7b
       data door_7b_7c_y
       data >0000
room_7c:                               ; >7b39
       data door_7b_7c_y
       data door_7c_7d_y
       data knight_7c_7a
       data knight_7c_7a_2
       data >0000
room_7d:                               ; >7b43
       data door_7c_7d_y
       data door_7d_76
       data table_2e_7d
       data table_2e_7d_2
       data >0000
room_7e:                               ; >7b4d
       data door_7a_7e_r
       data door_7e_29
       data shi_tro_29_7e
       data pic_tro_29_7e
       data >0000
room_7f:                               ; >7b57
       data door_7f_80_g
       data door_81_7f
       data knight_09_7f
       data knight_09_7f_2
       data >0000
room_80:                               ; >7b61
       data door_7f_80_g
       data door_80_82
       data >0000
room_81:                               ; >7b67
       data door_82_81
       data door_81_7f
       data table_7a_81
       data >0000
room_82:                               ; >7b6f
       data door_80_82
       data door_82_81
       data door_82_87_c
       data shi_pic_00_82
       data trophies_00_82
       data >0000
room_83:                               ; >7b7b
       data door_83_84_r
       data door_85_83
       data >0000
room_84:                               ; >7b81
       data door_83_84_r
       data door_84_86
       data door_84_89_y
       data trap_76_84
       data >0000
room_85:                               ; >7b8b
       data door_86_85
       data door_85_83
       data >0000
room_86:                               ; >7b91
       data door_84_86
       data door_86_85
       data >0000
room_87:                               ; >7b97
       data door_82_87_c
       data door_87_88
       data door_87_8b
       data trophies_87_89
       data trophies_87_89_2
       data >0000
room_88:                               ; >7ba3
       data door_21_88
       data door_87_88
       data table_18_88
       data knight_88_8a
       data knight_88_8a_2
       data >0000
room_89:                               ; >7baf
       data door_84_89_y
       data door_89_8d
       data door_89_8a
       data trophies_87_89
       data trophies_87_89_2
       data >0000
room_8a:                               ; >7bbb
       data door_89_8a
       data door_8a_23_g
       data trap_78_8a
       data barrel_8a_08
       data knight_88_8a
       data knight_88_8a_2
       data >0000
room_8b:                               ; >7bc9
       data door_87_8b
       data door_8b_8c
       data trap_8b_6c
       data trophies_8b_8c
       data >0000
room_8c:                               ; >7bd3
       data door_8b_8c
       data door_8c_8d_g
       data shields_8d_8c
       data trophies_8b_8c
       data >0000
room_8d:                               ; >7bdd
       data door_8c_8d_g
       data door_89_8d
       data trap_2d_8d
       data trap_8d_6e
       data shields_8d_8c
       data clock_8d_22
       data >0000
room_8e:                               ; >7beb
       data acgexit_00_8e
       data >0000
room_8f:                               ; >7bef
       data door_40_8f
       data clock_17_35
       data skeleton_53_8f
       data >0000
room_90:                               ; >7bf7
       data door_54_90
       data door_90_91
       data >0000
room_91:                               ; >7bfd
       data door_90_91
       data door_91_92
       data barrels_91_3d
       data >0000
room_92:                               ; >7c05
       data door_91_92
       data door_92_93
       data >0000
room_93:                               ; >7c0b
       data door_92_93
       data door_93_94
       data >0000
room_94:                               ; >7c11
       data door_93_94
       data door_3a_94
       data >0000
room_none:                             ; >7c17
       data >0000

* Routine at 7c19
* 
* Used by the routine at #R$6000.
reset_menu:                            ; >7c19
       li   hl,menu_selection          ; LD HL,$5E00       ; 
       movb @bytes+>10,b               ; LD B,$10          ; 
loc_7c1e:                              ; >7c1e
       sb   *hl,*hl                    ; LD (HL),$00       ; clear menu data
       inc  hl                         ; INC HL            ; 
       sb   one,b                      ; DJNZ $7C1E        ; 
       jne  loc_7c1e                   ;                   
       li   hl,_be4c                   ; LD HL,$BE4C       ; 
       mov  hl,@charset_addr           ; LD ($5E01),HL     ; 
* This entry point is used by the routine at #R$8c35.
main_menu:                             ; >7c29
       .call @clear_screen             ; CALL $80AA        ; clear display, attributes, and set black border
       .call @draw_menu_icons          ; CALL $A311        ; draw menu icons for controls and player acharacters
menu_loop:                             ; >7c2f
       .call @draw_menu_text           ; CALL $7CAF        ; 
       movb @bytes+>f7,a               ; LD A,$F7          ; xxx54321
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       inv  a                          ; CPL               ; set bits now mean pressed keys
       movb a,@e                       ; LD E,A            ; 
       movb @menu_selection,a          ; LD A,($5E00)      ; 
       movb @e,r0                      ; BIT 0,E           ; 1 pressed?
       andi r0,>0100                   ;                   
       jeq  loc_7c43                   ; JR Z,$7C43        ; jump if not
       andi a,>f900                    ; AND $F9           ; select Keyboard
loc_7c43:                              ; >7c43
       movb @e,r0                      ; BIT 1,E           ; 2 pressed?
       andi r0,>0200                   ;                   
       jeq  loc_7c4b                   ; JR Z,$7C4B        ; jump if not
       andi a,>f900                    ; AND $F9           ; 
       socb @bytes+>02,a               ; OR $02            ; select Kempston joystick
loc_7c4b:                              ; >7c4b
       movb @e,r0                      ; BIT 2,E           ; 3 pressed?
       andi r0,>0400                   ;                   
       jeq  loc_7c53                   ; JR Z,$7C53        ; jump if not
       andi a,>f900                    ; AND $F9           ; 
       socb @bytes+>04,a               ; OR $04            ; select Cursor joystick
loc_7c53:                              ; >7c53
       movb @e,r0                      ; BIT 3,E           ; 4 pressed?
       andi r0,>0800                   ;                   
       jeq  loc_7c59                   ; JR Z,$7C59        ; jump if not
       andi a,>e700                    ; AND $E7           ; select Knight
loc_7c59:                              ; >7c59
       movb @e,r0                      ; BIT 4,E           ; 5 pressed?
       andi r0,>1000                   ;                   
       jeq  loc_7c61                   ; JR Z,$7C61        ; jump if not
       andi a,>e700                    ; AND $E7           ; 
       socb @bytes+>08,a               ; OR $08            ; select Wizard
loc_7c61:                              ; >7c61
       movb a,d                        ; LD D,A            ; 
       movb @bytes+>ef,a               ; LD A,$EF          ; xxx67890
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       inv  a                          ; CPL               ; set bits now mean pressed keys
       movb a,@e                       ; LD E,A            ; 
       movb d,a                        ; LD A,D            ; 
       movb @e,r0                      ; BIT 4,E           ; 6 pressed?
       andi r0,>1000                   ;                   
       jeq  loc_7c73                   ; JR Z,$7C73        ; jump if not
       andi a,>e700                    ; AND $E7           ; 
       socb @bytes+>10,a               ; OR $10            ; select Serf
loc_7c73:                              ; >7c73
       movb a,@menu_selection          ; LD ($5E00),A      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @e,r0                      ; BIT 0,E           ; 0 pressed?
       andi r0,>0100                   ;                   
       jeq  !                          ; JP NZ,$7D9A       ; jump if so
       b    @start_game                ;                   
!
       li   hl,menu_attrs              ; LD HL,$7CEA       ; 
       movb @bytes+>03,b               ; LD B,$03          ; 
       movb @c,a                       ; LD A,C            ; 
       .call @set_menu_attrs           ; CALL $7C90        ; highlight keyboard/kempston/cursor
       movb @bytes+>03,b               ; LD B,$03          ; 
       movb @c,a                       ; LD A,C            ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       .call @set_menu_attrs           ; CALL $7C90        ; highlight knight/wizard/serf
       b    @menu_loop                 ; JP $7C2F          ; 

* set menu attrs to reflect current selection
* 
* Used by the routine at #R$7c19.
set_menu_attrs:                        ; >7c90
       ; RRCA                          ; RRCA              ; 
loc_7c91:                              ; >7c91
       andi a,>0300                    ; AND $03           ; 
       jeq  loc_7c9c                   ; JR Z,$7C9C        ; 
       .call @set_flash_off            ; CALL $7CA4        ; 
loc_7c98:                              ; >7c98
       sb   one,a                      ; DEC A             ; 
       sb   one,b                      ; DJNZ $7C91        ; 
       jne  loc_7c91                   ;                   
       .ret                            ; RET               ; 
loc_7c9c:                              ; >7c9c
       .call @set_flash_on             ; CALL $7CAB        ; 
       jmp  loc_7c98                   ; JR $7C98          ; 
       socb @bits+7,*hl                ; SET 7,(HL)        ; flash on
       inc  hl                         ; INC HL            ; 

* Routine at 7ca4
* 
* Used by the routine at #R$7c90.
set_flash_off:                         ; >7ca4
       szcb @bits+7,*hl                ; RES 7,(HL)        ; clear flash attribute
       inc  hl                         ; INC HL            ; 
       .ret                            ; RET               ; 
       szcb @bits+7,*hl                ; RES 7,(HL)        ; clear flash attribute
       inc  hl                         ; INC HL            ; 

* Routine at 7cab
* 
* Used by the routine at #R$7c90.
set_flash_on:                          ; >7cab
       socb @bits+7,*hl                ; SET 7,(HL)        ; set flash attribute
       inc  hl                         ; INC HL            ; 
       .ret                            ; RET               ; 

* Routine at 7caf
* 
* Used by the routine at #R$7c19.
draw_menu_text:                        ; >7caf
       li   hl,_be4c                   ; LD HL,$BE4C       ; 
       mov  hl,@charset_addr           ; LD ($5E01),HL     ; 
       li   de,menu_attrs              ; LD DE,$7CEA       ; 
       .exx                            ; EXX               ; 
       li   hl,menu_ycoords            ; LD HL,$7CF1       ; 
       li   de,menu_options            ; LD DE,$7CF8       ; "1  KEYBOAR"
       movb @bytes+>07,b               ; LD B,$07          ; 7 lines
loc_7cc1:                              ; >7cc1
       .exx                            ; EXX               ; 
       movb *de,a                      ; LD A,(DE)         ; text attribute colour
       movb a,@text_attr               ; LD ($5E22),A      ; 
       inc  de                         ; INC DE            ; 
       .exx                            ; EXX               ; 
       .push bc                        ; PUSH BC           ; 
       movb *hl,a                      ; LD A,(HL)         ; next text character
       inc  hl                         ; INC HL            ; 
       .push hl                        ; PUSH HL           ; 
       movb a,h                        ; LD H,A            ; 
       movb @bytes+>58,@l              ; LD L,$58          ; x coord for text
       .call @print_text               ; CALL $7D8A        ; 
       .exx                            ; EXX               ; 
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; 
       inc  de                         ; INC DE            ; 
       sb   one,b                      ; DJNZ $7CC1        ; 
       jne  loc_7cc1                   ;                   
       li   hl,g_wizard_down3+>0028    ; LD HL,$B800       ; copyright at 0,184
       li   de,copyright_msg           ; LD DE,$7D51       ; 
       .call @colour_text              ; CALL $A1F3        ; show a line of text, first byte is attr
       li   hl,>0020                   ; LD HL,$0020       ; header at 32,0
       li   de,header_msg              ; LD DE,$7D72       ; 
       b    @colour_text               ; JP $A1F3          ; show a line of text, first byte is attr

* Data block at 7cea
menu_attrs:                            ; >7cea
       byte >C5,>45,>45,>C5,>45,>45,>47
menu_ycoords:                          ; >7cf1
       byte >10,>28,>40,>58,>70,>88,>A0

* Message at 7cf8
menu_options:                          ; >7cf8
       text '1  KEYBOAR'
       byte >C4
       text '2  KEMPSTON JOYSTIC'
       byte >CB
       text '3  CURSOR   JOYSTIC'
       byte >CB
       text '4  KNIGH'
       byte >D4
       text '5  WIZAR'
       byte >C4
       text '6  SER'
       byte >C6
       text '0  START GAM'
       byte >C5

* Data block at 7d51
copyright_msg:                         ; >7d51
       byte >47
       text '%1983 A.C.G. ALL RIGHTS RESERVE'
       byte >C4

* Data block at 7d72
header_msg:                            ; >7d72
       byte >47
       text 'ATICATAC GAME SELECTIO'
       byte >CE

* Routine at 7d8a
* 
* Used by the routine at #R$7caf.
print_text:                            ; >7d8a
       .push hl                        ; PUSH HL           ; 
       .call @xy_to_display            ; CALL $9BA2        ; convert coords in HL to display address in HL
       movb @text_attr,a               ; LD A,($5E22)      ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       .exx                            ; EXX               ; 
       .pop hl                         ; POP HL            ; 
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
       b    @loc_a1ff                  ; JP $A1FF          ; 

* Routine at 7d9a
* 
* Used by the routine at #R$7c19.
start_game:                            ; >7d9a
       .call @clear_game_data          ; CALL $80CB        ; clear 5E10-5FFF
       movb @bytes+>03,a               ; LD A,$03          ; 3 lives on startup
       movb a,@lives                   ; LD ($5E21),A      ; 
       li   hl,food_items              ; LD HL,$EB58       ; 
       mov  hl,@food_ptr               ; LD ($5E55),HL     ; 
       .call @clear_screen             ; CALL $80AA        ; clear display, attributes, and set black border
       .call @draw_side_panel          ; CALL $A219        ; draw side panel background scroll
       .call @draw_lives               ; CALL $A2CE        ; draw lives sprites in side panel
       .call @place_key_pieces         ; CALL $94B6        ; set locations of ACG key pieces
       .call @set_key_positions        ; CALL $98D2        ; set positions of red/green/cyan keys, and mummy
       .call @reset_game_state         ; CALL $8D61        ; copy initial game state to working state area
       .call @randomise_doors          ; CALL $94F5        ; randomise which doors can open/close
       .call @prepare_player           ; CALL $9443        ; prepare player to spawn
       b    @enter_room                ; JP $9147          ; 

* Routine at 7dc3
* 
* Used by the routines at #R$7e13 and #R$9117.
main_loop:                             ; >7dc3
       li   sp,menu_selection          ; LD SP,$5E00       ; 
       ; EI                            ; EI                ; 
       sb   a,a                        ; XOR A             ; 
loc_7dc8:                              ; >7dc8
       movb a,@num_creatures           ; LD ($5E25),A      ; number of creatures processed this frame
       li   ix,acg_key_1               ; LD IX,$EAA8       ; first entity
       movb @game_flags,a              ; LD A,($5E14)      ; b0 set if room content drawn
       movb a,r0                       ; BIT 0,A           ; room content drawn?
       andi r0,>0100                   ;                   
       jne  loc_7ddc                   ; JR NZ,$7DDC       ; jump if so
       li   ix,linked_items            ; LD IX,$EEE0       ; pairs of linked items, including doors
       jmp  draw_room                  ; JR $7E23          ; 
loc_7ddc:                              ; >7ddc
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @last_frames,a             ; LD A,($5E03)      ; 
       cb   a,@c                       ; CP C              ; same frame as last time?
       jeq  !                          ; CALL NZ,$7EB2     ; call if not
       .call @run_player               ;                   
!
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; entity in player room?
       li   hl,loop_return             ; LD HL,$7DF3       ; 
       jne  !                          ; JP Z,$7E7E        ; jump if so
       b    @process_action            ;                   
!
loop_return:                           ; >7df3
       equ  $
       li   de,>0008                   ; LD DE,$0008       ; entity size
       a    de,ix                      ; ADD IX,DE         ; next entity
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       li   de,creature1               ; LD DE,$EE60       ; end marker
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; end of list?
       joc  loc_7ddc                   ; JR C,$7DDC        ; TODO: check code. jump if not
* This entry point is used by the routine at #R$7e13.
loc_7e03:                              ; >7e03
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @last_frames,a             ; LD A,($5E03)      ; 
       cb   a,@c                       ; CP C              ; same frame as last time?
       jeq  !                          ; CALL NZ,$7EB2     ; call if not
       .call @run_player               ;                   
!
       li   hl,loop2_return            ; LD HL,$7E13       ; 
       jmp  process_action             ; JR $7E7E          ; 

* Routine at 7e13
loop2_return:                          ; >7e13
       li   de,>0010                   ; LD DE,$0010       ; 16 bytes per linked entity pair
       a    de,ix                      ; ADD IX,DE         ; next pair
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       li   de,linked_items            ; LD DE,$EEE0       ; pairs of linked items, including doors
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       joc  loc_7e03                   ; JR C,$7E03        ; TODO: check code. 
* This entry point is used by the routine at #R$7dc3.
draw_room:                             ; >7e23
       movb @player_room,a             ; LD A,($EA91)      ; 
       movb a,@l                       ; LD L,A            ; 
       sb   h,h                        ; LD H,$00          ; 
       a    hl,hl                      ; ADD HL,HL         ; * 2 (bytes per entry)
       li   bc,room_table              ; LD BC,$757D       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; room data LSB
       inc  hl                         ; INC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; room data MSB
       movb a,@l                       ; LD L,A            ; 
       mov  hl,@room_ptr               ; LD ($5E1B),HL     ; 
decor_loop:                            ; >7e35
       mov  @room_ptr,hl               ; LD HL,($5E1B)     ; 
       movb *hl,a                      ; LD A,(HL)         ; room item LSB
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       mov  hl,@room_ptr               ; LD ($5E1B),HL     ; 
       dec  hl                         ; DEC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; room item MSB
       movb a,@l                       ; LD L,A            ; 
       socb h,a                        ; OR H              ; end of list?
       jne  loc_7e93                   ; JR NZ,$7E93       ; jump if not
       mov  @counter_low,hl            ; LD HL,($5E12)     ; 
       inc  hl                         ; INC HL            ; advance game loop counter
       mov  hl,@counter_low            ; LD ($5E12),HL     ; 
       li   hl,game_flags              ; LD HL,$5E14       ; b0 set if room content drawn
       movb *hl,r0                     ; BIT 0,(HL)        ; room drawn yet?
       andi r0,>0100                   ;                   
       jne  loc_7e55                   ; JR NZ,$7E55       ; jump if so
       .call @draw_entities            ; CALL $9291        ; draw all non-monster entities in the current room
loc_7e55:                              ; >7e55
       li   hl,game_flags              ; LD HL,$5E14       ; b0 set if room content drawn
       socb @bits+0,*hl                ; SET 0,(HL)        ; mark room as drawn
       mov  @rand8,hl                  ; LD HL,($5E05)     ; another random number source
       mov  @zx_frames,de              ; LD DE,($5C78)     ; 
       a    de,hl                      ; ADD HL,DE         ; add in frames
       movb @counter_low,a             ; LD A,($5E12)      ; 
       ab   @l,a                       ; ADD A,L           ; add in counter low
       movb a,@l                       ; LD L,A            ; 
       mov  hl,@rand8                  ; LD ($5E05),HL     ; only low 8 bits are meaningfully random
       .call @check_pickup_key         ; CALL $938B        ; check whether pick-up key has been pressed
       .call @check_pause              ; CALL $9489        ; check for pause key, return when not paused
       .call @replenish_food           ; CALL $9924        ; periodically replenish consumed food
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@bytes+>8e               ; CP $8E            ; end room?
       jne  !                          ; JP Z,$96EC        ; congratulate player on completion
       b    @game_complete             ;                   
!
       b    @main_loop                 ; JP $7DC3          ; 

* Routine at 7e7e
* 
* Used by the routine at #R$7dc3.
process_action:                        ; >7e7e
       .push hl                        ; PUSH HL           ; push return location
* This entry point is used by the routine at #R$7eb2.
run_handler:                           ; >7e7f
       li   hl,handler_table           ; LD HL,$7EE6       ; 
lookup_graphic:                        ; >7e82
       movb *ix,@c                     ; LD C,(IX+$00)     ; 
* This entry point is used by the routine at #R$9924.
lookup_c_hl:                           ; >7e85
       sb   b,b                        ; LD B,$00          ; 
       ; SLA C                         ; SLA C             ; 
       sla  b,1                        ; RL B              ; TODO: check code. * 2 (bytes per entry)
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; LSB
       inc  hl                         ; INC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; MSB
       movb a,@l                       ; LD L,A            ; 
       b    @zx_frames+>0038           ; JP $5CB0          ; 
* This entry point is used by the routine at #R$7e13.
loc_7e93:                              ; >7e93
       li   bc,decor_loop              ; LD BC,$7E35       ; 
       .push bc                        ; PUSH BC           ; 
       li   bc,room_table              ; LD BC,$757D       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .push hl                        ; PUSH HL           ; 
       .pop ix                         ; POP IX            ; 
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  loc_7ead                   ; JR Z,$7EAD        ; jump if so
       li   bc,>0008                   ; LD BC,$0008       ; 
       a    bc,ix                      ; ADD IX,BC         ; 
loc_7ead:                              ; >7ead
       li   hl,handler_table2          ; LD HL,$802A       ; 
       jmp  lookup_graphic             ; JR $7E82          ; 

* run player, weapon, and sound handlers
* 
* Used by the routine at #R$7dc3.
run_player:                            ; >7eb2
       limi 0                          ; DI                ; 
       .push ix                        ; PUSH IX           ; 
       movb one,a                      ; LD A,$01          ; 
       movb a,@in_handlers             ; LD ($5E04),A      ; flag set but never read
       li   ix,player                  ; LD IX,$EA90       ; 
* This entry point is used by the routine at #R$7ec5.
loc_7ebe:                              ; >7ebe
       li   hl,handler_loop            ; LD HL,$7EC5       ; 
       .push hl                        ; PUSH HL           ; 
       b    @run_handler               ; JP $7E7F          ; 

* Routine at 7ec5
handler_loop:                          ; >7ec5
       li   de,>0008                   ; LD DE,$0008       ; 8 bytes per entry
       a    de,ix                      ; ADD IX,DE         ; next entry
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       li   de,acg_key_1               ; LD DE,$EAA8       ; end marker
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; end of list?
       joc  loc_7ebe                   ; JR C,$7EBE        ; TODO: check code. jump if not
       .call @clock_tick               ; CALL $95DA        ; advance the clock 1 frame
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       movb a,@last_frames             ; LD ($5E03),A      ; 
       sb   a,a                        ; XOR A             ; 
       movb a,@in_handlers             ; LD ($5E04),A      ; flag set but never read
       .pop ix                         ; POP IX            ; 
       ; EI                            ; EI                ; 
       .ret                            ; RET               ; 

* Data block at 7ee6
handler_table:                         ; >7ee6
       data h_creat_delay,h_knight,h_knight,h_knight                 ; &00
       data h_knight,h_knight,h_knight,h_knight                      ; &04 extra delay for inactive creatures
       data h_knight,h_knight,h_knight,h_knight                      ; &08
       data h_knight,h_knight,h_knight,h_knight                      ; &0c
       data h_knight,h_wizard,h_wizard,h_wizard                      ; &10
       data h_wizard,h_wizard,h_wizard,h_wizard                      ; &14
       data h_wizard,h_wizard,h_wizard,h_wizard                      ; &18
       data h_wizard,h_wizard,h_wizard,h_wizard                      ; &1c
       data h_wizard,h_serf,h_serf,h_serf                            ; &20
       data h_serf,h_serf,h_serf,h_serf                              ; &24
       data h_serf,h_serf,h_serf,h_serf                              ; &28
       data h_serf,h_serf,h_serf,h_serf                              ; &2c
       data h_serf,h_blank,h_creat_delay,h_creat_delay               ; &30
       data h_fireball,h_fireball,h_fireball,h_fireball              ; &34
       data h_sword,h_sword,h_sword,h_sword                          ; &38
       data h_sword,h_sword,h_sword,h_sword                          ; &3c
       data h_axe,h_axe,h_axe,h_axe                                  ; &40
       data h_axe,h_axe,h_axe,h_axe                                  ; &44
       data h_creat_delay,h_creat_delay,h_creat_delay,h_creat_delay  ; &48
       data h_pumpkin_spider,h_pumpkin_spider,h_ghostlet,h_ghostlet  ; &4c
       data h_food,h_food,h_food,h_food                              ; &50
       data h_food,h_food,h_food,h_food                              ; &54
       data h_sparkles,h_sparkles,h_sparkles,h_sparkles              ; &58
       data h_pumpkin_spider,h_pumpkin_spider,h_spikey_ghost,h_spikey_ghost ; &5c
       data h_blob,h_blob,h_ghoul,h_ghoul                            ; &60
       data h_sound_effect,h_sound_effect2,h_player_appear,h_death   ; &64
       data h_spikey_ghost,h_spikey_ghost,h_batlet,h_batlet          ; &68
       data h_pop,h_pop,h_pop,h_pop                                  ; &6c
       data h_mummy,h_mummy,h_mummy,h_mummy                          ; &70
       data h_frankenstein,h_frankenstein,h_frankenstein,h_frankenstein ; &74
       data h_devil,h_devil,h_devil,h_devil                          ; &78
       data h_dracula,h_dracula,h_dracula,h_dracula                  ; &7c
       data h_pickup_item,h_pickup_item,h_pickup_item,h_pickup_item  ; &80
       data h_pickup_item,h_pickup_item,h_pickup_item,h_pickup_item  ; &84
       data h_pickup_item,h_pickup_item,h_pickup_item,h_pickup_item  ; &88
       data h_pickup_item,h_pickup_item,h_pickup_item,h_tombstone    ; &8c
       data h_witch,h_witch,h_witch,h_witch                          ; &90
       data h_monk_bat,h_monk_bat,h_monk_bat,h_monk_bat              ; &94
       data h_monk_bat,h_monk_bat,h_monk_bat,h_monk_bat              ; &98
       data h_hunchback,h_hunchback,h_hunchback,h_hunchback          ; &9c
       data h_food_eaten,h_mushroom                                  ; &a0

* Data block at 802a
handler_table2:                        ; >802a
       data h_creat_delay,h_door_exit,h_door_exit,h_big_door_exit    ; &00
       data h_creat_delay,h_creat_delay,h_creat_delay,h_creat_delay  ; &04 extra delay for inactive creatures
       data h_door_locked,h_door_locked,h_door_locked,h_door_locked  ; &08
       data h_cave_locked,h_cave_locked,h_cave_locked,h_cave_locked  ; &0c
       data h_clock,h_room_item,h_room_item,h_creat_delay            ; &10
       data h_creat_delay,h_room_item,h_room_item,h_bookcase         ; &14
       data h_trap_closed,h_trap_open,h_barrel,h_room_item           ; &18
       data h_room_item,h_room_item,h_room_item,h_creat_delay        ; &1c
       data h_door_closed,h_door_open,h_door_closed,h_door_open      ; &20
       data h_acg_exit,h_room_item,h_room_item,h_room_item           ; &24

* extra delay applied to inactive creatures
h_creat_delay:                         ; >807a
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       li   de,creature1               ; LD DE,$EE60       ; end marker
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; subtract from entity address
       movb h,a                        ; LD A,H            ; 
       ; AND A                         ; AND A             ; before creature 1?
       jeq  !                          ; RET NZ            ; return if so
       .ret                            ;                   
!
       movb @l,a                       ; LD A,L            ; 
       cb   a,@bytes+>30               ; CP $30            ; after creature3 (16 bytes &0eac)
       jl   !                          ; RET NC            ; return if so
       .ret                            ;                   
!
       li   hl,>00c0                   ; LD HL,$00C0       ; delay to keep game speed stable
delay_loop:                            ; >808d
       dec  hl                         ; DEC HL            ; 
       movb h,a                        ; LD A,H            ; 
       socb @l,a                       ; OR L              ; 
       jne  delay_loop                 ; JR NZ,$808D       ; 
       .ret                            ; RET               ; 

* clear screen and attrs of play area
* 
* Used by the routines at #R$8c35, #R$9117 and #R$9731.
clear_play_area:                       ; >8093
       li   hl,zx_screen               ; LD HL,$4000       ; 
       li   bc,>18c0                   ; LD BC,$18C0       ; 24x192
       sb   a,a                        ; XOR A             ; 

* fill C rows of B columns of value A at address HL
* 
* Used by the routines at #R$9bea and #R$a240.
fill_bc_hl_a:                          ; >809a
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       li   de,>0020                   ; LD DE,$0020       ; line stride is 32 bytes
loc_809f:                              ; >809f
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       sb   one,b                      ; DJNZ $809F        ; 
       jne  loc_809f                   ;                   
       .pop hl                         ; POP HL            ; 
       a    de,hl                      ; ADD HL,DE         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  fill_bc_hl_a               ; JR NZ,$809A       ; fill C rows of B columns of value A at address HL
       .ret                            ; RET               ; 

* clear display, attributes, and set black border
* 
* Used by the routines at #R$7c19 and #R$7d9a.
clear_screen:                          ; >80aa
       .call @clear_attrs              ; CALL $80C2        ; clear attribute file
       .call @clear_display            ; CALL $80B4        ; clear display file
       sb   a,a                        ; XOR A             ; 
       ; OUT ($FE),A                   ; OUT ($FE),A       ; black border
       .ret                            ; RET               ; 

* clear display file
* 
* Used by the routine at #R$80aa.
clear_display:                         ; >80b4
       li   hl,zx_screen               ; LD HL,$4000       ; 
       movb @bytes+>58,b               ; LD B,$58          ; 
* This entry point is used by the routine at #R$80cb.
loc_80b9:                              ; >80b9
       sb   @c,@c                      ; LD C,$00          ; 
* This entry point is used by the routine at #R$80c2.
loc_80bb:                              ; >80bb
       movb @c,*hl                     ; LD (HL),C         ; 
       inc  hl                         ; INC HL            ; 
       movb h,a                        ; LD A,H            ; 
       cb   a,b                        ; CP B              ; 
       jne  loc_80bb                   ; JR NZ,$80BB       ; 
       .ret                            ; RET               ; 

* clear attribute file
* 
* Used by the routine at #R$80aa.
clear_attrs:                           ; >80c2
       li   hl,zx_attrs                ; LD HL,$5800       ; 
       movb @bytes+>5b,b               ; LD B,$5B          ; 
       sb   @c,@c                      ; LD C,$00          ; 
       jmp  loc_80bb                   ; JR $80BB          ; 

* clear 5E10-5FFF
* 
* Used by the routine at #R$7d9a.
clear_game_data:                       ; >80cb
       li   hl,width_bytes             ; LD HL,$5E10       ; 
       movb @bytes+>60,b               ; LD B,$60          ; clear up to address 6000
       jmp  loc_80b9                   ; JR $80B9          ; 

* wizard character handler
h_wizard:                              ; >80d2
       li   bc,>2020                   ; LD BC,$2020       ; walk deceleration
       li   de,>2020                   ; LD DE,$2020       ; walk acceleration
       li   hl,>2020                   ; LD HL,$2020       ; unused
       .call @control_player           ; CALL $8D77        ; read controls and apply player movement
       movb @>06(ix),@e                ; LD E,(IX+$06)     ; x velocity
       movb @>07(ix),d                 ; LD D,(IX+$07)     ; y velocity
       movb d,a                        ; LD A,D            ; 
       socb @e,a                       ; OR E              ; is player moving?
       jeq  loc_811d                   ; JR Z,$811D        ; jump if not
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       andi a,>0300                    ; AND $03           ; 1/4 update rate
       jne  loc_811d                   ; JR NZ,$811D       ; jump if not time
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>0300                    ; AND $03           ; keep animation frame bits
       ab   @bytes+>11,a               ; ADD A,$11         ; add base wizard graphic
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb d,a                        ; LD A,D            ; 
       ; AND A                         ; AND A             ; moving down?
       ; JP P,$8100                    ; JP P,$8100        ; jump if so
       neg a                           ; NEG               ; abs
loc_8100:                              ; >8100
       movb a,@c                       ; LD C,A            ; 
       movb @e,a                       ; LD A,E            ; 
       ; AND A                         ; AND A             ; moving right?
       ; JP P,$8108                    ; JP P,$8108        ; jump if so
       neg a                           ; NEG               ; abs
loc_8108:                              ; >8108
       cb   a,@c                       ; CP C              ; moving more up/down than left/right?
       jhe  loc_8128                   ; JR NC,$8128       ; jump if so
       movb d,a                        ; LD A,D            ; 
       ; AND A                         ; AND A             ; moving up?
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; JP M,$8115                    ; JP M,$8115        ; jump if so
       ab   @bytes+>04,a               ; ADD A,$04         ; offset to down sprites
loc_8115:                              ; >8115
       ab   @bytes+>08,a               ; ADD A,$08         ; offset to right sprites
loc_8117:                              ; >8117
       movb a,*ix                      ; LD (IX+$00),A     ; set animation graphic
       .call @walk_sound               ; CALL $A3C7        ; play walk clicks if due
loc_811d:                              ; >811d
       .call @read_controls            ; CALL $93BE        ; return controls in A (FUDLR order, negative logic)
       andi a,>1000                    ; AND $10           ; fire pressed?
       jne  !                          ; CALL Z,$814B      ; call if so (fire weapon)
       .call @wizard_fire              ;                   
!
       b    @loc_8e78                  ; JP $8E78          ; 
loc_8128:                              ; >8128
       movb @e,a                       ; LD A,E            ; 
       ; AND A                         ; AND A             ; moving left?
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; JP M,$8117                    ; JP M,$8117        ; jump if so
       ab   @bytes+>04,a               ; ADD A,$04         ; offset to down sprites
       jmp  loc_8117                   ; JR $8117          ; 

* fire knight weapon
* 
* Used by the routine at #R$8e26.
knight_fire:                           ; >8134
       movb @weapon,a                  ; LD A,($EA98)      ; 
       ; AND A                         ; AND A             ; weapon active?
       jeq  !                          ; RET NZ            ; return if so (only one allowed)
       .ret                            ;                   
!
       movb @in_doorway,a              ; LD A,($5E2D)      ; 
       ; AND A                         ; AND A             ; standing in doorway?
       jeq  !                          ; RET NZ            ; return if so (can't fire)
       .ret                            ;                   
!
       .call @axe_sound                ; CALL $A41B        ; play axe throw sound
       .call @throw_weapon             ; CALL $817C        ; throw the current character's weapon
       li   hl,weapon                  ; LD HL,$EA98       ; 
       movb @bytes+>40,*hl             ; LD (HL),$40       ; base axe graphic
       jmp  loc_8160                   ; JR $8160          ; 

* fire wizard weapon
* 
* Used by the routine at #R$80d2.
wizard_fire:                           ; >814b
       movb @weapon,a                  ; LD A,($EA98)      ; 
       ; AND A                         ; AND A             ; weapon active?
       jeq  !                          ; RET NZ            ; return if so
       .ret                            ;                   
!
       movb @in_doorway,a              ; LD A,($5E2D)      ; 
       ; AND A                         ; AND A             ; standing in doorway?
       jeq  !                          ; RET NZ            ; return if so (can't fire)
       .ret                            ;                   
!
       .call @fireball_sound           ; CALL $A438        ; play fireball throw sound
       .call @throw_weapon             ; CALL $817C        ; throw the current character's weapon
       li   hl,weapon                  ; LD HL,$EA98       ; 
       movb @bytes+>34,*hl             ; LD (HL),$34       ; base fireball graphic
* This entry point is used by the routines at #R$8134 and #R$8283.
loc_8160:                              ; >8160
       inc  hl                         ; INC HL            ; 
       movb @>01(ix),a                 ; LD A,(IX+$01)     ; player room
       movb a,*hl                      ; LD (HL),A         ; set weapon room
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       movb @>03(ix),a                 ; LD A,(IX+$03)     ; player xpos
       movb a,*hl                      ; LD (HL),A         ; set weapon xpos
       inc  hl                         ; INC HL            ; 
       movb @>04(ix),a                 ; LD A,(IX+$04)     ; player ypos
       movb a,*hl                      ; LD (HL),A         ; set weapon ypos
       .push ix                        ; PUSH IX           ; 
       li   ix,weapon                  ; LD IX,$EA98       ; 
       .call @draw_entity              ; CALL $9F4A        ; draw entity graphic (no attrs)
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 

* throw the current character's weapon
* 
* Used by the routines at #R$8134, #R$814b and #R$8283.
throw_weapon:                          ; >817c
       li   hl,weapon+>0006            ; LD HL,$EA9E       ; 
       movb @bytes+>30,a               ; LD A,$30          ; 
       movb a,@sound+>0007             ; LD ($EAA7),A      ; 
       sb   a,a                        ; LD A,$00          ; 
       movb a,@weapon+>0002            ; LD ($EA9A),A      ; 
       movb @>06(ix),a                 ; LD A,(IX+$06)     ; 
       socb @>07(ix),a                 ; OR (IX+$07)       ; 
       jeq  loc_81b3                   ; JR Z,$81B3        ; 
       movb @>06(ix),a                 ; LD A,(IX+$06)     ; 
       ; AND A                         ; AND A             ; 
       jeq  loc_81a0                   ; JR Z,$81A0        ; 
       ; JP M,$819E                    ; JP M,$819E        ; 
       movb @bytes+>04,a               ; LD A,$04          ; 
       jmp  loc_81a0                   ; JR $81A0          ; 
loc_819e:                              ; >819e
       movb @bytes+>fc,a               ; LD A,$FC          ; 
loc_81a0:                              ; >81a0
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; 
       ; AND A                         ; AND A             ; 
       jeq  loc_81b1                   ; JR Z,$81B1        ; 
       ; JP M,$81AF                    ; JP M,$81AF        ; 
       movb @bytes+>04,a               ; LD A,$04          ; 
       jmp  loc_81b1                   ; JR $81B1          ; 
loc_81af:                              ; >81af
       movb @bytes+>fc,a               ; LD A,$FC          ; 
loc_81b1:                              ; >81b1
       movb a,*hl                      ; LD (HL),A         ; 
       .ret                            ; RET               ; 
loc_81b3:                              ; >81b3
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       sb   one,a                      ; DEC A             ; 
       andi a,>0c00                    ; AND $0C           ; 
       jeq  loc_81c9                   ; JR Z,$81C9        ; 
       cb   a,@bytes+>04               ; CP $04            ; 
       jeq  loc_81cf                   ; JR Z,$81CF        ; 
       cb   a,@bytes+>08               ; CP $08            ; 
       jne  loc_81d5                   ; JR NZ,$81D5       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; x velocity
       inc  hl                         ; INC HL            ; 
       movb @bytes+>fc,*hl             ; LD (HL),$FC       ; y velocity (up)
       .ret                            ; RET               ; 
loc_81c9:                              ; >81c9
       movb @bytes+>fc,*hl             ; LD (HL),$FC       ; x velocity (left)
       inc  hl                         ; INC HL            ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; y velocity
       .ret                            ; RET               ; 
loc_81cf:                              ; >81cf
       movb @bytes+>04,*hl             ; LD (HL),$04       ; set x velocity (right)
       inc  hl                         ; INC HL            ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; set y velocity
       .ret                            ; RET               ; 
loc_81d5:                              ; >81d5
       sb   *hl,*hl                    ; LD (HL),$00       ; set x velocity (none)
       inc  hl                         ; INC HL            ; 
       movb @bytes+>04,*hl             ; LD (HL),$04       ; set y velocity (down)
       .ret                            ; RET               ; 

* axe animation handler
h_axe:                                 ; >81db
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       inv  a                          ; CPL               ; cycle backwards
       srl  a,1                        ; RRA               ; TODO: check code. 1/2 animation rate
       andi a,>0700                    ; AND $07           ; 8 animation frames
       ab   @bytes+>40,a               ; ADD A,$40         ; base axe graphic
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb @bytes+>42,@>05(ix)        ; LD (IX+$05),$42   ; bright red
       jmp  weapon_handler             ; JR $8209          ; 

* fireball animation handler
h_fireball:                            ; >81f0
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ab   one,a                      ; INC A             ; cycle &0eac processing loop
       andi a,>0300                    ; AND $03           ; 4 animation frames
       ab   @bytes+>34,a               ; ADD A,$34         ; base fireball graphic
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       ; RLA                           ; RLA               ; 
       andi a,>0200                    ; AND $02           ; two possible colours
       ab   @bytes+>45,a               ; ADD A,$45         ; bright cyan or white
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; 
* This entry point is used by the routines at #R$81db and #R$82f1.
weapon_handler:                        ; >8209
       mov  @room_width,de             ; LD DE,($5E1D)     ; 
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; weapon in player room?
       jne  remove_entity              ; JR NZ,$827E       ; jump if not (remove)
       sb   one,@>0f(ix)               ; DEC (IX+$0F)      ; existed too long?
       jeq  loc_826f                   ; JR Z,$826F        ; jump if so (remove)
       movb @>02(ix),r0                ; BIT 0,(IX+$02)    ; 
       andi r0,>0100                   ;                   
       jne  loc_826f                   ; JR NZ,$826F       ; 
       movb @>03(ix),a                 ; LD A,(IX+$03)     ; weapon xpos
       ab   @>06(ix),a                 ; ADD A,(IX+$06)    ; add x velocity
       movb a,@c                       ; LD C,A            ; 
       sb   @bytes+>58,a               ; SUB $58           ; subtract room x centre
       ; JP P,$822E                    ; JP P,$822E        ; jump if in right half
       neg a                           ; NEG               ; abs
loc_822e:                              ; >822e
       cb   a,@e                       ; CP E              ; hit screen edge?
       jhe  loc_825d                   ; JR NC,$825D       ; jump if so (bounce)
loc_8231:                              ; >8231
       movb @>04(ix),a                 ; LD A,(IX+$04)     ; weapon ypos
       ab   @>07(ix),a                 ; ADD A,(IX+$07)    ; add y velocity
       movb a,b                        ; LD B,A            ; 
       sb   @bytes+>68,a               ; SUB $68           ; subtract room y centre
       ; JP P,$823F                    ; JP P,$823F        ; jump if in bottom half
       neg a                           ; NEG               ; abs
loc_823f:                              ; >823f
       cb   a,d                        ; CP D              ; hit screen edge?
       jhe  loc_824b                   ; JR NC,$824B       ; jump if so (bounce)
loc_8242:                              ; >8242
       movb @c,@>03(ix)                ; LD (IX+$03),C     ; set updated xpos
       movb b,@>04(ix)                 ; LD (IX+$04),B     ; set updated ypos
       b    @loc_8e8e                  ; JP $8E8E          ; 
loc_824b:                              ; >824b
       movb @>04(ix),b                 ; LD B,(IX+$04)     ; weapon ypos
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; y velocity
       neg a                           ; NEG               ; invert (bounce)
       movb a,@>07(ix)                 ; LD (IX+$07),A     ; 
       .push bc                        ; PUSH BC           ; 
       .call @bounce_sound             ; CALL $A4B0        ; weapon bounce sound
       .pop bc                         ; POP BC            ; 
       jmp  loc_8242                   ; JR $8242          ; 
loc_825d:                              ; >825d
       movb @>03(ix),@c                ; LD C,(IX+$03)     ; weapon xpos
       movb @>06(ix),a                 ; LD A,(IX+$06)     ; x velocity
       neg a                           ; NEG               ; invert (bounce)
       movb a,@>06(ix)                 ; LD (IX+$06),A     ; 
       .push bc                        ; PUSH BC           ; 
       .call @bounce_sound             ; CALL $A4B0        ; weapon bounce sound
       .pop bc                         ; POP BC            ; 
       jmp  loc_8231                   ; JR $8231          ; 
* This entry point is used by the routine at #R$8787.
loc_826f:                              ; >826f
       .call @undraw_entity            ; CALL $9F56        ; 
       .call @weapon_pop               ; CALL $A445        ; weapon disappearing sound
       movb @room_attr,a               ; LD A,($5E1A)      ; 
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; 
       .call @set_entity_attrs2        ; CALL $A01A        ; set attrs covering previous and new position
* This entry point is used by the routine at #R$85b2.
remove_entity:                         ; >827e
       sb   *ix,*ix                    ; LD (IX+$00),$00   ; clear entity graphic
       .ret                            ; RET               ; 

* fire serf weapon, if not active
* 
* Used by the routine at #R$8dc4.
serf_fire:                             ; >8283
       movb @weapon,a                  ; LD A,($EA98)      ; 
       ; AND A                         ; AND A             ; weapon active?
       jeq  !                          ; RET NZ            ; return if so
       .ret                            ;                   
!
       movb @in_doorway,a              ; LD A,($5E2D)      ; 
       ; AND A                         ; AND A             ; standing in doorway?
       jeq  !                          ; RET NZ            ; return if so
       .ret                            ;                   
!
       .call @sword_sound              ; CALL $A427        ; play sword throw sound
       .call @throw_weapon             ; CALL $817C        ; throw the current character's weapon
       sb   @c,@c                      ; LD C,$00          ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; y velocity zero?
       jeq  loc_82b6                   ; JR Z,$82B6        ; jump if so
       ; JP P,$829E                    ; JP P,$829E        ; jump if down
       movb @bytes+>04,@c              ; LD C,$04          ; offset to up graphic
loc_829e:                              ; >829e
       dec  hl                         ; DEC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; x velocity zero?
       jeq  loc_82a7                   ; JR Z,$82A7        ; jump if so
       ; JP P,$82B3                    ; JP P,$82B3        ; jump if right
       sb   one,@c                     ; DEC C             ; up/left or down/left
loc_82a7:                              ; >82a7
       movb @c,a                       ; LD A,C            ; 
       andi a,>0700                    ; AND $07           ; 8 possible directions
       ab   @bytes+>38,a               ; ADD A,$38         ; base sword graphic
       li   hl,weapon                  ; LD HL,$EA98       ; 
       movb a,*hl                      ; LD (HL),A         ; 
       b    @loc_8160                  ; JP $8160          ; 
loc_82b3:                              ; >82b3
       ab   one,@c                     ; INC C             ; 
       jmp  loc_82a7                   ; JR $82A7          ; 
loc_82b6:                              ; >82b6
       dec  hl                         ; DEC HL            ; 
       movb *hl,r0                     ; BIT 7,(HL)        ; 
       andi r0,>8000                   ;                   
       jeq  loc_82bf                   ; JR Z,$82BF        ; 
       movb @bytes+>06,@c              ; LD C,$06          ; 
       jmp  loc_82a7                   ; JR $82A7          ; 
loc_82bf:                              ; >82bf
       movb @bytes+>02,@c              ; LD C,$02          ; 
       jmp  loc_82a7                   ; JR $82A7          ; 

* set sword direction to match player direction
* 
* Used by the routine at #R$82f1.
set_sword_dir:                         ; >82c3
       sb   @c,@c                      ; LD C,$00          ; down
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jeq  loc_82e4                   ; JR Z,$82E4        ; 
       ; JP P,$82CE                    ; JP P,$82CE        ; 
       movb @bytes+>04,@c              ; LD C,$04          ; up
loc_82ce:                              ; >82ce
       dec  hl                         ; DEC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jeq  loc_82d7                   ; JR Z,$82D7        ; 
       ; JP P,$82E1                    ; JP P,$82E1        ; 
       sb   one,@c                     ; DEC C             ; up-left or down-left
loc_82d7:                              ; >82d7
       movb @c,a                       ; LD A,C            ; 
       andi a,>0700                    ; AND $07           ; 8 positions
       ab   @bytes+>38,a               ; ADD A,$38         ; base sword graphic
       li   hl,weapon                  ; LD HL,$EA98       ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .ret                            ; RET               ; 
loc_82e1:                              ; >82e1
       ab   one,@c                     ; INC C             ; up-right or down-right
       jmp  loc_82d7                   ; JR $82D7          ; 
loc_82e4:                              ; >82e4
       dec  hl                         ; DEC HL            ; 
       movb *hl,r0                     ; BIT 7,(HL)        ; 
       andi r0,>8000                   ;                   
       jeq  loc_82ed                   ; JR Z,$82ED        ; 
       movb @bytes+>06,@c              ; LD C,$06          ; facing left
       jmp  loc_82d7                   ; JR $82D7          ; 
loc_82ed:                              ; >82ed
       movb @bytes+>02,@c              ; LD C,$02          ; facing right
       jmp  loc_82d7                   ; JR $82D7          ; 

* sword animation handler
h_sword:                               ; >82f1
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb @bytes+>46,@>05(ix)        ; LD (IX+$05),$46   ; bright yellow
       li   hl,weapon+>0007            ; LD HL,$EA9F       ; 
       .call @set_sword_dir            ; CALL $82C3        ; set sword direction to match player direction
       b    @weapon_handler            ; JP $8209          ; 

* small bat handler
h_batlet:                              ; >8301
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; 
       jeq  !                          ; JP NZ,$85F0       ; 
       b    @delay_remove              ;                   
!
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       li   hl,num_creatures           ; LD HL,$5E25       ; number of creatures processed this frame
       ab   one,*hl                    ; INC (HL)          ; 
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; touching player?
       jne  !                          ; JP Z,$85EA        ; jump if so
       b    @hurt_and_pop              ;                   
!
       .call @chk_weapon_hit           ; CALL $8566        ; check if weapon has hit entity
       sb   one,@e                     ; DEC E             ; hit by weapon?
       jne  !                          ; JP Z,$875F        ; jump if so
       b    @pop_creature              ;                   
!
       sb   @>0f(ix),@>0f(ix)          ; LD (IX+$0F),$00   ; live for 256 frames in different room
       mov  @room_width,de             ; LD DE,($5E1D)     ; 
       movb @>09(ix),a                 ; LD A,(IX+$09)     ; movement counter
       ab   one,a                      ; INC A             ; 
       andi a,>0f00                    ; AND $0F           ; 16-frames between movement changes
       movb a,@>09(ix)                 ; LD (IX+$09),A     ; 
       jeq  !                          ; JP NZ,$833A       ; jump if no change
       b    @loc_833a                  ;                   
!
       movb r,a                        ; LD A,R            ; 
       andi a,>0700                    ; AND $07           ; 3-bit random behaviour
       movb a,@>08(ix)                 ; LD (IX+$08),A     ; 
loc_833a:                              ; >833a
       .call @get_rnd_velocity         ; CALL $83BA        ; random velocity used for batlet
       movb @bytes+>43,@>05(ix)        ; LD (IX+$05),$43   ; bright magenta
       jne  loc_8344                   ; JR NZ,$8344       ; jump if using first (decreasing) entry
       inc  hl                         ; INC HL            ; advance to second (increasing) entry
loc_8344:                              ; >8344
       movb *hl,a                      ; LD A,(HL)         ; get velocity from table
       movb @>08(ix),r0                ; BIT 1,(IX+$08)    ; random direction down?
       andi r0,>0200                   ;                   
       jne  loc_834d                   ; JR NZ,$834D       ; jump if so
       neg a                           ; NEG               ; invert to go up
loc_834d:                              ; >834d
       ab   @>04(ix),a                 ; ADD A,(IX+$04)    ; add velocity to ypos
       movb a,@c                       ; LD C,A            ; 
       sb   @bytes+>68,a               ; SUB $68           ; subtract room y centre
       joc  loc_835a                   ; JR C,$835A        ; TODO: check code. jump if in top screen half
       cb   a,d                        ; CP D              ; 
       jhe  loc_83a2                   ; JR NC,$83A2       ; 
       jmp  loc_835f                   ; JR $835F          ; 
loc_835a:                              ; >835a
       neg a                           ; NEG               ; abs
       cb   a,d                        ; CP D              ; within screen height?
       jhe  loc_83a8                   ; JR NC,$83A8       ; jump if not
loc_835f:                              ; >835f
       movb @c,@>04(ix)                ; LD (IX+$04),C     ; update ypos
loc_8362:                              ; >8362
       .call @get_rnd_velocity         ; CALL $83BA        ; random velocity used for batlet
       jeq  loc_8368                   ; JR Z,$8368        ; jump if using first (decreasing) entry
       inc  hl                         ; INC HL            ; advance to second (increasing) entry
loc_8368:                              ; >8368
       movb *hl,a                      ; LD A,(HL)         ; get velocity from table
       movb @>08(ix),r0                ; BIT 0,(IX+$08)    ; random direction right?
       andi r0,>0100                   ;                   
       jne  loc_8371                   ; JR NZ,$8371       ; jump if so
       neg a                           ; NEG               ; invert to go left
loc_8371:                              ; >8371
       ab   @>03(ix),a                 ; ADD A,(IX+$03)    ; add velocity to xpos
       movb a,@c                       ; LD C,A            ; 
       sb   @bytes+>58,a               ; SUB $58           ; subtract room x centre
       joc  loc_837e                   ; JR C,$837E        ; TODO: check code. jump if in left half
       cb   a,@e                       ; CP E              ; within room width?
       jhe  loc_83b4                   ; JR NC,$83B4       ; jump if not
       jmp  loc_8383                   ; JR $8383          ; 
loc_837e:                              ; >837e
       neg a                           ; NEG               ; abs
       cb   a,@e                       ; CP E              ; within room width?
       jhe  loc_83ae                   ; JR NC,$83AE       ; jump if not
loc_8383:                              ; >8383
       movb @c,@>03(ix)                ; LD (IX+$03),C     ; update xpos
       movb @>09(ix),a                 ; LD A,(IX+$09)     ; 
       srl  a,1                        ; RRA               ; TODO: check code. 
       srl  a,1                        ; RRA               ; TODO: check code. 1/4 animation rate
       andi a,>0100                    ; AND $01           ; 2 animation frames
       movb a,@c                       ; LD C,A            ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>fe00                    ; AND $FE           ; strip animation bit
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; set animation graphic
       movb @player,a                  ; LD A,($EA90)      ; 
       cb   a,@bytes+>31               ; CP $31            ; player active?
       jl   !                          ; JP NC,$875F       ; jump if not
       b    @pop_creature              ;                   
!
       b    @loc_8e8e                  ; JP $8E8E          ; 
loc_83a2:                              ; >83a2
       szcb @bits+1,@>08(ix)           ; RES 1,(IX+$08)    ; move left away from room bounds
       jmp  loc_8362                   ; JR $8362          ; 
loc_83a8:                              ; >83a8
       socb @bits+1,@>08(ix)           ; SET 1,(IX+$08)    ; move right away from room bounds
       jmp  loc_8362                   ; JR $8362          ; 
loc_83ae:                              ; >83ae
       socb @bits+0,@>08(ix)           ; SET 0,(IX+$08)    ; move down away from room bounds
       jmp  loc_8383                   ; JR $8383          ; 
loc_83b4:                              ; >83b4
       szcb @bits+0,@>08(ix)           ; RES 0,(IX+$08)    ; move up away from room bounds
       jmp  loc_8383                   ; JR $8383          ; 

* random velocity used for batlet
* 
* Used by the routine at #R$8301.
get_rnd_velocity:                      ; >83ba
       movb @>09(ix),@c                ; LD C,(IX+$09)     ; movement counter
       ; SLA C                         ; SLA C             ; * 2 bytes per entry
       sb   b,b                        ; LD B,$00          ; 
       li   hl,rnd_velocities          ; LD HL,$83CA       ; random velocities (0-3)
       a    bc,hl                      ; ADD HL,BC         ; 
       movb @>08(ix),r0                ; BIT 2,(IX+$08)    ; decide on using first or second entry
       andi r0,>0400                   ;                   
       .ret                            ; RET               ; 

* Data block at 83ca
rnd_velocities:                        ; >83ca
       byte >03,>00
       byte >03,>00                                                  ; random velocities (0-3)
       byte >03,>01
       byte >03,>01
       byte >03,>01
       byte >02,>02
       byte >02,>02
       byte >02,>02
       byte >02,>02
       byte >02,>02
       byte >02,>02
       byte >01,>03
       byte >01,>03
       byte >01,>03
       byte >00,>03
       byte >00,>03

* check whether to add new room creatures
* 
* Used by the routine at #R$8e26.
chk_creatures:                         ; >83ea
       movb @last_creat_room,a         ; LD A,($5E26)      ; last room creature created in
       movb a,@c                       ; LD C,A            ; 
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@c                       ; CP C              ; player in different room?
       jne  loc_844f                   ; JR NZ,$844F       ; jump if so
       li   hl,creature_delay          ; LD HL,$5E27       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; time to appear?
       jeq  loc_8458                   ; JR Z,$8458        ; jump if so
       sb   one,*hl                    ; DEC (HL)          ; reduce delay timer
       jeq  !                          ; RET NZ            ; return if not yet time
       .ret                            ;                   
!
add_creature:                          ; >83fd
       equ  $
       li   hl,creature1               ; LD HL,$EE60       ; first creature slot
       li   de,>0010                   ; LD DE,$0010       ; 16 bytes per creature
       movb @bytes+>03,b               ; LD B,$03          ; 3 room creatures
loc_8405:                              ; >8405
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; free slot?
       jeq  loc_840d                   ; JR Z,$840D        ; jump if so
       a    de,hl                      ; ADD HL,DE         ; 
       sb   one,b                      ; DJNZ $8405        ; 
       jne  loc_8405                   ;                   
       .ret                            ; RET               ; no free slots
loc_840d:                              ; >840d
       .ex_de_hl                       ; EX DE,HL          ; 
       li   hl,creature_default        ; LD HL,$8B6A       ; default entity data for creature
       li   bc,>0010                   ; LD BC,$0010       ; 16 bytes of entity data
       .push de                        ; PUSH DE           ; 
       .ldir                           ; LDIR              ; copy template
       .pop hl                         ; POP HL            ; 
       .push hl                        ; PUSH HL           ; 
       inc  hl                         ; INC HL            ; 
       movb @player_room,a             ; LD A,($EA91)      ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       .push hl                        ; PUSH HL           ; 
       li   hl,creatures               ; LD HL,$8B7A       ; creature table
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       andi a,>0f00                    ; AND $0F           ; 16 creatures entries to choose from
       movb a,@e                       ; LD E,A            ; 
       sb   d,d                        ; LD D,$00          ; 
       a    de,hl                      ; ADD HL,DE         ; 
       movb *hl,a                      ; LD A,(HL)         ; new creature graphic
       .pop hl                         ; POP HL            ; 
       movb a,*hl                      ; LD (HL),A         ; set graphic
       mov  @room_width,de             ; LD DE,($5E1D)     ; 
       movb @e,b                       ; LD B,E            ; 
       .call @rnd_coord                ; CALL $8598        ; random coord less than interior size B
       movb a,*hl                      ; LD (HL),A         ; set x
       movb d,b                        ; LD B,D            ; 
       .call @rnd_coord                ; CALL $8598        ; random coord less than interior size B
       movb a,*hl                      ; LD (HL),A         ; set y
       .pop de                         ; POP DE            ; 
       .push ix                        ; PUSH IX           ; 
       li   ix,>0000                   ; LD IX,$0000       ; 
       a    de,ix                      ; ADD IX,DE         ; 
       .call @rnd_movement             ; CALL $86F2        ; set random movement
       .call @draw_entity              ; CALL $9F4A        ; draw entity graphic (no attrs)
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 
loc_844f:                              ; >844f
       movb a,@last_creat_room         ; LD ($5E26),A      ; 
       movb @bytes+>20,a               ; LD A,$20          ; delay 32 frames before next creature
       movb a,@creature_delay          ; LD ($5E27),A      ; 
       .ret                            ; RET               ; 
loc_8458:                              ; >8458
       movb r,a                        ; LD A,R            ; 
       andi a,>0f00                    ; AND $0F           ; 1/16 chance of appearing
       jeq  !                          ; RET NZ            ; return if not
       .ret                            ;                   
!
       jmp  add_creature               ; JR $83FD          ; add creature

* pumpkin and spider handler
h_pumpkin_spider:                      ; >845f
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  !                          ; JP NZ,$85F0       ; jump if not
       b    @delay_remove              ;                   
!
       li   hl,num_creatures           ; LD HL,$5E25       ; number of creatures processed this frame
       ab   one,*hl                    ; INC (HL)          ; 
       .call @chk_weapon_hit           ; CALL $8566        ; check if weapon has hit entity
       sb   one,@e                     ; DEC E             ; hit by weapon?
       jne  !                          ; JP Z,$875F        ; jump if so
       b    @pop_creature              ;                   
!
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; touching player?
       jne  !                          ; JP Z,$85EA        ; jump if so
       b    @hurt_and_pop              ;                   
!
       mov  @room_width,de             ; LD DE,($5E1D)     ; 
       sb   @>0f(ix),@>0f(ix)          ; LD (IX+$0F),$00   ; live for 256 frames in different room
       movb @bytes+>46,@>05(ix)        ; LD (IX+$05),$46   ; bright yellow
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; 
       andi a,>0f00                    ; AND $0F           ; 4-bit animation counter 0?
       jne  loc_8497                   ; JR NZ,$8497       ; jump if not
       movb r,a                        ; LD A,R            ; 
       andi a,>0300                    ; AND $03           ; 2-bit random x and y direction
       movb a,@>06(ix)                 ; LD (IX+$06),A     ; set directions
loc_8497:                              ; >8497
       movb @>07(ix),r0                ; BIT 0,(IX+$07)    ; unchanged movement this frame?
       andi r0,>0100                   ;                   
       jne  loc_84bf                   ; JR NZ,$84BF       ; jump if so
       movb @>06(ix),r0                ; BIT 0,(IX+$06)    ; move left?
       andi r0,>0100                   ;                   
       jne  !                          ; JP Z,$854A        ; jump if so
       b    @loc_854a                  ;                   
!
       movb @>08(ix),a                 ; LD A,(IX+$08)     ; 
       cb   a,@bytes+>02               ; CP $02            ; at right speed limit?
       jeq  loc_84ae                   ; JR Z,$84AE        ; jump if so
       ab   one,@>08(ix)               ; INC (IX+$08)      ; faster right
loc_84ae:                              ; >84ae
       movb @>06(ix),r0                ; BIT 1,(IX+$06)    ; move up?
       andi r0,>0200                   ;                   
       jne  !                          ; JP Z,$8558        ; jump if so
       b    @loc_8558                  ;                   
!
       movb @>09(ix),a                 ; LD A,(IX+$09)     ; 
       cb   a,@bytes+>02               ; CP $02            ; at down speed limit?
       jeq  loc_84bf                   ; JR Z,$84BF        ; jump if so
       ab   one,@>09(ix)               ; INC (IX+$09)      ; faster down
loc_84bf:                              ; >84bf
       ab   one,@>07(ix)               ; INC (IX+$07)      ; increase animation counter
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; 
       andi a,>0100                    ; AND $01           ; 2 animation frames
       ; XOR (IX+$00)                  ; XOR (IX+$00)      ; combine, for 1/2 animation rate
       movb a,*ix                      ; LD (IX+$00),A     ; set animation graphic
* This entry point is used by the routines at #R$862e, #R$8672, #R$871a,
* #R$87a6, #R$8988, #R$8a2f, #R$8a80 and #R$8aff.
monster_move:                          ; >84cd
       movb @>03(ix),a                 ; LD A,(IX+$03)     ; xpos
       ab   @>08(ix),a                 ; ADD A,(IX+$08)    ; add x velocity
       movb a,@c                       ; LD C,A            ; save new xpos
       sb   @bytes+>58,a               ; SUB $58           ; subtract room centre x
       joc  loc_84e8                   ; JR C,$84E8        ; TODO: check code. jump if negative (left half)
       cb   a,@e                       ; CP E              ; within room width?
       jl   loc_84f8                   ; JR C,$84F8        ; jump if so
       szcb @bits+0,@>06(ix)           ; RES 0,(IX+$06)    ; set direction to left
       movb @b254,@>08(ix)             ; LD (IX+$08),$FE   ; bounce left away from wall
       movb @>03(ix),@c                ; LD C,(IX+$03)     ; current xpos
       jmp  loc_84f8                   ; JR $84F8          ; 
loc_84e8:                              ; >84e8
       neg a                           ; NEG               ; abs
       cb   a,@e                       ; CP E              ; within room width?
       jl   loc_84f8                   ; JR C,$84F8        ; jump if so
       socb @bits+0,@>06(ix)           ; SET 0,(IX+$06)    ; set direction to right
       movb @>03(ix),@c                ; LD C,(IX+$03)     ; current xpos
       movb @bytes+>02,@>08(ix)        ; LD (IX+$08),$02   ; bounce right away from wall
loc_84f8:                              ; >84f8
       movb @>04(ix),a                 ; LD A,(IX+$04)     ; ypos
       ab   @>09(ix),a                 ; ADD A,(IX+$09)    ; add y velocity
       movb a,b                        ; LD B,A            ; save new ypos
       sb   @bytes+>68,a               ; SUB $68           ; subtract room centre y
       joc  loc_8513                   ; JR C,$8513        ; TODO: check code. jump if negative (top half)
       cb   a,d                        ; CP D              ; within screen height?
       jl   loc_8523                   ; JR C,$8523        ; jump if so
       szcb @bits+1,@>06(ix)           ; RES 1,(IX+$06)    ; set direction to up
       movb @b254,@>09(ix)             ; LD (IX+$09),$FE   ; bounce up away from wall
       movb @>04(ix),b                 ; LD B,(IX+$04)     ; current ypos
       jmp  loc_8523                   ; JR $8523          ; 
loc_8513:                              ; >8513
       neg a                           ; NEG               ; abs
       cb   a,d                        ; CP D              ; within screen height?
       jl   loc_8523                   ; JR C,$8523        ; jump if so
       socb @bits+1,@>06(ix)           ; SET 1,(IX+$06)    ; set direction to down
       movb @>04(ix),b                 ; LD B,(IX+$04)     ; 
       movb @bytes+>02,@>09(ix)        ; LD (IX+$09),$02   ; bounce down away from wall
loc_8523:                              ; >8523
       movb @c,@>03(ix)                ; LD (IX+$03),C     ; set new xpos
       movb b,@>04(ix)                 ; LD (IX+$04),B     ; set new ypos
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  !                          ; RET NZ            ; return if not
       .ret                            ;                   
!
       movb *ix,a                      ; LD A,(IX+$00)     ; entity graphic
       andi a,>fc00                    ; AND $FC           ; strip 2 animation bits
       cb   a,@bytes+>9c               ; CP $9C            ; is it hunchback?
       jeq  keep_special               ; JR Z,$8547        ; jump if so
       andi a,>f000                    ; AND $F0           ; 
       cb   a,@bytes+>70               ; CP $70            ; is it mummy/frankenstein/devil/dracula?
       jeq  keep_special               ; JR Z,$8547        ; jump if so
       movb @player,a                  ; LD A,($EA90)      ; 
       cb   a,@bytes+>31               ; CP $31            ; is player active?
       jl   !                          ; JP NC,$875F       ; jump if not (pop non-special creature types)
       b    @pop_creature              ;                   
!
keep_special:                          ; >8547
       equ  $
       b    @loc_8e8e                  ; JP $8E8E          ; 
loc_854a:                              ; >854a
       movb @>08(ix),a                 ; LD A,(IX+$08)     ; 
       cb   a,@b254                    ; CP $FE            ; at left speed limit?
       jne  !                          ; JP Z,$84AE        ; jump if so
       b    @loc_84ae                  ;                   
!
       sb   one,@>08(ix)               ; DEC (IX+$08)      ; faster left
       b    @loc_84ae                  ; JP $84AE          ; 
loc_8558:                              ; >8558
       movb @>09(ix),a                 ; LD A,(IX+$09)     ; 
       cb   a,@b254                    ; CP $FE            ; at up speed limit?
       jne  !                          ; JP Z,$84BF        ; jump if so
       b    @loc_84bf                  ;                   
!
       sb   one,@>09(ix)               ; DEC (IX+$09)      ; faster up
       b    @loc_84bf                  ; JP $84BF          ; 

* check if weapon has hit entity
* 
* Used by the routines at #R$8301, #R$845f, #R$862e, #R$8672, #R$871a, #R$87a6,
* #R$8a2f and #R$8a80.
chk_weapon_hit:                        ; >8566
       movb @weapon+>0001,a            ; LD A,($EA99)      ; weapon room
       sb   @e,@e                      ; LD E,$00          ; no weapon hit detected
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in entity room?
       jeq  !                          ; RET NZ            ; return if not
       .ret                            ;                   
!
       movb @weapon,a                  ; LD A,($EA98)      ; 
       ; AND A                         ; AND A             ; is weapon active?
       jne  !                          ; RET Z             ; return if not
       .ret                            ;                   
!
       movb @weapon+>0003,a            ; LD A,($EA9B)      ; weapon xpos
       sb   @>03(ix),a                 ; SUB (IX+$03)      ; subtract entity x
       ; JP P,$857F                    ; JP P,$857F        ; jump if postive
       neg a                           ; NEG               ; abs
loc_857f:                              ; >857f
       cb   a,@bytes+>0c               ; CP $0C            ; within weapon x size?
       jl   !                          ; RET NC            ; return if not
       .ret                            ;                   
!
       movb @weapon+>0004,a            ; LD A,($EA9C)      ; weapon ypos
       sb   @>04(ix),a                 ; SUB (IX+$04)      ; subtract entity y
       ; JP P,$858D                    ; JP P,$858D        ; jump if positive
       neg a                           ; NEG               ; abs
loc_858d:                              ; >858d
       cb   a,@bytes+>0c               ; CP $0C            ; within weapon y size?
       jl   !                          ; RET NC            ; return if not
       .ret                            ;                   
!
       movb one,a                      ; LD A,$01          ; 1 frame before removal
       movb a,@weapon+>0002            ; LD ($EA9A),A      ; set weapon frames left
       movb one,@e                     ; LD E,$01          ; weapon hit detected
       .ret                            ; RET               ; 

* random coord less than interior size B
* 
* Used by the routine at #R$83ea.
rnd_coord:                             ; >8598
       movb b,a                        ; LD A,B            ; 
       sb   @bytes+>08,a               ; SUB $08           ; 
       movb a,b                        ; LD B,A            ; 
       movb r,a                        ; LD A,R            ; 
       inc  hl                         ; INC HL            ; 
loc_859f:                              ; >859f
       cb   a,b                        ; CP B              ; 
       jl   loc_85a5                   ; JR C,$85A5        ; 
       sb   b,a                        ; SUB B             ; 
       jmp  loc_859f                   ; JR $859F          ; 
loc_85a5:                              ; >85a5
       movb a,@c                       ; LD C,A            ; 
       movb r,a                        ; LD A,R            ; 
       movb a,r0                       ; BIT 1,A           ; 
       andi r0,>0200                   ;                   
       movb @bytes+>60,a               ; LD A,$60          ; 
       jeq  loc_85b0                   ; JR Z,$85B0        ; 
       ab   @c,a                       ; ADD A,C           ; 
       .ret                            ; RET               ; 
loc_85b0:                              ; >85b0
       sb   @c,a                       ; SUB C             ; 
       .ret                            ; RET               ; 

* check if enemy is touching player (returns E=1)
* 
* Used by the routines at #R$8301, #R$845f, #R$862e, #R$8672, #R$871a, #R$87a6,
* #R$8862, #R$8906, #R$8988, #R$89ed, #R$8a2f, #R$8a80 and #R$8aff.
enemy_touching:                        ; >85b2
       movb @player_room,a             ; LD A,($EA91)      ; 
       sb   @e,@e                      ; LD E,$00          ; is not touching player
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  !                          ; RET NZ            ; return if not
       .ret                            ;                   
!
       movb @player,a                  ; LD A,($EA90)      ; 
       ; AND A                         ; AND A             ; does player exist?
       jne  !                          ; RET Z             ; return if not
       .ret                            ;                   
!
       cb   a,@bytes+>31               ; CP $31            ; active player?
       jl   !                          ; RET NC            ; return if not
       .ret                            ;                   
!
       movb @player_x,a                ; LD A,($EA93)      ; 
       sb   @>03(ix),a                 ; SUB (IX+$03)      ; right of player?
       ; JP P,$85CE                    ; JP P,$85CE        ; jump if not
       neg a                           ; NEG               ; abs
loc_85ce:                              ; >85ce
       cb   a,@bytes+>0c               ; CP $0C            ; too far from player?
       jl   !                          ; RET NC            ; return if so
       .ret                            ;                   
!
       movb @player_y,a                ; LD A,($EA94)      ; 
       sb   @>04(ix),a                 ; SUB (IX+$04)      ; below player?
       ; JP P,$85DC                    ; JP P,$85DC        ; jump if not
       neg a                           ; NEG               ; abs
loc_85dc:                              ; >85dc
       cb   a,@bytes+>0c               ; CP $0C            ; too far from player?
       jl   !                          ; RET NC            ; return if so
       .ret                            ;                   
!
       movb one,a                      ; LD A,$01          ; 
       movb a,@player_contact          ; LD ($EA92),A      ; 
       .call @touching_sound           ; CALL $A3E5        ; play monster touched sound
       movb one,@e                     ; LD E,$01          ; is touching player
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$8301, #R$845f, #R$862e,
* #R$8672, #R$871a, #R$87a6, #R$8a2f and #R$8a80.
hurt_and_pop:                          ; >85ea
       .call @damage_32                ; CALL $8ED7        ; reduce health by 32
       b    @pop_creature              ; JP $875F          ; 
* This entry point is used by the routines at #R$8301, #R$845f, #R$85f7,
* #R$862e, #R$8672, #R$871a, #R$8787, #R$87a6, #R$8a2f and #R$8a80.
delay_remove:                          ; >85f0
       sb   one,@>0f(ix)               ; DEC (IX+$0F)      ; auto-remove timer for monsters
       jeq  !                          ; RET NZ            ; return if still alive
       .ret                            ;                   
!
       b    @remove_entity             ; JP $827E          ; 

* monster appearance sparkle handler
h_sparkles:                            ; >85f7
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  !                          ; JP NZ,$85F0       ; jump if not
       b    @delay_remove              ;                   
!
       li   hl,num_creatures           ; LD HL,$5E25       ; number of creatures processed this frame
       ab   one,*hl                    ; INC (HL)          ; 
       sb   one,@>0e(ix)               ; DEC (IX+$0E)      ; sparkled long enough?
       jeq  to_creature                ; JR Z,$8625        ; jump if so
       movb @>0e(ix),a                 ; LD A,(IX+$0E)     ; 
       andi a,>0300                    ; AND $03           ; 4 animation frames
       ab   @bytes+>58,a               ; ADD A,$58         ; base sparkle graphic
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb @bytes+>80,@>0f(ix)        ; LD (IX+$0F),$80   ; live for 128 frames outside player room
       movb @player,a                  ; LD A,($EA90)      ; 
       cb   a,@bytes+>31               ; CP $31            ; player active?
       jl   !                          ; JP NC,$875F       ; jump if not
       b    @pop_creature              ;                   
!
       b    @loc_8e8e                  ; JP $8E8E          ; 
to_creature:                           ; >8625
       movb @>02(ix),a                 ; LD A,(IX+$02)     ; creature graphic
       movb a,*ix                      ; LD (IX+$00),A     ; convert sparkle to creature
       b    @loc_8e8e                  ; JP $8E8E          ; 

* small ghost handler
h_ghostlet:                            ; >862e
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  !                          ; JP NZ,$85F0       ; jump if not
       b    @delay_remove              ;                   
!
       li   hl,num_creatures           ; LD HL,$5E25       ; number of creatures processed this frame
       ab   one,*hl                    ; INC (HL)          ; 
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; touching player?
       jne  !                          ; JP Z,$85EA        ; jump if so
       b    @hurt_and_pop              ;                   
!
       .call @chk_weapon_hit           ; CALL $8566        ; check if weapon has hit entity
       sb   one,@e                     ; DEC E             ; hit by weapon?
       jne  !                          ; JP Z,$875F        ; jump if so
       b    @pop_creature              ;                   
!
       movb @bytes+>45,@>05(ix)        ; LD (IX+$05),$45   ; bright cyan
       ab   one,@>07(ix)               ; INC (IX+$07)      ; increment movement counter
       jne  !                          ; CALL Z,$86F2      ; change movement every 256 frames
       .call @rnd_movement             ;                   
!
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; 
       srl  a,1                        ; RRA               ; TODO: check code. 
       srl  a,1                        ; RRA               ; TODO: check code. 1/4 animation rate
       andi a,>0100                    ; AND $01           ; 2 animation frames
       movb a,@c                       ; LD C,A            ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>fe00                    ; AND $FE           ; strip animation bit
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; set animation graphic
       mov  @room_width,de             ; LD DE,($5E1D)     ; 
       sb   @>0f(ix),@>0f(ix)          ; LD (IX+$0F),$00   ; live for 256 frames in different room
       b    @monster_move              ; JP $84CD          ; common monster movement

* spikey ghost handler
h_spikey_ghost:                        ; >8672
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  !                          ; JP NZ,$85F0       ; jump if not
       b    @delay_remove              ;                   
!
       li   hl,num_creatures           ; LD HL,$5E25       ; number of creatures processed this frame
       ab   one,*hl                    ; INC (HL)          ; 
       sb   @>0f(ix),@>0f(ix)          ; LD (IX+$0F),$00   ; live for 256 frames in different room
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; touching player?
       jne  !                          ; JP Z,$85EA        ; jump if so
       b    @hurt_and_pop              ;                   
!
       .call @chk_weapon_hit           ; CALL $8566        ; check if weapon has hit entity
       sb   one,@e                     ; DEC E             ; hit by weapon?
       jne  !                          ; JP Z,$875F        ; jump if so
       b    @pop_creature              ;                   
!
       movb @>0a(ix),a                 ; LD A,(IX+$0A)     ; vertical velocity
       srl  a,1                        ; RRA               ; TODO: check code. 1/2 animation rate
       andi a,>0100                    ; AND $01           ; 2 animation frames
       movb a,@c                       ; LD C,A            ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>fe00                    ; AND $FE           ; strip animation bit
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; set graphic
       mov  @room_width,de             ; LD DE,($5E1D)     ; 
       ab   one,@>0a(ix)               ; INC (IX+$0A)      ; bounce speed
       movb @>0a(ix),a                 ; LD A,(IX+$0A)     ; 
       cb   a,@bytes+>07               ; CP $07            ; max bounce speed?
       jne  loc_86b9                   ; JR NZ,$86B9       ; jump if not
       .call @rnd_movement             ; CALL $86F2        ; random vertical offset
       movb @bytes+>f9,@>0a(ix)        ; LD (IX+$0A),$F9   ; bounce back up
loc_86b9:                              ; >86b9
       sra  a,1                        ; SRA A             ; 1/2 bounce speed
       ab   @>04(ix),a                 ; ADD A,(IX+$04)    ; add to y position
       movb a,@c                       ; LD C,A            ; save result
       sb   @bytes+>68,a               ; SUB $68           ; subtract vertical centre
       ; JP P,$86E1                    ; JP P,$86E1        ; jump if positive (lower screen half)
       neg a                           ; NEG               ; abs
       cb   a,d                        ; CP D              ; out of screen top?
       jl   loc_86db                   ; JR C,$86DB        ; jump if not
       movb @bytes+>02,@>09(ix)        ; LD (IX+$09),$02   ; kick down away from wall
       socb @bits+1,@>06(ix)           ; SET 1,(IX+$06)    ; 
       movb @>0a(ix),r0                ; BIT 7,(IX+$0A)    ; 
       andi r0,>8000                   ;                   
       jeq  loc_86db                   ; JR Z,$86DB        ; 
       sb   @>0a(ix),@>0a(ix)          ; LD (IX+$0A),$00   ; 
loc_86db:                              ; >86db
       movb @c,@>04(ix)                ; LD (IX+$04),C     ; set y position
       b    @monster_move              ; JP $84CD          ; common monster movement
loc_86e1:                              ; >86e1
       cb   a,d                        ; CP D              ; out of screen bottom?
       jl   loc_86db                   ; JR C,$86DB        ; jump if not
       szcb @bits+1,@>06(ix)           ; RES 1,(IX+$06)    ; 
       movb @b254,@>09(ix)             ; LD (IX+$09),$FE   ; kick up away from wall
       movb @bytes+>f9,@>0a(ix)        ; LD (IX+$0A),$F9   ; bounce back up at -7 pixels/frame
       jmp  loc_86db                   ; JR $86DB          ; 

* set random movement
* 
* Used by the routines at #R$83ea, #R$862e, #R$8672, #R$871a, #R$8a2f and
* #R$8a80.
rnd_movement:                          ; >86f2
       movb r,a                        ; LD A,R            ; 
       movb a,r0                       ; BIT 0,A           ; use x speed of 1?
       andi r0,>0100                   ;                   
       jeq  rnd_move_y1                ; JR Z,$870E        ; jump if so
       andi a,>0400                    ; AND $04           ; 
       sb   @bytes+>02,a               ; SUB $02           ; y velocity is +/- 2
loc_86fc:                              ; >86fc
       movb a,@>09(ix)                 ; LD (IX+$09),A     ; set y something?
       movb r,a                        ; LD A,R            ; 
       srl  a,1                        ; RRA               ; TODO: check code. 
       movb a,r0                       ; BIT 0,A           ; use y speed of 1?
       andi r0,>0100                   ;                   
       jeq  rnd_move_x1                ; JR Z,$8714        ; jump if so
       andi a,>0400                    ; AND $04           ; 
       sb   @bytes+>02,a               ; SUB $02           ; x velocity is +/- 2
loc_870a:                              ; >870a
       movb a,@>08(ix)                 ; LD (IX+$08),A     ; set x something?
       .ret                            ; RET               ; 
rnd_move_y1:                           ; >870e
       andi a,>0200                    ; AND $02           ; 
       sb   one,a                      ; SUB $01           ; y velocity is +/- 1
       jmp  loc_86fc                   ; JR $86FC          ; 
rnd_move_x1:                           ; >8714
       andi a,>0200                    ; AND $02           ; 
       sb   one,a                      ; SUB $01           ; x velocity is +/- 1
       jmp  loc_870a                   ; JR $870A          ; 

* Routine at 871a
h_blob:                                ; >871a
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; 
       jeq  !                          ; JP NZ,$85F0       ; 
       b    @delay_remove              ;                   
!
       li   hl,num_creatures           ; LD HL,$5E25       ; number of creatures processed this frame
       ab   one,*hl                    ; INC (HL)          ; 
       sb   @>0f(ix),@>0f(ix)          ; LD (IX+$0F),$00   ; live for 256 frames in different room
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; touching player?
       jne  !                          ; JP Z,$85EA        ; jump if so
       b    @hurt_and_pop              ;                   
!
       .call @chk_weapon_hit           ; CALL $8566        ; check if weapon has hit entity
       sb   one,@e                     ; DEC E             ; hit by weapon?
       jne  !                          ; JP Z,$875F        ; jump if so
       b    @pop_creature              ;                   
!
       mov  @room_width,de             ; LD DE,($5E1D)     ; 
       sb   one,@>0d(ix)               ; DEC (IX+$0D)      ; 
       jne  loc_874c                   ; JR NZ,$874C       ; 
       movb @bytes+>11,@>0d(ix)        ; LD (IX+$0D),$11   ; 
       .call @rnd_movement             ; CALL $86F2        ; set random movement
loc_874c:                              ; >874c
       movb @>0d(ix),a                 ; LD A,(IX+$0D)     ; 
       srl  a,1                        ; RRA               ; TODO: check code. 
       andi a,>0100                    ; AND $01           ; 2 animation frames
       movb a,@c                       ; LD C,A            ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>fe00                    ; AND $FE           ; clear b0
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       b    @monster_move              ; JP $84CD          ; common monster movement
* This entry point is used by the routines at #R$8301, #R$845f, #R$85b2,
* #R$85f7, #R$862e, #R$8672, #R$87a6, #R$8988, #R$8a2f and #R$8a80.
pop_creature:                          ; >875f
       movb @>05(ix),a                 ; LD A,(IX+$05)     ; save creature attr
       .push af                        ; PUSH AF           ; 
       movb @room_attr,a               ; LD A,($5E1A)      ; 
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; undraw to room attr
       .call @undraw_entity            ; CALL $9F56        ; 
       .call @set_entity_attrs2        ; CALL $A01A        ; set attrs covering previous and new position
       .pop af                         ; POP AF            ; 
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; 
       movb @bytes+>6c,*ix             ; LD (IX+$00),$6C   ; base pop graphic
       movb @bytes+>10,@>0e(ix)        ; LD (IX+$0E),$10   ; 16 animation frames (4 loops of 4)
       li   bc,>0155                   ; LD BC,$0155       ; 
       .call @add_score_bc_bcd         ; CALL $A19C        ; add 155 score
       .call @draw_entity              ; CALL $9F4A        ; draw entity graphic (no attrs)
       b    @set_entity_attrs2         ; JP $A01A          ; set attrs covering previous and new position

* creature death pop animation handler
h_pop:                                 ; >8787
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  !                          ; JP NZ,$85F0       ; jump if not
       b    @delay_remove              ;                   
!
       sb   one,@>0e(ix)               ; DEC (IX+$0E)      ; final animation frame?
       jne  !                          ; JP Z,$826F        ; jump if so
       b    @loc_826f                  ;                   
!
       movb @>0e(ix),a                 ; LD A,(IX+$0E)     ; 
       andi a,>0300                    ; AND $03           ; 4 animation frames
       ab   @bytes+>6c,a               ; ADD A,$6C         ; base pop graphic
       movb a,*ix                      ; LD (IX+$00),A     ; set animation graphic
       b    @loc_8e8e                  ; JP $8E8E          ; 

* Ghoul handler
h_ghoul:                               ; >87a6
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  !                          ; JP NZ,$85F0       ; jump if not
       b    @delay_remove              ;                   
!
       li   hl,num_creatures           ; LD HL,$5E25       ; number of creatures processed this frame
       ab   one,*hl                    ; INC (HL)          ; 
       .call @chk_weapon_hit           ; CALL $8566        ; check if weapon has hit entity
       sb   one,@e                     ; DEC E             ; hit by weapon?
       jne  !                          ; JP Z,$875F        ; jump if so
       b    @pop_creature              ;                   
!
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; touching player?
       jne  !                          ; JP Z,$85EA        ; jump if so
       b    @hurt_and_pop              ;                   
!
       mov  @room_width,de             ; LD DE,($5E1D)     ; 
       sb   @>0f(ix),@>0f(ix)          ; LD (IX+$0F),$00   ; live for 256 frames in different room
       movb @bytes+>46,@>05(ix)        ; LD (IX+$05),$46   ; bright yellow
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; 
       andi a,>0700                    ; AND $07           ; 3-bit animation counter 0?
       jne  loc_87de                   ; JR NZ,$87DE       ; jump if not
       movb r,a                        ; LD A,R            ; 
       andi a,>0300                    ; AND $03           ; 2-bit random direction
       movb a,@>06(ix)                 ; LD (IX+$06),A     ; set directions
loc_87de:                              ; >87de
       movb @>07(ix),r0                ; BIT 0,(IX+$07)    ; alternating behaviour &0eac frame
       andi r0,>0100                   ;                   
       jne  loc_8804                   ; JR NZ,$8804       ; jump if odd frame (continue movement)
       movb @>06(ix),r0                ; BIT 0,(IX+$06)    ; moving left?
       andi r0,>0100                   ;                   
       jeq  loc_8815                   ; JR Z,$8815        ; jump if so
       movb @>08(ix),a                 ; LD A,(IX+$08)     ; 
       cb   a,@bytes+>02               ; CP $02            ; at right speed limit?
       jeq  loc_87f4                   ; JR Z,$87F4        ; jump if so
       ab   one,@>08(ix)               ; INC (IX+$08)      ; faster right
loc_87f4:                              ; >87f4
       movb @>06(ix),r0                ; BIT 1,(IX+$06)    ; moving up?
       andi r0,>0200                   ;                   
       jeq  loc_8821                   ; JR Z,$8821        ; jump if so
       movb @>09(ix),a                 ; LD A,(IX+$09)     ; 
       cb   a,@bytes+>02               ; CP $02            ; at down speed limit?
       jeq  loc_8804                   ; JR Z,$8804        ; jump if so
       ab   one,@>09(ix)               ; INC (IX+$09)      ; faster down
loc_8804:                              ; >8804
       ab   one,@>07(ix)               ; INC (IX+$07)      ; increase animation counter
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; 
       andi a,>0100                    ; AND $01           ; 2 animation frames
       ; XOR (IX+$00)                  ; XOR (IX+$00)      ; gives 1/2 animation rate
       movb a,*ix                      ; LD (IX+$00),A     ; 
       b    @monster_move              ; JP $84CD          ; common monster movement
loc_8815:                              ; >8815
       movb @>08(ix),a                 ; LD A,(IX+$08)     ; 
       cb   a,@b254                    ; CP $FE            ; at left speed limit?
       jeq  loc_87f4                   ; JR Z,$87F4        ; jump if so
       sb   one,@>08(ix)               ; DEC (IX+$08)      ; faster left
       jmp  loc_87f4                   ; JR $87F4          ; 
loc_8821:                              ; >8821
       movb @>09(ix),a                 ; LD A,(IX+$09)     ; 
       cb   a,@b254                    ; CP $FE            ; at up speed limit?
       jeq  loc_8804                   ; JR Z,$8804        ; jump if so
       sb   one,@>09(ix)               ; DEC (IX+$09)      ; faster up
       jmp  loc_8804                   ; JR $8804          ; 

* set movement towards coords in DE
* 
* Used by the routines at #R$8862, #R$8906, #R$8988, #R$89ed and #R$8aff.
attract_de:                            ; >882d
       sb   @c,@c                      ; LD C,$00          ; 
       movb d,a                        ; LD A,D            ; 
       cb   a,@>04(ix)                 ; CP (IX+$04)       ; ypos match?
       jeq  loc_8848                   ; JR Z,$8848        ; jump if so
       jnc  loc_8850                   ; JR NC,$8850       ; TODO: check code. jump if greater (move down)
       movb @b255,@>09(ix)             ; LD (IX+$09),$FF   ; move up
loc_883b:                              ; >883b
       movb @e,a                       ; LD A,E            ; 
       cb   a,@>03(ix)                 ; CP (IX+$03)       ; same xpos?
       jeq  loc_8856                   ; JR Z,$8856        ; jump if so
       jnc  loc_885d                   ; JR NC,$885D       ; TODO: check code. jump if greater (move right)
       movb @b255,@>08(ix)             ; LD (IX+$08),$FF   ; move left
       .ret                            ; RET               ; 
loc_8848:                              ; >8848
       sb   @>09(ix),@>09(ix)          ; LD (IX+$09),$00   ; no y movement
       socb @bits+0,@c                 ; SET 0,C           ; flag same ypos
       jmp  loc_883b                   ; JR $883B          ; 
loc_8850:                              ; >8850
       movb one,@>09(ix)               ; LD (IX+$09),$01   ; move down
       jmp  loc_883b                   ; JR $883B          ; 
loc_8856:                              ; >8856
       sb   @>08(ix),@>08(ix)          ; LD (IX+$08),$00   ; no x movement
       socb @bits+1,@c                 ; SET 1,C           ; flag same xpos
       .ret                            ; RET               ; 
loc_885d:                              ; >885d
       movb one,@>08(ix)               ; LD (IX+$08),$01   ; move right
       .ret                            ; RET               ; 

* Mummy handler
h_mummy:                               ; >8862
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; touching player?
       jne  !                          ; CALL Z,$8A1E      ; call if so (reduce health by 8)
       .call @damage_8                 ;                   
!
       li   hl,leaf                    ; LD HL,$EAE0       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; does leaf exist?
       jeq  loc_8881                   ; JR Z,$8881        ; jump if not
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; is leaf in mummy room?
       jne  loc_8881                   ; JR NZ,$8881       ; jump if not
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,@e                     ; LD E,(HL)         ; leaf x
       inc  hl                         ; INC HL            ; 
       movb *hl,d                      ; LD D,(HL)         ; leaf y
       jmp  loc_88d7                   ; JR $88D7          ; leaf attracts mummy
loc_8881:                              ; >8881
       movb @>06(ix),r0                ; BIT 7,(IX+$06)    ; is mummy angry with player?
       andi r0,>8000                   ;                   
       jne  loc_88fd                   ; JR NZ,$88FD       ; jump if so
       li   hl,red_key                 ; LD HL,$EAC8       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; does red key exist?
       jeq  loc_88f9                   ; JR Z,$88F9        ; jump if not
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; is red key in mummy room?
       jne  loc_88f9                   ; JR NZ,$88F9       ; jump if not
       movb @>0c(ix),d                 ; LD D,(IX+$0C)     ; current target x
       movb @>0b(ix),@e                ; LD E,(IX+$0B)     ; current target y
       .call @attract_de               ; CALL $882D        ; set movement towards coords in DE
       movb @c,a                       ; LD A,C            ; 
       cb   a,@bytes+>03               ; CP $03            ; reached target x+y position?
       jeq  loc_88b5                   ; JR Z,$88B5        ; jump if so
loc_88a3:                              ; >88a3
       movb @counter_low,a             ; LD A,($5E12)      ; 
       srl  a,1                        ; RRA               ; TODO: check code. 
       srl  a,1                        ; RRA               ; TODO: check code. 
       andi a,>0300                    ; AND $03           ; 4 animation frames
       ab   @bytes+>70,a               ; ADD A,$70         ; base mummy graphic
       movb a,*ix                      ; LD (IX+$00),A     ; set animation graphic
       li   de,>3838                   ; LD DE,$3838       ; allowed to roam 56x56 from room centre
       b    @chk_move_away             ; JP $89BB          ; 
loc_88b5:                              ; >88b5
       movb @>06(ix),r0                ; BIT 6,(IX+$06)    ; moving up/left?
       andi r0,>4000                   ;                   
       jeq  loc_88c9                   ; JR Z,$88C9        ; jump if so
       movb @bytes+>8c,@>0b(ix)        ; LD (IX+$0B),$8C   ; new target x
       movb @bytes+>68,@>0c(ix)        ; LD (IX+$0C),$68   ; new target y (below red key)
       szcb @bits+6,@>06(ix)           ; RES 6,(IX+$06)    ; move up-left
       jmp  loc_88a3                   ; JR $88A3          ; 
loc_88c9:                              ; >88c9
       movb @bytes+>68,@>0b(ix)        ; LD (IX+$0B),$68   ; new target x (left of red key)
       movb @bytes+>38,@>0c(ix)        ; LD (IX+$0C),$38   ; new target y
       socb @bits+6,@>06(ix)           ; SET 6,(IX+$06)    ; move down-right
       jmp  loc_88a3                   ; JR $88A3          ; 
loc_88d7:                              ; >88d7
       .call @attract_de               ; CALL $882D        ; set movement towards coords in DE
       movb @c,a                       ; LD A,C            ; 
       cb   a,@bytes+>03               ; CP $03            ; has mummy reached leaf position?
       jne  loc_88a3                   ; JR NZ,$88A3       ; jump if not
       .push ix                        ; PUSH IX           ; 
       li   ix,leaf                    ; LD IX,$EAE0       ; 
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; if leaf in player room?
       jne  loc_88f0                   ; JR NZ,$88F0       ; 
       .call @draw_entity              ; CALL $9F4A        ; undraw leaf
loc_88f0:                              ; >88f0
       .pop ix                         ; POP IX            ; 
       movb @bytes+>6b,a               ; LD A,$6B          ; room 6B
       movb a,@leaf+>0001              ; LD ($EAE1),A      ; move leaf to room 6B
       jmp  loc_88b5                   ; JR $88B5          ; 
loc_88f9:                              ; >88f9
       socb @bits+7,@>06(ix)           ; SET 7,(IX+$06)    ; mummy now angry with player
loc_88fd:                              ; >88fd
       mov  @player_x,de               ; LD DE,($EA93)     ; 
       .call @attract_de               ; CALL $882D        ; set movement towards coords in DE
       jmp  loc_88a3                   ; JR $88A3          ; 

* Dracula handler
h_dracula:                             ; >8906
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; is touching player?
       jne  !                          ; CALL Z,$8A1E      ; call if so (reduce health by 8)
       .call @damage_8                 ;                   
!
       li   de,zx_screen+>068a         ; LD DE,$468A       ; yellow crucafix object
       .call @check_carrying           ; CALL $9273        ; is player carrying crucafix?
       jne  loc_8931                   ; JR NZ,$8931       ; jump if not
       mov  @player_x,de               ; LD DE,($EA93)     ; current player position
       .call @attract_de               ; CALL $882D        ; set movement towards coords in DE
       movb @>08(ix),a                 ; LD A,(IX+$08)     ; x velocity
       neg a                           ; NEG               ; invert (run away!)
       movb a,@>08(ix)                 ; LD (IX+$08),A     ; 
       movb @>09(ix),a                 ; LD A,(IX+$09)     ; y velocity
       neg a                           ; NEG               ; invert (run away!)
       movb a,@>09(ix)                 ; LD (IX+$09),A     ; 
       jmp  loc_8940                   ; JR $8940          ; 
loc_8931:                              ; >8931
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; is Dracula in the player room?
       jne  loc_8952                   ; JR NZ,$8952       ; jump if not
       mov  @player_x,de               ; LD DE,($EA93)     ; 
       .call @attract_de               ; CALL $882D        ; set movement towards coords in DE
loc_8940:                              ; >8940
       movb @counter_low,a             ; LD A,($5E12)      ; 
       srl  a,1                        ; RRA               ; TODO: check code. 
       srl  a,1                        ; RRA               ; TODO: check code. 1/4 animation rate
       andi a,>0300                    ; AND $03           ; 4 animation frames
       ab   @bytes+>7c,a               ; ADD A,$7C         ; base Dracula graphic
       movb a,*ix                      ; LD (IX+$00),A     ; set animation graphic
       li   de,>3434                   ; LD DE,$3434       ; allowed to roam 52x52 from room centre
       b    @chk_move_away             ; JP $89BB          ; 
loc_8952:                              ; >8952
       movb @bytes+>68,@>0b(ix)        ; LD (IX+$0B),$68   ; new target x (centre)
       movb @bytes+>68,@>0c(ix)        ; LD (IX+$0C),$68   ; new target y (centre)
       .call @attract_de               ; CALL $882D        ; set movement towards coords in DE
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       ; AND A                         ; AND A             ; frame 0 of 50?
       jeq  !                          ; JP NZ,$8940       ; jump if not
       b    @loc_8940                  ;                   
!
       movb r,a                        ; LD A,R            ; 
       andi a,>7f00                    ; AND $7F           ; random 7-bit room number
       movb a,@c                       ; LD C,A            ; 
       .call @get_room_style           ; CALL $897D        ; get style of room in A, returns style (0-B)
       cb   a,@bytes+>03               ; CP $03            ; non-square room?
       jl   !                          ; JP NC,$8940       ; jump if so (ignore)
       b    @loc_8940                  ;                   
!
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@c                       ; CP C              ; current player room?
       jne  !                          ; JP Z,$8940        ; jump if so (ignore)
       b    @loc_8940                  ;                   
!
       movb @c,@>01(ix)                ; LD (IX+$01),C     ; move Dracula to new room
       jmp  loc_8940                   ; JR $8940          ; 

* get style of room in A, returns style (0-B)
* 
* Used by the routine at #R$8906.
get_room_style:                        ; >897d
       movb a,@l                       ; LD L,A            ; 
       sb   h,h                        ; LD H,$00          ; 
       li   de,room_attrs              ; LD DE,$A854       ; room attr colour and style (0-B)
       a    hl,hl                      ; ADD HL,HL         ; 
       a    de,hl                      ; ADD HL,DE         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; first byte is room style (0-C)
       .ret                            ; RET               ; 

* Frankenstein handler
h_frankenstein:                        ; >8988
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; touching player?
       jne  loc_89a5                   ; JR NZ,$89A5       ; jump if not
       li   de,zx_screen+>058b         ; LD DE,$458B       ; cyan spanner
       .call @check_carrying           ; CALL $9273        ; carrying spanner?
       jne  loc_89a2                   ; JR NZ,$89A2       ; jump if not
       li   bc,>1000                   ; LD BC,$1000       ; 
       .call @add_score_bc_bcd         ; CALL $A19C        ; add 1000 points
       b    @pop_creature              ; JP $875F          ; 
loc_89a2:                              ; >89a2
       .call @damage_8                 ; CALL $8A1E        ; reduce health by 8
loc_89a5:                              ; >89a5
       mov  @player_x,de               ; LD DE,($EA93)     ; 
       .call @attract_de               ; CALL $882D        ; set movement towards coords in DE
       movb @counter_low,a             ; LD A,($5E12)      ; 
       srl  a,1                        ; RRA               ; TODO: check code. 
       srl  a,1                        ; RRA               ; TODO: check code. 
       andi a,>0300                    ; AND $03           ; 
       ab   @bytes+>74,a               ; ADD A,$74         ; base frankenstein graphic
       movb a,*ix                      ; LD (IX+$00),A     ; 
       li   de,>3434                   ; LD DE,$3434       ; 52x52 centre prison area if player is dead
* This entry point is used by the routines at #R$8862, #R$8906 and #R$89ed.
chk_move_away:                         ; >89bb
       movb @player,a                  ; LD A,($EA90)      ; 
       cb   a,@bytes+>31               ; CP $31            ; is player active?
       jhe  !                          ; JP C,$84CD        ; jump if so
       b    @monster_move              ;                   
!
       mov  @player_x,de               ; LD DE,($EA93)     ; 
       .call @attract_de               ; CALL $882D        ; set movement towards coords in DE
       movb @>08(ix),a                 ; LD A,(IX+$08)     ; x movement
       neg a                           ; NEG               ; away from player
       movb a,@>08(ix)                 ; LD (IX+$08),A     ; 
       movb a,@c                       ; LD C,A            ; 
       movb @>09(ix),a                 ; LD A,(IX+$09)     ; y movement
       neg a                           ; NEG               ; away from player
       movb a,@>09(ix)                 ; LD (IX+$09),A     ; 
       li   de,>3434                   ; LD DE,$3434       ; allowed to roam 52x52 from room centre
       ; AND C                         ; AND C             ; should be OR C maybe? (either movement)
       jeq  !                          ; JP NZ,$84CD       ; common monster movement
       b    @monster_move              ;                   
!
       movb one,@>08(ix)               ; LD (IX+$08),$01   ; move right
       movb one,@>09(ix)               ; LD (IX+$09),$01   ; move up
       b    @monster_move              ; JP $84CD          ; common monster movement

* Devil handler
h_devil:                               ; >89ed
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; touching player?
       jne  !                          ; CALL Z,$8A1E      ; call if so (reduce health by 8)
       .call @damage_8                 ;                   
!
       mov  @player_x,de               ; LD DE,($EA93)     ; 
       .call @attract_de               ; CALL $882D        ; set movement towards coords in DE
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>fc00                    ; AND $FC           ; strip animation frame bits
       movb a,@c                       ; LD C,A            ; 
       movb @counter_low,a             ; LD A,($5E12)      ; 
       srl  a,1                        ; RRA               ; TODO: check code. 
       srl  a,1                        ; RRA               ; TODO: check code. 1/4 animation rate
       andi a,>0300                    ; AND $03           ; 4 animation frames
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; set animation graphic
       li   de,>3434                   ; LD DE,$3434       ; allowed to roam 52x52 from room centre
       b    @chk_move_away             ; JP $89BB          ; 

* reduce health by 16
* 
* Used by the routine at #R$8aff.
damage_16:                             ; >8a15
       movb @player_energy,a           ; LD A,($5E28)      ; 
       sb   @bytes+>10,a               ; SUB $10           ; 
       joc  player_dead_pop            ; JR C,$8A2B        ; TODO: check code. 
       jmp  loc_8a25                   ; JR $8A25          ; 

* reduce health by 8
* 
* Used by the routines at #R$8862, #R$8906, #R$8988 and #R$89ed.
damage_8:                              ; >8a1e
       movb @player_energy,a           ; LD A,($5E28)      ; 
       sb   @bytes+>08,a               ; SUB $08           ; 
       joc  player_dead_pop            ; JR C,$8A2B        ; TODO: check code. 
* This entry point is used by the routine at #R$8a15.
loc_8a25:                              ; >8a25
       movb a,@player_energy           ; LD ($5E28),A      ; 
       b    @draw_chicken              ; JP $8B8A          ; draw chicken energy bar
* This entry point is used by the routine at #R$8a15.
player_dead_pop:                       ; >8a2b
       .pop hl                         ; POP HL            ; don't return to entity handler
       b    @player_dead               ; JP $8EA0          ; 

* witch handler
h_witch:                               ; >8a2f
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  !                          ; JP NZ,$85F0       ; jump if not
       b    @delay_remove              ;                   
!
       li   hl,num_creatures           ; LD HL,$5E25       ; number of creatures processed this frame
       ab   one,*hl                    ; INC (HL)          ; 
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; touching player?
       jne  !                          ; JP Z,$85EA        ; jump if so
       b    @hurt_and_pop              ;                   
!
       .call @chk_weapon_hit           ; CALL $8566        ; check if weapon has hit entity
       sb   one,@e                     ; DEC E             ; hit by weapon?
       jne  !                          ; JP Z,$875F        ; jump if so
       b    @pop_creature              ;                   
!
       sb   one,@>0d(ix)               ; DEC (IX+$0D)      ; movement timer expired?
       jne  loc_8a5d                   ; JR NZ,$8A5D       ; jump if not
       .call @rnd_movement             ; CALL $86F2        ; set random movement
       sra  @>09(ix),1                 ; SRA (IX+$09)      ; halve y velocity (to 1 or 0)
       movb @bytes+>10,@>0d(ix)        ; LD (IX+$0D),$10   ; 16 frames before changing movement
loc_8a5d:                              ; >8a5d
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>fc00                    ; AND $FC           ; strip animation bits
       movb @>08(ix),r0                ; BIT 7,(IX+$08)    ; moving left?
       andi r0,>8000                   ;                   
       jne  loc_8a6a                   ; JR NZ,$8A6A       ; jump if so
       ab   @bytes+>02,a               ; ADD A,$02         ; offset to right-facing graphics
loc_8a6a:                              ; >8a6a
       movb a,@c                       ; LD C,A            ; 
       movb @>0d(ix),a                 ; LD A,(IX+$0D)     ; 
       srl  a,1                        ; RRA               ; TODO: check code. 1/2 animation rate
       andi a,>0100                    ; AND $01           ; 2 animation frames
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; set animation graphic
       mov  @room_width,de             ; LD DE,($5E1D)     ; 
       movb @bytes+>43,@>05(ix)        ; LD (IX+$05),$43   ; bright magenta
       b    @monster_move              ; JP $84CD          ; common monster movement

* monk and large bat handler
h_monk_bat:                            ; >8a80
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  !                          ; JP NZ,$85F0       ; jump if not
       b    @delay_remove              ;                   
!
       li   hl,num_creatures           ; LD HL,$5E25       ; number of creatures processed this frame
       ab   one,*hl                    ; INC (HL)          ; 
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; touching player?
       jne  !                          ; JP Z,$85EA        ; jump if so
       b    @hurt_and_pop              ;                   
!
       .call @chk_weapon_hit           ; CALL $8566        ; check if weapon has hit entity
       sb   one,@e                     ; DEC E             ; hit by weapon?
       jne  !                          ; JP Z,$875F        ; jump if so (pop)
       b    @pop_creature              ;                   
!
       sb   one,@>0d(ix)               ; DEC (IX+$0D)      ; movement timer expired?
       jne  loc_8ab8                   ; JR NZ,$8AB8       ; jump if not
       .call @rnd_movement             ; CALL $86F2        ; set random movement
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       andi a,>0400                    ; AND $04           ; 
       sb   @bytes+>02,a               ; SUB $02           ; +/- 2
       movb a,@>08(ix)                 ; LD (IX+$08),A     ; set x velocity
       sra  @>09(ix),1                 ; SRA (IX+$09)      ; halve y velocity (to 1 or 0)
       movb @bytes+>20,@>0d(ix)        ; LD (IX+$0D),$20   ; 32 frames before changing behaviour
loc_8ab8:                              ; >8ab8
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>fc00                    ; AND $FC           ; strip animation bits
       movb @>08(ix),r0                ; BIT 7,(IX+$08)    ; moving left?
       andi r0,>8000                   ;                   
       jne  loc_8ac5                   ; JR NZ,$8AC5       ; jump if so
       ab   @bytes+>02,a               ; ADD A,$02         ; offset to right-facing graphics
loc_8ac5:                              ; >8ac5
       movb a,@c                       ; LD C,A            ; 
       movb @>0d(ix),a                 ; LD A,(IX+$0D)     ; 
       srl  a,1                        ; RRA               ; TODO: check code. 1/2 animation rate
       andi a,>0100                    ; AND $01           ; 2 animation frames
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; set animation graphic
       mov  @room_width,de             ; LD DE,($5E1D)     ; 
       movb @bytes+>42,@>05(ix)        ; LD (IX+$05),$42   ; bright red
       b    @monster_move              ; JP $84CD          ; common monster movement

* check for hunchback items on the floor (return C=1)
* 
* Used by the routine at #R$8aff.
chk_hunch_loot:                        ; >8adb
       li   hl,wine                    ; LD HL,$EB18       ; first of 8 items hunchback reacts to
       li   de,>0008                   ; LD DE,$0008       ; 8 bytes per entry
       movb @bytes+>08,b               ; LD B,$08          ; 8 entries
loc_8ae3:                              ; >8ae3
       .push hl                        ; PUSH HL           ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; unused slot?
       jeq  loc_8af8                   ; JR Z,$8AF8        ; jump if so
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; room number
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in hunchback room?
       jne  loc_8af8                   ; JR NZ,$8AF8       ; jump if not
       .pop de                         ; POP DE            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,@e                     ; LD E,(HL)         ; item x
       inc  hl                         ; INC HL            ; 
       movb *hl,d                      ; LD D,(HL)         ; item y
       movb one,@c                     ; LD C,$01          ; entry found
       .ret                            ; RET               ; 
loc_8af8:                              ; >8af8
       .pop hl                         ; POP HL            ; 
       a    de,hl                      ; ADD HL,DE         ; advance to next entry
       sb   one,b                      ; DJNZ $8AE3        ; 
       jne  loc_8ae3                   ;                   
       sb   @c,@c                      ; LD C,$00          ; not found
       .ret                            ; RET               ; 

* Hunchback handler
h_hunchback:                           ; >8aff
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       .call @enemy_touching           ; CALL $85B2        ; check if enemy is touching player (returns E=1)
       sb   one,@e                     ; DEC E             ; touching player?
       jne  !                          ; CALL Z,$8A15      ; call if so (reduce health by 16)
       .call @damage_16                ;                   
!
       sb   a,a                        ; XOR A             ; 
       movb a,@>09(ix)                 ; LD (IX+$09),A     ; no x movement
       movb a,@>08(ix)                 ; LD (IX+$08),A     ; no y movement
       .call @chk_hunch_loot           ; CALL $8ADB        ; check for hunchback items on the floor (return C=1)
       sb   one,@c                     ; DEC C             ; hunchback item in room?
       jeq  !                          ; JP NZ,$8B59       ; jump if not
       b    @loc_8b59                  ;                   
!
       .call @attract_de               ; CALL $882D        ; hunchback attracted to item
       movb @c,a                       ; LD A,C            ; 
       cb   a,@bytes+>03               ; CP $03            ; hunchback reached item?
       jne  loc_8b45                   ; JR NZ,$8B45       ; jump if not
       .call @chk_hunch_loot           ; CALL $8ADB        ; check for hunchback items on the floor (return C=1)
       li   de,>0004                   ; LD DE,$0004       ; HL is 4 bytes into entity
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; start of item entity
       .push ix                        ; PUSH IX           ; 
       li   ix,>0000                   ; LD IX,$0000       ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       a    de,ix                      ; ADD IX,DE         ; item entity now in IX
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jne  loc_8b3c                   ; JR NZ,$8B3C       ; jump if not
       .call @draw_entity              ; CALL $9F4A        ; undraw item
loc_8b3c:                              ; >8b3c
       sb   *ix,*ix                    ; LD (IX+$00),$00   ; remove item
       .pop ix                         ; POP IX            ; 
       b    @loc_8b59                  ; JP $8B59          ; 
loc_8b45:                              ; >8b45
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>fc00                    ; AND $FC           ; strip animation bits
       movb a,@c                       ; LD C,A            ; 
       movb @counter_low,a             ; LD A,($5E12)      ; 
       srl  a,1                        ; RRA               ; TODO: check code. 
       srl  a,1                        ; RRA               ; TODO: check code. 1/4 animation rate
       andi a,>0300                    ; AND $03           ; 4 animation frames
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; set animation graphic
       li   de,>3c3c                   ; LD DE,$3C3C       ; 
loc_8b59:                              ; >8b59
       movb @player,a                  ; LD A,($EA90)      ; 
       cb   a,@bytes+>31               ; CP $31            ; player active?
       jhe  !                          ; JP C,$84CD        ; jump if so
       b    @monster_move              ;                   
!
       li   de,>3a58                   ; LD DE,$3A58       ; coords below top door
       .call @attract_de               ; CALL $882D        ; move towards door
       b    @monster_move              ; JP $84CD          ; common monster movement

* Data block at 8b6a
creature_default:                      ; >8b6a
       byte >58,>00,>5C,>68,>68,>44,>00,>00
       byte >02,>02,>00,>00,>00,>10,>20,>00

* Data block at 8b7a
creatures:                             ; >8b7a
       byte >5C                                                      ; spider
       byte >5E                                                      ; spikey
       byte >98                                                      ; bat
       byte >98                                                      ; bat
       byte >90                                                      ; witch
       byte >90                                                      ; witch
       byte >94                                                      ; monk
       byte >94                                                      ; monk
       byte >5C                                                      ; spider
       byte >5E                                                      ; spikey
       byte >60                                                      ; blob
       byte >62                                                      ; ghoul
       byte >4C                                                      ; pumpkin
       byte >4E                                                      ; ghostlet
       byte >68                                                      ; ghost
       byte >6A                                                      ; batlet

* draw chicken energy bar
* 
* Used by the routines at #R$8a1e, #R$8c63, #R$8e26, #R$8ed7, #R$9443 and
* #R$988b.
draw_chicken:                          ; >8b8a
       movb @player_energy,a           ; LD A,($5E28)      ; 
       srl  a,1                        ; SRL A             ; 
       srl  a,1                        ; SRL A             ; 
       srl  a,1                        ; SRL A             ; 
       movb a,@c                       ; LD C,A            ; 
       movb @chicken_level,a           ; LD A,($5E29)      ; last drawn chicken level
       srl  a,1                        ; SRL A             ; 
       srl  a,1                        ; SRL A             ; 
       srl  a,1                        ; SRL A             ; 
       movb a,b                        ; LD B,A            ; 
       cb   a,@c                       ; CP C              ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       movb @g_chicken_full+>0001,a    ; LD A,($C543)      ; full chicken height
       movb a,@e                       ; LD E,A            ; 
       movb @g_chicken_empty+>0001,a   ; LD A,($C48D)      ; empty chicken height
       movb a,d                        ; LD D,A            ; 
       .push ix                        ; PUSH IX           ; 
       li   ix,chicken_entity          ; LD IX,$8C2D       ; 
       .push de                        ; PUSH DE           ; 
       joc  loc_8c12                   ; JR C,$8C12        ; TODO: check code. 
       movb @g_chicken_empty,a         ; LD A,($C48C)      ; 
       movb a,@e                       ; LD E,A            ; 
       sb   d,d                        ; LD D,$00          ; 
       movb @c,a                       ; LD A,C            ; 
       .push bc                        ; PUSH BC           ; 
       .call @mult_de_a                ; CALL $9AAD        ; HL = DE * A
       .pop bc                         ; POP BC            ; 
       mov  @chicken_empty_addr,de     ; LD DE,($A626)     ; 
       .push de                        ; PUSH DE           ; 
       a    de,hl                      ; ADD HL,DE         ; 
       mov  hl,@chicken_empty_addr     ; LD ($A626),HL     ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       movb @g_chicken_empty+>0001,a   ; LD A,($C48D)      ; 
       sb   @c,a                       ; SUB C             ; 
       jeq  loc_8bfc                   ; JR Z,$8BFC        ; 
       .push de                        ; PUSH DE           ; 
       movb a,*hl                      ; LD (HL),A         ; 
       movb @g_chicken_empty,a         ; LD A,($C48C)      ; 
       dec  hl                         ; DEC HL            ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .push hl                        ; PUSH HL           ; 
       movb @bytes+>14,a               ; LD A,$14          ; empty chicken graphic
       movb a,*ix                      ; LD (IX+$00),A     ; 
       li   hl,room_17+>0009           ; LD HL,$77C8       ; chicken draw coords
       movb h,a                        ; LD A,H            ; 
       sb   @c,a                       ; SUB C             ; 
       movb a,h                        ; LD H,A            ; 
       mov  hl,@chicken_entity+>0003   ; LD ($8C30),HL     ; coords
       .call @draw_rot_obj             ; CALL $9213        ; 
       mov  @chicken_entity+>0003,hl   ; LD HL,($8C30)     ; 
       .call @xy_to_display            ; CALL $9BA2        ; convert coords in HL to display address in HL
       movb @g_chicken_empty,a         ; LD A,($C48C)      ; 
       movb a,b                        ; LD B,A            ; 
loc_8bf2:                              ; >8bf2
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $8BF2        ; 
       jne  loc_8bf2                   ;                   
       .pop hl                         ; POP HL            ; 
       .pop de                         ; POP DE            ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       inc  hl                         ; INC HL            ; 
       movb d,*hl                      ; LD (HL),D         ; 
loc_8bfc:                              ; >8bfc
       .pop hl                         ; POP HL            ; 
       mov  hl,@chicken_empty_addr     ; LD ($A626),HL     ; 
loc_8c00:                              ; >8c00
       .pop de                         ; POP DE            ; 
       movb @e,a                       ; LD A,E            ; 
       movb a,@g_chicken_full+>0001    ; LD ($C543),A      ; 
       movb d,a                        ; LD A,D            ; 
       movb a,@g_chicken_empty+>0001   ; LD ($C48D),A      ; 
       .pop ix                         ; POP IX            ; 
       movb @player_energy,a           ; LD A,($5E28)      ; 
       movb a,@chicken_level           ; LD ($5E29),A      ; last drawn chicken level
       .ret                            ; RET               ; 
loc_8c12:                              ; >8c12
       movb @c,a                       ; LD A,C            ; 
       movb a,@g_chicken_full+>0001    ; LD ($C543),A      ; 
       movb @bytes+>13,a               ; LD A,$13          ; full chicken graphic
       movb a,*ix                      ; LD (IX+$00),A     ; 
       li   hl,room_17+>0009           ; LD HL,$77C8       ; 
       mov  hl,@chicken_entity+>0003   ; LD ($8C30),HL     ; coords
       .call @draw_rot_obj             ; CALL $9213        ; 
       movb @bytes+>06,b               ; LD B,$06          ; 
loc_8c26:                              ; >8c26
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $8C26        ; 
       jne  loc_8c26                   ;                   
       jmp  loc_8c00                   ; JR $8C00          ; 

* Data block at 8c2d
chicken_entity:                        ; >8c2d
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Routine at 8c35
* 
* Used by the routine at #R$8e26.
game_over:                             ; >8c35
       .call @clear_play_area          ; CALL $8093        ; clear screen and attrs of play area
       li   hl,_be4c                   ; LD HL,$BE4C       ; 
       mov  hl,@charset_addr           ; LD ($5E01),HL     ; 
       li   hl,>3040                   ; LD HL,$3040       ; game over at 64,48
       li   de,gameover_msg            ; LD DE,$8C59       ; 
       .call @colour_text              ; CALL $A1F3        ; show a line of text, first byte is attr
       .call @game_stats               ; CALL $9641        ; show game statistics
* This entry point is used by the routine at #R$96c9.
loc_8c4a:                              ; >8c4a
       movb @bytes+>14,b               ; LD B,$14          ; 20 loops of 65536 delay
       li   hl,>0000                   ; LD HL,$0000       ; 
gameover_delay:                        ; >8c4f
       dec  hl                         ; DEC HL            ; 
       movb h,a                        ; LD A,H            ; 
       socb @l,a                       ; OR L              ; 
       jne  gameover_delay             ; JR NZ,$8C4F       ; 
       sb   one,b                      ; DJNZ $8C4F        ; 
       jne  gameover_delay             ;                   
       b    @main_menu                 ; JP $7C29          ; 

* Data block at 8c59
gameover_msg:                          ; >8c59
       byte >47                                                      ; bright white
       text 'GAME OVE'
       byte >D2

* food item handler
h_food:                                ; >8c63
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       .call @check_touching           ; CALL $90FB        ; touching food?
       joc  loc_8c6e                   ; JR C,$8C6E        ; TODO: check code. jump if so
       b    @draw_16x16                ; JP $92E0          ; draw 16x16 entity
loc_8c6e:                              ; >8c6e
       .call @undraw_entity            ; CALL $9F56        ; 
       sb   *ix,*ix                    ; LD (IX+$00),$00   ; remove food item
       .call @eat_sound                ; CALL $A485        ; 
       movb @bytes+>40,@c              ; LD C,$40          ; food adds 64 health
       movb @player_energy,a           ; LD A,($5E28)      ; 
       ab   @c,a                       ; ADD A,C           ; add food value
       joc  loc_8c84                   ; JR C,$8C84        ; TODO: check code. 
       cb   a,@bytes+>f0               ; CP $F0            ; exceeded maximum?
       jl   loc_8c86                   ; JR C,$8C86        ; jump if not
loc_8c84:                              ; >8c84
       movb @bytes+>f0,a               ; LD A,$F0          ; cap energy at maximum
loc_8c86:                              ; >8c86
       movb a,@player_energy           ; LD ($5E28),A      ; 
       b    @draw_chicken              ; JP $8B8A          ; draw chicken energy bar

* flash score on game start
* 
* Used by the routine at #R$8cb7.
flash_score:                           ; >8c8c
       sb   one,a                      ; DEC A             ; timer expired?
       movb a,@flash_timer             ; LD ($5E3C),A      ; score flash timer
       jeq  loc_8ca7                   ; JR Z,$8CA7        ; jump if so (stop flash)
       andi a,>0f00                    ; AND $0F           ; 16th frame?
       jne  !                          ; CALL Z,$A3E0      ; call if so (beep)
       .call @start_beep               ;                   
!
       li   hl,zx_screen+>10c8         ; LD HL,$50C8       ; 
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
       movb @bytes+>06,b               ; LD B,$06          ; 
loc_8c9f:                              ; >8c9f
       movb *hl,a                      ; LD A,(HL)         ; 
       socb @bytes+>80,a               ; OR $80            ; enable flash attribute
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       sb   one,b                      ; DJNZ $8C9F        ; 
       jne  loc_8c9f                   ;                   
       .ret                            ; RET               ; 
loc_8ca7:                              ; >8ca7
       li   hl,zx_screen+>10c8         ; LD HL,$50C8       ; 
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
       movb @bytes+>06,b               ; LD B,$06          ; 
loc_8caf:                              ; >8caf
       movb *hl,a                      ; LD A,(HL)         ; 
       andi a,>7f00                    ; AND $7F           ; disable flash attribute
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       sb   one,b                      ; DJNZ $8CAF        ; 
       jne  loc_8caf                   ;                   
       .ret                            ; RET               ; 

* player appear handler for game start
h_player_appear:                       ; >8cb7
       movb @flash_timer,a             ; LD A,($5E3C)      ; score flash timer
       ; AND A                         ; AND A             ; score flash timer active?
       jne  flash_score                ; JR NZ,$8C8C       ; jump if so
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       andi a,>0300                    ; AND $03           ; 0 in range 0-3?
       jeq  !                          ; JP NZ,$8D12       ; jump if not
       b    @loc_8d12                  ;                   
!
       ab   one,@>06(ix)               ; INC (IX+$06)      ; increase drawn height
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; player spawn sprite
       .call @get_sprite_addr          ; CALL $9E89        ; return address of sprite A in DE
       movb *de,a                      ; LD A,(DE)         ; normal player sprite height
       cb   a,@>06(ix)                 ; CP (IX+$06)       ; reached full reveal height?
       jeq  loc_8d32                   ; JR Z,$8D32        ; jump if so
* This entry point is used by the routine at #R$8d45.
loc_8cd4:                              ; >8cd4
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
       movb h,b                        ; LD B,H            ; 
       movb @l,@c                      ; LD C,L            ; 
       movb @>04(ix),a                 ; LD A,(IX+$04)     ; 
       movb a,@>02(ix)                 ; LD (IX+$02),A     ; 
       sb   @>06(ix),a                 ; SUB (IX+$06)      ; 
       movb a,@>04(ix)                 ; LD (IX+$04),A     ; 
       movb @>06(ix),@l                ; LD L,(IX+$06)     ; 
       sb   h,h                        ; LD H,$00          ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    de,hl                      ; ADD HL,DE         ; 
       movb h,a                        ; LD A,H            ; 
       movb a,*bc                      ; LD (BC),A         ; 
       dec  bc                         ; DEC BC            ; 
       movb @l,a                       ; LD A,L            ; 
       movb a,*bc                      ; LD (BC),A         ; 
       .push hl                        ; PUSH HL           ; 
       movb *hl,@c                     ; LD C,(HL)         ; 
       movb *ix,b                      ; LD B,(IX+$00)     ; 
       .push bc                        ; PUSH BC           ; 
       movb one,*hl                    ; LD (HL),$01       ; 
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; player spawn sprite
       movb a,*ix                      ; LD (IX+$00),A     ; set player graphic
       .call @draw_entity              ; CALL $9F4A        ; draw entity graphic (no attrs)
       .pop bc                         ; POP BC            ; 
       .pop hl                         ; POP HL            ; 
       movb @c,*hl                     ; LD (HL),C         ; 
       movb b,*ix                      ; LD (IX+$00),B     ; 
       movb @>02(ix),a                 ; LD A,(IX+$02)     ; 
       movb a,@>04(ix)                 ; LD (IX+$04),A     ; 
       .pop hl                         ; POP HL            ; 
       .pop de                         ; POP DE            ; 
       movb d,*hl                      ; LD (HL),D         ; 
       dec  hl                         ; DEC HL            ; 
       movb @e,*hl                     ; LD (HL),E         ; 
* This entry point is used by the routine at #R$8d45.
loc_8d12:                              ; >8d12
       movb @>05(ix),a                 ; LD A,(IX+$05)     ; 
       .push af                        ; PUSH AF           ; 
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 1/4 colour change rate
       andi a,>0700                    ; AND $07           ; ink 0-7
       jne  loc_8d20                   ; JR NZ,$8D20       ; jump if not black
       ab   one,a                      ; INC A             ; convert black to blue
loc_8d20:                              ; >8d20
       socb @bytes+>40,a               ; OR $40            ; add bright bit
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; set player attr
       movb @>06(ix),a                 ; LD A,(IX+$06)     ; 
       .call @set_appear_w_h           ; CALL $92E2        ; set spawn appearance width/height
       .pop af                         ; POP AF            ; 
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; 
       b    @appear_sound              ; JP $A45F          ; player appearance sound
loc_8d32:                              ; >8d32
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; player spawn sprite
       movb a,*ix                      ; LD (IX+$00),A     ; set player graphic
       sb   @>06(ix),@>06(ix)          ; LD (IX+$06),$00   ; no x movement
       sb   @>07(ix),@>07(ix)          ; LD (IX+$07),$00   ; no y movement
       sb   @>02(ix),@>02(ix)          ; LD (IX+$02),$00   ; no auto-steps
       .ret                            ; RET               ; 

* player death animation handler
h_death:                               ; >8d45
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       andi a,>0300                    ; AND $03           ; 3/4 animation rate for death
       jeq  loc_8d12                   ; JR Z,$8D12        ; jump if colouring this frame instead
       sb   one,@>06(ix)               ; DEC (IX+$06)      ; reduce player visible height
       ; JP M,$8D5B                    ; JP M,$8D5B        ; jump if after zero
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; player spawn sprite
       .call @get_sprite_addr          ; CALL $9E89        ; return address of sprite A in DE
       b    @loc_8cd4                  ; JP $8CD4          ; 
loc_8d5b:                              ; >8d5b
       .call @place_tombstone          ; CALL $95A9        ; place a tombstone at the player position
       b    @prepare_player            ; JP $9443          ; prepare player to spawn

* copy initial game state to working state area
* 
* Used by the routine at #R$7d9a.
reset_game_state:                      ; >8d61
       li   hl,player_init             ; LD HL,$600D       ; initial game state
       li   de,player                  ; LD DE,$EA90       ; working game state
       li   bc,>1570                   ; LD BC,$1570       ; 0x10000-player, rather than real init data size!
       .ldir                           ; LDIR              ; 
       .ret                            ; RET               ; 

* reduce auto-walk counter
* 
* Used by the routine at #R$8d77.
auto_walk_step:                        ; >8d6d
       movb @>02(ix),a                 ; LD A,(IX+$02)     ; 
       andi a,>0f00                    ; AND $0F           ; auto-walk active?
       jne  !                          ; RET Z             ; return if not
       .ret                            ;                   
!
       sb   one,@>02(ix)               ; DEC (IX+$02)      ; take a step
       .ret                            ; RET               ; 

* read controls and apply player movement
* 
* Used by the routines at #R$80d2, #R$8dc4 and #R$8e26.
control_player:                        ; >8d77
       movb @player_room,a             ; LD A,($EA91)      ; 
       movb a,@some_room+>0001         ; LD ($EE59),A      ; blank entity?
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
       .call @auto_walk_step           ; CALL $8D6D        ; reduce auto-walk counter
       movb @>02(ix),a                 ; LD A,(IX+$02)     ; 
       socb @bytes+>30,a               ; OR $30            ; can move left/right or up/down
       movb a,@>02(ix)                 ; LD (IX+$02),A     ; 
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       .call @read_controls            ; CALL $93BE        ; return controls in A (FUDLR order, negative logic)
       movb a,@c                       ; LD C,A            ; FUDLR
       .pop hl                         ; POP HL            ; 
       li   de,>0000                   ; LD DE,$0000       ; no movement yet
       movb @c,r0                      ; BIT 1,C           ; left pressed?
       andi r0,>0200                   ;                   
       jne  loc_8d9e                   ; JR NZ,$8D9E       ; jump if not
       movb b,a                        ; LD A,B            ; 
       neg a                           ; NEG               ; negate for left
       movb a,@e                       ; LD E,A            ; 
loc_8d9e:                              ; >8d9e
       movb @c,r0                      ; BIT 0,C           ; right pressed?
       andi r0,>0100                   ;                   
       jne  loc_8da3                   ; JR NZ,$8DA3       ; jump if not
       movb b,@e                       ; LD E,B            ; 
loc_8da3:                              ; >8da3
       movb @c,r0                      ; BIT 2,C           ; down pressed?
       andi r0,>0400                   ;                   
       jne  loc_8da8                   ; JR NZ,$8DA8       ; jump if not
       movb b,d                        ; LD D,B            ; 
loc_8da8:                              ; >8da8
       movb @c,r0                      ; BIT 3,C           ; up pressed?
       andi r0,>0800                   ;                   
       jne  loc_8db0                   ; JR NZ,$8DB0       ; jump if not
       movb b,a                        ; LD A,B            ; 
       neg a                           ; NEG               ; negate for up
       movb a,d                        ; LD D,A            ; 
loc_8db0:                              ; >8db0
       .pop hl                         ; POP HL            ; DE value from function entry
       .call @slow_player              ; CALL $8F96        ; decelerate player movement
       .pop hl                         ; POP HL            ; BC value from function entry
       .call @move_player              ; CALL $8EEF        ; apply player movement, including auto-walk
       .call @chk_wall_move            ; CALL $8FCA        ; check if walls are blocking movement in DE
       .call @check_doorway            ; CALL $957D        ; check if player is standing in a doorway
       .call @chk_decor_move           ; CALL $900A        ; check if decor is blocking movement in DE
       b    @apply_move                ; JP $8F66          ; apply movement in DE

* serf character handler
h_serf:                                ; >8dc4
       li   bc,>2020                   ; LD BC,$2020       ; walk deceleration
       li   de,>0101                   ; LD DE,$0101       ; walk acceleration
       li   hl,>0707                   ; LD HL,$0707       ; unused
       .call @control_player           ; CALL $8D77        ; read controls and apply player movement
       movb @>06(ix),@e                ; LD E,(IX+$06)     ; x velocity
       movb @>07(ix),d                 ; LD D,(IX+$07)     ; y velocity
       movb d,a                        ; LD A,D            ; 
       socb @e,a                       ; OR E              ; is player moving?
       jeq  loc_8e0f                   ; JR Z,$8E0F        ; jump if not
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       andi a,>0300                    ; AND $03           ; 1/4 update rate
       jne  loc_8e0f                   ; JR NZ,$8E0F       ; jump if not time
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>0300                    ; AND $03           ; keep animation frame bits
       ab   @bytes+>21,a               ; ADD A,$21         ; add base serf graphic
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb d,a                        ; LD A,D            ; 
       ; AND A                         ; AND A             ; moving down?
       ; JP P,$8DF2                    ; JP P,$8DF2        ; jump if so
       neg a                           ; NEG               ; abs
loc_8df2:                              ; >8df2
       movb a,@c                       ; LD C,A            ; 
       movb @e,a                       ; LD A,E            ; 
       ; AND A                         ; AND A             ; moving right?
       ; JP P,$8DFA                    ; JP P,$8DFA        ; jump if so
       neg a                           ; NEG               ; abs
loc_8dfa:                              ; >8dfa
       cb   a,@c                       ; CP C              ; moving more up/down than left/right?
       jhe  loc_8e1a                   ; JR NC,$8E1A       ; jump if so
       movb d,a                        ; LD A,D            ; 
       ; AND A                         ; AND A             ; moving up?
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; JP M,$8E07                    ; JP M,$8E07        ; jump if so
       ab   @bytes+>04,a               ; ADD A,$04         ; offset to down sprites
loc_8e07:                              ; >8e07
       ab   @bytes+>08,a               ; ADD A,$08         ; offset to right sprites
loc_8e09:                              ; >8e09
       movb a,*ix                      ; LD (IX+$00),A     ; 
       .call @walk_sound               ; CALL $A3C7        ; play walk clicks if due
loc_8e0f:                              ; >8e0f
       .call @read_controls            ; CALL $93BE        ; return controls in A (FUDLR order, negative logic)
       andi a,>1000                    ; AND $10           ; fire pressed?
       jne  !                          ; CALL Z,$8283      ; call if so (fire weapon)
       .call @serf_fire                ;                   
!
       b    @loc_8e78                  ; JP $8E78          ; 
loc_8e1a:                              ; >8e1a
       movb @e,a                       ; LD A,E            ; 
       ; AND A                         ; AND A             ; moving left?
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; JP M,$8E09                    ; JP M,$8E09        ; jump if so
       ab   @bytes+>04,a               ; ADD A,$04         ; offset to right sprites
       jmp  loc_8e09                   ; JR $8E09          ; 

* knight character handler
h_knight:                              ; >8e26
       li   bc,>2020                   ; LD BC,$2020       ; walk deceleration
       li   de,>0303                   ; LD DE,$0303       ; walk acceleration
       li   hl,>0707                   ; LD HL,$0707       ; unused
       .call @control_player           ; CALL $8D77        ; read controls and apply player movement
       movb @>06(ix),@e                ; LD E,(IX+$06)     ; current x velocity
       movb @>07(ix),d                 ; LD D,(IX+$07)     ; current y velocity
       movb d,a                        ; LD A,D            ; 
       socb @e,a                       ; OR E              ; player moving?
       jeq  loc_8e70                   ; JR Z,$8E70        ; jump if not
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       andi a,>0300                    ; AND $03           ; 1/4 update rate
       jne  loc_8e70                   ; JR NZ,$8E70       ; jump if not time
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>0300                    ; AND $03           ; keep animation frame bits
       ab   one,a                      ; INC A             ; add base knight graphic
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb d,a                        ; LD A,D            ; 
       ; AND A                         ; AND A             ; moving down?
       ; JP P,$8E53                    ; JP P,$8E53        ; jump if so
       neg a                           ; NEG               ; abs
loc_8e53:                              ; >8e53
       movb a,@c                       ; LD C,A            ; 
       movb @e,a                       ; LD A,E            ; 
       ; AND A                         ; AND A             ; moving right?
       ; JP P,$8E5B                    ; JP P,$8E5B        ; jump if so
       neg a                           ; NEG               ; abs
loc_8e5b:                              ; >8e5b
       cb   a,@c                       ; CP C              ; moving more up/down than left/right?
       jhe  loc_8e94                   ; JR NC,$8E94       ; jump if so
       movb d,a                        ; LD A,D            ; 
       ; AND A                         ; AND A             ; moving up?
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; JP M,$8E68                    ; JP M,$8E68        ; jump if so
       ab   @bytes+>04,a               ; ADD A,$04         ; offset to down sprites
loc_8e68:                              ; >8e68
       ab   @bytes+>08,a               ; ADD A,$08         ; offset to right sprites
loc_8e6a:                              ; >8e6a
       movb a,*ix                      ; LD (IX+$00),A     ; 
       .call @walk_sound               ; CALL $A3C7        ; play walk clicks if due
loc_8e70:                              ; >8e70
       .call @read_controls            ; CALL $93BE        ; return controls in A (FUDLR order, negative logic)
       andi a,>1000                    ; AND $10           ; fire pressed?
       jne  !                          ; CALL Z,$8134      ; call if so (fire weapon)
       .call @knight_fire              ;                   
!
* This entry point is used by the routines at #R$80d2 and #R$8dc4.
loc_8e78:                              ; >8e78
       equ  $
       .call @chk_creatures            ; CALL $83EA        ; check whether to add new room creatures
       movb @counter_low,a             ; LD A,($5E12)      ; 
       andi a,>0f00                    ; AND $0F           ; 16th game loop?
       jne  loc_8e8e                   ; JR NZ,$8E8E       ; jump if not
       movb @player_energy,a           ; LD A,($5E28)      ; 
       sb   one,a                      ; DEC A             ; reduce health by 1
       jeq  player_dead                ; JR Z,$8EA0        ; 
       movb a,@player_energy           ; LD ($5E28),A      ; 
       .call @draw_chicken             ; CALL $8B8A        ; draw chicken energy bar
* This entry point is used by the routines at #R$81f0, #R$8301, #R$845f,
* #R$85f7 and #R$8787.
loc_8e8e:                              ; >8e8e
       .call @draw_entity_disp         ; CALL $9FCA        ; draw entity to display (no attrs)
       b    @set_entity_attrs2         ; JP $A01A          ; set attrs covering previous and new position
loc_8e94:                              ; >8e94
       movb @e,a                       ; LD A,E            ; 
       ; AND A                         ; AND A             ; moving left?
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; JP M,$8E6A                    ; JP M,$8E6A        ; jump if so (use left sprites)
       ab   @bytes+>04,a               ; ADD A,$04         ; offset to down sprites
       jmp  loc_8e6a                   ; JR $8E6A          ; 
* This entry point is used by the routines at #R$8a1e, #R$8ed7 and #R$98c8.
player_dead:                           ; >8ea0
       movb @lives,a                   ; LD A,($5E21)      ; 
       ; AND A                         ; AND A             ; no lives left?
       jne  !                          ; JP Z,$8C35        ; jump if so
       b    @game_over                 ;                   
!
       sb   one,a                      ; DEC A             ; lose a life
       movb a,@lives                   ; LD ($5E21),A      ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       sb   one,a                      ; DEC A             ; 
       cb   a,@bytes+>30               ; CP $30            ; is player active?
       jl   loc_8ec6                   ; JR C,$8EC6        ; jump if so
       movb @player,a                  ; LD A,($EA90)      ; 
loc_8eb6:                              ; >8eb6
       movb a,@player_steps_y          ; LD ($EA97),A      ; 
       .call @get_sprite_addr          ; CALL $9E89        ; return address of sprite A in DE
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,@player_steps_x          ; LD ($EA96),A      ; 
       movb @bytes+>67,a               ; LD A,$67          ; blank graphic, death handler
       movb a,@player                  ; LD ($EA90),A      ; 
       .ret                            ; RET               ; 
loc_8ec6:                              ; >8ec6
       movb @saved_x,a                 ; LD A,($5E16)      ; 
       movb a,@player_x                ; LD ($EA93),A      ; 
       movb @saved_y,a                 ; LD A,($5E17)      ; 
       movb a,@player_y                ; LD ($EA94),A      ; 
       movb @saved_graphic,a           ; LD A,($5E15)      ; 
       jmp  loc_8eb6                   ; JR $8EB6          ; 

* reduce health by 32
* 
* Used by the routine at #R$85b2.
damage_32:                             ; >8ed7
       movb @player_energy,a           ; LD A,($5E28)      ; 
       sb   @bytes+>20,a               ; SUB $20           ; lose 32 health
       jeq  loc_8ee1                   ; JR Z,$8EE1        ; 
       jnc  loc_8ee9                   ; JR NC,$8EE9       ; TODO: check code. jump if positive
       sb   a,a                        ; XOR A             ; 
loc_8ee1:                              ; >8ee1
       movb a,@player_energy           ; LD ($5E28),A      ; 
       .call @draw_chicken             ; CALL $8B8A        ; draw chicken energy bar
       jmp  player_dead                ; JR $8EA0          ; 
loc_8ee9:                              ; >8ee9
       movb a,@player_energy           ; LD ($5E28),A      ; 
       b    @draw_chicken              ; JP $8B8A          ; draw chicken energy bar

* apply player movement, including auto-walk
* 
* Used by the routine at #R$8d77.
move_player:                           ; >8eef
       movb @>02(ix),a                 ; LD A,(IX+$02)     ; 
       andi a,>0f00                    ; AND $0F           ; auto-walk active?
       jne  auto_walk                  ; JR NZ,$8F35       ; jump if so
       movb @e,a                       ; LD A,E            ; x acceleration
       ab   @>06(ix),a                 ; ADD A,(IX+$06)    ; add x velocity
       ; JP M,$8F21                    ; JP M,$8F21        ; jump if moving left
       cb   a,@l                       ; CP L              ; max x velocity?
       jl   loc_8f01                   ; JR C,$8F01        ; jump if not
       movb @l,a                       ; LD A,L            ; limit velocity to max
loc_8f01:                              ; >8f01
       movb a,@>06(ix)                 ; LD (IX+$06),A     ; update x velocity
       movb d,a                        ; LD A,D            ; y acceleration
       ab   @>07(ix),a                 ; ADD A,(IX+$07)    ; add y velocity
       ; JP M,$8F2B                    ; JP M,$8F2B        ; jump if moving up
       cb   a,h                        ; CP H              ; max y velocity?
       jl   loc_8f0f                   ; JR C,$8F0F        ; jump if not
       movb h,a                        ; LD A,H            ; limit velocity to max
loc_8f0f:                              ; >8f0f
       movb a,@>07(ix)                 ; LD (IX+$07),A     ; update y velocity
       movb @>06(ix),a                 ; LD A,(IX+$06)     ; 
       .call @get_signed_b7_4          ; CALL $8F80        ; return signed top nibble
       movb a,@e                       ; LD E,A            ; x offset
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; 
       .call @get_signed_b7_4          ; CALL $8F80        ; return signed top nibble
       movb a,d                        ; LD D,A            ; y move offset
       .ret                            ; RET               ; 
loc_8f21:                              ; >8f21
       neg a                           ; NEG               ; abs
       cb   a,@l                       ; CP L              ; max x velocity?
       jl   loc_8f27                   ; JR C,$8F27        ; jump if not
       movb @l,a                       ; LD A,L            ; limit velocity to max
loc_8f27:                              ; >8f27
       neg a                           ; NEG               ; re-negate
       jmp  loc_8f01                   ; JR $8F01          ; 
loc_8f2b:                              ; >8f2b
       neg a                           ; NEG               ; abs
       cb   a,h                        ; CP H              ; max y velocity?
       jl   loc_8f31                   ; JR C,$8F31        ; jump if not
       movb h,a                        ; LD A,H            ; limit velocity to max
loc_8f31:                              ; >8f31
       neg a                           ; NEG               ; re-negate
       jmp  loc_8f0f                   ; JR $8F0F          ; 
auto_walk:                             ; >8f35
       movb @>06(ix),a                 ; LD A,(IX+$06)     ; x velocity
       ; AND A                         ; AND A             ; x movement?
       ; JP M,$8F52                    ; JP M,$8F52        ; jump if left
       andi a,>f000                    ; AND $F0           ; any non-fractional movement?
       jeq  loc_8f42                   ; JR Z,$8F42        ; jump if not
       movb @bytes+>02,a               ; LD A,$02          ; walk right 2 pixels
loc_8f42:                              ; >8f42
       movb a,@e                       ; LD E,A            ; x walk in e
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; 
       ; AND A                         ; AND A             ; auto-walk up/down?
       ; JP M,$8F5C                    ; JP M,$8F5C        ; jump if up
       andi a,>f000                    ; AND $F0           ; any non-fractional movement?
       jeq  loc_8f50                   ; JR Z,$8F50        ; jump if not
       movb @bytes+>02,a               ; LD A,$02          ; walk down 2 pixels
loc_8f50:                              ; >8f50
       movb a,d                        ; LD D,A            ; y walk in d
       .ret                            ; RET               ; 
loc_8f52:                              ; >8f52
       neg a                           ; NEG               ; negate for left
       andi a,>f000                    ; AND $F0           ; any non-fractional movement?
       jeq  loc_8f42                   ; JR Z,$8F42        ; jump if not
       movb @b254,a                    ; LD A,$FE          ; walk left 2 pixels
       jmp  loc_8f42                   ; JR $8F42          ; 
loc_8f5c:                              ; >8f5c
       neg a                           ; NEG               ; negate for up
       andi a,>f000                    ; AND $F0           ; any non-fractional movement?
       jeq  loc_8f50                   ; JR Z,$8F50        ; jump if not
       movb @b254,a                    ; LD A,$FE          ; walk up 2 pixels
       jmp  loc_8f50                   ; JR $8F50          ; 
* This entry point is used by the routine at #R$8d77.
apply_move:                            ; >8f66
       movb @>02(ix),r0                ; BIT 4,(IX+$02)    ; x movement allowed?
       andi r0,>1000                   ;                   
       jne  loc_8f73                   ; JR NZ,$8F73       ; jump if not
       movb @e,a                       ; LD A,E            ; delta x
       ab   @>03(ix),a                 ; ADD A,(IX+$03)    ; apply x movement
       movb a,@>03(ix)                 ; LD (IX+$03),A     ; 
loc_8f73:                              ; >8f73
       movb @>02(ix),r0                ; BIT 5,(IX+$02)    ; y movement allowed?
       andi r0,>2000                   ;                   
       jeq  !                          ; RET NZ            ; return if not
       .ret                            ;                   
!
       movb d,a                        ; LD A,D            ; delta y
       ab   @>04(ix),a                 ; ADD A,(IX+$04)    ; apply y movement
       movb a,@>04(ix)                 ; LD (IX+$04),A     ; 
       .ret                            ; RET               ; 

* return signed top nibble
* 
* Used by the routine at #R$8eef.
get_signed_b7_4:                       ; >8f80
       ; AND A                         ; AND A             ; positive?
       ; JP P,$8F8F                    ; JP P,$8F8F        ; jump if so
       neg a                           ; NEG               ; negate
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; high nibble to low nibble
       andi a,>0f00                    ; AND $0F           ; keep low nibble
       neg a                           ; NEG               ; re-negate
       .ret                            ; RET               ; 
loc_8f8f:                              ; >8f8f
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; high nibble to low nibble
       andi a,>0f00                    ; AND $0F           ; keep low nibble
       .ret                            ; RET               ; 

* decelerate player movement
* 
* Used by the routine at #R$8d77.
slow_player:                           ; >8f96
       movb @>02(ix),a                 ; LD A,(IX+$02)     ; 
       andi a,>0f00                    ; AND $0F           ; is auto-walk active?
       jeq  !                          ; RET NZ            ; return if so
       .ret                            ;                   
!
       movb @>06(ix),a                 ; LD A,(IX+$06)     ; 
       ; AND A                         ; AND A             ; x movement?
       jeq  loc_8fad                   ; JR Z,$8FAD        ; jump if not
       ; JP M,$8FBE                    ; JP M,$8FBE        ; jump if left
       sb   @l,a                       ; SUB L             ; decelerate
       ; JP P,$8FAA                    ; JP P,$8FAA        ; jump if still positive
stop_x:                                ; >8fa9
       sb   a,a                        ; XOR A             ; stopped on x axis
loc_8faa:                              ; >8faa
       movb a,@>06(ix)                 ; LD (IX+$06),A     ; update x velocity
loc_8fad:                              ; >8fad
       movb @>07(ix),a                 ; LD A,(IX+$07)     ; 
       ; AND A                         ; AND A             ; y movement?
       jne  !                          ; RET Z             ; return if not
       .ret                            ;                   
!
       ; JP M,$8FC4                    ; JP M,$8FC4        ; jump if moving up
       sb   h,a                        ; SUB H             ; decelerate
       ; JP P,$8FBA                    ; JP P,$8FBA        ; jump if still positive
stop_y:                                ; >8fb9
       sb   a,a                        ; XOR A             ; clear auto-walk up/down
loc_8fba:                              ; >8fba
       movb a,@>07(ix)                 ; LD (IX+$07),A     ; update y velocity
       .ret                            ; RET               ; 
loc_8fbe:                              ; >8fbe
       ab   @l,a                       ; ADD A,L           ; decelerate
       ; JP M,$8FAA                    ; JP M,$8FAA        ; jump if still negative
       jmp  stop_x                     ; JR $8FA9          ; stopped on x axis
loc_8fc4:                              ; >8fc4
       ab   h,a                        ; ADD A,H           ; decelerate
       ; JP M,$8FBA                    ; JP M,$8FBA        ; jump if negative
       jmp  stop_y                     ; JR $8FB9          ; stopped on y axis

* check if walls are blocking movement in DE
* 
* Used by the routine at #R$8d77.
chk_wall_move:                         ; >8fca
       .push de                        ; PUSH DE           ; 
       movb @e,a                       ; LD A,E            ; 
       ab   @>03(ix),a                 ; ADD A,(IX+$03)    ; apply x movement
       movb a,@e                       ; LD E,A            ; 
       movb @>04(ix),d                 ; LD D,(IX+$04)     ; apply y movement
       movb @bytes+>10,b               ; LD B,$10          ; x bit mask
       .call @chk_walls                ; CALL $8FE9        ; check if position is within room interior
       .pop de                         ; POP DE            ; 
       .push de                        ; PUSH DE           ; 
       movb @>03(ix),@e                ; LD E,(IX+$03)     ; 
       movb d,a                        ; LD A,D            ; 
       ab   @>04(ix),a                 ; ADD A,(IX+$04)    ; 
       movb a,d                        ; LD D,A            ; 
       movb @bytes+>20,b               ; LD B,$20          ; 
       .call @chk_walls                ; CALL $8FE9        ; check if position is within room interior
       .pop de                         ; POP DE            ; 
       .ret                            ; RET               ; 

* check if position is within room interior
* 
* Used by the routine at #R$8fca.
chk_walls:                             ; >8fe9
       li   hl,room_width              ; LD HL,$5E1D       ; 
       movb @e,a                       ; LD A,E            ; player x
       sb   @bytes+>58,a               ; SUB $58           ; subtract room centre x
       ; JP P,$8FF4                    ; JP P,$8FF4        ; 
       neg a                           ; NEG               ; abs
loc_8ff4:                              ; >8ff4
       cb   a,*hl                      ; CP (HL)           ; within room width?
       jl   !                          ; RET NC            ; return if so
       .ret                            ;                   
!
       inc  hl                         ; INC HL            ; 
       movb d,a                        ; LD A,D            ; player y
       sb   @bytes+>68,a               ; SUB $68           ; subtract room centre y
       ; JP P,$8FFF                    ; JP P,$8FFF        ; 
       neg a                           ; NEG               ; abs
loc_8fff:                              ; >8fff
       cb   a,*hl                      ; CP (HL)           ; within room height?
       jl   !                          ; RET NC            ; return if so
       .ret                            ;                   
!
       movb b,a                        ; LD A,B            ; 
       inv  a                          ; CPL               ; 
       ; AND (IX+$02)                  ; AND (IX+$02)      ; clear bit in B
       movb a,@>02(ix)                 ; LD (IX+$02),A     ; 
       .ret                            ; RET               ; 

* check if decor is blocking movement in DE
* 
* Used by the routine at #R$8d77.
chk_decor_move:                        ; >900a
       .push de                        ; PUSH DE           ; 
       movb @e,a                       ; LD A,E            ; 
       ab   @>03(ix),a                 ; ADD A,(IX+$03)    ; 
       movb a,@e                       ; LD E,A            ; 
       movb @>04(ix),d                 ; LD D,(IX+$04)     ; 
       movb @bytes+>10,a               ; LD A,$10          ; bit for x movement allowed
       .ex_af_af_                      ; EX AF,AF'         ; 
       .call @chk_decor                ; CALL $902B        ; check if room decor is blocking movement
       .pop de                         ; POP DE            ; 
       .push de                        ; PUSH DE           ; 
       movb @>03(ix),@e                ; LD E,(IX+$03)     ; 
       movb d,a                        ; LD A,D            ; 
       ab   @>04(ix),a                 ; ADD A,(IX+$04)    ; 
       movb a,d                        ; LD D,A            ; 
       movb @bytes+>20,a               ; LD A,$20          ; bit for y movement allowed
       .ex_af_af_                      ; EX AF,AF'         ; 
       .call @chk_decor                ; CALL $902B        ; check if room decor is blocking movement
       .pop de                         ; POP DE            ; 
       .ret                            ; RET               ; 

* check if room decor is blocking movement
* 
* Used by the routine at #R$900a.
chk_decor:                             ; >902b
       movb @>01(ix),@c                ; LD C,(IX+$01)     ; 
       sb   b,b                        ; LD B,$00          ; 
       li   hl,room_table              ; LD HL,$757D       ; 
       ; SLA C                         ; SLA C             ; 
       sla  b,1                        ; RL B              ; TODO: check code. * 2 (bytes per entry)
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,@c                     ; LD C,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,b                      ; LD B,(HL)         ; 
loc_903b:                              ; >903b
       movb *bc,a                      ; LD A,(BC)         ; room item LSB
       inc  bc                         ; INC BC            ; 
       movb a,@l                       ; LD L,A            ; 
       movb *bc,a                      ; LD A,(BC)         ; room item MSB
       inc  bc                         ; INC BC            ; 
       movb a,h                        ; LD H,A            ; 
       socb @l,a                       ; OR L              ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       .push bc                        ; PUSH BC           ; 
       li   bc,room_table              ; LD BC,$757D       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  loc_9055                   ; JR Z,$9055        ; jump if so
       li   bc,>0008                   ; LD BC,$0008       ; 8 bytes per entry
       a    bc,hl                      ; ADD HL,BC         ; next (linked) entry
loc_9055:                              ; >9055
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,@c                     ; LD C,(HL)         ; x
       inc  hl                         ; INC HL            ; 
       movb *hl,b                      ; LD B,(HL)         ; y
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; flags
       inc  hl                         ; INC HL            ; 
       movb a,r0                       ; BIT 2,A           ; 
       andi r0,>0400                   ;                   
       jne  loc_909b                   ; JR NZ,$909B       ; 
       movb a,r0                       ; BIT 3,A           ; 
       andi r0,>0800                   ;                   
       jne  loc_9098                   ; JR NZ,$9098       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       sra  a,1                        ; SRA A             ; 
       sra  a,1                        ; SRA A             ; 
       andi a,>fc00                    ; AND $FC           ; 
       ab   @c,a                       ; ADD A,C           ; 
       sb   @e,a                       ; SUB E             ; 
       neg a                           ; NEG               ; 
       movb a,@c                       ; LD C,A            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       andi a,>3c00                    ; AND $3C           ; 
       inc  hl                         ; INC HL            ; 
       cb   a,@c                       ; CP C              ; 
       jl   loc_9098                   ; JR C,$9098        ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       sra  a,1                        ; SRA A             ; 
       sra  a,1                        ; SRA A             ; 
       andi a,>fc00                    ; AND $FC           ; 
       ab   b,a                        ; ADD A,B           ; 
       sb   d,a                        ; SUB D             ; 
       movb a,b                        ; LD B,A            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       andi a,>3c00                    ; AND $3C           ; 
       cb   a,b                        ; CP B              ; 
       jl   loc_9098                   ; JR C,$9098        ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb a,@c                       ; LD C,A            ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb @c,a                       ; LD A,C            ; 
       inv  a                          ; CPL               ; 
       ; AND (IX+$02)                  ; AND (IX+$02)      ; disallow movement bit
loc_9095:                              ; >9095
       movb a,@>02(ix)                 ; LD (IX+$02),A     ; 
loc_9098:                              ; >9098
       .pop bc                         ; POP BC            ; 
       jmp  loc_903b                   ; JR $903B          ; 
loc_909b:                              ; >909b
       movb *hl,a                      ; LD A,(HL)         ; 
       sra  a,1                        ; SRA A             ; 
       sra  a,1                        ; SRA A             ; 
       andi a,>fc00                    ; AND $FC           ; 
       ab   @c,a                       ; ADD A,C           ; 
       sb   @e,a                       ; SUB E             ; 
       neg a                           ; NEG               ; 
       movb a,@c                       ; LD C,A            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       andi a,>3c00                    ; AND $3C           ; 
       inc  hl                         ; INC HL            ; 
       cb   a,@c                       ; CP C              ; 
       jl   loc_9098                   ; JR C,$9098        ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       sra  a,1                        ; SRA A             ; 
       sra  a,1                        ; SRA A             ; 
       andi a,>fc00                    ; AND $FC           ; 
       ab   b,a                        ; ADD A,B           ; 
       sb   d,a                        ; SUB D             ; 
       movb a,b                        ; LD B,A            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       andi a,>3c00                    ; AND $3C           ; 
       cb   a,b                        ; CP B              ; 
       jl   loc_9098                   ; JR C,$9098        ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb a,@c                       ; LD C,A            ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb @c,a                       ; LD A,C            ; 
       socb @>02(ix),a                 ; OR (IX+$02)       ; allow movement bit
       jmp  loc_9095                   ; JR $9095          ; 

* check if player has left through a door
* 
* Used by the routines at #R$91f2, #R$9222 and #R$9731.
check_exit:                            ; >90cc
       movb @player_contact,a          ; LD A,($EA92)      ; 
       andi a,>0f00                    ; AND $0F           ; touching enemy?
       jeq  !                          ; RET NZ            ; return if so [check]
       .ret                            ;                   
!
       movb @player,a                  ; LD A,($EA90)      ; 
       sb   one,a                      ; DEC A             ; 
       cb   a,@bytes+>30               ; CP $30            ; player active?
       jl   !                          ; RET NC            ; return if not
       .ret                            ;                   
!
       movb @>05(ix),r0                ; BIT 6,(IX+$05)    ; top/bottom door?
       andi r0,>4000                   ;                   
       jeq  loc_90e1                   ; JR Z,$90E1        ; jump if so
       ; SRL C                         ; SRL C             ; halve vertical distance
loc_90e1:                              ; >90e1
       movb @player_x,a                ; LD A,($EA93)      ; 
       sb   @>03(ix),a                 ; SUB (IX+$03)      ; x distance
       cb   a,@c                       ; CP C              ; within range?
       jl   !                          ; RET NC            ; return if not
       .ret                            ;                   
!
       movb @>05(ix),r0                ; BIT 6,(IX+$05)    ; left/right door?
       andi r0,>4000                   ;                   
       jne  loc_90f1                   ; JR NZ,$90F1       ; jump if so
       srl  b,1                        ; SRL B             ; halve horiztonal distance
loc_90f1:                              ; >90f1
       movb @player_y,a                ; LD A,($EA94)      ; 
       sb   @>04(ix),a                 ; SUB (IX+$04)      ; y distance to exit
       neg a                           ; NEG               ; 
       cb   a,b                        ; CP B              ; within range?
       .ret                            ; RET               ; return no-carry if not

* check if player is touching entity
* 
* Used by the routines at #R$8c63, #R$92f5 and #R$988b.
check_touching:                        ; >90fb
       movb @player_x,a                ; LD A,($EA93)      ; 
       sb   @>03(ix),a                 ; SUB (IX+$03)      ; x distance
       ; JP P,$9106                    ; JP P,$9106        ; 
       neg a                           ; NEG               ; abs
loc_9106:                              ; >9106
       cb   a,@bytes+>0c               ; CP $0C            ; within range?
       jl   !                          ; RET NC            ; return if not
       .ret                            ;                   
!
       movb @player_y,a                ; LD A,($EA94)      ; 
       sb   @>04(ix),a                 ; SUB (IX+$04)      ; y distance
       ; JP P,$9114                    ; JP P,$9114        ; 
       neg a                           ; NEG               ; abs
loc_9114:                              ; >9114
       cb   a,@bytes+>0c               ; CP $0C            ; within range?
       .ret                            ; RET               ; return no-carry if not

* move player to room linked to entity (usually door)
* 
* Used by the routines at #R$91f2, #R$9244 and #R$9731.
change_room:                           ; >9117
       .call @get_linked_door          ; CALL $9286        ; get connected door exit
       movb @>01(ix),a                 ; LD A,(IX+$01)     ; 
       movb a,@player_room             ; LD ($EA91),A      ; move player to connected room
       movb @>02(ix),a                 ; LD A,(IX+$02)     ; bits 3-0 used for x offset
       sla  a,1                        ; RLCA              ; TODO: check code. * 2
       andi a,>1e00                    ; AND $1E           ; 
       ab   @>03(ix),a                 ; ADD A,(IX+$03)    ; add x
       movb a,@player_x                ; LD ($EA93),A      ; set player x to exit
       movb @>02(ix),a                 ; LD A,(IX+$02)     ; bits 7-4 used for y offset
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; * 2 (effectively)
       andi a,>1e00                    ; AND $1E           ; 
       neg a                           ; NEG               ; invert
       ab   @>04(ix),a                 ; ADD A,(IX+$04)    ; add y
       movb a,@player_y                ; LD ($EA94),A      ; set player y to exit
       .call @set_entry_walk           ; CALL $986A        ; auto-walk into the room
       movb @player_contact,a          ; LD A,($EA92)      ; 
       socb @bytes+>0f,a               ; OR $0F            ; 
       movb a,@player_contact          ; LD ($EA92),A      ; 
* This entry point is used by the routine at #R$7d9a.
enter_room:                            ; >9147
       movb @player_room,a             ; LD A,($EA91)      ; 
       .call @visit_room               ; CALL $96AF        ; mark room A as visited
       .call @clear_play_area          ; CALL $8093        ; clear screen and attrs of play area
       .call @draw_room_frame          ; CALL $9BEA        ; draw lines that make up outer room frame
       .call @draw_panel_attrs         ; CALL $A240        ; draw side-panel colours, which follow room colour
       .call @draw_inventory           ; CALL $A13B        ; draw any items in player inventory
       .call @entry_sound              ; CALL $A403        ; room entry sound effect
       b    @main_loop                 ; JP $7DC3          ; 

* open door handler
h_door_open:                           ; >915f
       movb @counter_low,a             ; LD A,($5E12)      ; 
       andi a,>0100                    ; AND $01           ; 2 alternating tasks
       jeq  !                          ; JP NZ,$91F2       ; jump if we're checking exits this time
       b    @h_door_exit               ;                   
!
       movb @door_timer,a              ; LD A,($5E2E)      ; 
       ; AND A                         ; AND A             ; door timer expired?
       jeq  loc_9174                   ; JR Z,$9174        ; jump if so
       sb   one,a                      ; DEC A             ; reduce timer
       movb a,@door_timer              ; LD ($5E2E),A      ; 
       b    @h_door_exit               ; JP $91F2          ; jump to check exits
loc_9174:                              ; >9174
       movb @in_doorway,a              ; LD A,($5E2D)      ; 
       ; AND A                         ; AND A             ; player standing in doorway?
       jeq  !                          ; JP NZ,$91F2       ; jump if so (run exit logic only)
       b    @h_door_exit               ;                   
!
       jmp  loc_9193                   ; JR $9193          ; 
h_door_closed:                         ; >917d
       movb @counter_low,a             ; LD A,($5E12)      ; closed door handler
       andi a,>0100                    ; AND $01           ; 2 alternating tasks
       jeq  !                          ; JP NZ,$91FE       ; jump if we're drawing this time
       b    @h_room_item               ;                   
!
       movb @door_timer,a              ; LD A,($5E2E)      ; 
       ; AND A                         ; AND A             ; door timer expired?
       jne  !                          ; JP Z,$9193        ; jump if so
       b    @loc_9193                  ;                   
!
       sb   one,a                      ; DEC A             ; 
       movb a,@door_timer              ; LD ($5E2E),A      ; 
       b    @h_room_item               ; JP $91FE          ; draw room item
loc_9193:                              ; >9193
       movb @bytes+>5e,a               ; LD A,$5E          ; 0x5E * 2 / 50 = 3.76 seconds, due to halved timer
                                                           ; processing
       movb a,@door_timer              ; LD ($5E2E),A      ; 
       movb @>05(ix),a                 ; LD A,(IX+$05)     ; save door attr
       .push af                        ; PUSH AF           ; 
       socb @bytes+>03,a               ; OR $03            ; 
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; 
       .call @draw_rot_obj             ; CALL $9213        ; undraw door
       movb *ix,a                      ; LD A,(IX+$00)     ; entity type
       xor  one,a                      ; XOR $01           ; toggle open/close state
       .call @set_door_type            ; CALL $9260        ; set door type for both linked entities
       .call @draw_rot_obj             ; CALL $9213        ; redraw door
       .pop af                         ; POP AF            ; 
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; restore door attr
       .call @update_door              ; CALL $9546        ; update solid/passable door state
       .call @h_room_item              ; CALL $91FE        ; draw room item
       b    @door_sound                ; JP $A46E          ; door sound (short burst of white noise)

* closed trapdoor handler
h_trap_closed:                         ; >91bc
       movb @counter_low,a             ; LD A,($5E12)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; JP NZ,$91FE       ; draw room item
       b    @h_room_item               ;                   
!
       jmp  trap_common                ; JR $91CC          ; 
h_trap_open:                           ; >91c5
       movb @rand8,a                   ; LD A,($5E05)      ; open trapdoor handler
       ; AND A                         ; AND A             ; zero?
       jeq  !                          ; JP NZ,$9731       ; jump if not
       b    @chk_trap_exit             ;                   
!
trap_common:                           ; >91cc
       equ  $
       movb @>05(ix),a                 ; LD A,(IX+$05)     ; 
       .push af                        ; PUSH AF           ; 
       socb @bytes+>03,a               ; OR $03            ; 
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; 
       .call @draw_rot_obj             ; CALL $9213        ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       xor  one,a                      ; XOR $01           ; toggle open/closed state
       movb a,*ix                      ; LD (IX+$00),A     ; 
       .call @draw_rot_obj             ; CALL $9213        ; 
       .pop af                         ; POP AF            ; 
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; 
       .call @h_room_item              ; CALL $91FE        ; draw room item
       b    @door_sound                ; JP $A46E          ; door sound (short burst of white noise)

* big door exit handler
h_big_door_exit:                       ; >91ed
       li   bc,>2020                   ; LD BC,$2020       ; 32x32 size
       jmp  loc_91f5                   ; JR $91F5          ; 

* door exit handler
* 
* Used by the routines at #R$915f and #R$9421.
h_door_exit:                           ; >91f2
       li   bc,>1111                   ; LD BC,$1111       ; 17x17 exit size
* This entry point is used by the routines at #R$91ed and #R$961b.
loc_91f5:                              ; >91f5
       .call @check_exit               ; CALL $90CC        ; check if player has left through a door
       ; CALL C,$9117                  ; CALL C,$9117      ; move player to room linked to entity (usually door)
       b    @h_room_item               ; JP $91FE          ; draw room item

* draw room item
* 
* Used by the routines at #R$915f, #R$91bc, #R$91f2, #R$9244, #R$9252, #R$9421,
* #R$961b and #R$9731.
h_room_item:                           ; >91fe
       movb @>03(ix),@e                ; LD E,(IX+$03)     ; xpos
       movb @>04(ix),d                 ; LD D,(IX+$04)     ; ypos
       sb   one,d                      ; DEC D             ; 
       movb *ix,@c                     ; LD C,(IX+$00)     ; graphic
       movb @>05(ix),b                 ; LD B,(IX+$05)     ; attr
       .call @draw_bc_at_de            ; CALL $9980        ; B=attr, C=graphic, E=xpos, D=ypos
       movb @game_flags,a              ; LD A,($5E14)      ; b0 set if room content drawn
       ; AND A                         ; AND A             ; room content drawn?
       jeq  !                          ; RET NZ            ; return if so
       .ret                            ;                   
!

* Routine at 9213
* 
* Used by the routines at #R$8b8a, #R$915f and #R$91bc.
draw_rot_obj:                          ; >9213
       equ  $
       movb @>03(ix),@e                ; LD E,(IX+$03)     ; xpos
       movb @>04(ix),d                 ; LD D,(IX+$04)     ; ypos
       movb *ix,@c                     ; LD C,(IX+$00)     ; graphic index
       movb @>05(ix),b                 ; LD B,(IX+$05)     ; orientation
       b    @draw_orientation          ; JP $9962          ; 

* return if player has required key (C if opened, NC if locked)
* 
* Used by the routines at #R$9244 and #R$9252.
check_key_colour:                      ; >9222
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>0300                    ; AND $03           ; locked door colour index
       li   hl,key_attrs               ; LD HL,$925C       ; 
       .call @add_hl_a                 ; CALL $926C        ; HL = HL + A
       movb *hl,d                      ; LD D,(HL)         ; key colour attr
       movb @bytes+>81,@e              ; LD E,$81          ; key graphic
       .call @check_carrying           ; CALL $9273        ; is player carrying the required key colour?
       jeq  !                          ; JP NZ,$923F       ; jump if not
       b    @loc_923f                  ;                   
!
       .call @enter_door               ; CALL $954D        ; enter linked object (door etc.)
       li   bc,>1111                   ; LD BC,$1111       ; 17x17 size
       b    @check_exit                ; JP $90CC          ; check if player has left through a door
loc_923f:                              ; >923f
       .call @loc_9565                 ; CALL $9565        ; 
       ; AND A                         ; AND A             ; door locked
       .ret                            ; RET               ; 

* coloured locked door handler
h_door_locked:                         ; >9244
       .call @check_key_colour         ; CALL $9222        ; does player have the required key colour?
       joc  !                          ; JP NC,$91FE       ; TODO: check code. jump if not
       b    @h_room_item               ;                   
!
       movb @bytes+>02,a               ; LD A,$02          ; open door graphic
* This entry point is used by the routine at #R$9252.
loc_924c:                              ; >924c
       .call @set_door_type            ; CALL $9260        ; set door type for both linked entities
       b    @change_room               ; JP $9117          ; move player to room linked to entity (usually door)

* coloured cave locked door handler
h_cave_locked:                         ; >9252
       .call @check_key_colour         ; CALL $9222        ; return if player has required key (C if opened, NC if
                                                           ; locked)
       joc  !                          ; JP NC,$91FE       ; TODO: check code. draw room item
       b    @h_room_item               ;                   
!
       movb one,a                      ; LD A,$01          ; open cave graphic
       jmp  loc_924c                   ; JR $924C          ; 

* Data block at 925c
key_attrs:                             ; >925c
       byte >42                                                      ; red
       byte >44                                                      ; green
       byte >45                                                      ; cyan
       byte >46                                                      ; yellow

* set door type for both linked entities
* 
* Used by the routines at #R$915f and #R$9244.
set_door_type:                         ; >9260
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       movb a,*hl                      ; LD (HL),A         ; set door graphic
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb @l,a                       ; LD A,L            ; 
       li   r0,8*256                   ; XOR $08           ; linked entry
       xor  r0,a                       ;                   
       movb a,@l                       ; LD L,A            ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb a,*hl                      ; LD (HL),A         ; set linked door graphic
       .ret                            ; RET               ; 

* HL = HL + A
* 
* Used by the routines at #R$9222 and #R$a00e.
add_hl_a:                              ; >926c
       ab   @l,a                       ; ADD A,L           ; 
       movb a,@l                       ; LD L,A            ; 
       movb h,a                        ; LD A,H            ; 
       ab   @zero,a                    ; ADC A,$00         ; 
       movb a,h                        ; LD H,A            ; 
       .ret                            ; RET               ; 

* check if player is carrying object E with colour D
* 
* Used by the routines at #R$8906, #R$8988 and #R$9222.
check_carrying:                        ; >9273
       movb @bytes+>03,b               ; LD B,$03          ; 3 inventory slots to search
       li   hl,inventory1+>0002        ; LD HL,$5E32       ; 
loc_9278:                              ; >9278
       movb *hl,a                      ; LD A,(HL)         ; item colour
       cb   a,@e                       ; CP E              ; match?
       inc  hl                         ; INC HL            ; 
       jne  loc_9280                   ; JR NZ,$9280       ; jump if not
       movb *hl,a                      ; LD A,(HL)         ; item graphic
       cb   a,d                        ; CP D              ; match?
       jne  !                          ; RET Z             ; return if so
       .ret                            ;                   
!
loc_9280:                              ; >9280
       equ  $
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; next inventory slot
       sb   one,b                      ; DJNZ $9278        ; 
       jne  loc_9278                   ;                   
       .ret                            ; RET               ; 

* get connected door exit
* 
* Used by the routines at #R$9117 and #R$9546.
get_linked_door:                       ; >9286
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       movb @l,a                       ; LD A,L            ; 
       li   r0,8*256                   ; XOR $08           ; swap 8-byte entry
       xor  r0,a                       ;                   
       movb a,@l                       ; LD L,A            ; 
       .push hl                        ; PUSH HL           ; 
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 

* draw all non-monster entities in the current room
* 
* Used by the routine at #R$7e13.
draw_entities:                         ; >9291
       li   ix,player                  ; LD IX,$EA90       ; 
loc_9295:                              ; >9295
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; AND A                         ; AND A             ; slot used?
       jeq  loc_92a6                   ; JR Z,$92A6        ; jump if not
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jne  loc_92a6                   ; JR NZ,$92A6       ; jump if not
       .call @draw_entity              ; CALL $9F4A        ; draw entity graphic (no attrs)
loc_92a6:                              ; >92a6
       li   de,>0008                   ; LD DE,$0008       ; 8 bytes per entry
       a    de,ix                      ; ADD IX,DE         ; 
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       li   de,creature1               ; LD DE,$EE60       ; end marker
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; more 8-byte entries to process?
       joc  loc_9295                   ; JR C,$9295        ; TODO: check code. jump back if so
loc_92b6:                              ; >92b6
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; AND A                         ; AND A             ; slot used?
       jeq  loc_92c7                   ; JR Z,$92C7        ; jump if not
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jne  loc_92c7                   ; JR NZ,$92C7       ; jump if not
       .call @draw_entity              ; CALL $9F4A        ; draw entity graphic (no attrs)
loc_92c7:                              ; >92c7
       li   de,>0010                   ; LD DE,$0010       ; 16 bytes per entry
       a    de,ix                      ; ADD IX,DE         ; 
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       li   de,linked_items            ; LD DE,$EEE0       ; end of 16-byte entities
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; more 16-byte entries to draw?
       joc  loc_92b6                   ; JR C,$92B6        ; TODO: check code. jump back if so
       .ret                            ; RET               ; 

* clear pickup key flag
* 
* Used by the routine at #R$92f5.
pickup_released:                       ; >92d8
       movb @pickup_flags,a            ; LD A,($5E1F)      ; 
       andi a,>fd00                    ; AND $FD           ; clear b1 (pickup key not pressed)
       movb a,@pickup_flags            ; LD ($5E1F),A      ; 
* This entry point is used by the routines at #R$8c63, #R$92f5, #R$95d7 and
* #R$988b.
draw_16x16:                            ; >92e0
       movb @bytes+>10,a               ; LD A,$10          ; 16 lines high by default

* set spawn appearance width/height
* 
* Used by the routine at #R$8cb7.
set_appear_w_h:                        ; >92e2
       movb a,@height_lines            ; LD ($5E11),A      ; 
       movb @>03(ix),a                 ; LD A,(IX+$03)     ; 
       andi a,>0700                    ; AND $07           ; x aligned on cell boundary?
       movb @bytes+>02,a               ; LD A,$02          ; 2 bytes wide
       jeq  loc_92ef                   ; JR Z,$92EF        ; 
       ab   one,a                      ; INC A             ; extra byte needed
loc_92ef:                              ; >92ef
       movb a,@width_bytes             ; LD ($5E10),A      ; 
       b    @set_entity_attrs2         ; JP $A01A          ; set attrs covering previous and new position

* pickup item handler
h_pickup_item:                         ; >92f5
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       movb @pickup_pressed,a          ; LD A,($5E20)      ; 
       ; AND A                         ; AND A             ; if pick-up key pressed?
       jeq  pickup_released            ; JR Z,$92D8        ; jump if not
       movb @pickup_flags,a            ; LD A,($5E1F)      ; 
       andi a,>0300                    ; AND $03           ; is pick-up allowed?
       jne  draw_16x16                 ; JR NZ,$92E0       ; jump if not
       movb @player,a                  ; LD A,($EA90)      ; 
       sb   one,a                      ; DEC A             ; 
       cb   a,@bytes+>30               ; CP $30            ; is player active?
       jhe  draw_16x16                 ; JR NC,$92E0       ; jump if not
       .call @check_touching           ; CALL $90FB        ; is player touching item?
       jnc  draw_16x16                 ; JR NC,$92E0       ; TODO: check code. jump if not
       movb @pickup_flags,a            ; LD A,($5E1F)      ; 
       socb @bytes+>03,a               ; OR $03            ; disallow further pickups
       movb a,@pickup_flags            ; LD ($5E1F),A      ; 
       .call @drop_item                ; CALL $9358        ; drop last item in inventory
       .call @shift_inventory          ; CALL $934C        ; move items 1+2 to slots 2+3
       .call @add_inventory            ; CALL $9326        ; add item to inventory slot 1
       b    @draw_inventory            ; JP $A13B          ; draw any items in player inventory

* add item to inventory slot 1
* 
* Used by the routine at #R$92f5.
add_inventory:                         ; >9326
       li   hl,inventory1              ; LD HL,$5E30       ; 
       .push ix                        ; PUSH IX           ; 
       .pop de                         ; POP DE            ; 
       movb @e,*hl                     ; LD (HL),E         ; entity LSB
       inc  hl                         ; INC HL            ; 
       movb d,*hl                      ; LD (HL),D         ; entity MSB
       inc  hl                         ; INC HL            ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       movb a,*hl                      ; LD (HL),A         ; graphic
       inc  hl                         ; INC HL            ; 
       movb @>05(ix),a                 ; LD A,(IX+$05)     ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .call @undraw_entity            ; CALL $9F56        ; 
       movb @room_attr,a               ; LD A,($5E1A)      ; 
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; 
       .call @set_entity_attrs2        ; CALL $A01A        ; set attrs covering previous and new position
       sb   *ix,*ix                    ; LD (IX+$00),$00   ; 
       b    @inventory_sound           ; JP $A3BD          ; 

* move items 1+2 to slots 2+3
* 
* Used by the routines at #R$92f5 and #R$93e3.
shift_inventory:                       ; >934c
       li   hl,inventory2+>0003        ; LD HL,$5E37       ; 
       li   de,inventory3+>0003        ; LD DE,$5E3B       ; 
       li   bc,>0008                   ; LD BC,$0008       ; 2 items * 4 bytes
       .lddr                           ; LDDR              ; shift up items
       .ret                            ; RET               ; 

* drop last item in inventory
* 
* Used by the routines at #R$92f5 and #R$93e3.
drop_item:                             ; >9358
       li   hl,inventory3              ; LD HL,$5E38       ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb d,a                        ; LD A,D            ; 
       socb @e,a                       ; OR E              ; 
       jne  !                          ; RET Z             ; return if no item to drop
       .ret                            ;                   
!
       .push de                        ; PUSH DE           ; 
       movb *hl,a                      ; LD A,(HL)         ; graphic idx
       inc  hl                         ; INC HL            ; 
       movb a,*de                      ; LD (DE),A         ; 
       inc  de                         ; INC DE            ; 
       movb @player_room,a             ; LD A,($EA91)      ; 
       movb a,*de                      ; LD (DE),A         ; set item room
       inc  de                         ; INC DE            ; 
       movb @bytes+>80,a               ; LD A,$80          ; 
       movb a,*de                      ; LD (DE),A         ; 
       inc  de                         ; INC DE            ; 
       movb @player_x,a                ; LD A,($EA93)      ; 
       movb a,*de                      ; LD (DE),A         ; set item xpos
       inc  de                         ; INC DE            ; 
       movb @player_y,a                ; LD A,($EA94)      ; 
       movb a,*de                      ; LD (DE),A         ; set item ypos
       inc  de                         ; INC DE            ; 
       movb *hl,a                      ; LD A,(HL)         ; inventory colour
       movb a,*de                      ; LD (DE),A         ; set item attr
       .pop de                         ; POP DE            ; 
       .call @drop_sound               ; CALL $A3C2        ; 
       .push ix                        ; PUSH IX           ; 
       .push de                        ; PUSH DE           ; 
       .pop ix                         ; POP IX            ; 
       .call @draw_entity              ; CALL $9F4A        ; draw entity graphic (no attrs)
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 

* check whether pick-up key has been pressed
* 
* Used by the routine at #R$7e13.
check_pickup_key:                      ; >938b
       movb @bytes+>7e,a               ; LD A,$7E          ; read V/C/X/Z/Shift and B/N/M/Sym/Space rows
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       inv  a                          ; CPL               ; 
       andi a,>0200                    ; AND $02           ; non-zero if Symbol Shift or Z pressed
       movb a,@pickup_pressed          ; LD ($5E20),A      ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$93be.
read_cursor:                           ; >9398
       movb @bytes+>ef,a               ; LD A,$EF          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; xxx67890
       movb a,@c                       ; LD C,A            ; 
       andi a,>0800                    ; AND $08           ; 7 key
       movb a,@e                       ; LD E,A            ; 
       movb @c,a                       ; LD A,C            ; 
       ; RRCA                          ; RRCA              ; 0xxx6789
       ; RRCA                          ; RRCA              ; 90xxx678
       andi a,>4500                    ; AND $45           ; ?+6+8 keys
       socb @e,a                       ; OR E              ; 
       movb a,@e                       ; LD E,A            ; 
       ; RRCA                          ; RRCA              ; 890xxx67
       ; RRCA                          ; RRCA              ; 7890xxx6
       andi a,>1000                    ; AND $10           ; 0 key
       socb @e,a                       ; OR E              ; 
       andi a,>1f00                    ; AND $1F           ; 
       movb a,@e                       ; LD E,A            ; 
       movb @bytes+>f7,a               ; LD A,$F7          ; xxx54321
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       srl  a,1                        ; RRA               ; TODO: check code. 1xxx5432
       srl  a,1                        ; RRA               ; TODO: check code. 21xxx543
       srl  a,1                        ; RRA               ; TODO: check code. 321xxx54
       andi a,>0200                    ; AND $02           ; 5 key
       socb @e,a                       ; OR E              ; 
       .ret                            ; RET               ; 

* return controls in A (FUDLR order, negative logic)
* 
* Used by the routines at #R$80d2, #R$8d77, #R$8dc4 and #R$8e26.
read_controls:                         ; >93be
       movb @menu_selection,a          ; LD A,($5E00)      ; 
       andi a,>0600                    ; AND $06           ; 
       jeq  read_keyboard              ; JR Z,$93CD        ; 
       cb   a,@bytes+>04               ; CP $04            ; 
       jeq  read_cursor                ; JR Z,$9398        ; 
       ; IN A,($1F)                    ; IN A,($1F)        ; read Kempston joystick
       inv  a                          ; CPL               ; 
       .ret                            ; RET               ; 
read_keyboard:                         ; >93cd
       movb @bytes+>fb,a               ; LD A,$FB          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; xxxTREWQ
       movb a,@c                       ; LD C,A            ; 
       srl  a,1                        ; RRA               ; TODO: check code. 
       andi a,>0100                    ; AND $01           ; W key
       movb a,@e                       ; LD E,A            ; 
       movb @c,a                       ; LD A,C            ; 
       ; RLA                           ; RLA               ; 
       andi a,>0200                    ; AND $02           ; Q key
       socb @e,a                       ; OR E              ; 
       movb a,@e                       ; LD E,A            ; 
       movb @c,a                       ; LD A,C            ; 
       andi a,>1c00                    ; AND $1C           ; ___TRE__
       socb @e,a                       ; OR E              ; ___TREQW
       .ret                            ; RET               ; 

* Routine at 93e3
h_blank:                               ; >93e3
       movb @player,a                  ; LD A,($EA90)      ; 
       sb   one,a                      ; DEC A             ; 
       cb   a,@bytes+>30               ; CP $30            ; is player active?
       jl   !                          ; RET NC            ; return if not
       .ret                            ;                   
!
       movb @pickup_pressed,a          ; LD A,($5E20)      ; 
       ; AND A                         ; AND A             ; pick-up key down?
       jeq  loc_9417                   ; JR Z,$9417        ; jump if not
       movb @pickup_flags,a            ; LD A,($5E1F)      ; 
       andi a,>0300                    ; AND $03           ; pick-up allowed?
       jne  loc_940e                   ; JR NZ,$940E       ; jump if not
       socb @bytes+>02,a               ; OR $02            ; pickup key pressed
       movb a,@pickup_flags            ; LD ($5E1F),A      ; 
       .call @drop_item                ; CALL $9358        ; drop last item in inventory
       .call @shift_inventory          ; CALL $934C        ; move items 1+2 to slots 2+3
       li   hl,>0000                   ; LD HL,$0000       ; 
       mov  hl,@inventory1             ; LD ($5E30),HL     ; 
       mov  hl,@inventory1+>0002       ; LD ($5E32),HL     ; 
       .call @draw_inventory           ; CALL $A13B        ; draw any items in player inventory
loc_940e:                              ; >940e
       movb @pickup_flags,a            ; LD A,($5E1F)      ; 
       andi a,>fe00                    ; AND $FE           ; pickup key not processed
       movb a,@pickup_flags            ; LD ($5E1F),A      ; 
       .ret                            ; RET               ; 
loc_9417:                              ; >9417
       movb @pickup_flags,a            ; LD A,($5E1F)      ; 
       andi a,>fd00                    ; AND $FD           ; pickup key released
       movb a,@pickup_flags            ; LD ($5E1F),A      ; 
       jmp  loc_940e                   ; JR $940E          ; 

* Routine at 9421
h_barrel:                              ; >9421
       movb @player,a                  ; LD A,($EA90)      ; 
       sb   @bytes+>21,a               ; SUB $21           ; subtract serf base graphic
       jmp  loc_9433                   ; JR $9433          ; 
h_bookcase:                            ; >9428
       movb @player,a                  ; LD A,($EA90)      ; 
       sb   @bytes+>11,a               ; SUB $11           ; subtract wizard base graphic
       jmp  loc_9433                   ; JR $9433          ; 
h_clock:                               ; >942f
       movb @player,a                  ; LD A,($EA90)      ; 
       sb   one,a                      ; DEC A             ; subtract knight base graphic
loc_9433:                              ; >9433
       cb   a,@bytes+>10               ; CP $10            ; required player type to pass through?
       jhe  loc_943d                   ; JR NC,$943D       ; jump if not
       .call @enter_door               ; CALL $954D        ; enter linked object (door etc.)
       b    @h_door_exit               ; JP $91F2          ; door exit handler
loc_943d:                              ; >943d
       .call @loc_9565                 ; CALL $9565        ; 
       b    @h_room_item               ; JP $91FE          ; draw room item

* prepare player to spawn
* 
* Used by the routines at #R$7d9a and #R$8d45.
prepare_player:                        ; >9443
       movb @menu_selection,a          ; LD A,($5E00)      ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       andi a,>3000                    ; AND $30           ; base character graphic
       ab   @bytes+>08,a               ; ADD A,$08         ; offset to desired facing direction
       movb a,@player_template+>0007   ; LD ($9488),A      ; set spawn graphic
       movb @player_room,a             ; LD A,($EA91)      ; current player room
       movb a,@player_template+>0001   ; LD ($9482),A      ; respawn in same room
       li   hl,player_template         ; LD HL,$9481       ; 
       li   de,player                  ; LD DE,$EA90       ; 
       li   bc,>0008                   ; LD BC,$0008       ; player entity size
       .ldir                           ; LDIR              ; copy to live player
       movb @bytes+>68,a               ; LD A,$68          ; flash score for 104 frames
       movb a,@flash_timer             ; LD ($5E3C),A      ; score flash timer
       movb @lives,a                   ; LD A,($5E21)      ; 
       cb   a,@bytes+>03               ; CP $03            ; first game spawn? (full lives)
       jeq  loc_9476                   ; JR Z,$9476        ; jump if so (skip drawing player)
       .push ix                        ; PUSH IX           ; 
       li   ix,player                  ; LD IX,$EA90       ; 
       .call @draw_entity              ; CALL $9F4A        ; draw entity graphic (no attrs)
       .pop ix                         ; POP IX            ; 
loc_9476:                              ; >9476
       movb @bytes+>f0,a               ; LD A,$F0          ; starting energy
       movb a,@player_energy           ; LD ($5E28),A      ; 
       .call @draw_chicken             ; CALL $8B8A        ; draw chicken energy bar
       b    @draw_lives                ; JP $A2CE          ; draw lives sprites in side panel

* blank graphic and h_player_appear handler
player_template:                       ; >9481
       byte >66,>00,>00,>60,>68,>47,>FF,>00

* check for pause key, return when not paused
* 
* Used by the routine at #R$7e13.
check_pause:                           ; >9489
       limi 0                          ; DI                ; disable interrupts to suspend FRAMES counter advance
       movb @bytes+>7e,a               ; LD A,$7E          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       movb a,r0                       ; BIT 0,A           ; pause (space/shift) pressed?
       andi r0,>0100                   ;                   
       jeq  !                          ; RET NZ            ; return if not
       .ret                            ;                   
!
       inv  a                          ; CPL               ; 
       andi a,>1e00                    ; AND $1E           ; any other key on the same row pressed?
       jeq  !                          ; RET NZ            ; return if so
       .ret                            ;                   
!
loc_9497:                              ; >9497
       equ  $
       movb @bytes+>7e,a               ; LD A,$7E          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       movb a,r0                       ; BIT 0,A           ; space/shift pressed?
       andi r0,>0100                   ;                   
       jeq  loc_9497                   ; JR Z,$9497        ; jump if so (wait until released)
loc_94a1:                              ; >94a1
       movb @bytes+>7e,a               ; LD A,$7E          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       movb a,r0                       ; BIT 0,A           ; space/shift pressed?
       andi r0,>0100                   ;                   
       jne  loc_94a1                   ; JR NZ,$94A1       ; jump if not (main pause loop)
loc_94ab:                              ; >94ab
       movb @bytes+>7e,a               ; LD A,$7E          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       movb a,r0                       ; BIT 0,A           ; space/shift pressed?
       andi r0,>0100                   ;                   
       jeq  loc_94ab                   ; JR Z,$94AB        ; jump if so (wait until pause key released)
       .ret                            ; RET               ; 

* set locations of ACG key pieces
* 
* Used by the routine at #R$7d9a.
place_key_pieces:                      ; >94b6
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @counter_low,a             ; LD A,($5E12)      ; 
       ab   @c,a                       ; ADD A,C           ; 
       andi a,>0700                    ; AND $07           ; 
       movb a,@c                       ; LD C,A            ; 
       ab   a,a                        ; ADD A,A           ; * 2
       ab   @c,a                       ; ADD A,C           ; * 3 (3 key pieces per entry)
       movb a,@l                       ; LD L,A            ; 
       sb   h,h                        ; LD H,$00          ; 
       li   bc,acg_key_rooms           ; LD BC,$94DD       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       li   hl,acg_key_init+>0001      ; LD HL,$6026       ; first key piece room
       li   bc,>0008                   ; LD BC,$0008       ; 8 bytes per entity
       movb @bytes+>03,a               ; LD A,$03          ; 3 key pieces
loc_94d3:                              ; >94d3
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,*hl                      ; LD (HL),A         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       inc  de                         ; INC DE            ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       sb   one,a                      ; DEC A             ; 
       jne  loc_94d3                   ; JR NZ,$94D3       ; 
       .ret                            ; RET               ; 

* Data block at 94dd
acg_key_rooms:                         ; >94dd
       byte >81,>45,>7C
       byte >85,>49,>2B
       byte >6A,>3B,>7C
       byte >69,>71,>2B
       byte >67,>85,>7C
       byte >68,>7F,>2B
       byte >4D,>73,>7C
       byte >17,>10,>2B

* randomise which doors can open/close
* 
* Used by the routine at #R$7d9a.
randomise_doors:                       ; >94f5
       movb @counter_low,a             ; LD A,($5E12)      ; 
       movb a,@l                       ; LD L,A            ; set ROM addr LSB
       movb @zx_frames,a               ; LD A,($5C78)      ; 0-49
       andi a,>0f00                    ; AND $0F           ; limit to 4K (0000-0FFF)
       socb @bytes+>10,a               ; OR $10            ; add 4K (1000-1FFF)
       movb a,h                        ; LD H,A            ; set ROM addr MSB
       .exx                            ; EXX               ; 
       li   hl,linked_items            ; LD HL,$EEE0       ; pairs of linked items, including doors
       li   de,_eee8                   ; LD DE,$EEE8       ; pairs of linked items, including doors
       li   bc,>0010                   ; LD BC,$0010       ; 16 bytes per entry
loc_950b:                              ; >950b
       .exx                            ; EXX               ; 
       movb *hl,a                      ; LD A,(HL)         ; read ROM byte
       inc  hl                         ; INC HL            ; 
       .exx                            ; EXX               ; 
       cb   a,@bytes+>70               ; CP $70            ; ROM value >= 0x70 (~56% chance)
       jhe  loc_951f                   ; JR NC,$951F       ; jump if so (door always open)
       movb *de,a                      ; LD A,(DE)         ; 
       cb   a,*hl                      ; CP (HL)           ; same value?
       jne  loc_951f                   ; JR NZ,$951F       ; jump if not (no change)
       cb   a,one                      ; CP $01            ; cave doorway?
       jeq  loc_9526                   ; JR Z,$9526        ; jump if so
       cb   a,@bytes+>02               ; CP $02            ; normal doorway?
       jeq  loc_9542                   ; JR Z,$9542        ; jump if so
loc_951f:                              ; >951f
       a    bc,hl                      ; ADD HL,BC         ; next entry
       .ex_de_hl                       ; EX DE,HL          ; 
       a    bc,hl                      ; ADD HL,BC         ; next entry
       jnc  !                          ; RET C             ; TODO: check code. return if hit end of RAM
       .ret                            ;                   
!
       .ex_de_hl                       ; EX DE,HL          ; 
       jmp  loc_950b                   ; JR $950B          ; 
loc_9526:                              ; >9526
       movb @bytes+>22,a               ; LD A,$22          ; mode?
loc_9528:                              ; >9528
       movb a,*de                      ; LD (DE),A         ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .push de                        ; PUSH DE           ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; + 5
       movb *de,a                      ; LD A,(DE)         ; 
       socb @bytes+>08,a               ; OR $08            ; 
       movb a,*de                      ; LD (DE),A         ; 
       .pop de                         ; POP DE            ; 
       .push hl                        ; PUSH HL           ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       socb @bytes+>08,a               ; OR $08            ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .pop hl                         ; POP HL            ; 
       jmp  loc_951f                   ; JR $951F          ; 
loc_9542:                              ; >9542
       movb @bytes+>20,a               ; LD A,$20          ; mode?
       jmp  loc_9528                   ; JR $9528          ; 

* update solid/passable door state
* 
* Used by the routine at #R$915f.
update_door:                           ; >9546
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,>0100                    ; AND $01           ; is door open?
       jeq  loc_9565                   ; JR Z,$9565        ; jump if so
* This entry point is used by the routines at #R$9222, #R$9421 and #R$961b.
enter_door:                            ; >954d
       movb @>05(ix),a                 ; LD A,(IX+$05)     ; enter linked object (door etc.)
       andi a,>f700                    ; AND $F7           ; object is solid
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; 
       .push ix                        ; PUSH IX           ; 
       .call @get_linked_door          ; CALL $9286        ; get connected door exit
       movb @>05(ix),a                 ; LD A,(IX+$05)     ; 
       andi a,>f700                    ; AND $F7           ; linked object is solid
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; 
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$9222, #R$9421 and #R$961b.
loc_9565:                              ; >9565
       movb @>05(ix),a                 ; LD A,(IX+$05)     ; 
       socb @bytes+>08,a               ; OR $08            ; object can be passed through
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; 
       .push ix                        ; PUSH IX           ; 
       .call @get_linked_door          ; CALL $9286        ; get connected door exit
       movb @>05(ix),a                 ; LD A,(IX+$05)     ; 
       socb @bytes+>08,a               ; OR $08            ; linked object can be passed through
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; 
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 

* check if player is standing in a doorway
* 
* Used by the routine at #R$8d77.
check_doorway:                         ; >957d
       .push de                        ; PUSH DE           ; 
       sb   b,b                        ; LD B,$00          ; 
       mov  @room_width,hl             ; LD HL,($5E1D)     ; 
       ab   one,@l                     ; INC L             ; increase interior width
       ab   one,h                      ; INC H             ; increase interior height
       movb @>03(ix),@e                ; LD E,(IX+$03)     ; player x
       movb @>04(ix),d                 ; LD D,(IX+$04)     ; player y
       movb @e,a                       ; LD A,E            ; 
       sb   @bytes+>58,a               ; SUB $58           ; subtract room centre x
       ; JP P,$9593                    ; JP P,$9593        ; 
       neg a                           ; NEG               ; abs
loc_9593:                              ; >9593
       cb   a,@l                       ; CP L              ; within interior width?
       jl   loc_9597                   ; JR C,$9597        ; jump if so
       ab   one,b                      ; INC B             ; mark as in left/right doorway
loc_9597:                              ; >9597
       movb d,a                        ; LD A,D            ; 
       sb   @bytes+>68,a               ; SUB $68           ; subtract room centre y
       ; JP P,$959F                    ; JP P,$959F        ; 
       neg a                           ; NEG               ; abs
loc_959f:                              ; >959f
       cb   a,h                        ; CP H              ; within interior height?
       jl   loc_95a3                   ; JR C,$95A3        ; jump if so
       ab   one,b                      ; INC B             ; mark as in top/bottom doorway
loc_95a3:                              ; >95a3
       movb b,a                        ; LD A,B            ; 
       movb a,@in_doorway              ; LD ($5E2D),A      ; non-zero if in a doorway
       .pop de                         ; POP DE            ; 
       .ret                            ; RET               ; 

* place a tombstone at the player position
* 
* Used by the routine at #R$8d45.
place_tombstone:                       ; >95a9
       li   hl,tombstone1              ; LD HL,$EAE8       ; tombstone entities
       li   de,>0008                   ; LD DE,$0008       ; 8 bytes per entity
       movb @bytes+>04,b               ; LD B,$04          ; 4 tombstone slots
loc_95b1:                              ; >95b1
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; free slot?
       jeq  loc_95b9                   ; JR Z,$95B9        ; jump if so
       a    de,hl                      ; ADD HL,DE         ; next slot
       sb   one,b                      ; DJNZ $95B1        ; 
       jne  loc_95b1                   ;                   
       .ret                            ; RET               ; 
loc_95b9:                              ; >95b9
       movb @bytes+>45,a               ; LD A,$45          ; bright cyan
       movb a,@player_attr             ; LD ($EA95),A      ; 
       .push hl                        ; PUSH HL           ; 
       movb @bytes+>8f,*hl             ; LD (HL),$8F       ; tombstone graphic
       .ex_de_hl                       ; EX DE,HL          ; 
       inc  de                         ; INC DE            ; 
       li   hl,player_room             ; LD HL,$EA91       ; copy remaining details from player entity
       li   bc,>0007                   ; LD BC,$0007       ; 8 bytes minus the graphic we've written
       .ldir                           ; LDIR              ; 
       .pop hl                         ; POP HL            ; jump return address

* draw entity in HL
* 
* Used by the routine at #R$96c9.
draw_entity_hl:                        ; >95cc
       .push ix                        ; PUSH IX           ; 
       .push hl                        ; PUSH HL           ; 
       .pop ix                         ; POP IX            ; 
       .call @draw_entity              ; CALL $9F4A        ; draw entity graphic (no attrs)
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 

* Attributes: thunk
h_tombstone:                           ; >95d7
       b    @draw_16x16                ; JP $92E0          ; draw 16x16 entity

* advance the clock 1 frame
* 
* Used by the routine at #R$7ec5.
clock_tick:                            ; >95da
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       cb   a,@bytes+>32               ; CP $32            ; 1 second elapsed?
       jhe  !                          ; RET C             ; return if not
       .ret                            ;                   
!
       sb   @bytes+>32,a               ; SUB $32           ; subtract 1 second
       movb a,@zx_frames               ; LD ($5C78),A      ; store back [this keeps LSB in 0-49 range!]
       li   hl,clock_seconds           ; LD HL,$5E3F       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   one,a                      ; INC A             ; add a second
       .daa                            ; DAA               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       cb   a,@bytes+>60               ; CP $60            ; 60 seconds?
       jne  loc_9604                   ; JR NZ,$9604       ; jump if not
       sb   *hl,*hl                    ; LD (HL),$00       ; reset seconds
       dec  hl                         ; DEC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   one,a                      ; INC A             ; add a minute
       .daa                            ; DAA               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       cb   a,@bytes+>60               ; CP $60            ; 60 minutes?
       jne  loc_9604                   ; JR NZ,$9604       ; jump if not
       sb   *hl,*hl                    ; LD (HL),$00       ; reset minutes
       dec  hl                         ; DEC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   one,a                      ; INC A             ; add an hour
       .daa                            ; DAA               ; 
       andi a,>0f00                    ; AND $0F           ; clip hours to 0-15
       movb a,*hl                      ; LD (HL),A         ; 
loc_9604:                              ; >9604
       li   hl,zx_screen+>00c8         ; LD HL,$40C8       ; time coords

* print clock time at position HL
* 
* Used by the routine at #R$9641.
print_clock:                           ; >9607
       .call @xy_to_display            ; CALL $9BA2        ; convert coords in HL to display address in HL
       li   de,clock_hours             ; LD DE,$5E3D       ; 
       movb @bytes+>02,b               ; LD B,$02          ; 
       .call @print_bcd_digit          ; CALL $A1C9        ; print a single BCD digit
       li   de,clock_seconds           ; LD DE,$5E3F       ; 
       inc  hl                         ; INC HL            ; 
       movb one,b                      ; LD B,$01          ; 
       b    @print_bcd_bytes           ; JP $A1BF          ; print B BCD bytes at DE

* ACG exit door handler
h_acg_exit:                            ; >961b
       li   hl,inventory1+>0002        ; LD HL,$5E32       ; graphic idx
       li   de,>0004                   ; LD DE,$0004       ; 4 bytes per inventory slot
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@bytes+>8c               ; CP $8C            ; ACG key part 1?
       jne  loc_963b                   ; JR NZ,$963B       ; jump if not
       a    de,hl                      ; ADD HL,DE         ; next slot
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@bytes+>8d               ; CP $8D            ; ACG key part 2?
       jne  loc_963b                   ; JR NZ,$963B       ; jump if not
       a    de,hl                      ; ADD HL,DE         ; next slot
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@bytes+>8e               ; CP $8E            ; ACG key part 3?
       jne  loc_963b                   ; JR NZ,$963B       ; jump if not
       .call @enter_door               ; CALL $954D        ; enter linked object (door etc.)
       li   bc,>3020                   ; LD BC,$3020       ; 48x32
       b    @loc_91f5                  ; JP $91F5          ; 
loc_963b:                              ; >963b
       .call @loc_9565                 ; CALL $9565        ; 
       b    @h_room_item               ; JP $91FE          ; draw room item

* show game statistics
* 
* Used by the routines at #R$8c35 and #R$96c9.
game_stats:                            ; >9641
       .call @calc_visited             ; CALL $96C9        ; calculate percentage of rooms visited
       li   hl,zx_screen+>0040         ; LD HL,$4040       ; time header at 64,64
       li   de,time_msg                ; LD DE,$967F       ; 
       .call @colour_text              ; CALL $A1F3        ; show a line of text, first byte is attr
       li   hl,zx_screen+>1040         ; LD HL,$5040       ; score header at 64,80
       li   de,score_msg               ; LD DE,$968F       ; 
       .call @colour_text              ; CALL $A1F3        ; show a line of text, first byte is attr
       li   hl,green_key_init+>0003    ; LD HL,$6040       ; percent header at 64,96
       li   de,percent_msg             ; LD DE,$969F       ; 
       .call @colour_text              ; CALL $A1F3        ; show a line of text, first byte is attr
       li   hl,digit_charset           ; LD HL,$BFCC       ; 
       mov  hl,@charset_addr           ; LD ($5E01),HL     ; 
       li   hl,zx_screen+>0080         ; LD HL,$4080       ; clock at 128,64
       .call @print_clock              ; CALL $9607        ; print clock time at position HL
       li   hl,zx_screen+>1080         ; LD HL,$5080       ; score at 128,80
       .call @print_score              ; CALL $A1B7        ; print player score at position HL
       li   hl,cyan_key_init+>0033     ; LD HL,$6080       ; percent at 128,96
       .call @xy_to_display            ; CALL $9BA2        ; convert coords in HL to display address in HL
       li   de,visited_percent         ; LD DE,$5E54       ; 
       movb one,b                      ; LD B,$01          ; 
       b    @print_bcd_bytes           ; JP $A1BF          ; print B BCD bytes at DE

* Data block at 967f
time_msg:                              ; >967f
       byte >45                                                      ; bright cyan
       text 'TIME       '
       text '#  '
       byte >A0

* Data block at 968f
score_msg:                             ; >968f
       byte >45                                                      ; bright cyan
       text 'SCORE         '
       byte >A0

* Data block at 969f
percent_msg:                           ; >969f
       byte >45                                                      ; bright cyan
       text '>             '
       byte >A0

* mark room A as visited
* 
* Used by the routine at #R$9117.
visit_room:                            ; >96af
       movb a,@c                       ; LD C,A            ; room A
       ; SRL C                         ; SRL C             ; 
       ; SRL C                         ; SRL C             ; 
       ; SRL C                         ; SRL C             ; 
       sb   b,b                        ; LD B,$00          ; 
       li   hl,visited_rooms           ; LD HL,$5E40       ; visit rooms bit array
       a    bc,hl                      ; ADD HL,BC         ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       andi a,>3800                    ; AND $38           ; 
       socb @bytes+>c6,a               ; OR $C6            ; 
       movb a,@loc_96c6+>0001          ; LD ($96C7),A      ; self-modify bit in SET below
loc_96c6:                              ; >96c6
       socb @bits+0,*hl                ; SET 0,(HL)        ; mark room as visited
       .ret                            ; RET               ; 

* calculate percentage of rooms visited
* 
* Used by the routine at #R$9641.
calc_visited:                          ; >96c9
       li   hl,visited_rooms           ; LD HL,$5E40       ; visit rooms bit array
       li   bc,>0813                   ; LD BC,$0813       ; 8*19 bits covers all rooms
       movb @bytes+>03,d               ; LD D,$03          ; D decremented for every visited room
       sb   a,a                        ; XOR A             ; 
loc_96d2:                              ; >96d2
       .push bc                        ; PUSH BC           ; 
       movb *hl,@e                     ; LD E,(HL)         ; 8 visited bits
       inc  hl                         ; INC HL            ; 
loc_96d5:                              ; >96d5
       ; RR E                          ; RR E              ; 
       jnc  loc_96e1                   ; JR NC,$96E1       ; TODO: check code. 
       sb   one,d                      ; DEC D             ; counter zero?
       jne  loc_96e1                   ; JR NZ,$96E1       ; jump if not
       movb @bytes+>03,d               ; LD D,$03          ; reset counter
       ab   @bytes+>02,a               ; ADD A,$02         ; add 2% for every 3 visited rooms
       .daa                            ; DAA               ; 
loc_96e1:                              ; >96e1
       sb   one,b                      ; DJNZ $96D5        ; 
       jne  loc_96d5                   ;                   
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_96d2                   ; JR NZ,$96D2       ; 
       ab   one,a                      ; INC A             ; add 1% to total
       movb a,@visited_percent         ; LD ($5E54),A      ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$7e13.
game_complete:                         ; >96ec
       li   hl,player                  ; LD HL,$EA90       ; congratulate player on completion
       .call @draw_entity_hl           ; CALL $95CC        ; undraw player
       li   hl,_be4c                   ; LD HL,$BE4C       ; 
       mov  hl,@charset_addr           ; LD ($5E01),HL     ; 
       li   hl,>2040                   ; LD HL,$2040       ; congratulations at 64,32
       li   de,congrat_msg             ; LD DE,$9710       ; 
       .call @colour_text              ; CALL $A1F3        ; show a line of text, first byte is attr
       li   hl,>3040                   ; LD HL,$3040       ; escaped message at 64,48
       li   de,escape_msg              ; LD DE,$9720       ; 
       .call @colour_text              ; CALL $A1F3        ; show a line of text, first byte is attr
       .call @game_stats               ; CALL $9641        ; show game statistics
       b    @loc_8c4a                  ; JP $8C4A          ; 

* Data block at 9710
congrat_msg:                           ; >9710
       byte >47
       text 'CONGRATULATION'
       byte >D4

* Data block at 9720
escape_msg:                            ; >9720
       byte >47
       text 'YOU HAVE ESCAPE'
       byte >C4

* Routine at 9731
* 
* Used by the routine at #R$91bc.
chk_trap_exit:                         ; >9731
       li   bc,>1818                   ; LD BC,$1818       ; 24x24
       .call @check_exit               ; CALL $90CC        ; fallen into trap door?
       joc  !                          ; JP NC,$91FE       ; TODO: check code. jump if not
       b    @h_room_item               ;                   
!
       .call @clear_play_area          ; CALL $8093        ; clear screen and attrs of play area
       movb @bytes+>96,a               ; LD A,$96          ; room 150 is trap door tunnel
       .push ix                        ; PUSH IX           ; 
       .call @draw_room_a              ; CALL $9BF1        ; draw trap door lines
       .pop ix                         ; POP IX            ; 
       movb @bytes+>80,b               ; LD B,$80          ; 128 frames of tunnel animation
loc_9748:                              ; >9748
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       movb a,@c                       ; LD C,A            ; 
loc_974c:                              ; >974c
       .push bc                        ; PUSH BC           ; 
       movb b,a                        ; LD A,B            ; 
       inv  a                          ; CPL               ; ~frame counter is effect frequency
       movb a,b                        ; LD B,A            ; 
       .call @click                    ; CALL $A3A8        ; short beep
       .pop bc                         ; POP BC            ; 
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       cb   a,@c                       ; CP C              ; same frame?
       jeq  loc_974c                   ; JR Z,$974C        ; loop back to continue sound effect
       andi a,>0700                    ; AND $07           ; frame 1-7?
       sb   a,a                        ; LD A,$00          ; black
       jne  loc_9762                   ; JR NZ,$9762       ; jump if so (use black)
       movb @bytes+>47,a               ; LD A,$47          ; bright white
loc_9762:                              ; >9762
       movb a,@l                       ; LD L,A            ; 
       movb a,h                        ; LD H,A            ; 
       mov  hl,@zx_attrs+>016b         ; LD ($596B),HL     ; 
       mov  hl,@zx_attrs+>018b         ; LD ($598B),HL     ; 
       .push bc                        ; PUSH BC           ; 
       .call @draw_tunnel_attrs        ; CALL $9774        ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $9748        ; loop until end of effect
       jne  loc_9748                   ;                   
       b    @change_room               ; JP $9117          ; move player to room linked to entity (usually door)

* Routine at 9774
* 
* Used by the routine at #R$9731.
draw_tunnel_attrs:                     ; >9774
       li   bc,>170b                   ; LD BC,$170B       ; 23x11 (for 24x24 final area)
       li   hl,zx_attrs+>02e0          ; LD HL,$5AE0       ; 
       li   de,>0020                   ; LD DE,$0020       ; line pitch is 32 bytes
loc_977d:                              ; >977d
       .push hl                        ; PUSH HL           ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       ab   one,@l                     ; INC L             ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       .pop hl                         ; POP HL            ; 
       .push bc                        ; PUSH BC           ; 
loc_9785:                              ; >9785
       movb a,*hl                      ; LD (HL),A         ; draw horizontal bar
       ab   one,@l                     ; INC L             ; forwards
       sb   one,b                      ; DJNZ $9785        ; 
       jne  loc_9785                   ;                   
       .pop bc                         ; POP BC            ; 
       .push bc                        ; PUSH BC           ; 
loc_978b:                              ; >978b
       movb a,*hl                      ; LD (HL),A         ; draw vertical bar
       ; AND A                         ; AND A             ; backwards
       s    de,hl                      ; SBC HL,DE         ; 
       sb   one,b                      ; DJNZ $978B        ; 
       jne  loc_978b                   ;                   
       .pop bc                         ; POP BC            ; 
       .push bc                        ; PUSH BC           ; 
loc_9793:                              ; >9793
       movb a,*hl                      ; LD (HL),A         ; draw horizontal bar
       sb   one,@l                     ; DEC L             ; backwards
       sb   one,b                      ; DJNZ $9793        ; 
       jne  loc_9793                   ;                   
       .pop bc                         ; POP BC            ; 
       .push bc                        ; PUSH BC           ; 
loc_9799:                              ; >9799
       movb a,*hl                      ; LD (HL),A         ; draw vertical bar
       a    de,hl                      ; ADD HL,DE         ; forwards
       sb   one,b                      ; DJNZ $9799        ; 
       jne  loc_9799                   ;                   
       movb a,*hl                      ; LD (HL),A         ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       ab   one,@l                     ; INC L             ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DEC B             ; 
       sb   one,b                      ; DEC B             ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_977d                   ; JR NZ,$977D       ; 
       .ret                            ; RET               ; 

* Data block at 97a9
points_trap:                           ; >97a9
       byte >5C,>63
       byte >63,>63
       byte >63,>5C
       byte >5C,>5C
       byte >54,>6B
       byte >6B,>6B
       byte >6B,>54
       byte >54,>54
       byte >4C,>73
       byte >73,>73
       byte >73,>4C
       byte >4C,>4C
       byte >44,>7B
       byte >7B,>7B
       byte >7B,>44
       byte >44,>44
       byte >3C,>83
       byte >83,>83
       byte >83,>3C
       byte >3C,>3C
       byte >34,>8B
       byte >8B,>8B
       byte >8B,>34
       byte >34,>34
       byte >2C,>93
       byte >93,>93
       byte >93,>2C
       byte >2C,>2C
       byte >24,>9B
       byte >9B,>9B
       byte >9B,>24
       byte >24,>24
       byte >1C,>A3
       byte >A3,>A3
       byte >A3,>1C
       byte >1C,>1C
       byte >14,>AB
       byte >AB,>AB
       byte >AB,>14
       byte >14,>14
       byte >0C,>B3
       byte >B3,>B3
       byte >B3,>0C
       byte >0C,>0C
       byte >04,>BB
       byte >BB,>BB
       byte >BB,>04
       byte >04,>04

* Data block at 9809
lines_trap:                            ; >9809
       byte >00,>01,>03,>FF
       byte >02,>01,>03,>FF
       byte >04,>05,>07,>FF
       byte >06,>05,>07,>FF
       byte >08,>09,>0B,>FF
       byte >0A,>09,>0B,>FF
       byte >0C,>0D,>0F,>FF
       byte >0E,>0D,>0F,>FF
       byte >10,>11,>13,>FF
       byte >12,>11,>13,>FF
       byte >14,>15,>17,>FF
       byte >16,>15,>17,>FF
       byte >18,>19,>1B,>FF
       byte >1A,>19,>1B,>FF
       byte >1C,>1D,>1F,>FF
       byte >1E,>1D,>1F,>FF
       byte >20,>21,>23,>FF
       byte >22,>21,>23,>FF
       byte >24,>25,>27,>FF
       byte >26,>25,>27,>FF
       byte >28,>29,>2B,>FF
       byte >2A,>29,>2B,>FF
       byte >2C,>2D,>2F,>FF
       byte >2E,>2D,>2F,>FF
       byte >FF

* auto-walk into the room
* 
* Used by the routine at #R$9117.
set_entry_walk:                        ; >986a
       movb @>05(ix),a                 ; LD A,(IX+$05)     ; b7-6 is door facing direction (00=down, 01=left, 10=up,
                                                           ; 11=right)
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. move to b1-0
       sla  a,1                        ; RLCA              ; TODO: check code. * 2
       andi a,>0600                    ; AND $06           ; mask to look-up offset
       movb a,@c                       ; LD C,A            ; 
       sb   b,b                        ; LD B,$00          ; 
       li   hl,walk_dir                ; LD HL,$9883       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb a,@player_steps_x          ; LD ($EA96),A      ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       movb a,@player_steps_y          ; LD ($EA97),A      ; 
       .ret                            ; RET               ; 

* Data block at 9883
walk_dir:                              ; >9883
       byte >00,>20                                                  ; walk down
       byte >E0,>00                                                  ; walk left ($e0 is actually -$20)
       byte >00,>E0                                                  ; walk up ($e0 is actually -$20)
       byte >20,>00                                                  ; walk right

* mushroom handler
h_mushroom:                            ; >988b
       .call @save_entity              ; CALL $9FFB        ; save entity position for undraw
       .call @check_touching           ; CALL $90FB        ; check if player is touching entity
       joc  loc_98b1                   ; JR C,$98B1        ; TODO: check code. 
loc_9893:                              ; >9893
       movb @counter_low,a             ; LD A,($5E12)      ; 
       inv  a                          ; CPL               ; 
       andi a,>0300                    ; AND $03           ; time to change colour? (every 4 frames)
       jne  loc_989e                   ; JR NZ,$989E       ; jump if not
       ab   one,@>06(ix)               ; INC (IX+$06)      ; cycle colour
loc_989e:                              ; >989e
       movb @>06(ix),a                 ; LD A,(IX+$06)     ; 
       andi a,>0300                    ; AND $03           ; 4 possible colours
       movb a,@c                       ; LD C,A            ; 
       sb   b,b                        ; LD B,$00          ; 
       li   hl,mushroom_attrs          ; LD HL,$98C4       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; new mushroom attr
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; set colour
       b    @draw_16x16                ; JP $92E0          ; draw 16x16 entity
loc_98b1:                              ; >98b1
       movb @player_energy,a           ; LD A,($5E28)      ; 
       sb   one,a                      ; DEC A             ; 
       movb a,@player_energy           ; LD ($5E28),A      ; 
       jne  !                          ; JP Z,$98C8        ; 
       b    @mushroom_death            ;                   
!
       .call @draw_chicken             ; CALL $8B8A        ; draw chicken energy bar
       .call @touching_sound           ; CALL $A3E5        ; play monster touched sound
       b    @loc_9893                  ; JP $9893          ; 

* Data block at 98c4
mushroom_attrs:                        ; >98c4
       byte >42                                                      ; bright red
       byte >43                                                      ; bright magenta
       byte >46                                                      ; bright yellow
       byte >43                                                      ; bright magenta

* Routine at 98c8
* 
* Used by the routine at #R$988b.
mushroom_death:                        ; >98c8
       .call @undraw_entity            ; CALL $9F56        ; 
       sb   *ix,*ix                    ; LD (IX+$00),$00   ; remove mushroom
       b    @player_dead               ; JP $8EA0          ; 

* set positions of red/green/cyan keys, and mummy
* 
* Used by the routine at #R$7d9a.
set_key_positions:                     ; >98d2
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       li   hl,green_key_rooms         ; LD HL,$990C       ; 
       .call @get_key_room             ; CALL $9904        ; 
       movb a,@green_key_init+>0001    ; LD ($603E),A      ; set green key room
       movb @zx_frames,a               ; LD A,($5C78)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @counter_low,a             ; LD A,($5E12)      ; 
       ab   @c,a                       ; ADD A,C           ; 
       li   hl,red_key_rooms           ; LD HL,$9914       ; 
       .call @get_key_room             ; CALL $9904        ; 
       movb a,@red_key_init+>0001      ; LD ($6046),A      ; set red key room
       movb a,@byte_640d+>0001         ; LD ($640E),A      ; set Mummy room to match
       movb @zx_frames+>0001,a         ; LD A,($5C79)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @counter_high,a            ; LD A,($5E13)      ; 
       ab   @c,a                       ; ADD A,C           ; 
       li   hl,cyan_key_rooms          ; LD HL,$991C       ; 
       .call @get_key_room             ; CALL $9904        ; 
       movb a,@cyan_key_init+>0001     ; LD ($604E),A      ; set cyan key room
       .ret                            ; RET               ; 

* Routine at 9904
* 
* Used by the routine at #R$98d2.
get_key_room:                          ; >9904
       andi a,>0700                    ; AND $07           ; 
       movb a,@c                       ; LD C,A            ; 
       sb   b,b                        ; LD B,$00          ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       .ret                            ; RET               ; 

* Data block at 990c
green_key_rooms:                       ; >990c
       byte >05,>06,>07,>6D,>25,>24,>23,>22
red_key_rooms:                         ; >9914
       byte >17,>13,>09,>0D,>89,>87,>80,>85
cyan_key_rooms:                        ; >991c
       byte >53,>8F,>41,>94,>33,>91,>39,>4C

* periodically replenish consumed food
* 
* Used by the routine at #R$7e13.
replenish_food:                        ; >9924
       movb @counter_low,a             ; LD A,($5E12)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @counter_high,a            ; LD A,($5E13)      ; 
       andi a,>0100                    ; AND $01           ; 
       socb @c,a                       ; OR C              ; 9-bit counter value zero?
       jeq  !                          ; RET NZ            ; return if not
       .ret                            ;                   
!
       mov  @food_ptr,hl               ; LD HL,($5E55)     ; 
       li   de,>0008                   ; LD DE,$0008       ; 8 bytes per item
       a    de,hl                      ; ADD HL,DE         ; next food item
       mov  hl,@food_ptr               ; LD ($5E55),HL     ; 
       .push hl                        ; PUSH HL           ; 
       .pop ix                         ; POP IX            ; 
       li   de,food_end                ; LD DE,$EDD8       ; end marker
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; end of list?
       jnc  loc_995b                   ; JR NC,$995B       ; TODO: check code. jump if so
       movb @player_room,a             ; LD A,($EA91)      ; 
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jne  !                          ; RET Z             ; return if so
       .ret                            ;                   
!
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; AND A                         ; AND A             ; does food still exist?
       jeq  !                          ; RET NZ            ; return if so
       .ret                            ;                   
!
       movb @zx_frames,a               ; LD A,($5C78)      ; pseudo random value
       andi a,>0700                    ; AND $07           ; 8 available food items
       ab   @bytes+>50,a               ; ADD A,$50         ; add food base graphic
       movb a,*ix                      ; LD (IX+$00),A     ; set food graphic (replenish)
       .ret                            ; RET               ; 
loc_995b:                              ; >995b
       li   hl,food_items              ; LD HL,$EB58       ; 
       mov  hl,@food_ptr               ; LD ($5E55),HL     ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$9213.
draw_orientation:                      ; >9962
       li   hl,disp_funcs              ; LD HL,$9970       ; 
* This entry point is used by the routine at #R$9980.
jump_table_b:                          ; >9965
       .push bc                        ; PUSH BC           ; 
       movb b,a                        ; LD A,B            ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. move b7-5 to b2-0
       andi a,>0700                    ; AND $07           ; 
       movb a,@c                       ; LD C,A            ; 
       b    @lookup_c_hl               ; JP $7E85          ; 

* Data block at 9970
disp_funcs:                            ; >9970
       data draw_disp_0                                              ; normal
       data draw_disp_1
       data draw_disp_2
       data draw_disp_3
       data draw_disp_4                                              ; 180 degrees
       data draw_disp_5
       data draw_disp_6                                              ; right 90 degrees
       data draw_disp_7                                              ; left 90 degrees

* B=attr, C=graphic, E=xpos, D=ypos
* 
* Used by the routine at #R$91fe.
draw_bc_at_de:                         ; >9980
       li   hl,attr_funcs              ; LD HL,$9985       ; 
       jmp  jump_table_b               ; JR $9965          ; 

* Data block at 9985
attr_funcs:                            ; >9985
       data draw_attr_0
       data draw_attr_1
       data draw_attr_2
       data draw_attr_3
       data draw_attr_4
       data draw_attr_5
       data draw_attr_6
       data draw_attr_7

* C=gfx idx, DE=coords
* 
* Used by the routines at #R$99c9, #R$99e5, #R$9a0a, #R$9a50, #R$9acb, #R$9aef,
* #R$9b14 and #R$9b5d.
get_gfx_data:                          ; >9995
       li   hl,gfx_data                ; LD HL,$A600       ; 
       sb   one,@c                     ; DEC C             ; 1-based
       sb   b,b                        ; LD B,$00          ; 
       ; SLA C                         ; SLA C             ; 
       sla  b,1                        ; RL B              ; TODO: check code. 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; 
       movb a,@l                       ; LD L,A            ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .call @xy_to_display            ; CALL $9BA2        ; convert coords in HL to display address in HL
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,b                        ; LD B,A            ; 
       inc  de                         ; INC DE            ; 
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,@c                       ; LD C,A            ; 
       inc  de                         ; INC DE            ; 
       .ret                            ; RET               ; 

* IN: C=gfx idx, DE=coords  OUT: HL=attr addr, DE=attr data, B=width, C=height
* 
* Used by the routines at #R$9d25, #R$9d47, #R$9d6f, #R$9da0, #R$9dce, #R$9df8,
* #R$9e21 and #R$9e55.
get_gfx_attrs:                         ; >99af
       li   hl,gfx_attrs               ; LD HL,$A64E       ; 
       sb   one,@c                     ; DEC C             ; 1-based
       sb   b,b                        ; LD B,$00          ; 
       ; SLA C                         ; SLA C             ; 
       sla  b,1                        ; RL B              ; TODO: check code. 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; 
       movb a,@l                       ; LD L,A            ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,b                        ; LD B,A            ; 
       inc  de                         ; INC DE            ; 
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,@c                       ; LD C,A            ; 
       inc  de                         ; INC DE            ; 
       .ret                            ; RET               ; 

* Routine at 99c9
draw_disp_0:                           ; >99c9
       .pop bc                         ; POP BC            ; 
       .call @get_blend_instr          ; CALL $9D19        ; map A=0-2 to Z80 opcode used to blend graphics data
       movb a,@loc_99d7                ; LD ($99D7),A      ; 
       .call @get_gfx_data             ; CALL $9995        ; C=gfx idx, DE=coords
loc_99d3:                              ; >99d3
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
loc_99d5:                              ; >99d5
       movb *de,a                      ; LD A,(DE)         ; 
       inc  de                         ; INC DE            ; 
loc_99d7:                              ; >99d7
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $99D5        ; 
       jne  loc_99d5                   ;                   
       .pop hl                         ; POP HL            ; 
       .call @pixel_line_up            ; CALL $9F03        ; move up 1 display line in HL
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_99d3                   ; JR NZ,$99D3       ; 
       .ret                            ; RET               ; 

* Routine at 99e5
draw_disp_1:                           ; >99e5
       .pop bc                         ; POP BC            ; 
       .call @get_blend_instr          ; CALL $9D19        ; map A=0-2 to Z80 opcode used to blend graphics data
       movb a,@blend_instr             ; LD ($99F9),A      ; 
       .call @get_gfx_data             ; CALL $9995        ; C=gfx idx, DE=coords
loc_99ef:                              ; >99ef
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
loc_99f4:                              ; >99f4
       dec  de                         ; DEC DE            ; 
       movb *de,a                      ; LD A,(DE)         ; graphic data byte
       .call @mirror_a                 ; CALL $9A92        ; mirror bits in A
blend_instr:                           ; >99f9
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; write to display
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $99F4        ; 
       jne  loc_99f4                   ;                   
       .pop hl                         ; POP HL            ; 
       .call @pixel_line_up            ; CALL $9F03        ; move up 1 display line in HL
       .pop bc                         ; POP BC            ; 
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
       sb   one,@c                     ; DEC C             ; 
       jne  loc_99ef                   ; JR NZ,$99EF       ; 
       .ret                            ; RET               ; 

* Routine at 9a0a
draw_disp_2:                           ; >9a0a
       .pop bc                         ; POP BC            ; 
       .call @get_blend_instr          ; CALL $9D19        ; map A=0-2 to Z80 opcode used to blend graphics data
       movb a,@loc_9a36                ; LD ($9A36),A      ; 
       .call @get_gfx_data             ; CALL $9995        ; C=gfx idx, DE=coords
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb one,@l                     ; LD L,$01          ; 
       movb a,b                        ; LD B,A            ; 
       .exx                            ; EXX               ; 
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
       dec  de                         ; DEC DE            ; 
loc_9a1e:                              ; >9a1e
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
loc_9a21:                              ; >9a21
       movb *de,a                      ; LD A,(DE)         ; 
       .exx                            ; EXX               ; 
       ; AND L                         ; AND L             ; 
       jeq  loc_9a27                   ; JR Z,$9A27        ; 
       ; SCF                           ; SCF               ; 
loc_9a27:                              ; >9a27
       sla  h,1                        ; RL H              ; TODO: check code. 
       .exx                            ; EXX               ; 
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
       sb   one,@c                     ; DEC C             ; 
       movb @c,a                       ; LD A,C            ; 
       andi a,>0700                    ; AND $07           ; 
       jne  loc_9a21                   ; JR NZ,$9A21       ; 
       .exx                            ; EXX               ; 
       movb h,a                        ; LD A,H            ; 
       .exx                            ; EXX               ; 
loc_9a36:                              ; >9a36
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jne  loc_9a21                   ; JR NZ,$9A21       ; 
       .pop hl                         ; POP HL            ; 
       .call @pixel_line_up            ; CALL $9F03        ; move up 1 display line in HL
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .exx                            ; EXX               ; 
       ; RLC L                         ; RLC L             ; 
       .exx                            ; EXX               ; 
       jnc  loc_9a1e                   ; JR NC,$9A1E       ; TODO: check code. 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       dec  de                         ; DEC DE            ; 
       jmp  loc_9a1e                   ; JR $9A1E          ; 

* Routine at 9a50
draw_disp_3:                           ; >9a50
       .pop bc                         ; POP BC            ; 
       .call @get_blend_instr          ; CALL $9D19        ; map A=0-2 to Z80 opcode used to blend graphics data
       movb a,@loc_9a78                ; LD ($9A78),A      ; 
       .call @get_gfx_data             ; CALL $9995        ; C=gfx idx, DE=coords
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       movb @bytes+>80,@l              ; LD L,$80          ; 
       .exx                            ; EXX               ; 
loc_9a60:                              ; >9a60
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
loc_9a63:                              ; >9a63
       movb *de,a                      ; LD A,(DE)         ; 
       .exx                            ; EXX               ; 
       ; AND L                         ; AND L             ; 
       jeq  loc_9a69                   ; JR Z,$9A69        ; 
       ; SCF                           ; SCF               ; 
loc_9a69:                              ; >9a69
       sla  h,1                        ; RL H              ; TODO: check code. 
       .exx                            ; EXX               ; 
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
       sb   one,@c                     ; DEC C             ; 
       movb @c,a                       ; LD A,C            ; 
       andi a,>0700                    ; AND $07           ; 
       jne  loc_9a63                   ; JR NZ,$9A63       ; 
       .exx                            ; EXX               ; 
       movb h,a                        ; LD A,H            ; 
       .exx                            ; EXX               ; 
loc_9a78:                              ; >9a78
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jne  loc_9a63                   ; JR NZ,$9A63       ; 
       .pop hl                         ; POP HL            ; 
       .call @pixel_line_up            ; CALL $9F03        ; move up 1 display line in HL
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .exx                            ; EXX               ; 
       ; RRC L                         ; RRC L             ; 
       .exx                            ; EXX               ; 
       jnc  loc_9a60                   ; JR NC,$9A60       ; TODO: check code. 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       inc  de                         ; INC DE            ; 
       jmp  loc_9a60                   ; JR $9A60          ; 

* mirror bits in A
* 
* Used by the routines at #R$99e5 and #R$9aef.
mirror_a:                              ; >9a92
       .push bc                        ; PUSH BC           ; 
       movb @bytes+>08,b               ; LD B,$08          ; 
loc_9a95:                              ; >9a95
       ; RLA                           ; RLA               ; 
       ; RR C                          ; RR C              ; 
       sb   one,b                      ; DJNZ $9A95        ; 
       jne  loc_9a95                   ;                   
       movb @c,a                       ; LD A,C            ; 
       .pop bc                         ; POP BC            ; 
       .ret                            ; RET               ; 

* add B to DE
* 
* Used by the routines at #R$99e5, #R$9a0a, #R$9a50, #R$9aef, #R$9b14, #R$9d47,
* #R$9d6f, #R$9da0, #R$9df8 and #R$9e21.
add_de_b:                              ; >9a9d
       movb b,a                        ; LD A,B            ; 
       ab   @e,a                       ; ADD A,E           ; 
       movb a,@e                       ; LD E,A            ; 
       movb d,a                        ; LD A,D            ; 
       ab   @zero,a                    ; ADC A,$00         ; 
       movb a,d                        ; LD D,A            ; 
       .ret                            ; RET               ; 

* subtract B from DE
* 
* Used by the routines at #R$9acb, #R$9b14, #R$9b5d, #R$9dce, #R$9e21 and
* #R$9e55.
sbc_de_b:                              ; >9aa5
       movb @e,a                       ; LD A,E            ; 
       sb   b,a                        ; SUB B             ; 
       movb a,@e                       ; LD E,A            ; 
       movb d,a                        ; LD A,D            ; 
       sb   @zero,a                    ; SBC A,$00         ; 
       movb a,d                        ; LD D,A            ; 
       .ret                            ; RET               ; 

* HL = DE * A
* 
* Used by the routines at #R$8b8a and #R$9aba.
mult_de_a:                             ; >9aad
       li   hl,>0000                   ; LD HL,$0000       ; 
       movb @bytes+>08,b               ; LD B,$08          ; 
loc_9ab2:                              ; >9ab2
       a    hl,hl                      ; ADD HL,HL         ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       jnc  loc_9ab7                   ; JR NC,$9AB7       ; TODO: check code. 
       a    de,hl                      ; ADD HL,DE         ; 
loc_9ab7:                              ; >9ab7
       sb   one,b                      ; DJNZ $9AB2        ; 
       jne  loc_9ab2                   ;                   
       .ret                            ; RET               ; 

* HL = DE + B * C
* 
* Used by the routines at #R$9acb, #R$9aef, #R$9b14, #R$9b5d, #R$9dce, #R$9df8,
* #R$9e21 and #R$9e55.
hl_de_b_c:                             ; >9aba
       .push hl                        ; PUSH HL           ; 
       .push de                        ; PUSH DE           ; 
       movb b,a                        ; LD A,B            ; 
       movb @c,@e                      ; LD E,C            ; 
       sb   one,@e                     ; DEC E             ; convert 1-based to 0-based
       sb   d,d                        ; LD D,$00          ; 
       .push bc                        ; PUSH BC           ; 
       .call @mult_de_a                ; CALL $9AAD        ; HL = DE * A
       .pop bc                         ; POP BC            ; 
       .pop de                         ; POP DE            ; 
       a    de,hl                      ; ADD HL,DE         ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .pop hl                         ; POP HL            ; 
       .ret                            ; RET               ; 

* Routine at 9acb
draw_disp_4:                           ; >9acb
       .pop bc                         ; POP BC            ; 
       .call @get_blend_instr          ; CALL $9D19        ; map A=0-2 to Z80 opcode used to blend graphics data
       movb a,@loc_9add                ; LD ($9ADD),A      ; 
       .call @get_gfx_data             ; CALL $9995        ; C=gfx idx, DE=coords
       .call @hl_de_b_c                ; CALL $9ABA        ; HL = DE + B * C
loc_9ad8:                              ; >9ad8
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
loc_9adb:                              ; >9adb
       movb *de,a                      ; LD A,(DE)         ; 
       inc  de                         ; INC DE            ; 
loc_9add:                              ; >9add
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9ADB        ; 
       jne  loc_9adb                   ;                   
       .pop hl                         ; POP HL            ; 
       .call @pixel_line_up            ; CALL $9F03        ; move up 1 display line in HL
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .call @sbc_de_b                 ; CALL $9AA5        ; subtract B from DE
       sb   one,@c                     ; DEC C             ; 
       jne  loc_9ad8                   ; JR NZ,$9AD8       ; 
       .ret                            ; RET               ; 

* Routine at 9aef
draw_disp_5:                           ; >9aef
       .pop bc                         ; POP BC            ; 
       .call @get_blend_instr          ; CALL $9D19        ; map A=0-2 to Z80 opcode used to blend graphics data
       movb a,@loc_9b06                ; LD ($9B06),A      ; 
       .call @get_gfx_data             ; CALL $9995        ; C=gfx idx, DE=coords
       .call @hl_de_b_c                ; CALL $9ABA        ; HL = DE + B * C
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
loc_9aff:                              ; >9aff
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
loc_9b01:                              ; >9b01
       dec  de                         ; DEC DE            ; 
       movb *de,a                      ; LD A,(DE)         ; 
       .call @mirror_a                 ; CALL $9A92        ; mirror bits in A
loc_9b06:                              ; >9b06
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9B01        ; 
       jne  loc_9b01                   ;                   
       .pop hl                         ; POP HL            ; 
       .call @pixel_line_up            ; CALL $9F03        ; move up 1 display line in HL
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_9aff                   ; JR NZ,$9AFF       ; 
       .ret                            ; RET               ; 

* Routine at 9b14
draw_disp_6:                           ; >9b14
       .pop bc                         ; POP BC            ; 
       .call @get_blend_instr          ; CALL $9D19        ; map A=0-2 to Z80 opcode used to blend graphics data
       movb a,@loc_9b43                ; LD ($9B43),A      ; 
       .call @get_gfx_data             ; CALL $9995        ; C=gfx idx, DE=coords
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       movb one,@l                     ; LD L,$01          ; 
       .exx                            ; EXX               ; 
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
       dec  de                         ; DEC DE            ; 
       .call @hl_de_b_c                ; CALL $9ABA        ; HL = DE + B * C
loc_9b2b:                              ; >9b2b
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
loc_9b2e:                              ; >9b2e
       movb *de,a                      ; LD A,(DE)         ; 
       .exx                            ; EXX               ; 
       ; AND L                         ; AND L             ; 
       jeq  loc_9b34                   ; JR Z,$9B34        ; 
       ; SCF                           ; SCF               ; 
loc_9b34:                              ; >9b34
       sla  h,1                        ; RL H              ; TODO: check code. 
       .exx                            ; EXX               ; 
       .call @sbc_de_b                 ; CALL $9AA5        ; subtract B from DE
       sb   one,@c                     ; DEC C             ; 
       movb @c,a                       ; LD A,C            ; 
       andi a,>0700                    ; AND $07           ; 
       jne  loc_9b2e                   ; JR NZ,$9B2E       ; 
       .exx                            ; EXX               ; 
       movb h,a                        ; LD A,H            ; 
       .exx                            ; EXX               ; 
loc_9b43:                              ; >9b43
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jne  loc_9b2e                   ; JR NZ,$9B2E       ; 
       .pop hl                         ; POP HL            ; 
       .call @pixel_line_up            ; CALL $9F03        ; move up 1 display line in HL
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .exx                            ; EXX               ; 
       ; RLC L                         ; RLC L             ; 
       .exx                            ; EXX               ; 
       jnc  loc_9b2b                   ; JR NC,$9B2B       ; TODO: check code. 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       dec  de                         ; DEC DE            ; 
       jmp  loc_9b2b                   ; JR $9B2B          ; 

* Routine at 9b5d
draw_disp_7:                           ; >9b5d
       .pop bc                         ; POP BC            ; 
       .call @get_blend_instr          ; CALL $9D19        ; map A=0-2 to Z80 opcode used to blend graphics data
       movb a,@loc_9b88                ; LD ($9B88),A      ; 
       .call @get_gfx_data             ; CALL $9995        ; C=gfx idx, DE=coords
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       movb @bytes+>80,@l              ; LD L,$80          ; 
       .exx                            ; EXX               ; 
       .call @hl_de_b_c                ; CALL $9ABA        ; HL = DE + B * C
loc_9b70:                              ; >9b70
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
loc_9b73:                              ; >9b73
       movb *de,a                      ; LD A,(DE)         ; 
       .exx                            ; EXX               ; 
       ; AND L                         ; AND L             ; 
       jeq  loc_9b79                   ; JR Z,$9B79        ; 
       ; SCF                           ; SCF               ; 
loc_9b79:                              ; >9b79
       sla  h,1                        ; RL H              ; TODO: check code. 
       .exx                            ; EXX               ; 
       .call @sbc_de_b                 ; CALL $9AA5        ; subtract B from DE
       sb   one,@c                     ; DEC C             ; 
       movb @c,a                       ; LD A,C            ; 
       andi a,>0700                    ; AND $07           ; 
       jne  loc_9b73                   ; JR NZ,$9B73       ; 
       .exx                            ; EXX               ; 
       movb h,a                        ; LD A,H            ; 
       .exx                            ; EXX               ; 
loc_9b88:                              ; >9b88
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jne  loc_9b73                   ; JR NZ,$9B73       ; 
       .pop hl                         ; POP HL            ; 
       .call @pixel_line_up            ; CALL $9F03        ; move up 1 display line in HL
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .exx                            ; EXX               ; 
       ; RRC L                         ; RRC L             ; 
       .exx                            ; EXX               ; 
       jnc  loc_9b70                   ; JR NC,$9B70       ; TODO: check code. 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       inc  de                         ; INC DE            ; 
       jmp  loc_9b70                   ; JR $9B70          ; 

* convert coords in HL to display address in HL
* 
* Used by the routines at #R$7d8a, #R$8b8a, #R$9607, #R$9641, #R$9995, #R$9c61,
* #R$9f80, #R$9f9f, #R$a185, #R$a1b7, #R$a1f3 and #R$a219.
xy_to_display:                         ; >9ba2
       movb @l,a                       ; LD A,L            ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       andi a,>1f00                    ; AND $1F           ; 
       movb a,@l                       ; LD L,A            ; 
       movb h,a                        ; LD A,H            ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       andi a,>e000                    ; AND $E0           ; 
       socb @l,a                       ; OR L              ; 
       movb a,@l                       ; LD L,A            ; 
       movb h,a                        ; LD A,H            ; 
       andi a,>0700                    ; AND $07           ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb h,a                        ; LD A,H            ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       andi a,>1800                    ; AND $18           ; 
       socb @bytes+>40,a               ; OR $40            ; 
       movb a,h                        ; LD H,A            ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       socb h,a                        ; OR H              ; 
       movb a,h                        ; LD H,A            ; 
       .ret                            ; RET               ; 

* Routine at 9bc1
pixel_line_down:                       ; >9bc1
       ab   one,h                      ; INC H             ; 
       movb h,a                        ; LD A,H            ; 
       andi a,>0700                    ; AND $07           ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @l,a                       ; LD A,L            ; 
       ab   @bytes+>20,a               ; ADD A,$20         ; 
       movb a,@l                       ; LD L,A            ; 
       andi a,>e000                    ; AND $E0           ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       movb h,a                        ; LD A,H            ; 
       sb   @bytes+>08,a               ; SUB $08           ; 
       movb a,h                        ; LD H,A            ; 
       .ret                            ; RET               ; 

* convert pixel coords in HL to attribute address
* 
* Used by the routines at #R$7d8a, #R$8c8c, #R$99af, #R$a00e, #R$a1f3 and
* #R$a240.
xy_to_attr:                            ; >9bd2
       .push bc                        ; PUSH BC           ; 
       movb @l,a                       ; LD A,L            ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       andi a,>1f00                    ; AND $1F           ; 
       movb a,@l                       ; LD L,A            ; 
       movb h,a                        ; LD A,H            ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       movb a,@c                       ; LD C,A            ; 
       andi a,>e000                    ; AND $E0           ; 
       socb @l,a                       ; OR L              ; 
       movb a,@l                       ; LD L,A            ; 
       movb @c,a                       ; LD A,C            ; 
       andi a,>0300                    ; AND $03           ; 
       socb @bytes+>58,a               ; OR $58            ; 
       movb a,h                        ; LD H,A            ; 
       .pop bc                         ; POP BC            ; 
       .ret                            ; RET               ; 

* draw lines that make up outer room frame
* 
* Used by the routine at #R$9117.
draw_room_frame:                       ; >9bea
       sb   a,a                        ; XOR A             ; 
       movb a,@game_flags              ; LD ($5E14),A      ; b0 set if room content drawn
       movb @player_room,a             ; LD A,($EA91)      ; 
* This entry point is used by the routine at #R$9731.
draw_room_a:                           ; >9bf1
       li   bc,room_attrs              ; LD BC,$A854       ; room attr colour and style (0-B)
       movb a,@l                       ; LD L,A            ; 
       sb   h,h                        ; LD H,$00          ; 
       a    hl,hl                      ; ADD HL,HL         ; 2 bytes per entry
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; attr colour
       inc  hl                         ; INC HL            ; 
       movb a,@room_attr               ; LD ($5E1A),A      ; 
       .exx                            ; EXX               ; 
       li   hl,zx_attrs                ; LD HL,$5800       ; 
       li   bc,>1818                   ; LD BC,$1818       ; 24x24 room area
       movb @room_attr,a               ; LD A,($5E1A)      ; 
       .call @fill_bc_hl_a             ; CALL $809A        ; fill C rows of B columns of value A at address HL
       .exx                            ; EXX               ; 
       movb *hl,@l                     ; LD L,(HL)         ; style?
       sb   h,h                        ; LD H,$00          ; 
       a    hl,hl                      ; ADD HL,HL         ; * 2
       movb @l,@c                      ; LD C,L            ; 
       movb h,b                        ; LD B,H            ; 
       a    hl,hl                      ; ADD HL,HL         ; * 4
       a    bc,hl                      ; ADD HL,BC         ; * 6
       li   bc,room_styles             ; LD BC,$A982       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb a,@room_width              ; LD ($5E1D),A      ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb a,@room_height             ; LD ($5E1E),A      ; 
       movb *hl,@e                     ; LD E,(HL)         ; points LSB
       inc  hl                         ; INC HL            ; 
       movb *hl,d                      ; LD D,(HL)         ; points MSB
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; lines LSB
       inc  hl                         ; INC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; lines MSB
       movb a,@l                       ; LD L,A            ; 
       .push de                        ; PUSH DE           ; 
       .pop ix                         ; POP IX            ; 
       .push bc                        ; PUSH BC           ; 
loc_9c2e:                              ; >9c2e
       .pop bc                         ; POP BC            ; 
       movb *hl,a                      ; LD A,(HL)         ; x of first point
       inc  hl                         ; INC HL            ; 
       cb   a,@b255                    ; CP $FF            ; end marker?
       jne  !                          ; RET Z             ; return if so
       .ret                            ;                   
!
       sla  a,1                        ; SLA A             ; * 2 (bytes per point)
       movb a,@loc_9c3d+>0002          ; LD ($9C3F),A      ; offset of source x
       ab   one,a                      ; INC A             ; 
       movb a,@loc_9c40+>0002          ; LD ($9C42),A      ; offset of source y
loc_9c3d:                              ; >9c3d
       movb *ix,@c                     ; LD C,(IX+$00)     ; source x
loc_9c40:                              ; >9c40
       movb *ix,b                      ; LD B,(IX+$00)     ; source y
loc_9c43:                              ; >9c43
       .push bc                        ; PUSH BC           ; 
       movb *hl,a                      ; LD A,(HL)         ; next point x
       inc  hl                         ; INC HL            ; 
       cb   a,@b255                    ; CP $FF            ; end marker?
       jeq  loc_9c2e                   ; JR Z,$9C2E        ; jump if so (next source point)
       sla  a,1                        ; SLA A             ; * 2 (bytes per point)
       movb a,@loc_9c53+>0002          ; LD ($9C55),A      ; offset of target x
       ab   one,a                      ; INC A             ; 
       movb a,@loc_9c56+>0002          ; LD ($9C58),A      ; offset of target y
loc_9c53:                              ; >9c53
       movb *ix,@e                     ; LD E,(IX+$00)     ; target x
loc_9c56:                              ; >9c56
       movb *ix,d                      ; LD D,(IX+$00)     ; target y
       .push hl                        ; PUSH HL           ; 
       .call @draw_line_bc_de          ; CALL $9C79        ; draw line from (B,C) to (D,E)
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; 
       jmp  loc_9c43                   ; JR $9C43          ; next target point

* plot pixel at L,H
* 
* Used by the routine at #R$9c79.
plot_l_h:                              ; >9c61
       movb @l,a                       ; LD A,L            ; 
       andi a,>0700                    ; AND $07           ; 
       ab   one,a                      ; INC A             ; 
       movb a,b                        ; LD B,A            ; 
       sb   a,a                        ; XOR A             ; 
       ; SCF                           ; SCF               ; 
loc_9c68:                              ; >9c68
       srl  a,1                        ; RRA               ; TODO: check code. 
       sb   one,b                      ; DJNZ $9C68        ; 
       jne  loc_9c68                   ;                   
       .push hl                        ; PUSH HL           ; 
       .push af                        ; PUSH AF           ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       .push af                        ; PUSH AF           ; 
       .call @xy_to_display            ; CALL $9BA2        ; convert coords in HL to display address in HL
       .pop af                         ; POP AF            ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       .pop af                         ; POP AF            ; 
       socb *hl,a                      ; OR (HL)           ; merge pixel
       movb a,*hl                      ; LD (HL),A         ; write to display
       .pop hl                         ; POP HL            ; 
       .ret                            ; RET               ; 

* draw line from (B,C) to (D,E)
* 
* Used by the routine at #R$9bea.
draw_line_bc_de:                       ; >9c79
       movb b,h                        ; LD H,B            ; move source point to HL
       movb @c,@l                      ; LD L,C            ; 
       sb   @c,@c                      ; LD C,$00          ; clear flags
       movb h,a                        ; LD A,H            ; 
       sb   d,a                        ; SUB D             ; drawing upwards?
       jnc  loc_9c85                   ; JR NC,$9C85       ; TODO: check code. jump if so
       neg a                           ; NEG               ; abs
       socb @bits+0,@c                 ; SET 0,C           ; flag drawing down
loc_9c85:                              ; >9c85
       movb a,b                        ; LD B,A            ; vertical count
       movb @l,a                       ; LD A,L            ; 
       sb   @e,a                       ; SUB E             ; drawing left?
       jnc  loc_9c8e                   ; JR NC,$9C8E       ; TODO: check code. jump if so
       neg a                           ; NEG               ; abs
       socb @bits+1,@c                 ; SET 1,C           ; flag drawing right
loc_9c8e:                              ; >9c8e
       cb   a,b                        ; CP B              ; drawing more horiz than vert?
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb @c,a                       ; LD A,C            ; 
       movb a,@line_flags              ; LD ($5E24),A      ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       jnc  !                          ; JP C,$9CD6        ; TODO: check code. jump if so
       b    @loc_9cd6                  ;                   
!
       movb a,@line_counter            ; LD ($5E23),A      ; horiz counter
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
       movb a,@e                       ; LD E,A            ; horiz line size
       sb   d,d                        ; LD D,$00          ; 
       movb d,@l                       ; LD L,D            ; 
       movb b,h                        ; LD H,B            ; vert line size
       .call @line_slope               ; CALL $A379        ; determine Bresenham line slope step
       movb @line_flags,a              ; LD A,($5E24)      ; 
       movb a,r0                       ; BIT 0,A           ; 
       andi r0,>0100                   ;                   
       jne  loc_9caf                   ; JR NZ,$9CAF       ; 
       .call @minus_de                 ; CALL $A39E        ; HL = -DE
loc_9caf:                              ; >9caf
       movb @line_flags,a              ; LD A,($5E24)      ; 
       movb a,r0                       ; BIT 1,A           ; drawing down?
       andi r0,>0200                   ;                   
       movb one,@c                     ; LD C,$01          ; y step
       jne  loc_9cba                   ; JR NZ,$9CBA       ; jump if so
       movb @b255,@c                   ; LD C,$FF          ; y step
loc_9cba:                              ; >9cba
       .ex_de_hl                       ; EX DE,HL          ; 
       .pop hl                         ; POP HL            ; 
       movb @line_counter,a            ; LD A,($5E23)      ; 
       ab   one,a                      ; INC A             ; 
       movb a,b                        ; LD B,A            ; 
       movb @e,a                       ; LD A,E            ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
loc_9cc3:                              ; >9cc3
       .push bc                        ; PUSH BC           ; 
       .call @plot_l_h                 ; CALL $9C61        ; plot pixel at L,H
       movb @l,a                       ; LD A,L            ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb a,@l                       ; LD L,A            ; 
       a    de,hl                      ; ADD HL,DE         ; step partial x
       movb @l,a                       ; LD A,L            ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       .pop bc                         ; POP BC            ; 
       ab   @c,a                       ; ADD A,C           ; step y
       movb a,@l                       ; LD L,A            ; 
       sb   one,b                      ; DJNZ $9CC3        ; 
       jne  loc_9cc3                   ;                   
       .pop hl                         ; POP HL            ; 
       b    @plot_l_h                  ; JP $9C61          ; plot pixel at L,H
loc_9cd6:                              ; >9cd6
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb b,a                        ; LD A,B            ; 
       movb a,@line_counter            ; LD ($5E23),A      ; vert counter
       .ex_af_af_                      ; EX AF,AF'         ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
       movb b,@e                       ; LD E,B            ; 
       sb   d,d                        ; LD D,$00          ; 
       movb d,@l                       ; LD L,D            ; 
       movb a,h                        ; LD H,A            ; 
       .call @line_slope               ; CALL $A379        ; determine Bresenham line slope step
       movb @line_flags,a              ; LD A,($5E24)      ; 
       movb a,r0                       ; BIT 1,A           ; drawing right?
       andi r0,>0200                   ;                   
       jne  loc_9cf0                   ; JR NZ,$9CF0       ; jump if so
       .call @minus_de                 ; CALL $A39E        ; HL = -DE
loc_9cf0:                              ; >9cf0
       movb @line_flags,a              ; LD A,($5E24)      ; 
       movb a,r0                       ; BIT 0,A           ; drawing right?
       andi r0,>0100                   ;                   
       movb one,@c                     ; LD C,$01          ; x step
       jne  loc_9cfb                   ; JR NZ,$9CFB       ; jump if so
       movb @b255,@c                   ; LD C,$FF          ; x step
loc_9cfb:                              ; >9cfb
       .ex_de_hl                       ; EX DE,HL          ; 
       .pop hl                         ; POP HL            ; 
       movb @line_counter,a            ; LD A,($5E23)      ; 
       ab   one,a                      ; INC A             ; 
       movb a,b                        ; LD B,A            ; 
       movb @e,a                       ; LD A,E            ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
loc_9d04:                              ; >9d04
       .push bc                        ; PUSH BC           ; 
       .call @plot_l_h                 ; CALL $9C61        ; plot pixel at L,H
       movb h,a                        ; LD A,H            ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb @l,h                       ; LD H,L            ; 
       movb a,@l                       ; LD L,A            ; 
       a    de,hl                      ; ADD HL,DE         ; step partial y
       movb @l,a                       ; LD A,L            ; 
       movb h,@l                       ; LD L,H            ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       .pop bc                         ; POP BC            ; 
       ab   @c,a                       ; ADD A,C           ; step x
       movb a,h                        ; LD H,A            ; 
       sb   one,b                      ; DJNZ $9D04        ; 
       jne  loc_9d04                   ;                   
       .pop hl                         ; POP HL            ; 
       b    @plot_l_h                  ; JP $9C61          ; plot pixel at L,H

* map A=0-2 to Z80 opcode used to blend graphics data
* 
* Used by the routines at #R$99c9, #R$99e5, #R$9a0a, #R$9a50, #R$9acb, #R$9aef,
* #R$9b14 and #R$9b5d.
get_blend_instr:                       ; >9d19
       movb b,a                        ; LD A,B            ; 
       andi a,>0300                    ; AND $03           ; 
       jne  !                          ; RET Z             ; return
       .ret                            ;                   
!
       cb   a,one                      ; CP $01            ; 
       movb @bytes+>ae,a               ; LD A,$AE          ; 
       jeq  !                          ; RET NZ            ; return
       .ret                            ;                   
!
       ab   @bytes+>08,a               ; ADD A,$08         ; 
       .ret                            ; RET               ; return

* Routine at 9d25
draw_attr_0:                           ; >9d25
       .pop bc                         ; POP BC            ; 
       .call @get_gfx_attrs            ; CALL $99AF        ; IN
loc_9d29:                              ; >9d29
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
loc_9d2b:                              ; >9d2b
       movb *de,a                      ; LD A,(DE)         ; attr byte
       inc  de                         ; INC DE            ; 
       ; AND A                         ; AND A             ; skip attr?
       jeq  loc_9d38                   ; JR Z,$9D38        ; jump if so
       cb   a,@b255                    ; CP $FF            ; use room attr?
       jne  loc_9d37                   ; JR NZ,$9D37       ; jump if not
       movb @room_attr,a               ; LD A,($5E1A)      ; 
loc_9d37:                              ; >9d37
       movb a,*hl                      ; LD (HL),A         ; set attr
loc_9d38:                              ; >9d38
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9D2B        ; 
       jne  loc_9d2b                   ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_9d29                   ; JR NZ,$9D29       ; 
       .ret                            ; RET               ; 

* Routine at 9d47
draw_attr_1:                           ; >9d47
       .pop bc                         ; POP BC            ; 
       .call @get_gfx_attrs            ; CALL $99AF        ; IN
       dec  de                         ; DEC DE            ; 
loc_9d4c:                              ; >9d4c
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
loc_9d52:                              ; >9d52
       movb *de,a                      ; LD A,(DE)         ; attr byte
       dec  de                         ; DEC DE            ; 
       ; AND A                         ; AND A             ; skip attr?
       jeq  loc_9d5f                   ; JR Z,$9D5F        ; jump if so
       cb   a,@b255                    ; CP $FF            ; use room attr?
       jne  loc_9d5e                   ; JR NZ,$9D5E       ; jump if not
       movb @room_attr,a               ; LD A,($5E1A)      ; 
loc_9d5e:                              ; >9d5e
       movb a,*hl                      ; LD (HL),A         ; set attr
loc_9d5f:                              ; >9d5f
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9D52        ; 
       jne  loc_9d52                   ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_9d4c                   ; JR NZ,$9D4C       ; 
       .ret                            ; RET               ; 

* Routine at 9d6f
draw_attr_2:                           ; >9d6f
       .pop bc                         ; POP BC            ; 
       .call @get_gfx_attrs            ; CALL $99AF        ; IN
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       .exx                            ; EXX               ; 
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
loc_9d7a:                              ; >9d7a
       dec  de                         ; DEC DE            ; 
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
loc_9d7e:                              ; >9d7e
       movb *de,a                      ; LD A,(DE)         ; attr byte
       ; AND A                         ; AND A             ; skip attr?
       jeq  loc_9d8a                   ; JR Z,$9D8A        ; jump if so
       cb   a,@b255                    ; CP $FF            ; use room attr?
       jne  loc_9d89                   ; JR NZ,$9D89       ; jump if not
       movb @room_attr,a               ; LD A,($5E1A)      ; 
loc_9d89:                              ; >9d89
       movb a,*hl                      ; LD (HL),A         ; set attr
loc_9d8a:                              ; >9d8a
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
       ab   one,@l                     ; INC L             ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_9d7e                   ; JR NZ,$9D7E       ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  loc_9d7a                   ; JR NZ,$9D7A       ; 
       .ret                            ; RET               ; 

* Routine at 9da0
draw_attr_3:                           ; >9da0
       .pop bc                         ; POP BC            ; 
       .call @get_gfx_attrs            ; CALL $99AF        ; IN
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       .exx                            ; EXX               ; 
loc_9da8:                              ; >9da8
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
loc_9dab:                              ; >9dab
       movb *de,a                      ; LD A,(DE)         ; 
       ; AND A                         ; AND A             ; skip attr?
       jeq  loc_9db7                   ; JR Z,$9DB7        ; jump if so
       cb   a,@b255                    ; CP $FF            ; use room attr?
       jne  loc_9db6                   ; JR NZ,$9DB6       ; jump if not
       movb @room_attr,a               ; LD A,($5E1A)      ; 
loc_9db6:                              ; >9db6
       movb a,*hl                      ; LD (HL),A         ; set attr
loc_9db7:                              ; >9db7
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
       ab   one,@l                     ; INC L             ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_9dab                   ; JR NZ,$9DAB       ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       inc  de                         ; INC DE            ; 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  loc_9da8                   ; JR NZ,$9DA8       ; 
       .ret                            ; RET               ; 

* Routine at 9dce
draw_attr_4:                           ; >9dce
       .pop bc                         ; POP BC            ; 
       .call @get_gfx_attrs            ; CALL $99AF        ; IN
       .call @hl_de_b_c                ; CALL $9ABA        ; HL = DE + B * C
loc_9dd5:                              ; >9dd5
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
loc_9dd8:                              ; >9dd8
       movb *de,a                      ; LD A,(DE)         ; 
       inc  de                         ; INC DE            ; 
       ; AND A                         ; AND A             ; skip attr?
       jeq  loc_9de5                   ; JR Z,$9DE5        ; jump if so
       cb   a,@b255                    ; CP $FF            ; use room attr?
       jne  loc_9de4                   ; JR NZ,$9DE4       ; jump if not
       movb @room_attr,a               ; LD A,($5E1A)      ; 
loc_9de4:                              ; >9de4
       movb a,*hl                      ; LD (HL),A         ; set attr
loc_9de5:                              ; >9de5
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9DD8        ; 
       jne  loc_9dd8                   ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .call @sbc_de_b                 ; CALL $9AA5        ; subtract B from DE
       sb   one,@c                     ; DEC C             ; 
       jne  loc_9dd5                   ; JR NZ,$9DD5       ; 
       .ret                            ; RET               ; 

* Routine at 9df8
draw_attr_5:                           ; >9df8
       .pop bc                         ; POP BC            ; 
       .call @get_gfx_attrs            ; CALL $99AF        ; IN
       .call @hl_de_b_c                ; CALL $9ABA        ; HL = DE + B * C
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
       dec  de                         ; DEC DE            ; 
loc_9e03:                              ; >9e03
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
loc_9e05:                              ; >9e05
       movb *de,a                      ; LD A,(DE)         ; 
       dec  de                         ; DEC DE            ; 
       ; AND A                         ; AND A             ; skip attr?
       jeq  loc_9e12                   ; JR Z,$9E12        ; jump if so
       cb   a,@b255                    ; CP $FF            ; use room attr?
       jne  loc_9e11                   ; JR NZ,$9E11       ; jump if not
       movb @room_attr,a               ; LD A,($5E1A)      ; 
loc_9e11:                              ; >9e11
       movb a,*hl                      ; LD (HL),A         ; set attr
loc_9e12:                              ; >9e12
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9E05        ; 
       jne  loc_9e05                   ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_9e03                   ; JR NZ,$9E03       ; 
       .ret                            ; RET               ; 

* Routine at 9e21
draw_attr_6:                           ; >9e21
       .pop bc                         ; POP BC            ; 
       .call @get_gfx_attrs            ; CALL $99AF        ; IN
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       .exx                            ; EXX               ; 
       .call @hl_de_b_c                ; CALL $9ABA        ; HL = DE + B * C
       .call @add_de_b                 ; CALL $9A9D        ; add B to DE
loc_9e2f:                              ; >9e2f
       dec  de                         ; DEC DE            ; 
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
loc_9e33:                              ; >9e33
       movb *de,a                      ; LD A,(DE)         ; 
       ; AND A                         ; AND A             ; skip attr?
       jeq  loc_9e3f                   ; JR Z,$9E3F        ; jump if so
       cb   a,@b255                    ; CP $FF            ; use room attr?
       jne  loc_9e3e                   ; JR NZ,$9E3E       ; jump if not
       movb @room_attr,a               ; LD A,($5E1A)      ; 
loc_9e3e:                              ; >9e3e
       movb a,*hl                      ; LD (HL),A         ; set attr
loc_9e3f:                              ; >9e3f
       .call @sbc_de_b                 ; CALL $9AA5        ; subtract B from DE
       ab   one,@l                     ; INC L             ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_9e33                   ; JR NZ,$9E33       ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  loc_9e2f                   ; JR NZ,$9E2F       ; 
       .ret                            ; RET               ; 

* Routine at 9e55
draw_attr_7:                           ; >9e55
       .pop bc                         ; POP BC            ; 
       .call @get_gfx_attrs            ; CALL $99AF        ; IN
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       .exx                            ; EXX               ; 
       .call @hl_de_b_c                ; CALL $9ABA        ; HL = DE + B * C
loc_9e60:                              ; >9e60
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
loc_9e63:                              ; >9e63
       movb *de,a                      ; LD A,(DE)         ; 
       ; AND A                         ; AND A             ; skip attr?
       jeq  loc_9e6f                   ; JR Z,$9E6F        ; jump if so
       cb   a,@b255                    ; CP $FF            ; use room attr?
       jne  loc_9e6e                   ; JR NZ,$9E6E       ; jump if not
       movb @room_attr,a               ; LD A,($5E1A)      ; 
loc_9e6e:                              ; >9e6e
       movb a,*hl                      ; LD (HL),A         ; set attr
loc_9e6f:                              ; >9e6f
       .call @sbc_de_b                 ; CALL $9AA5        ; subtract B from DE
       ab   one,@l                     ; INC L             ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_9e63                   ; JR NZ,$9E63       ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       inc  de                         ; INC DE            ; 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  loc_9e60                   ; JR NZ,$9E60       ; 
       .ret                            ; RET               ; 

* return address of sprite A in DE
* 
* Used by the routine at #R$9f80.
get_sprite_a:                          ; >9e86
       movb @saved_graphic,a           ; LD A,($5E15)      ; 

* return address of sprite A in DE
* 
* Used by the routines at #R$8cb7, #R$8d45, #R$8e26 and #R$9e96.
get_sprite_addr:                       ; >9e89
       sb   one,a                      ; DEC A             ; 
       movb a,@l                       ; LD L,A            ; 
       sb   h,h                        ; LD H,$00          ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       li   bc,sprite_table            ; LD BC,$A4BE       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       .ret                            ; RET               ; 

* return addr of entity sprite addr in DE
* 
* Used by the routine at #R$9f9f.
get_entity_sprite:                     ; >9e96
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       jmp  get_sprite_addr            ; JR $9E89          ; return address of sprite A in DE
* This entry point is used by the routines at #R$9f4a, #R$9f56 and #R$9fca.
loc_9e9b:                              ; >9e9b
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jeq  loc_9eaf                   ; JR Z,$9EAF        ; 
       sb   one,@c                     ; DEC C             ; 
       .call @draw_sprite23            ; CALL $9EDC        ; 
       .exx                            ; EXX               ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jeq  loc_9eac                   ; JR Z,$9EAC        ; 
loc_9ea8:                              ; >9ea8
       sb   one,@c                     ; DEC C             ; 
       .call @draw_sprite2             ; CALL $9F21        ; 
loc_9eac:                              ; >9eac
       .exx                            ; EXX               ; 
       jmp  loc_9e9b                   ; JR $9E9B          ; 
loc_9eaf:                              ; >9eaf
       .exx                            ; EXX               ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jne  loc_9ea8                   ; JR NZ,$9EA8       ; 
* This entry point is used by the routine at #R$9fca.
loc_9eb4:                              ; >9eb4
       .exx                            ; EXX               ; 
* This entry point is used by the routine at #R$9fca.
loc_9eb5:                              ; >9eb5
       movb @some_height,a             ; LD A,($5E18)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @some_width,a              ; LD A,($5E19)      ; 
       socb @c,a                       ; OR C              ; width and height zero?
       jne  !                          ; RET Z             ; return if so
       .ret                            ;                   
!
       sb   a,a                        ; XOR A             ; 
       movb a,@some_height             ; LD ($5E18),A      ; 
       .exx                            ; EXX               ; 
       movb @some_width,a              ; LD A,($5E19)      ; 
       movb a,@c                       ; LD C,A            ; 
       sb   a,a                        ; XOR A             ; 
* This entry point is used by the routine at #R$9fca.
loc_9ec8:                              ; >9ec8
       movb a,@some_width              ; LD ($5E19),A      ; 
       .exx                            ; EXX               ; 
       jmp  loc_9e9b                   ; JR $9E9B          ; 

* Routine at 9ece
draw_unshifted:                        ; >9ece
       .ex_de_hl                       ; EX DE,HL          ; 
       .ex_*sp_hl                      ; EX (SP),HL        ; 
       movb d,a                        ; LD A,D            ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @e,a                       ; LD A,E            ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .pop de                         ; POP DE            ; 
       sb   one,@l                     ; DEC L             ; 
       b    @pixel_line_up             ; JP $9F03          ; move up 1 display line in HL

* Routine at 9edc
* 
* Used by the routine at #R$9e96.
draw_sprite23:                         ; >9edc
       .ex_de_hl                       ; EX DE,HL          ; 
       .push de                        ; PUSH DE           ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       sb   a,a                        ; XOR A             ; 
jr_23:                                 ; >9ee4
       jmp  jr_23                      ; JR $9EE4          ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .ex_*sp_hl                      ; EX (SP),HL        ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
* This entry point is used by the routine at #R$9f21.
draw_2_bytes:                          ; >9ef9
       movb d,a                        ; LD A,D            ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @e,a                       ; LD A,E            ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .pop de                         ; POP DE            ; 
       sb   one,@l                     ; DEC L             ; 
       sb   one,@l                     ; DEC L             ; 
* This entry point is used by the routines at #R$99c9, #R$99e5, #R$9a0a,
* #R$9a50, #R$9acb, #R$9aef, #R$9b14, #R$9b5d, #R$9ece, #R$9f13 and #R$a185.
pixel_line_up:                         ; >9f03
       sb   one,h                      ; DEC H             ; move up 1 display line in HL
       movb h,a                        ; LD A,H            ; 
       inv  a                          ; CPL               ; 
       andi a,>0700                    ; AND $07           ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @l,a                       ; LD A,L            ; 
       sb   @bytes+>20,a               ; SUB $20           ; 
       movb a,@l                       ; LD L,A            ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       movb h,a                        ; LD A,H            ; 
       ab   @bytes+>08,a               ; ADD A,$08         ; 
       movb a,h                        ; LD H,A            ; 
       .ret                            ; RET               ; 

* draw 2-byte unshifted graphic
* 
* Used by the routine at #R$9f21.
draw_unshifted2:                       ; >9f13
       .ex_de_hl                       ; EX DE,HL          ; 
       .ex_*sp_hl                      ; EX (SP),HL        ; 
       movb d,a                        ; LD A,D            ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @e,a                       ; LD A,E            ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .pop de                         ; POP DE            ; 
       sb   one,@l                     ; DEC L             ; 
       b    @pixel_line_up             ; JP $9F03          ; move up 1 display line in HL

* Routine at 9f21
* 
* Used by the routine at #R$9e96.
draw_sprite2:                          ; >9f21
       .ex_de_hl                       ; EX DE,HL          ; 
       .push de                        ; PUSH DE           ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       sb   a,a                        ; XOR A             ; 
jr_2:                                  ; >9f29
       jmp  draw_unshifted2            ; JR $9F13          ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .ex_*sp_hl                      ; EX (SP),HL        ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; first byte
       ab   one,@l                     ; INC L             ; 
       jmp  draw_2_bytes               ; JR $9EF9          ; 

* Routine at 9f40
draw2_entity:                          ; >9f40
       .call @prepare_draw2_de         ; CALL $9FA2        ; 
       jmp  loc_9f4d                   ; JR $9F4D          ; 

* Routine at 9f45
undraw_entity_de:                      ; >9f45
       .call @prepare_draw23_de        ; CALL $9F83        ; 
       jmp  loc_9f59                   ; JR $9F59          ; 

* draw entity graphic (no attrs)
* 
* Used by the routines at #R$814b, #R$83ea, #R$871a, #R$8862, #R$8aff, #R$8cb7,
* #R$9291, #R$9358, #R$9443, #R$95cc, #R$a14d, #R$a2ce and #R$a311.
draw_entity:                           ; >9f4a
       .call @prepare_draw2            ; CALL $9F9F        ; prepare for 2-byte drawing
* This entry point is used by the routine at #R$9f40.
loc_9f4d:                              ; >9f4d
       .exx                            ; EXX               ; 
       sb   a,a                        ; XOR A             ; 
       movb a,@some_height             ; LD ($5E18),A      ; 
       movb a,@c                       ; LD C,A            ; 
       b    @loc_9e9b                  ; JP $9E9B          ; 

* Routine at 9f56
* 
* Used by the routines at #R$81f0, #R$871a, #R$8c63, #R$9326 and #R$98c8.
undraw_entity:                         ; >9f56
       .call @prepare_draw23           ; CALL $9F80        ; prepare for 2-3 byte drawing
* This entry point is used by the routine at #R$9f45.
loc_9f59:                              ; >9f59
       .exx                            ; EXX               ; 
       sb   a,a                        ; XOR A             ; 
       movb a,@c                       ; LD C,A            ; 
       movb a,@some_width              ; LD ($5E19),A      ; 
       movb @some_height,a             ; LD A,($5E18)      ; 
       movb a,@height_lines            ; LD ($5E11),A      ; 
       movb @l,a                       ; LD A,L            ; 
       andi a,>0700                    ; AND $07           ; aligned to cell boundary?
       movb @bytes+>02,a               ; LD A,$02          ; 2 bytes wide
       jeq  loc_9f6d                   ; JR Z,$9F6D        ; jump if so
       ab   one,a                      ; INC A             ; 3 bytes needed
loc_9f6d:                              ; >9f6d
       movb a,@width_bytes             ; LD ($5E10),A      ; 
       .exx                            ; EXX               ; 
       b    @loc_9e9b                  ; JP $9E9B          ; 
       .push de                        ; PUSH DE           ; 
       .call @prepare_draw23_de        ; CALL $9F83        ; 
       .exx                            ; EXX               ; 
       .pop de                         ; POP DE            ; 
       .call @prepare_draw2_de         ; CALL $9FA2        ; 
       .exx                            ; EXX               ; 
       jmp  loc_9fd1                   ; JR $9FD1          ; 

* prepare for 2-3 byte drawing
* 
* Used by the routines at #R$9f56 and #R$9fca.
prepare_draw23:                        ; >9f80
       .call @get_sprite_a             ; CALL $9E86        ; return address of sprite A in DE
* This entry point is used by the routines at #R$9f45 and #R$9f56.
prepare_draw23_de:                     ; >9f83
       mov  @saved_x,hl                ; LD HL,($5E16)     ; 
       movb @l,a                       ; LD A,L            ; xpos (b2-0 determine shifting)
       sb   one,a                      ; DEC A             ; 
       sla  a,1                        ; RLCA              ; TODO: check code. * 2 (bytes per
       andi a,>0e00                    ; AND $0E           ; relative jump offset
       cb   a,@bytes+>0e               ; CP $0E            ; originally unshifted?
       jne  loc_9f91                   ; JR NZ,$9F91       ; jump if not (use calculated offset)
       movb @bytes+>e8,a               ; LD A,$E8          ; jr offset back to 'draw_unshifted'
loc_9f91:                              ; >9f91
       movb a,@jr_23+>0001             ; LD ($9EE5),A      ; set jr offset for data shifting
       .call @xy_to_display            ; CALL $9BA2        ; convert coords in HL to display address in HL
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,@some_height             ; LD ($5E18),A      ; 
* This entry point is used by the routine at #R$9f9f.
loc_9f9b:                              ; >9f9b
       sb   @c,@c                      ; LD C,$00          ; 
       inc  de                         ; INC DE            ; 
       .ret                            ; RET               ; 

* prepare for 2-byte drawing
* 
* Used by the routines at #R$9f4a and #R$9fca.
prepare_draw2:                         ; >9f9f
       .call @get_entity_sprite        ; CALL $9E96        ; return addr of entity sprite addr in DE
* This entry point is used by the routines at #R$9f40 and #R$9f56.
prepare_draw2_de:                      ; >9fa2
       movb @>03(ix),@l                ; LD L,(IX+$03)     ; x
       movb @>04(ix),h                 ; LD H,(IX+$04)     ; y
       movb @l,a                       ; LD A,L            ; xpos (b2-0 determine shifting)
       sb   one,a                      ; DEC A             ; 
       sla  a,1                        ; RLCA              ; TODO: check code. * 2 (bytes per
       andi a,>0e00                    ; AND $0E           ; relative jump offset
       cb   a,@bytes+>0e               ; CP $0E            ; originally unshifted?
       jne  loc_9fb3                   ; JR NZ,$9FB3       ; jump if not (use calculated offset)
       movb @bytes+>e8,a               ; LD A,$E8          ; r offset back to 'draw_unshifted'
loc_9fb3:                              ; >9fb3
       movb a,@jr_2+>0001              ; LD ($9F2A),A      ; set jr offset for data shifting
       movb @bytes+>02,a               ; LD A,$02          ; 2 bytes wide
       jeq  loc_9fbb                   ; JR Z,$9FBB        ; 
       ab   one,a                      ; INC A             ; any shift requires 3 bytes
loc_9fbb:                              ; >9fbb
       movb a,@width_bytes             ; LD ($5E10),A      ; 
       .call @xy_to_display            ; CALL $9BA2        ; convert coords in HL to display address in HL
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,@some_width              ; LD ($5E19),A      ; 
       movb a,@height_lines            ; LD ($5E11),A      ; 
       jmp  loc_9f9b                   ; JR $9F9B          ; 

* draw entity to display (no attrs)
* 
* Used by the routine at #R$8e26.
draw_entity_disp:                      ; >9fca
       .call @prepare_draw2            ; CALL $9F9F        ; prepare for 2-byte drawing
       .exx                            ; EXX               ; 
       .call @prepare_draw23           ; CALL $9F80        ; prepare for 2-3 byte drawing
* This entry point is used by the routine at #R$9f56.
loc_9fd1:                              ; >9fd1
       movb @saved_y,a                 ; LD A,($5E17)      ; 
       sb   @>04(ix),a                 ; SUB (IX+$04)      ; 
       jne  !                          ; JP Z,$9EB5        ; 
       b    @loc_9eb5                  ;                   
!
       ; JP M,$9FEC                    ; JP M,$9FEC        ; 
       movb a,@c                       ; LD C,A            ; 
       movb @some_height,a             ; LD A,($5E18)      ; 
       cb   a,@c                       ; CP C              ; 
       jhe  !                          ; JP C,$9EB5        ; 
       b    @loc_9eb5                  ;                   
!
       sb   @c,a                       ; SUB C             ; 
       movb a,@some_height             ; LD ($5E18),A      ; 
       b    @loc_9e9b                  ; JP $9E9B          ; 
loc_9fec:                              ; >9fec
       .exx                            ; EXX               ; 
       neg a                           ; NEG               ; 
       movb a,@c                       ; LD C,A            ; 
       movb @some_width,a              ; LD A,($5E19)      ; 
       cb   a,@c                       ; CP C              ; 
       jhe  !                          ; JP C,$9EB4        ; 
       b    @loc_9eb4                  ;                   
!
       sb   @c,a                       ; SUB C             ; 
       b    @loc_9ec8                  ; JP $9EC8          ; 

* save entity position for undraw
* 
* Used by the routines at #R$81db, #R$81f0, #R$82f1, #R$8301, #R$845f, #R$85f7,
* #R$862e, #R$8672, #R$871a, #R$8787, #R$87a6, #R$8862, #R$8906, #R$8988,
* #R$89ed, #R$8a2f, #R$8a80, #R$8aff, #R$8c63, #R$8d77, #R$92f5 and #R$988b.
save_entity:                           ; >9ffb
       movb @>03(ix),a                 ; LD A,(IX+$03)     ; 
       movb a,@saved_x                 ; LD ($5E16),A      ; 
       movb @>04(ix),a                 ; LD A,(IX+$04)     ; 
       movb a,@saved_y                 ; LD ($5E17),A      ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       movb a,@saved_graphic           ; LD ($5E15),A      ; 
       .ret                            ; RET               ; 

* paint entity with its current attr colour
* 
* Used by the routines at #R$a14d and #R$a311.
set_entity_attrs:                      ; >a00e
       movb @>03(ix),a                 ; LD A,(IX+$03)     ; xpos
       movb a,@saved_x                 ; LD ($5E16),A      ; 
       movb @>04(ix),a                 ; LD A,(IX+$04)     ; ypos
       movb a,@saved_y                 ; LD ($5E17),A      ; 
* This entry point is used by the routines at #R$81f0, #R$871a, #R$8e26,
* #R$92e2 and #R$9326.
set_entity_attrs2:                     ; >a01a
       movb @>03(ix),@l                ; LD L,(IX+$03)     ; xpos
       movb @>04(ix),h                 ; LD H,(IX+$04)     ; ypos
       movb @>05(ix),d                 ; LD D,(IX+$05)     ; entity attr
       movb @room_attr,a               ; LD A,($5E1A)      ; 
       movb a,@e                       ; LD E,A            ; 
       movb @width_bytes,a             ; LD A,($5E10)      ; 
       movb a,b                        ; LD B,A            ; 
       movb @height_lines,a            ; LD A,($5E11)      ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ab   one,a                      ; INC A             ; 
       ; RRCA                          ; RRCA              ; 
       andi a,>1f00                    ; AND $1F           ; 
       ab   one,a                      ; INC A             ; 
       movb a,@c                       ; LD C,A            ; attr height
       .push bc                        ; PUSH BC           ; 
       sb   b,b                        ; LD B,$00          ; 
       movb @saved_x,a                 ; LD A,($5E16)      ; 
       cb   a,@l                       ; CP L              ; same as previous xpos?
       jeq  loc_a043                   ; JR Z,$A043        ; jump if so (no change)
       joc  loc_a042                   ; JR C,$A042        ; TODO: check code. jump if less (moving left, add 1)
       ab   one,b                      ; INC B             ; moving right (add 2)
loc_a042:                              ; >a042
       ab   one,b                      ; INC B             ; 
loc_a043:                              ; >a043
       movb @saved_y,a                 ; LD A,($5E17)      ; 
       cb   a,h                        ; CP H              ; ypos unchanged?
       movb b,a                        ; LD A,B            ; 
       jeq  loc_a050                   ; JR Z,$A050        ; jump if so (no change)
       joc  loc_a04e                   ; JR C,$A04E        ; TODO: check code. jump if less (moving up, add 4)
       ab   @bytes+>04,a               ; ADD A,$04         ; moving down (add 8)
loc_a04e:                              ; >a04e
       ab   @bytes+>04,a               ; ADD A,$04         ; 
loc_a050:                              ; >a050
       movb a,b                        ; LD B,A            ; handler table index
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
       movb b,a                        ; LD A,B            ; 
       .pop bc                         ; POP BC            ; 
       .push hl                        ; PUSH HL           ; 
       li   hl,attr_handlers           ; LD HL,$A064       ; 3x3 handlers (in 4x3 table) to cover attr for moving
                                                           ; entity
       sla  a,1                        ; SLA A             ; * 2 (bytes per entry)
       .call @add_hl_a                 ; CALL $926C        ; HL = HL + A
       movb *hl,a                      ; LD A,(HL)         ; handler LSB
       inc  hl                         ; INC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; handler MSB
       movb a,@l                       ; LD L,A            ; 
       b    *hl                        ; JP (HL)           ; TODO. 

* Data block at a064
attr_handlers:                         ; >a064
       data attr_draw_c,attr_draw_r,attr_draw_l,h_creat_delay        ; 3x3 handlers (in 4x3 table) to cover attr
                                                                     ; for moving entity
       data attr_draw_d,attr_draw_dr,attrs_draw_dl,h_creat_delay     ; extra delay applied to inactive creatures
       data attr_draw_u,attr_draw_ur,attr_draw_ul                    ; draw attrs for moving up

* draw attrs for unchanged position
attr_draw_c:                           ; >a07a
       .pop hl                         ; POP HL            ; 
* This entry point is used by the routine at #R$a0ec.
loc_a07b:                              ; >a07b
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
loc_a07d:                              ; >a07d
       movb d,*hl                      ; LD (HL),D         ; entity attr
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A07D        ; 
       jne  loc_a07d                   ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_a07b                   ; JR NZ,$A07B       ; 
       .ret                            ; RET               ; 

* draw attrs for moving right
attr_draw_r:                           ; >a08d
       .pop hl                         ; POP HL            ; 
* This entry point is used by the routine at #R$a127.
loc_a08e:                              ; >a08e
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       sb   one,@l                     ; DEC L             ; 
       movb @e,*hl                     ; LD (HL),E         ; room attr
       ab   one,@l                     ; INC L             ; 
loc_a093:                              ; >a093
       movb d,*hl                      ; LD (HL),D         ; entity attr
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A093        ; 
       jne  loc_a093                   ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_a08e                   ; JR NZ,$A08E       ; 
       .ret                            ; RET               ; 

* draw attrs for moving left
attr_draw_l:                           ; >a0a3
       .pop hl                         ; POP HL            ; 
* This entry point is used by the routine at #R$a0fe.
loc_a0a4:                              ; >a0a4
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
loc_a0a6:                              ; >a0a6
       movb d,*hl                      ; LD (HL),D         ; entity attr
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A0A6        ; 
       jne  loc_a0a6                   ;                   
       movb @e,*hl                     ; LD (HL),E         ; room attr
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_a0a4                   ; JR NZ,$A0A4       ; 
       .ret                            ; RET               ; 

* draw attrs for moving down
attr_draw_d:                           ; >a0b7
       .pop hl                         ; POP HL            ; 
loc_a0b8:                              ; >a0b8
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
loc_a0ba:                              ; >a0ba
       movb d,*hl                      ; LD (HL),D         ; entity attr
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A0BA        ; 
       jne  loc_a0ba                   ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_a0b8                   ; JR NZ,$A0B8       ; 
* This entry point is used by the routines at #R$a0d2 and #R$a110.
cond_room_row:                         ; >a0c9
       movb h,a                        ; LD A,H            ; 
       cb   a,@bytes+>58               ; CP $58            ; out of screen top?
       jhe  !                          ; RET C             ; return if so
       .ret                            ;                   
!
loc_a0cd:                              ; >a0cd
       equ  $
       movb @e,*hl                     ; LD (HL),E         ; room attr
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A0CD        ; 
       jne  loc_a0cd                   ;                   
       .ret                            ; RET               ; 

* draw attrs for moving down-right
attr_draw_dr:                          ; >a0d2
       .pop hl                         ; POP HL            ; 
loc_a0d3:                              ; >a0d3
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       sb   one,@l                     ; DEC L             ; 
       movb @e,*hl                     ; LD (HL),E         ; room attr
       ab   one,@l                     ; INC L             ; 
loc_a0d8:                              ; >a0d8
       movb d,*hl                      ; LD (HL),D         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A0D8        ; 
       jne  loc_a0d8                   ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_a0d3                   ; JR NZ,$A0D3       ; 
       sb   one,@l                     ; DEC L             ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       ab   one,@l                     ; INC L             ; 
       jmp  cond_room_row              ; JR $A0C9          ; 

* draw attrs for moving up
attr_draw_u:                           ; >a0ec
       .pop hl                         ; POP HL            ; 
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       .push bc                        ; PUSH BC           ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       a    bc,hl                      ; ADD HL,BC         ; down a row
       .pop bc                         ; POP BC            ; 
loc_a0f5:                              ; >a0f5
       movb @e,*hl                     ; LD (HL),E         ; entity attr
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A0F5        ; 
       jne  loc_a0f5                   ;                   
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; 
       b    @loc_a07b                  ; JP $A07B          ; 

* draw attrs for moving up-left
attr_draw_ul:                          ; >a0fe
       .pop hl                         ; POP HL            ; 
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       .push bc                        ; PUSH BC           ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       a    bc,hl                      ; ADD HL,BC         ; down a row
       .pop bc                         ; POP BC            ; 
       ab   one,b                      ; INC B             ; extra row
loc_a108:                              ; >a108
       movb @e,*hl                     ; LD (HL),E         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A108        ; 
       jne  loc_a108                   ;                   
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; 
       jmp  loc_a0a4                   ; JR $A0A4          ; 

* draw attrs for moving down-left
attrs_draw_dl:                         ; >a110
       .pop hl                         ; POP HL            ; 
loc_a111:                              ; >a111
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
loc_a113:                              ; >a113
       movb d,*hl                      ; LD (HL),D         ; room attr
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A113        ; 
       jne  loc_a113                   ;                   
       movb @e,*hl                     ; LD (HL),E         ; entity attr
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; up a row
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_a111                   ; JR NZ,$A111       ; 
       ab   one,b                      ; INC B             ; 
       b    @cond_room_row             ; JP $A0C9          ; 

* draw attrs for moving up-right
attr_draw_ur:                          ; >a127
       .pop hl                         ; POP HL            ; 
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       .push bc                        ; PUSH BC           ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       a    bc,hl                      ; ADD HL,BC         ; down a row
       .pop bc                         ; POP BC            ; 
       sb   one,@l                     ; DEC L             ; 
       ab   one,b                      ; INC B             ; extra row
loc_a132:                              ; >a132
       movb @e,*hl                     ; LD (HL),E         ; entity attr
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A132        ; 
       jne  loc_a132                   ;                   
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; 
       b    @loc_a08e                  ; JP $A08E          ; 

* draw any items in player inventory
* 
* Used by the routines at #R$9117, #R$92f5 and #R$93e3.
draw_inventory:                        ; >a13b
       li   de,>2cc8                   ; LD DE,$2CC8       ; coords of first inventory item
       li   hl,inventory1              ; LD HL,$5E30       ; 
       movb @bytes+>03,b               ; LD B,$03          ; 3 items to draw
loc_a143:                              ; >a143
       .call @draw_inv_item            ; CALL $A14D        ; draw inventory item at position DE
       movb @e,a                       ; LD A,E            ; 
       ab   @bytes+>10,a               ; ADD A,$10         ; next inventory position
       movb a,@e                       ; LD E,A            ; 
       sb   one,b                      ; DJNZ $A143        ; 
       jne  loc_a143                   ;                   
       .ret                            ; RET               ; 

* draw inventory item at position DE
* 
* Used by the routine at #R$a13b.
draw_inv_item:                         ; >a14d
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push ix                        ; PUSH IX           ; 
       li   ix,entity_to_draw          ; LD IX,$A17D       ; 
       movb *hl,a                      ; LD A,(HL)         ; entity LSB
       inc  hl                         ; INC HL            ; 
       socb *hl,a                      ; OR (HL)           ; object in this slot?
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       jne  loc_a15e                   ; JR NZ,$A15E       ; jump if so
       movb @bytes+>31,a               ; LD A,$31          ; blank space
loc_a15e:                              ; >a15e
       inc  hl                         ; INC HL            ; 
       movb a,*ix                      ; LD (IX+$00),A     ; set graphic
       movb @e,@>03(ix)                ; LD (IX+$03),E     ; set xpos
       movb d,@>04(ix)                 ; LD (IX+$04),D     ; set ypos
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb a,@>05(ix)                 ; LD (IX+$05),A     ; set attr
       .push hl                        ; PUSH HL           ; 
       .call @clear_sprite             ; CALL $A185        ; 
       .call @draw_entity              ; CALL $9F4A        ; draw entity graphic (no attrs)
       .call @set_entity_attrs         ; CALL $A00E        ; paint entity with its current attr colour
       .pop hl                         ; POP HL            ; 
       .pop ix                         ; POP IX            ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .ret                            ; RET               ; 

* Data block at a17d
entity_to_draw:                        ; >a17d
       byte >21,>00,>00,>28,>97,>47,>00,>00

* Routine at a185
* 
* Used by the routines at #R$a14d and #R$a2ce.
clear_sprite:                          ; >a185
       movb @>03(ix),@l                ; LD L,(IX+$03)     ; 
       movb @>04(ix),h                 ; LD H,(IX+$04)     ; 
       .call @xy_to_display            ; CALL $9BA2        ; convert coords in HL to display address in HL
       movb @bytes+>14,b               ; LD B,$14          ; 20 pixels high
loc_a190:                              ; >a190
       sb   *hl,*hl                    ; LD (HL),$00       ; clear 2 bytes wide
       ab   one,@l                     ; INC L             ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       sb   one,@l                     ; DEC L             ; 
       .call @pixel_line_up            ; CALL $9F03        ; move up 1 display line in HL
       sb   one,b                      ; DJNZ $A190        ; 
       jne  loc_a190                   ;                   
       .ret                            ; RET               ; 

* add BC to current score
* 
* Used by the routines at #R$871a and #R$8988.
add_score_bc_bcd:                      ; >a19c
       li   hl,score_bcd+>0002         ; LD HL,$5E2C       ; end of score is 1s
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   @c,a                       ; ADD A,C           ; add 10s and 1s
       .daa                            ; DAA               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       dec  hl                         ; DEC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   b,a                        ; ADC A,B           ; add 1000s and 100s
       .daa                            ; DAA               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       dec  hl                         ; DEC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   @zero,a                    ; ADC A,$00         ; carry 10000s
       .daa                            ; DAA               ; 
       movb a,*hl                      ; LD (HL),A         ; 
* This entry point is used by the routine at #R$a219.
loc_a1ae:                              ; >a1ae
       li   hl,digit_charset           ; LD HL,$BFCC       ; 
       mov  hl,@charset_addr           ; LD ($5E01),HL     ; 
       li   hl,zx_screen+>10c8         ; LD HL,$50C8       ; 

* print player score at position HL
* 
* Used by the routine at #R$9641.
print_score:                           ; >a1b7
       .call @xy_to_display            ; CALL $9BA2        ; convert coords in HL to display address in HL
       li   de,score_bcd               ; LD DE,$5E2A       ; 
       movb @bytes+>03,b               ; LD B,$03          ; 3 bytes = 6 digits
* This entry point is used by the routines at #R$9607, #R$9641 and #R$a1c9.
print_bcd_bytes:                       ; >a1bf
       movb *de,a                      ; LD A,(DE)         ; print B BCD bytes at DE
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       andi a,>0f00                    ; AND $0F           ; 
       .call @print_char               ; CALL $A1D3        ; print a single character

* print a single BCD digit
* 
* Used by the routine at #R$9607.
print_bcd_digit:                       ; >a1c9
       movb *de,a                      ; LD A,(DE)         ; 
       andi a,>0f00                    ; AND $0F           ; 
       .call @print_char               ; CALL $A1D3        ; print a single character
       inc  de                         ; INC DE            ; 
       sb   one,b                      ; DJNZ $A1BF        ; print B BCD bytes at DE
       jne  print_bcd_bytes            ;                   
       .ret                            ; RET               ; 

* print a single character
* 
* Used by the routines at #R$a1b7, #R$a1c9, #R$a1f3 and #R$a219.
print_char:                            ; >a1d3
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
       movb a,@l                       ; LD L,A            ; 
       sb   h,h                        ; LD H,$00          ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       mov  @charset_addr,de           ; LD DE,($5E01)     ; 
       a    de,hl                      ; ADD HL,DE         ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .pop hl                         ; POP HL            ; 
       movb @bytes+>08,b               ; LD B,$08          ; 8 lines in character cell
loc_a1e5:                              ; >a1e5
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  de                         ; INC DE            ; next source byte
       ab   one,h                      ; INC H             ; next pixel line
       sb   one,b                      ; DJNZ $A1E5        ; 
       jne  loc_a1e5                   ;                   
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       movb h,a                        ; LD A,H            ; 
       sb   @bytes+>08,a               ; SUB $08           ; back to start address
       movb a,h                        ; LD H,A            ; 
       ab   one,@l                     ; INC L             ; next position to the right
       .ret                            ; RET               ; 

* show a line of text, first byte is attr
* 
* Used by the routines at #R$7caf, #R$8c35, #R$9641 and #R$96c9.
colour_text:                           ; >a1f3
       .push hl                        ; PUSH HL           ; 
       .call @xy_to_display            ; CALL $9BA2        ; convert coords in HL to display address in HL
       movb *de,a                      ; LD A,(DE)         ; text attr colour
       .ex_af_af_                      ; EX AF,AF'         ; 
       inc  de                         ; INC DE            ; 
       .exx                            ; EXX               ; display addr in HL
       .pop hl                         ; POP HL            ; 
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
* This entry point is used by the routine at #R$7d8a.
loc_a1ff:                              ; >a1ff
       .exx                            ; EXX               ; attr addr in HL'
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,r0                       ; BIT 7,A           ; last character?
       andi r0,>8000                   ;                   
       jne  loc_a210                   ; JR NZ,$A210       ; jump if so
       .call @print_char               ; CALL $A1D3        ; print a single character
       inc  de                         ; INC DE            ; 
       .exx                            ; EXX               ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb a,*hl                      ; LD (HL),A         ; set attr
       ab   one,@l                     ; INC L             ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       jmp  loc_a1ff                   ; JR $A1FF          ; 
loc_a210:                              ; >a210
       andi a,>7f00                    ; AND $7F           ; strip end marker b7
       .call @print_char               ; CALL $A1D3        ; print a single character
       .exx                            ; EXX               ; 
       .ex_af_af_                      ; EX AF,AF'         ; 
       movb a,*hl                      ; LD (HL),A         ; set attr
       .ret                            ; RET               ; 

* draw side panel background scroll
* 
* Used by the routine at #R$7d9a.
draw_side_panel:                       ; >a219
       li   hl,panel_chars             ; LD HL,$B03A       ; 
       mov  hl,@charset_addr           ; LD ($5E01),HL     ; 
       li   hl,>00c0                   ; LD HL,$00C0       ; 
       li   de,panel_data              ; LD DE,$B32A       ; 
       li   bc,>0818                   ; LD BC,$0818       ; 8x24
loc_a228:                              ; >a228
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       .call @xy_to_display            ; CALL $9BA2        ; convert coords in HL to display address in HL
loc_a22d:                              ; >a22d
       movb *de,a                      ; LD A,(DE)         ; 
       inc  de                         ; INC DE            ; 
       .call @print_char               ; CALL $A1D3        ; print a single character
       sb   one,b                      ; DJNZ $A22D        ; 
       jne  loc_a22d                   ;                   
       .pop hl                         ; POP HL            ; 
       movb h,a                        ; LD A,H            ; 
       ab   @bytes+>08,a               ; ADD A,$08         ; 
       movb a,h                        ; LD H,A            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_a228                   ; JR NZ,$A228       ; 
       b    @loc_a1ae                  ; JP $A1AE          ; 

* draw side-panel colours, which follow room colour
* 
* Used by the routine at #R$9117.
draw_panel_attrs:                      ; >a240
       li   hl,>00c0                   ; LD HL,$00C0       ; 
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
       li   bc,>0818                   ; LD BC,$0818       ; 8x24
       movb @room_attr,a               ; LD A,($5E1A)      ; 
       inv  a                          ; CPL               ; invert for colour contrast
       andi a,>0700                    ; AND $07           ; 
       cb   a,@bytes+>02               ; CP $02            ; 
       jhe  loc_a255                   ; JR NC,$A255       ; red or brighter?
       movb @bytes+>44,a               ; LD A,$44          ; change blue to bright green
loc_a255:                              ; >a255
       movb a,@e                       ; LD E,A            ; save attr value
       .push de                        ; PUSH DE           ; 
loc_a257:                              ; >a257
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
loc_a259:                              ; >a259
       movb @e,*hl                     ; LD (HL),E         ; set panel attr
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A259        ; 
       jne  loc_a259                   ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; line pitch
       a    bc,hl                      ; ADD HL,BC         ; down a row
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  loc_a257                   ; JR NZ,$A257       ; 
       li   hl,loc_909b+>002d          ; LD HL,$90C8       ; 
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
       movb @room_attr,a               ; LD A,($5E1A)      ; 
       li   bc,>0303                   ; LD BC,$0303       ; 3x3 (rosette body)
       .call @fill_bc_hl_a             ; CALL $809A        ; fill C rows of B columns of value A at address HL
       ab   one,@l                     ; INC L             ; 
       movb a,*hl                      ; LD (HL),A         ; 
       a    de,hl                      ; ADD HL,DE         ; 
       li   bc,>0202                   ; LD BC,$0202       ; 2x2 (rosette tail)
       .call @fill_bc_hl_a             ; CALL $809A        ; fill C rows of B columns of value A at address HL
       li   hl,mushroom_death+>0008    ; LD HL,$98D0       ; 
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
       .pop de                         ; POP DE            ; 
       movb @e,*hl                     ; LD (HL),E         ; rosette centre
       li   hl,loc_7dc8                ; LD HL,$7DC8       ; 
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
       li   bc,>0603                   ; LD BC,$0603       ; 6x3
       movb @bytes+>47,a               ; LD A,$47          ; bright white (lives)
       .call @fill_bc_hl_a             ; CALL $809A        ; fill C rows of B columns of value A at address HL
       li   hl,food_ptr+>0173          ; LD HL,$5FC8       ; 
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
       li   bc,>0604                   ; LD BC,$0604       ; 6x4
       movb @bytes+>46,a               ; LD A,$46          ; bright yellow (chicken)
       .call @fill_bc_hl_a             ; CALL $809A        ; fill C rows of B columns of value A at address HL
       li   hl,zx_screen+>08c8         ; LD HL,$48C8       ; 
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
       li   bc,>0601                   ; LD BC,$0601       ; 6x1
       movb @bytes+>45,a               ; LD A,$45          ; bright cyan (score caption)
       .call @fill_bc_hl_a             ; CALL $809A        ; fill C rows of B columns of value A at address HL
       li   bc,>0601                   ; LD BC,$0601       ; 6x1
       movb @bytes+>47,a               ; LD A,$47          ; bright white (score)
       .call @fill_bc_hl_a             ; CALL $809A        ; fill C rows of B columns of value A at address HL
       li   hl,>38c8                   ; LD HL,$38C8       ; 
       .call @xy_to_attr               ; CALL $9BD2        ; convert pixel coords in HL to attribute address
       li   bc,>0601                   ; LD BC,$0601       ; 6x1
       movb @bytes+>43,a               ; LD A,$43          ; bright magenta (time caption)
       .call @fill_bc_hl_a             ; CALL $809A        ; fill C rows of B columns of value A at address HL
       li   bc,>0601                   ; LD BC,$0601       ; 
       movb @bytes+>47,a               ; LD A,$47          ; bright white (time)
       b    @fill_bc_hl_a              ; JP $809A          ; fill C rows of B columns of value A at address HL

* draw lives sprites in side panel
* 
* Used by the routines at #R$7d9a and #R$9443.
draw_lives:                            ; >a2ce
       .push ix                        ; PUSH IX           ; 
       li   ix,entity_to_draw          ; LD IX,$A17D       ; 
       movb @menu_selection,a          ; LD A,($5E00)      ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       andi a,>3000                    ; AND $30           ; extract character type from menu
       socb one,a                      ; OR $01            ; offset to first graphic
       movb a,*ix                      ; LD (IX+$00),A     ; character type
       movb @bytes+>47,@>05(ix)        ; LD (IX+$05),$47   ; bright white
       li   hl,h_serf+>0004            ; LD HL,$8DC8       ; coords of lives in side panel
       movb @l,@>03(ix)                ; LD (IX+$03),L     ; 
       movb h,@>04(ix)                 ; LD (IX+$04),H     ; 
       movb @lives,a                   ; LD A,($5E21)      ; 
       movb a,@c                       ; LD C,A            ; number of lives to show
       movb @bytes+>03,b               ; LD B,$03          ; up to 3 lives to draw
loc_a2f2:                              ; >a2f2
       .push bc                        ; PUSH BC           ; 
       .call @clear_sprite             ; CALL $A185        ; clear lives location
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; life to show?
       jeq  loc_a2fd                   ; JR Z,$A2FD        ; jump if not
       .call @draw_entity              ; CALL $9F4A        ; draw player character
loc_a2fd:                              ; >a2fd
       movb @>03(ix),a                 ; LD A,(IX+$03)     ; 
       ab   @bytes+>10,a               ; ADD A,$10         ; offset to next life position
       movb a,@>03(ix)                 ; LD (IX+$03),A     ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       ; JP P,$A30C                    ; JP P,$A30C        ; 
       sb   @c,@c                      ; LD C,$00          ; min lives is zero
loc_a30c:                              ; >a30c
       sb   one,b                      ; DJNZ $A2F2        ; draw remaining slots
       jne  loc_a2f2                   ;                   
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 

* draw menu icons for controls and player acharacters
* 
* Used by the routine at #R$7c19.
draw_menu_icons:                       ; >a311
       li   ix,entity_to_draw          ; LD IX,$A17D       ; 
       li   hl,menu_entities           ; LD HL,$A331       ; entities for icons in the menu position
       movb @bytes+>09,b               ; LD B,$09          ; 3*2 icons for controls, 3 player characters
loc_a31a:                              ; >a31a
       .push bc                        ; PUSH BC           ; 
       li   de,entity_to_draw          ; LD DE,$A17D       ; 
       li   bc,>0008                   ; LD BC,$0008       ; 
       .ldir                           ; LDIR              ; 
       .push hl                        ; PUSH HL           ; 
       .push de                        ; PUSH DE           ; 
       .call @draw_entity              ; CALL $9F4A        ; draw entity graphic (no attrs)
       .call @set_entity_attrs         ; CALL $A00E        ; paint entity with its current attr colour
       .pop de                         ; POP DE            ; 
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $A31A        ; 
       jne  loc_a31a                   ;                   
       .ret                            ; RET               ; 

* Data block at a331
menu_entities:                         ; >a331
       byte >32,>00,>00,>20,>4F,>46,>00,>00                          ; cursor (left)
       byte >33,>00,>00,>30,>4F,>46,>00,>00                          ; cursor (right)
       byte >4A,>00,>00,>20,>37,>44,>00,>00                          ; kempston (left)
       byte >4B,>00,>00,>30,>37,>44,>00,>00                          ; kempston (right)
       byte >48,>00,>00,>20,>1C,>43,>00,>00                          ; keyboard (left)
       byte >49,>00,>00,>30,>1C,>43,>00,>00                          ; keyboard (right)
       byte >01,>00,>00,>28,>67,>47,>00,>00                          ; knight (facing left)
       byte >11,>00,>00,>28,>7F,>47,>00,>00                          ; wizard (facing left)
       byte >21,>00,>00,>28,>97,>47,>00,>00                          ; serf (facing left)

* determine Bresenham line slope step
* 
* Used by the routine at #R$9c79.
line_slope:                            ; >a379
       movb h,@l                       ; LD L,H            ; 
       sb   h,h                        ; LD H,$00          ; 
       .exx                            ; EXX               ; 
       li   hl,>0000                   ; LD HL,$0000       ; 
       movb @bytes+>08,b               ; LD B,$08          ; 
loc_a382:                              ; >a382
       .exx                            ; EXX               ; 
       ; SLA L                         ; SLA L             ; 
       sla  h,1                        ; RL H              ; TODO: check code. 
       .push hl                        ; PUSH HL           ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       joc  loc_a399                   ; JR C,$A399        ; TODO: check code. 
       .pop af                         ; POP AF            ; 
       .exx                            ; EXX               ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       inc  hl                         ; INC HL            ; 
loc_a391:                              ; >a391
       sb   one,b                      ; DJNZ $A382        ; 
       jne  loc_a382                   ;                   
       .push hl                        ; PUSH HL           ; 
       .exx                            ; EXX               ; 
       movb @l,@e                      ; LD E,L            ; 
       movb h,d                        ; LD D,H            ; 
       .pop hl                         ; POP HL            ; 
       .ret                            ; RET               ; 
loc_a399:                              ; >a399
       .pop hl                         ; POP HL            ; 
       .exx                            ; EXX               ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       jmp  loc_a391                   ; JR $A391          ; 

* HL = -DE
* 
* Used by the routine at #R$9c79.
minus_de:                              ; >a39e
       .push de                        ; PUSH DE           ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       li   hl,>0000                   ; LD HL,$0000       ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       .pop de                         ; POP DE            ; 
       .ret                            ; RET               ; 

* Routine at a3a8
* 
* Used by the routines at #R$9731, #R$a41b, #R$a427, #R$a438 and #R$a445.
click:                                 ; >a3a8
       movb one,@c                     ; LD C,$01          ; length 1 for a short click
* This entry point is used by the routines at #R$a3c2, #R$a3c7, #R$a3e0,
* #R$a3ef, #R$a408, #R$a445, #R$a48b and #R$a4b0.
beep:                                  ; >a3aa
       movb @bytes+>10,a               ; LD A,$10          ; freq B (low is higher), length C
       ; OUT ($FE),A                   ; OUT ($FE),A       ; 
       .push bc                        ; PUSH BC           ; 
loc_a3af:                              ; >a3af
       sb   one,b                      ; DJNZ $A3AF        ; 
       jne  loc_a3af                   ;                   
       .pop bc                         ; POP BC            ; 
       .push bc                        ; PUSH BC           ; 
       sb   a,a                        ; XOR A             ; 
       ; OUT ($FE),A                   ; OUT ($FE),A       ; 
loc_a3b6:                              ; >a3b6
       sb   one,b                      ; DJNZ $A3B6        ; 
       jne  loc_a3b6                   ;                   
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  beep                       ; JR NZ,$A3AA       ; freq B (low is higher), length C
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$9326.
inventory_sound:                       ; >a3bd
       li   bc,zx_screen+>0040         ; LD BC,$4040       ; 
       jmp  beep                       ; JR $A3AA          ; freq B (low is higher), length C

* Routine at a3c2
* 
* Used by the routine at #R$9358.
drop_sound:                            ; >a3c2
       li   bc,>2080                   ; LD BC,$2080       ; long high beep
       jmp  beep                       ; JR $A3AA          ; freq B (low is higher), length C

* play walk clicks if due
* 
* Used by the routines at #R$80d2, #R$8dc4 and #R$8e26.
walk_sound:                            ; >a3c7
       li   hl,walk_counter            ; LD HL,$5E2F       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       movb a,r0                       ; BIT 1,A           ; low click time?
       andi r0,>0200                   ;                   
       jeq  walk_low                   ; JR Z,$A3D8        ; jump if so
       andi a,>0100                    ; AND $01           ; click this frame?
       jne  !                          ; RET Z             ; return if not
       .ret                            ;                   
!
       li   bc,zx_screen+>0004         ; LD BC,$4004       ; high beep
       jmp  beep                       ; JR $A3AA          ; freq B (low is higher), length C
walk_low:                              ; >a3d8
       andi a,>0100                    ; AND $01           ; click this frame?
       jne  !                          ; RET Z             ; return if not
       .ret                            ;                   
!
       li   bc,_6004                   ; LD BC,$6004       ; low beep
       jmp  beep                       ; JR $A3AA          ; freq B (low is higher), length C

* Routine at a3e0
* 
* Used by the routine at #R$8c8c.
start_beep:                            ; >a3e0
       li   bc,handler_table2+>0036    ; LD BC,$8060       ; long low beep
       jmp  beep                       ; JR $A3AA          ; freq B (low is higher), length C

* play monster touched sound
* 
* Used by the routines at #R$85b2 and #R$988b.
touching_sound:                        ; >a3e5
       li   bc,byte_640d+>0003         ; LD BC,$6410       ; 
* This entry point is used by the routines at #R$a403 and #R$a485.
queue_sound:                           ; >a3e8
       li   hl,sound                   ; LD HL,$EAA0       ; 
       movb b,*hl                      ; LD (HL),B         ; blank graphic with required sound handler (64 or 65)
       inc  hl                         ; INC HL            ; 
       movb @c,*hl                     ; LD (HL),C         ; effect counter
       .ret                            ; RET               ; 

* play next note of sound effect
h_sound_effect:                        ; >a3ef
       sb   one,@>01(ix)               ; DEC (IX+$01)      ; hit sound counter
       jeq  clear_sound                ; JR Z,$A3FE        ; 
       movb @>01(ix),a                 ; LD A,(IX+$01)     ; also used for freq and length
       movb a,@c                       ; LD C,A            ; 
       li   r0,67*256                  ; XOR $43           ; 
       xor  r0,a                       ;                   
       movb a,b                        ; LD B,A            ; 
       b    @beep                      ; JP $A3AA          ; freq B (low is higher), length C
* This entry point is used by the routines at #R$a408 and #R$a48b.
clear_sound:                           ; >a3fe
       sb   *ix,*ix                    ; LD (IX+$00),$00   ; 
       .ret                            ; RET               ; 

* room entry sound effect
* 
* Used by the routine at #R$9117.
entry_sound:                           ; >a403
       li   bc,door_08_06_g+>000d      ; LD BC,$650A       ; 
       jmp  queue_sound                ; JR $A3E8          ; 

* play next note of sound effect
h_sound_effect2:                       ; >a408
       sb   one,@>01(ix)               ; DEC (IX+$01)      ; effect counter
       jeq  clear_sound                ; JR Z,$A3FE        ; 
       movb @>01(ix),a                 ; LD A,(IX+$01)     ; also used for freq and length
       movb a,@c                       ; LD C,A            ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       inv  a                          ; CPL               ; 
       li   r0,64*256                  ; XOR $40           ; 
       xor  r0,a                       ;                   
       movb a,b                        ; LD B,A            ; 
       b    @beep                      ; JP $A3AA          ; freq B (low is higher), length C

* play axe throw sound
* 
* Used by the routine at #R$8134.
axe_sound:                             ; >a41b
       movb @bytes+>0c,d               ; LD D,$0C          ; 
loc_a41d:                              ; >a41d
       movb d,a                        ; LD A,D            ; 
       ; RRCA                          ; RRCA              ; 
       movb a,b                        ; LD B,A            ; set freq
       .call @click                    ; CALL $A3A8        ; 
       sb   one,d                      ; DEC D             ; 
       jne  loc_a41d                   ; JR NZ,$A41D       ; 
       .ret                            ; RET               ; 

* play sword throw sound
* 
* Used by the routine at #R$8283.
sword_sound:                           ; >a427
       movb @bytes+>10,d               ; LD D,$10          ; 
loc_a429:                              ; >a429
       movb d,a                        ; LD A,D            ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       li   r0,7*256                   ; XOR $07           ; 
       xor  r0,a                       ;                   
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       movb a,b                        ; LD B,A            ; set freq
       .call @click                    ; CALL $A3A8        ; 
       sb   one,d                      ; DEC D             ; 
       jne  loc_a429                   ; JR NZ,$A429       ; 
       .ret                            ; RET               ; 

* play fireball throw sound
* 
* Used by the routine at #R$814b.
fireball_sound:                        ; >a438
       movb @bytes+>08,d               ; LD D,$08          ; 
loc_a43a:                              ; >a43a
       movb d,a                        ; LD A,D            ; 
       inv  a                          ; CPL               ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       movb a,b                        ; LD B,A            ; set freq
       .call @click                    ; CALL $A3A8        ; 
       sb   one,d                      ; DEC D             ; 
       jne  loc_a43a                   ; JR NZ,$A43A       ; 
       .ret                            ; RET               ; 

* weapon disappearing sound
* 
* Used by the routine at #R$81f0.
weapon_pop:                            ; >a445
       movb @num_creatures,a           ; LD A,($5E25)      ; number of creatures processed this frame
       ab   one,a                      ; INC A             ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       sla  a,1                        ; RLCA              ; TODO: check code. * 16
       socb @bytes+>0f,a               ; OR $0F            ; + 15
       andi a,>7f00                    ; AND $7F           ; 7-bit
       movb a,d                        ; LD D,A            ; 
loc_a452:                              ; >a452
       movb d,a                        ; LD A,D            ; 
       li   r0,32*256                  ; XOR $20           ; 
       xor  r0,a                       ;                   
       movb a,b                        ; LD B,A            ; 
       .call @click                    ; CALL $A3A8        ; 
       sb   one,d                      ; DEC D             ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       sb   one,d                      ; DEC D             ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       jmp  loc_a452                   ; JR $A452          ; 
* This entry point is used by the routine at #R$8cb7.
appear_sound:                          ; >a45f
       movb @>06(ix),a                 ; LD A,(IX+$06)     ; player appearance sound
       inv  a                          ; CPL               ; 
       sla  a,1                        ; RLCA              ; TODO: check code. 
       andi a,>3f00                    ; AND $3F           ; 
       socb @bytes+>40,a               ; OR $40            ; 
       movb a,b                        ; LD B,A            ; 
       movb @bytes+>10,@c              ; LD C,$10          ; 
       b    @beep                      ; JP $A3AA          ; freq B (low is higher), length C
* This entry point is used by the routines at #R$915f and #R$91bc.
door_sound:                            ; >a46e
       li   bc,>0830                   ; LD BC,$0830       ; 48 bytes * 8 bits to output
       li   hl,>0000                   ; LD HL,$0000       ; ROM start
loc_a474:                              ; >a474
       movb *hl,@e                     ; LD E,(HL)         ; read ROM byte for white noise
       inc  hl                         ; INC HL            ; 
       .push bc                        ; PUSH BC           ; 
loc_a477:                              ; >a477
       ; RRC E                         ; RRC E             ; rotate to use &0eac bit of the byte
       movb @e,a                       ; LD A,E            ; 
       andi a,>1000                    ; AND $10           ; keep speaker bit
       ; OUT ($FE),A                   ; OUT ($FE),A       ; click
       sb   one,b                      ; DJNZ $A477        ; loop for &0eac bit in the byte
       jne  loc_a477                   ;                   
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; done all bytes?
       jne  loc_a474                   ; JR NZ,$A474       ; jump back if not
       .ret                            ; RET               ; 

* Routine at a485
* 
* Used by the routine at #R$8c63.
eat_sound:                             ; >a485
       li   bc,set_entity_attrs+>0002  ; LD BC,$A010       ; A0 is blank graphic with food-eaten handler (below)
       b    @queue_sound               ; JP $A3E8          ; 

* eaten food sound effect handler
h_food_eaten:                          ; >a48b
       sb   one,@>01(ix)               ; DEC (IX+$01)      ; 
       ; JP M,$A3FE                    ; JP M,$A3FE        ; 
       movb @>01(ix),@c                ; LD C,(IX+$01)     ; 
       sb   b,b                        ; LD B,$00          ; 
       li   hl,eat_tone_table          ; LD HL,$A4A0       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,b                      ; LD B,(HL)         ; 
       movb @bytes+>08,@c              ; LD C,$08          ; duration
       b    @beep                      ; JP $A3AA          ; freq B (low is higher), length C

* Data block at a4a0
eat_tone_table:                        ; >a4a0
       byte >80,>90,>80,>90,>80,>90,>80,>90
       byte >80,>70,>60,>50,>40,>30,>20,>10

* weapon bounce sound
* 
* Used by the routine at #R$81f0.
bounce_sound:                          ; >a4b0
       movb @bytes+>40,d               ; LD D,$40          ; 
       sb   one,d                      ; DEC D             ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       movb d,a                        ; LD A,D            ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       movb a,b                        ; LD B,A            ; 
       movb @bytes+>04,@c              ; LD C,$04          ; 
       b    @beep                      ; JP $A3AA          ; freq B (low is higher), length C

* Data block at a4be
sprite_table:                          ; >a4be
       data g_knight_left1,g_knight_left2,g_knight_left3,g_knight_left2 ; &00
       data g_knight_right1,g_knight_right2,g_knight_right3,g_knight_right2 ; &04
       data g_knight_up1,g_knight_up2,g_knight_up3,g_knight_up2      ; &08
       data g_knight_down1,g_knight_down2,g_knight_down3,g_knight_down2 ; &0c
       data g_wizard_left1,g_wizard_left2,g_wizard_left3,g_wizard_left2 ; &10
       data g_wizard_right1,g_wizard_right2,g_wizard_right3,g_wizard_right2 ; &14
       data g_wizard_up1,g_wizard_up2,g_wizard_up3,g_wizard_up2      ; &18
       data g_wizard_down1,g_wizard_down2,g_wizard_down3,g_wizard_down2 ; &1c
       data g_serf_left1,g_serf_left2,g_serf_left3,g_serf_left2      ; &20
       data g_serf_right1,g_serf_right2,g_serf_right3,g_serf_right2  ; &24
       data g_serf_up1,g_serf_up2,g_serf_up3,g_serf_up2              ; &28
       data g_serf_down1,g_serf_down2,g_serf_down3,g_serf_down2      ; &2c
       data g_blank,g_cursor_l,g_cursor_r,g_fireball1                ; &30
       data g_fireball2,g_fireball2,g_fireball3,g_sword1             ; &34
       data g_sword2,g_sword3,g_sword4,g_sword5                      ; &38
       data g_sword6,g_sword7,g_sword8,g_axe1                        ; &3c
       data g_axe2,g_axe3,g_axe4,g_axe5                              ; &40
       data g_axe6,g_axe7,g_axe8,g_keyboard_l                        ; &44
       data g_keyboard_r,g_kempston_l,g_kempston_r,g_pumpkin1        ; &48
       data g_pumpkin2,g_ghostlet1,g_ghostlet2,g_can                 ; &4c
       data g_candy,g_chop,g_lollipop,g_icecream                     ; &50
       data g_dessert,g_apple,g_bottle,g_sparkle1                    ; &54
       data g_sparkle2,g_sparkle3,g_sparkle4,g_spider1               ; &58
       data g_spider2,g_spikey1,g_spikey2,g_blob1                    ; &5c
       data g_blob2,g_ghoul1,g_ghoul2,g_none                         ; &60
       data g_none,g_none,g_none,g_ghost1                            ; &64
       data g_ghost2,g_bat1,g_bat2,g_pop1                            ; &68
       data g_pop2,g_pop3,g_pop4,g_mummy1                            ; &6c
       data g_mummy2,g_mummy3,g_mummy2,g_franken1                    ; &70
       data g_franken2,g_franken3,g_franken2,g_devil1                ; &74
       data g_devil2,g_devil3,g_devil2,g_dracula1                    ; &78
       data g_dracula2,g_dracula3,g_dracula2,g_leaf                  ; &7c
       data g_key,g_wine,g_coin,g_wing                               ; &80
       data g_whip,g_frogsleg,g_gem,g_moneybag                       ; &84
       data g_skull,g_crucifix,g_spanner,g_acg_key1                  ; &88
       data g_acg_key2,g_acg_key3,g_tombstone,g_witch_l1             ; &8c
       data g_witch_l2,g_witch_r1,g_witch_r2,g_monk_l1               ; &90
       data g_monk_l2,g_monk_r1,g_monk_r2,g_bat_l1                   ; &94
       data g_bat_l2,g_bat_r1,g_bat_r2,g_hunchback1                  ; &98
       data g_hunchback2,g_hunchback3,g_hunchback2,g_none            ; &9c
       data g_mushroom                                               ; &a0

* Data block at a600
gfx_data:                              ; >a600
       data g_cave_door_frame
       data g_door_frame
       data g_bigdoor_frame
       data g_none
       data g_none
       data g_none
       data g_none
       data g_door_locked
       data g_door_locked
       data g_door_locked
       data g_door_locked
       data g_cave_locked
       data g_cave_locked
       data g_cave_locked
       data g_cave_locked
       data g_clock
       data g_ghost_picture
       data g_table
       data g_chicken_full
chicken_empty_addr:                    ; >a626
       data g_chicken_empty
       data g_wall_antlers
       data g_wall_trophy
       data g_bookcase
       data g_trap_closed
       data g_trap_open
       data g_barrel
       data g_rug
       data g_acg_shield
       data g_wall_shield
       data g_suit_armour
       data g_none
       data g_door_shut
       data g_door_frame
       data g_cave_door_shut
       data g_cave_door_frame
       data g_acg_door
       data g_pumpkin_picture
       data g_skeleton
       data g_barrel_stack
gfx_attrs:                             ; >a64e
       data a_cave_door_frame
       data a_door_frame
       data a_bigdoor_frame
       data g_none
       data g_none
       data g_none
       data g_none
       data a_red_locked
       data a_green_locked
       data a_cyan_locked
       data a_yellow_locked
       data a_red_cave_locked
       data a_green_cave_locked
       data a_cyan_cave_locked
       data a_yellow_cave_locked
       data a_clock
       data a_ghost_picture
       data a_table
       data g_none                                                   ; full chicken attrs handled separately
       data g_none                                                   ; empty chicken attrs handled separately
       data a_wall_antlers
       data a_wall_trophy
       data a_bookcase
       data a_trap_closed
       data a_trap_open
       data a_barrel
       data a_rug
       data a_acg_shield
       data a_wall_shield
       data a_suit_armour
       data g_none
       data a_door_shut
       data a_door_frame
       data a_cave_door_shut
       data a_cave_door_frame
       data a_acg_door
       data a_pumpkin_picture
       data a_skeleton
       data a_barrel_stack

* Data block at a69c
g_door_locked:                         ; >a69c
       byte >04,>18
       byte >FF,>1B,>30,>FF
       byte >1F,>1B,>30,>F8
       byte >02,>1B,>30,>40
       byte >3E,>1B,>30,>7C
       byte >7F,>33,>18,>3E
       byte >07,>33,>18,>20
       byte >F8,>33,>18,>1F
       byte >F8,>33,>00,>1F
       byte >08,>63,>07,>08
       byte >F0,>63,>17,>0F
       byte >F0,>63,>19,>0F
       byte >1E,>63,>0E,>08
       byte >FE,>C3,>00,>1F
       byte >F8,>C3,>06,>1F
       byte >CC,>C3,>06,>33
       byte >3E,>C3,>06,>7C
       byte >7D,>80,>01,>BE
       byte >3B,>F0,>0F,>DC
       byte >17,>BF,>FD,>E8
       byte >07,>7B,>DE,>E0
       byte >03,>7B,>DE,>C0
       byte >00,>77,>EE,>00
       byte >00,>07,>E0,>00
       byte >00,>00,>00,>00
a_red_locked:                          ; >a6fe
       byte >04,>03
       byte >43,>42,>42,>43
       byte >43,>42,>46,>43
       byte >43,>43,>43,>43
a_green_locked:                        ; >a70c
       byte >04,>03
       byte >43,>44,>44,>43
       byte >43,>44,>46,>43
       byte >43,>43,>43,>43
a_cyan_locked:                         ; >a71a
       byte >04,>03
       byte >43,>45,>45,>43
       byte >43,>45,>46,>43
       byte >43,>43,>43,>43
a_yellow_locked:                       ; >a728
       byte >04,>03
       byte >43,>46,>46,>43
       byte >43,>46,>43,>43
       byte >43,>43,>43,>43
a_red_cave_locked:                     ; >a736
       byte >04,>03
       byte >FF,>42,>42,>FF
       byte >FF,>42,>46,>FF
       byte >FF,>FF,>FF,>FF
a_green_cave_locked:                   ; >a744
       byte >04,>03
       byte >FF,>44,>44,>FF
       byte >FF,>44,>46,>FF
       byte >FF,>FF,>FF,>FF
a_cyan_cave_locked:                    ; >a752
       byte >04,>03
       byte >FF,>45,>45,>FF
       byte >FF,>45,>46,>FF
       byte >FF,>FF,>FF,>FF
a_yellow_cave_locked:                  ; >a760
       byte >04,>03
       byte >FF,>46,>46,>FF
       byte >FF,>46,>43,>FF
       byte >FF,>FF,>FF,>FF
g_door_frame:                          ; >a76e
       byte >04,>18
       byte >FF,>00,>00,>FF
       byte >1F,>00,>00,>F8
       byte >02,>00,>00,>40
       byte >3E,>00,>00,>7C
       byte >7C,>00,>00,>3E
       byte >04,>00,>00,>20
       byte >F8,>00,>00,>1F
       byte >F8,>00,>00,>1F
       byte >08,>00,>00,>08
       byte >F0,>00,>00,>0F
       byte >F0,>00,>00,>0F
       byte >10,>00,>00,>08
       byte >F0,>00,>00,>1F
       byte >F8,>00,>00,>1F
       byte >CC,>00,>00,>33
       byte >3E,>00,>00,>7C
       byte >7D,>80,>01,>BE
       byte >3B,>F0,>0F,>DC
       byte >17,>BF,>FD,>E8
       byte >07,>7B,>DE,>E0
       byte >03,>7B,>DE,>C0
       byte >00,>77,>EE,>00
       byte >00,>07,>E0,>00
       byte >00,>00,>00,>00
a_door_frame:                          ; >a7d0
       byte >04,>03
       byte >43,>00,>00,>43
       byte >43,>00,>00,>43
       byte >43,>43,>43,>43
a_cave_door_frame:                     ; >a7de
       byte >04,>03
       byte >FF,>FF,>FF,>FF
       byte >FF,>FF,>FF,>FF
       byte >FF,>FF,>FF,>FF
g_table:                               ; >a7ec
       byte >04,>16
       byte >60,>00,>00,>06
       byte >70,>00,>00,>0E
       byte >30,>00,>00,>0C
       byte >30,>00,>00,>0C
       byte >70,>00,>00,>0E
       byte >70,>00,>00,>0E
       byte >78,>00,>00,>1E
       byte >3F,>FF,>FF,>FC
       byte >7F,>FF,>FF,>FE
       byte >80,>00,>00,>01
       byte >7F,>FF,>FF,>FE
       byte >FF,>FF,>FF,>FF
       byte >FF,>FF,>FF,>FF
       byte >FF,>FF,>FF,>FF
       byte >7F,>FF,>FF,>FE
       byte >7F,>FF,>FF,>FE
       byte >7F,>FF,>FF,>FE
       byte >3F,>FF,>FF,>FC
       byte >3F,>FF,>FF,>FC
       byte >1F,>FF,>FF,>F8
       byte >1F,>FF,>FF,>F8
       byte >0F,>FF,>FF,>F0
a_table:                               ; >a846
       byte >04,>03
       byte >45,>45,>45,>45
       byte >42,>42,>42,>42
       byte >42,>42,>42,>42

* Data block at a854
room_attrs:                            ; >a854
       data >0042,>0243,>0344,>0245,>0446,>0247,>0346,>0245          ; 00
       data >0444,>0043,>0342,>0343,>0344,>0045,>0446,>0447          ; 08 room attr
                                                                     ; colour and style
                                                                     ; (0-B)
       data >0446,>0445,>0444,>0043,>0342,>0343,>0344,>0045          ; 16
       data >0446,>0347,>0546,>0045,>0844,>0143,>0442,>0243          ; 24
       data >0344,>0245,>0446,>0247,>0346,>0245,>0544,>0043          ; 32
       data >0442,>0043,>0344,>0045,>0446,>0047,>0346,>0545          ; 40
       data >0144,>0A43,>0A42,>0143,>0A44,>0145,>0946,>0947          ; 48
       data >0146,>0145,>0144,>0143,>0142,>0143,>0144,>0945          ; 56
       data >0146,>0147,>0A46,>0145,>0944,>0143,>0142,>0943          ; 64
       data >0145,>0A45,>0946,>0147,>0146,>0A45,>0144,>0943          ; 72
       data >0142,>0A43,>0944,>0145,>0146,>0147,>0046,>0045          ; 80
       data >0044,>0043,>0042,>0047,>0043,>0044,>0045,>0046          ; 88
       data >0047,>0046,>0045,>0044,>0043,>0042,>0043,>0044          ; 96
       data >0045,>0046,>0047,>0046,>0045,>0044,>0043,>0442          ; 104
       data >0043,>0544,>0545,>0346,>0147,>0046,>0045,>0344          ; 112
       data >0043,>0442,>0043,>0344,>0045,>0446,>0047,>0046          ; 120
       data >0045,>0044,>0043,>0042,>0043,>0044,>0045,>0046          ; 128
       data >0047,>0046,>0045,>0444,>0443,>0442,>0B47,>0143          ; 136
       data >0144,>0145,>0146,>0147,>0146,>0000,>0C00                ; 144

* Data block at a982
room_styles:                           ; >a982
       byte >38                                                      ; style 0 = plain square
       byte >38
       data points_square
       data lines_rect
       byte >28                                                      ; style 1 = cave square
       byte >28
       data points_cav_square
       data lines_cav_square
       byte >38                                                      ; style 2 = octagonal square
       byte >38
       data points_2
       data line_octagon
       byte >38                                                      ; style 3 = wide rectangle
       byte >18
       data points_wide
       data lines_rect
       byte >18                                                      ; style 4 = tall rectangle
       byte >38
       data points_tall
       data lines_rect
       byte >10                                                      ; style 5 = stairs high@bottom
       byte >30
       data stair_points_b
       data stair_lines
       byte >10                                                      ; style 6 = stairs high@top
       byte >30
       data stair_points_t
       data stair_lines
       byte >30                                                      ; style 7 = stairs high@right
       byte >10
       data stair_points_r
       data stair_lines
       byte >30                                                      ; style 8 = stairs high@left
       byte >10
       data stair_points_l
       data stair_lines
       byte >30                                                      ; style 9 = wide cave
       byte >18
       data points_cav_wide
       data lines_cav_long
       byte >18                                                      ; style 10 = tall cave
       byte >30
       data points_cav_tall
       data lines_cav_long
       byte >38                                                      ; style 11 = final room
       byte >38
       data points_final
       data lines_final
       byte >38                                                      ; style 12 = trapdoor tunnel
       byte >38
       data points_trap
       data lines_trap

* Data block at a9d0
points_final:                          ; >a9d0
       byte >04,>BF
       byte >04,>00
       byte >1F,>BF
       byte >1F,>00
lines_final:                           ; >a9d8
       byte >00,>01,>FF
       byte >02,>03,>FF
       byte >FF
points_square:                         ; >a9df
       byte >04,>BB
       byte >04,>04
       byte >BB,>04
       byte >BB,>BB
       byte >1F,>A0
       byte >1F,>1F
       byte >A0,>1F
       byte >A0,>A0
lines_rect:                            ; >a9ef
       byte >00,>01,>03,>04,>FF
       byte >02,>01,>03,>06,>FF
       byte >05,>01,>04,>06,>FF
       byte >07,>03,>04,>06,>FF
       byte >FF
points_cav_square:                     ; >aa04
       byte >93,>05
       byte >24,>7D
       byte >25,>7D
       byte >02,>8E
       byte >11,>AD
       byte >26,>B7
       byte >46,>AD
       byte >4F,>90
       byte >3B,>96
       byte >2E,>90
       byte >79,>AD
       byte >70,>90
       byte >8C,>B9
       byte >97,>B4
       byte >7A,>96
       byte >81,>93
       byte >8A,>99
       byte >82,>94
       byte >97,>85
       byte >A2,>BF
       byte >B9,>9C
       byte >B8,>9B
       byte >AD,>79
       byte >AE,>79
       byte >91,>71
       byte >90,>70
       byte >90,>4F
       byte >AD,>46
       byte >28,>72
       byte >2F,>70
       byte >12,>79
       byte >11,>78
       byte >0A,>74
       byte >12,>46
       byte >2F,>4F
       byte >26,>3C
       byte >2F,>3C
       byte >05,>2C
       byte >17,>2C
       byte >2F,>2B
       byte >17,>13
       byte >37,>24
       byte >38,>25
       byte >24,>02
       byte >23,>01
       byte >46,>12
       byte >4F,>2F
       byte >79,>12
       byte >70,>2F
       byte >83,>26
       byte >83,>2F
       byte >94,>2F
       byte >9C,>37
       byte >9B,>38
       byte >BE,>23
       byte >BF,>24
       byte >AC,>17
       byte >93,>17
lines_cav_square:                      ; >aa78
       byte >00,>2F,>31,>39,>FF
       byte >01,>FF
       byte >02,>FF
       byte >03,>01,>04,>20,>FF
       byte >04,>FF
       byte >05,>06,>08,>04,>FF
       byte >06,>FF
       byte >07,>06,>08,>0B,>FF
       byte >08,>FF
       byte >09,>08,>04,>02,>FF
       byte >0A,>0C,>0B,>06,>FF
       byte >0B,>FF
       byte >0C,>FF
       byte >0D,>13,>0C,>11,>FF
       byte >0E,>0F,>0C,>0B,>FF
       byte >0F,>FF
       byte >10,>FF
       byte >11,>10,>FF,>12,>15,>18,>10,>FF
       byte >13,>10,>FF
       byte >14,>17,>13,>FF
       byte >15,>FF
       byte >16,>19,>FF
       byte >17,>FF
       byte >18,>FF
       byte >19,>FF
       byte >1A,>19,>35,>FF
       byte >1B,>1A,>36,>16,>FF
       byte >1C,>02,>1D,>1E,>FF
       byte >1D,>FF
       byte >1E,>FF
       byte >1F,>FF
       byte >20,>1F,>FF
       byte >21,>1E,>22,>25,>FF
       byte >22,>1D,>FF
       byte >23,>22,>24,>25,>FF
       byte >24,>FF
       byte >25,>FF
       byte >26,>24,>25,>28,>FF
       byte >27,>24,>29,>28,>FF
       byte >28,>FF
       byte >29,>FF
       byte >2A,>FF
       byte >2B,>29,>FF
       byte >2C,>28,>2D,>FF
       byte >2D,>FF
       byte >2E,>2A,>2D,>FF
       byte >2F,>2D,>30,>FF
       byte >30,>31,>2E,>FF
       byte >31,>FF
       byte >32,>31,>33,>39,>FF
       byte >33,>FF
       byte >34,>33,>36,>FF
       byte >35,>FF
       byte >36,>FF
       byte >37,>FF
       byte >38,>33,>37,>39,>FF
       byte >39,>FF
       byte >FF
points_2:                              ; >ab34
       byte >02,>A3
       byte >02,>1C
       byte >1C,>02
       byte >A3,>02
       byte >BD,>1C
       byte >BD,>A3
       byte >A3,>BD
       byte >1C,>BD
       byte >30,>A0
       byte >1F,>8F
       byte >1F,>30
       byte >30,>1F
       byte >8F,>1F
       byte >A0,>30
       byte >A0,>8F
       byte >8F,>A0
line_octagon:                          ; >ab54
       byte >00,>09,>07,>01,>FF
       byte >02,>01,>03,>0B,>FF
       byte >04,>03,>05,>0D,>FF
       byte >06,>05,>0F,>07,>FF
       byte >08,>07,>09,>0F,>FF
       byte >0A,>01,>09,>0B,>FF
       byte >0C,>03,>0B,>0D,>FF
       byte >0E,>05,>0D,>0F,>FF
       byte >FF
points_wide:                           ; >ab7d
       byte >03,>9C
       byte >03,>23
       byte >BC,>23
       byte >BC,>9C
       byte >1F,>80
       byte >1F,>3F
       byte >A0,>3F
       byte >A0,>80
points_tall:                           ; >ab8d
       byte >23,>03
       byte >9C,>03
       byte >9C,>BC
       byte >23,>BC
       byte >3F,>1F
       byte >80,>1F
       byte >80,>A0
       byte >3F,>A0
stair_points_t:                        ; >ab9d
       byte >8A,>BA
       byte >08,>04
       byte >35,>BB
       byte >8A,>BB
       byte >B7,>04
       byte >38,>28
       byte >38,>3D
       byte >3D,>3D
       byte >3D,>51
       byte >41,>51
       byte >41,>63
       byte >45,>63
       byte >45,>73
       byte >48,>73
       byte >48,>81
       byte >4B,>81
       byte >4B,>8D
       byte >4E,>8D
       byte >4E,>97
       byte >50,>97
       byte >50,>9F
       byte >6F,>9F
       byte >6F,>97
       byte >71,>97
       byte >71,>8D
       byte >74,>8D
       byte >74,>81
       byte >77,>81
       byte >77,>73
       byte >7A,>73
       byte >7A,>63
       byte >7E,>63
       byte >7E,>51
       byte >82,>51
       byte >82,>3D
       byte >87,>3D
       byte >87,>28
       byte >35,>BA
stair_lines:                           ; >abe9
       byte >01,>FF
       byte >02,>03,>01,>FF
       byte >03,>FF
       byte >04,>01,>03,>FF
       byte >05,>01,>FF
       byte >06,>23,>05,>FF
       byte >07,>FF
       byte >08,>21,>07,>FF
       byte >09,>FF
       byte >0A,>1F,>09,>FF
       byte >0B,>FF
       byte >0C,>1D,>0B,>FF
       byte >0D,>FF
       byte >0E,>1B,>0D,>FF
       byte >0F,>FF
       byte >10,>19,>0F,>FF
       byte >11,>FF
       byte >12,>17,>11,>02,>FF
       byte >17,>03,>FF
       byte >18,>17,>FF
       byte >19,>FF
       byte >1A,>19,>FF
       byte >1B,>FF
       byte >1C,>1B,>FF
       byte >1D,>FF
       byte >1E,>1D,>FF
       byte >1F,>FF
       byte >20,>1F,>FF
       byte >21,>FF
       byte >22,>21,>FF
       byte >23,>FF
       byte >24,>04,>05,>23,>FF
       byte >25,>FF
       byte >FF
stair_points_b:                        ; >ac4a
       byte >8A,>05
       byte >08,>BB
       byte >38,>04
       byte >8A,>04
       byte >B7,>BB
       byte >38,>97
       byte >38,>82
       byte >3D,>82
       byte >3D,>6E
       byte >41,>6E
       byte >41,>5C
       byte >45,>5C
       byte >45,>4C
       byte >48,>4C
       byte >48,>3E
       byte >4B,>3E
       byte >4B,>32
       byte >4E,>32
       byte >4E,>28
       byte >50,>28
       byte >50,>20
       byte >6F,>20
       byte >6F,>28
       byte >71,>28
       byte >71,>32
       byte >74,>32
       byte >74,>3E
       byte >77,>3E
       byte >77,>4C
       byte >7A,>4C
       byte >7A,>5C
       byte >7E,>5C
       byte >7E,>6E
       byte >82,>6E
       byte >82,>82
       byte >87,>82
       byte >87,>97
       byte >35,>05
stair_points_r:                        ; >ac96
       byte >05,>8A
       byte >BB,>08
       byte >04,>38
       byte >04,>8A
       byte >BB,>B7
       byte >97,>38
       byte >82,>38
       byte >82,>3D
       byte >64,>3D
       byte >6E,>41
       byte >5C,>41
       byte >5C,>45
       byte >4C,>45
       byte >4C,>48
       byte >3E,>48
       byte >3E,>4B
       byte >32,>4B
       byte >32,>4E
       byte >28,>4E
       byte >28,>50
       byte >20,>50
       byte >20,>6F
       byte >28,>6F
       byte >28,>71
       byte >32,>71
       byte >32,>74
       byte >3E,>74
       byte >3E,>77
       byte >4C,>77
       byte >4C,>7A
       byte >5C,>7A
       byte >5C,>7E
       byte >6E,>7E
       byte >6E,>82
       byte >82,>82
       byte >82,>87
       byte >97,>87
       byte >05,>35
stair_points_l:                        ; >ace2
       byte >BA,>8A
       byte >04,>08
       byte >BB,>35
       byte >BB,>8A
       byte >04,>B7
       byte >28,>38
       byte >3D,>38
       byte >3D,>3D
       byte >51,>3D
       byte >51,>41
       byte >63,>41
       byte >63,>45
       byte >73,>45
       byte >73,>48
       byte >81,>48
       byte >81,>4B
       byte >8D,>4B
       byte >8D,>4E
       byte >97,>4E
       byte >97,>50
       byte >9F,>50
       byte >9F,>6F
       byte >97,>6F
       byte >97,>71
       byte >8D,>71
       byte >8D,>74
       byte >81,>74
       byte >81,>77
       byte >73,>77
       byte >73,>7A
       byte >63,>7A
       byte >63,>7E
       byte >51,>7E
       byte >51,>82
       byte >3D,>82
       byte >3D,>87
       byte >28,>87
       byte >BA,>35

* Data block at ad2e
g_knight_down1:                        ; >ad2e
       byte >12
       byte >3C,>00
       byte >3C,>F0
       byte >1F,>78
       byte >1B,>94
       byte >05,>4E
       byte >6B,>6E
       byte >E9,>2C
       byte >EF,>E8
       byte >44,>40
       byte >26,>C8
       byte >20,>08
       byte >30,>18
       byte >3F,>F8
       byte >13,>F0
       byte >13,>F0
       byte >09,>E0
       byte >05,>C0
       byte >02,>80
g_knight_down2:                        ; >ad53
       byte >12
       byte >1E,>F0
       byte >0E,>E0
       byte >05,>40
       byte >03,>F0
       byte >65,>4C
       byte >EB,>6E
       byte >E9,>2E
       byte >6F,>EC
       byte >04,>40
       byte >26,>C8
       byte >20,>08
       byte >30,>18
       byte >3F,>F8
       byte >13,>F0
       byte >13,>F0
       byte >09,>E0
       byte >05,>C0
       byte >02,>80
g_knight_down3:                        ; >ad78
       byte >12
       byte >00,>78
       byte >1E,>78
       byte >3D,>F0
       byte >53,>B0
       byte >E5,>40
       byte >EB,>6C
       byte >69,>2E
       byte >2F,>EE
       byte >04,>44
       byte >26,>C8
       byte >20,>08
       byte >30,>18
       byte >3F,>F8
       byte >13,>F0
       byte >13,>F0
       byte >09,>E0
       byte >05,>C0
       byte >02,>80
g_knight_up1:                          ; >ad9d
       byte >12
       byte >3C,>00
       byte >3C,>F0
       byte >1F,>78
       byte >1B,>94
       byte >07,>CE
       byte >6F,>EE
       byte >EF,>EC
       byte >EF,>E8
       byte >40,>00
       byte >3F,>F8
       byte >27,>F8
       byte >27,>F8
       byte >30,>38
       byte >13,>F0
       byte >13,>F0
       byte >09,>E0
       byte >05,>C0
       byte >02,>80
g_knight_up2:                          ; >adc2
       byte >12
       byte >1E,>F0
       byte >0E,>E0
       byte >05,>40
       byte >03,>80
       byte >67,>CC
       byte >EF,>EE
       byte >EF,>EE
       byte >6F,>EC
       byte >00,>00
       byte >3F,>F8
       byte >27,>F8
       byte >27,>F8
       byte >30,>38
       byte >13,>F0
       byte >13,>F0
       byte >09,>E0
       byte >05,>C0
       byte >02,>80
g_knight_up3:                          ; >ade7
       byte >12
       byte >00,>78
       byte >1E,>78
       byte >3D,>F0
       byte >53,>B0
       byte >E7,>C0
       byte >EF,>EC
       byte >6F,>EE
       byte >2F,>EE
       byte >00,>04
       byte >3F,>F8
       byte >27,>F8
       byte >27,>F8
       byte >30,>38
       byte >13,>F0
       byte >13,>F0
       byte >09,>E0
       byte >05,>C0
       byte >02,>80
g_knight_left1:                        ; >ae0c
       byte >12
       byte >0C,>70
       byte >1C,>38
       byte >3B,>98
       byte >37,>60
       byte >06,>10
       byte >37,>08
       byte >27,>98
       byte >1F,>F0
       byte >67,>80
       byte >6B,>7C
       byte >1A,>FC
       byte >01,>FC
       byte >1F,>FC
       byte >08,>08
       byte >09,>F8
       byte >04,>F0
       byte >02,>E0
       byte >01,>40
g_knight_left2:                        ; >ae31
       byte >12
       byte >07,>C0
       byte >03,>C0
       byte >00,>00
       byte >03,>F0
       byte >06,>38
       byte >04,>18
       byte >0F,>98
       byte >1F,>F0
       byte >67,>80
       byte >6B,>7C
       byte >1A,>FC
       byte >01,>FC
       byte >1F,>FC
       byte >08,>08
       byte >09,>F8
       byte >04,>F0
       byte >02,>E0
       byte >01,>40
g_knight_left3:                        ; >ae56
       byte >12
       byte >0C,>70
       byte >1C,>38
       byte >3B,>D8
       byte >37,>E0
       byte >04,>74
       byte >08,>3A
       byte >07,>1E
       byte >1F,>F8
       byte >67,>80
       byte >6B,>7C
       byte >1A,>FC
       byte >01,>FC
       byte >1F,>FC
       byte >08,>08
       byte >09,>F8
       byte >04,>F0
       byte >02,>E0
       byte >01,>40
g_knight_right1:                       ; >ae7b
       byte >12
       byte >0E,>30
       byte >1C,>38
       byte >1B,>DC
       byte >07,>EC
       byte >2E,>20
       byte >5C,>10
       byte >78,>E0
       byte >1F,>F8
       byte >01,>E6
       byte >3E,>D6
       byte >27,>58
       byte >27,>80
       byte >27,>F8
       byte >10,>30
       byte >13,>F0
       byte >09,>E0
       byte >05,>C0
       byte >02,>80
g_knight_right2:                       ; >aea0
       byte >12
       byte >03,>E0
       byte >03,>C0
       byte >00,>00
       byte >0F,>C0
       byte >1C,>60
       byte >18,>20
       byte >19,>F0
       byte >0F,>F8
       byte >01,>E6
       byte >3E,>D6
       byte >27,>58
       byte >27,>80
       byte >27,>F8
       byte >10,>30
       byte >13,>F0
       byte >09,>E0
       byte >05,>C0
       byte >02,>80
g_knight_right3:                       ; >aec5
       byte >12
       byte >0E,>30
       byte >1C,>38
       byte >18,>DC
       byte >06,>EC
       byte >08,>60
       byte >10,>EC
       byte >19,>E4
       byte >0F,>F8
       byte >01,>E6
       byte >3E,>D6
       byte >27,>58
       byte >27,>80
       byte >27,>F8
       byte >10,>30
       byte >13,>F0
       byte >09,>E0
       byte >05,>C0
       byte >02,>80

* Data block at aeea
g_none:                                ; >aeea
       byte >00
       byte >00

* Data block at aeec
g_blank:                               ; >aeec
       byte >10
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00

* Data block at af0d
g_leaf:                                ; >af0d
       byte >10
       byte >00,>03
       byte >00,>3F
       byte >00,>FA
       byte >03,>F2
       byte >06,>0A
       byte >0F,>DA
       byte >1F,>BC
       byte >3F,>3C
       byte >20,>B8
       byte >7D,>B8
       byte >7B,>B0
       byte >F3,>A0
       byte >9B,>C0
       byte >DB,>80
       byte >DE,>00
       byte >F8,>00
g_key:                                 ; >af2e
       byte >0A
       byte >0C,>00
       byte >1E,>17
       byte >12,>12
       byte >7B,>1A
       byte >CF,>FF
       byte >CF,>FF
       byte >7B,>00
       byte >12,>00
       byte >1E,>00
       byte >0C,>00
g_wine:                                ; >af43
       byte >14
       byte >19,>FC
       byte >19,>FC
       byte >19,>C0
       byte >19,>DC
       byte >19,>DC
       byte >19,>DC
       byte >19,>DC
       byte >19,>DC
       byte >19,>DC
       byte >19,>DC
       byte >19,>C0
       byte >19,>FC
       byte >1C,>FC
       byte >0E,>F8
       byte >03,>60
       byte >01,>40
       byte >01,>40
       byte >01,>40
       byte >02,>E0
       byte >01,>C0
g_bottle:                              ; >af6c
       byte >14
       byte >19,>F0
       byte >19,>F0
       byte >19,>F0
       byte >19,>F0
       byte >19,>F0
       byte >19,>F0
       byte >19,>F0
       byte >19,>F0
       byte >19,>F0
       byte >09,>E0
       byte >0D,>E0
       byte >0D,>E0
       byte >05,>C0
       byte >05,>C0
       byte >06,>C0
       byte >02,>80
       byte >02,>80
       byte >02,>80
       byte >05,>C0
       byte >03,>80
g_wing:                                ; >af95
       byte >10
       byte >A0,>00
       byte >B0,>00
       byte >98,>00
       byte >AF,>80
       byte >D0,>00
       byte >DF,>C0
       byte >6F,>E0
       byte >73,>F0
       byte >3C,>74
       byte >3F,>88
       byte >1F,>F8
       byte >0F,>F8
       byte >07,>F8
       byte >03,>FC
       byte >00,>FE
       byte >00,>1F
g_whip:                                ; >afb6
       byte >10
       byte >C0,>00
       byte >E0,>02
       byte >E0,>0C
       byte >00,>30
       byte >C0,>30
       byte >E0,>40
       byte >E0,>C0
       byte >40,>80
       byte >00,>30
       byte >E0,>36
       byte >70,>06
       byte >70,>03
       byte >2C,>1E
       byte >1E,>EC
       byte >0E,>E0
       byte >04,>60
g_frogsleg:                            ; >afd7
       byte >10
       byte >90,>08
       byte >B1,>0E
       byte >F6,>1E
       byte >7C,>37
       byte >78,>67
       byte >30,>CF
       byte >31,>9E
       byte >33,>3C
       byte >32,>78
       byte >76,>F0
       byte >76,>F0
       byte >75,>E0
       byte >E7,>C0
       byte >3F,>00
       byte >3E,>00
       byte >18,>00
g_dessert:                             ; >aff8
       byte >10
       byte >05,>E0
       byte >00,>00
       byte >33,>FC
       byte >67,>FE
       byte >00,>00
       byte >C7,>FF
       byte >FF,>FF
       byte >00,>00
       byte >6F,>FE
       byte >67,>3E
       byte >7B,>DE
       byte >3F,>EC
       byte >0B,>E8
       byte >0C,>F0
       byte >0F,>80
       byte >07,>00
g_apple:                               ; >b019
       byte >10
       byte >03,>E0
       byte >0F,>F8
       byte >1F,>FC
       byte >3F,>FE
       byte >7F,>FE
       byte >7F,>FF
       byte >7F,>FF
       byte >67,>FF
       byte >63,>FF
       byte >33,>FF
       byte >3B,>06
       byte >1F,>F8
       byte >0E,>DC
       byte >01,>86
       byte >07,>7B
       byte >06,>3C

* Data block at b03a
panel_chars:                           ; >b03a
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; &0000
       byte >00,>00,>03,>0F,>1F,>3D,>7E,>79                          ; &0008
       byte >00,>00,>FF,>FF,>FF,>B4,>4A,>00                          ; &0010
       byte >00,>00,>80,>FE,>FF,>D5,>AD,>42                          ; &0018
       byte >00,>00,>00,>00,>F0,>7F,>56,>50                          ; &0020
       byte >00,>00,>00,>00,>03,>FF,>B5,>44                          ; &0028
       byte >00,>00,>01,>1F,>FF,>DA,>25,>41                          ; &0030
       byte >00,>07,>FF,>FE,>FC,>FC,>D8,>3F                          ; &0038
       byte >00,>F0,>08,>04,>02,>02,>02,>F1                          ; &0040
       byte >D0,>CA,>E0,>C0,>C0,>C0,>60,>60                          ; &0048
       byte >3B,>1B,>1B,>1B,>1B,>19,>0C,>0C                          ; &0050
       byte >89,>89,>85,>85,>FD,>81,>81,>81                          ; &0058
       byte >0C,>06,>03,>03,>03,>01,>01,>01                          ; &0060
       byte >41,>42,>FC,>00,>00,>80,>80,>80                          ; &0068
       byte >60,>30,>1C,>06,>3E,>1C,>0C,>06                          ; &0070
       byte >0C,>18,>18,>18,>0C,>0C,>0C,>0C                          ; &0078
       byte >06,>06,>06,>06,>06,>06,>06,>06                          ; &0080
       byte >06,>06,>06,>06,>06,>06,>0C,>0C                          ; &0088
       byte >0C,>0C,>0C,>18,>18,>18,>18,>18                          ; &0090
       byte >18,>30,>30,>30,>30,>30,>30,>30                          ; &0098
       byte >30,>60,>60,>60,>60,>60,>60,>60                          ; &00a0
       byte >60,>60,>60,>60,>30,>30,>30,>18                          ; &00a8
       byte >0C,>18,>18,>18,>30,>30,>18,>30                          ; &00b0
       byte >30,>38,>0C,>06,>0C,>18,>18,>18                          ; &00b8
       byte >0C,>0C,>0C,>0C,>0C,>06,>06,>06                          ; &00c0
       byte >06,>06,>06,>06,>03,>03,>03,>03                          ; &00c8
       byte >03,>03,>03,>03,>03,>03,>03,>03                          ; &00d0
       byte >03,>03,>03,>03,>03,>06,>06,>06                          ; &00d8
       byte >06,>06,>06,>06,>0C,>0C,>0C,>0C                          ; &00e0
       byte >0C,>18,>18,>18,>18,>30,>30,>30                          ; &00e8
       byte >30,>60,>60,>60,>7F,>7E,>0C,>18                          ; &00f0
       byte >00,>00,>0C,>1E,>1D,>0B,>07,>37                          ; &00f8
       byte >7F,>FF,>80,>7F,>FF,>C1,>80,>00                          ; &0100
       byte >00,>80,>98,>3C,>DC,>E8,>F0,>76                          ; &0108
       byte >01,>03,>03,>03,>06,>06,>0C,>7F                          ; &0110
       byte >80,>00,>00,>00,>00,>00,>00,>FC                          ; &0118
       byte >70,>F0,>18,>FC,>F8,>C0,>C0,>C0                          ; &0120
       byte >6E,>EC,>EC,>EC,>EC,>EC,>6E,>37                          ; &0128
       byte >3E,>49,>49,>49,>49,>2A,>1C,>08                          ; &0130
       byte >3B,>1B,>1B,>1B,>1B,>1B,>3B,>76                          ; &0138
       byte >00,>80,>80,>80,>80,>80,>00,>00                          ; &0140
       byte >00,>03,>07,>0E,>07,>01,>00,>00                          ; &0148
       byte >FD,>C3,>DF,>2F,>97,>EB,>77,>31                          ; &0150
       byte >C2,>C1,>81,>81,>01,>FD,>05,>05                          ; &0158
       byte >C0,>60,>60,>60,>30,>18,>0F,>07                          ; &0160
       byte >07,>0B,>1D,>1E,>0C,>00,>00,>FF                          ; &0168
       byte >80,>C1,>FF,>7F,>80,>FF,>7F,>3E                          ; &0170
       byte >F0,>E8,>DC,>3C,>9B,>9F,>7C,>E0                          ; &0178
       byte >00,>00,>00,>3F,>FF,>C0,>00,>00                          ; &0180
       byte >00,>00,>00,>00,>F0,>FF,>0F,>00                          ; &0188
       byte >30,>3F,>30,>18,>18,>0C,>FE,>FF                          ; &0190
       byte >89,>F1,>01,>01,>02,>04,>08,>F0                          ; &0198
       byte >FF,>00,>00,>00,>00,>00,>00,>00                          ; &01a0
       byte >FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF                          ; &01a8
       byte >FF,>FF,>7F,>7B,>7B,>39,>39,>38                          ; &01b0
       byte >00,>00,>80,>80,>80,>80,>C0,>C0                          ; &01b8
       byte >10,>10,>10,>00,>00,>00,>00,>00                          ; &01c0
       byte >60,>20,>10,>00,>00,>00,>00,>00                          ; &01c8
       byte >C0,>C0,>C0,>60,>60,>60,>30,>30                          ; &01d0
       byte >30,>18,>18,>18,>18,>30,>30,>30                          ; &01d8
       byte >18,>0C,>0C,>0C,>0C,>0C,>0C,>0C                          ; &01e0
       byte >0C,>0C,>0C,>0C,>0C,>0C,>0C,>0C                          ; &01e8
       byte >0C,>0C,>0C,>0C,>18,>18,>18,>18                          ; &01f0
       byte >18,>30,>30,>30,>30,>60,>60,>60                          ; &01f8
       byte >60,>60,>60,>C0,>C0,>C0,>C0,>C0                          ; &0200
       byte >C0,>C0,>C0,>C0,>C0,>C0,>C0,>C0                          ; &0208
       byte >60,>60,>60,>60,>60,>30,>30,>30                          ; &0210
       byte >18,>18,>18,>0C,>0C,>0C,>0C,>06                          ; &0218
       byte >06,>06,>06,>06,>03,>03,>03,>03                          ; &0220
       byte >03,>03,>03,>03,>03,>03,>03,>03                          ; &0228
       byte >06,>06,>06,>06,>06,>0C,>0C,>0C                          ; &0230
       byte >0C,>18,>18,>18,>18,>30,>30,>30                          ; &0238
       byte >60,>60,>60,>C0,>C0,>C0,>80,>80                          ; &0240
       byte >07,>0F,>0F,>07,>01,>0F,>07,>00                          ; &0248
       byte >C3,>E7,>0F,>CE,>EF,>E7,>C3,>00                          ; &0250
       byte >C3,>E7,>8F,>0E,>1F,>E7,>C3,>00                          ; &0258
       byte >8F,>CF,>EE,>EF,>EF,>CE,>8E,>00                          ; &0260
       byte >CF,>EF,>6E,>EF,>CE,>CF,>EF,>00                          ; &0268
       byte >80,>80,>00,>C0,>00,>E0,>E0,>00                          ; &0270
       byte >00,>00,>08,>1E,>27,>23,>71,>5F                          ; &0278
       byte >00,>00,>40,>40,>80,>80,>00,>C3                          ; &0280
       byte >00,>00,>00,>00,>00,>00,>00,>16                          ; &0288
       byte >00,>00,>00,>05,>03,>03,>03,>33                          ; &0290
       byte >00,>00,>00,>AC,>18,>18,>18,>18                          ; &0298
       byte >4F,>22,>1F,>05,>7F,>47,>3B,>00                          ; &02a0
       byte >EF,>6C,>2C,>AC,>4C,>CE,>87,>00                          ; &02a8
       byte >BE,>18,>18,>18,>18,>9C,>0C,>00                          ; &02b0
       byte >FB,>DB,>DB,>DB,>DB,>FB,>61,>00                          ; &02b8
       byte >18,>18,>18,>18,>18,>DE,>8C,>00                          ; &02c0
       byte >FE,>FE,>FE,>38,>38,>38,>38,>00                          ; &02c8
       byte >7C,>7C,>38,>38,>38,>7C,>7C,>00                          ; &02d0
       byte >82,>EE,>FE,>FE,>D6,>D6,>D6,>00                          ; &02d8
       byte >F8,>F8,>E0,>FC,>E0,>FE,>FE,>00                          ; &02e0
       byte >00,>18,>18,>00,>00,>18,>18,>00                          ; &02e8

* Data block at b32a
panel_data:                            ; >b32a
       byte >01,>02,>03,>04,>05,>06,>07,>08                          ; 0
       byte >09,>4F,>50,>51,>52,>53,>0A,>0B                          ; 8
       byte >0E,>54,>55,>56,>57,>58,>0C,>0D                          ; 16
       byte >0F,>00,>00,>00,>00,>00,>00,>3A                          ; 24
       byte >10,>00,>00,>00,>00,>00,>00,>3B                          ; 32
       byte >11,>00,>00,>00,>00,>00,>00,>3C                          ; 40
       byte >12,>00,>00,>00,>00,>00,>00,>3D                          ; 48
       byte >13,>00,>59,>5A,>5B,>5C,>00,>3E                          ; 56
       byte >14,>00,>00,>00,>5D,>00,>00,>3F                          ; 64
       byte >15,>49,>4A,>4B,>4C,>4D,>4E,>40                          ; 72
       byte >16,>00,>00,>00,>00,>00,>00,>41                          ; 80
       byte >17,>00,>00,>00,>00,>00,>00,>42                          ; 88
       byte >18,>00,>00,>00,>00,>00,>00,>43                          ; 96
       byte >19,>00,>00,>00,>00,>00,>00,>44                          ; 104
       byte >1A,>00,>00,>00,>00,>00,>00,>45                          ; 112
       byte >1B,>00,>00,>00,>00,>00,>00,>46                          ; 120
       byte >1C,>00,>00,>00,>00,>00,>00,>47                          ; 128
       byte >1D,>00,>00,>00,>00,>00,>00,>48                          ; 136
       byte >1E,>1F,>20,>21,>00,>00,>22,>23                          ; 144
       byte >24,>25,>26,>27,>28,>29,>2A,>2B                          ; 152
       byte >2C,>2D,>2E,>2F,>30,>31,>32,>33                          ; 160
       byte >00,>34,>35,>00,>00,>00,>00,>00                          ; 168
       byte >00,>00,>36,>37,>00,>00,>00,>00                          ; 176
       byte >00,>00,>38,>39,>00,>00,>00,>00                          ; 184

* Data block at b3ea
g_bigdoor_frame:                       ; >b3ea
       byte >06,>20
       byte >FF,>FE,>00,>00,>3F,>FF
       byte >00,>FE,>00,>00,>7F,>00
       byte >01,>FC,>00,>00,>3F,>80
       byte >00,>00,>00,>00,>00,>00
       byte >01,>F8,>00,>00,>1F,>80
       byte >03,>F8,>00,>00,>1F,>C0
       byte >03,>F0,>00,>00,>0F,>C0
       byte >00,>00,>00,>00,>00,>00
       byte >07,>E0,>00,>00,>07,>E0
       byte >0F,>E0,>00,>00,>07,>F0
       byte >0F,>C0,>00,>00,>03,>F0
       byte >00,>00,>00,>00,>00,>00
       byte >1F,>80,>00,>00,>01,>F8
       byte >1F,>80,>00,>00,>01,>F8
       byte >1F,>80,>00,>00,>01,>F8
       byte >10,>00,>00,>00,>00,>08
       byte >07,>80,>00,>00,>01,>E0
       byte >1F,>80,>00,>00,>01,>F8
       byte >1F,>00,>00,>00,>00,>F8
       byte >0E,>40,>00,>00,>02,>70
       byte >08,>E0,>00,>00,>07,>10
       byte >03,>F4,>00,>00,>2F,>C0
       byte >07,>EF,>00,>00,>F7,>E0
       byte >03,>CE,>77,>EE,>73,>C0
       byte >01,>DE,>F6,>6F,>7B,>80
       byte >00,>9E,>F6,>6F,>79,>00
       byte >00,>3C,>E6,>67,>3C,>00
       byte >00,>1D,>EE,>EE,>B8,>00
       byte >00,>01,>EE,>77,>80,>00
       byte >00,>00,>08,>10,>00,>00
       byte >00,>00,>0F,>F0,>00,>00
       byte >00,>00,>00,>00,>00,>00
a_bigdoor_frame:                       ; >b4ac
       byte >06,>04
       byte >43,>43,>00,>00,>43,>43
       byte >43,>43,>00,>00,>43,>43
       byte >43,>43,>43,>43,>43,>43
       byte >43,>43,>43,>43,>43,>43
g_ghost_picture:                       ; >b4c6
       byte >04,>18
       byte >00,>00,>00,>00
       byte >00,>00,>00,>00
       byte >03,>80,>01,>C0
       byte >07,>C6,>63,>E0
       byte >06,>7F,>FE,>60
       byte >03,>FF,>FF,>C0
       byte >01,>80,>01,>80
       byte >01,>80,>01,>80
       byte >03,>8C,>31,>C0
       byte >07,>8F,>F1,>E0
       byte >03,>0C,>30,>C0
       byte >0B,>0F,>F0,>D0
       byte >0F,>0C,>90,>F0
       byte >07,>0D,>B0,>E0
       byte >06,>07,>E0,>60
       byte >0E,>03,>C0,>70
       byte >1E,>00,>00,>78
       byte >37,>FF,>FF,>EC
       byte >1F,>FF,>FF,>F4
       byte >35,>FF,>FF,>AC
       byte >1B,>1C,>31,>D8
       byte >0E,>06,>60,>70
       byte >00,>00,>00,>00
       byte >00,>00,>00,>00
a_ghost_picture:                       ; >b528
       byte >04,>03
       byte >FF,>FF,>FF,>FF
       byte >FF,>FF,>FF,>FF
       byte >FF,>FF,>FF,>FF
g_serf_down1:                          ; >b536
       byte >12
       byte >1F,>38
       byte >17,>38
       byte >0E,>3C
       byte >01,>5E
       byte >03,>DE
       byte >27,>EE
       byte >77,>70
       byte >77,>F4
       byte >77,>74
       byte >45,>D0
       byte >00,>80
       byte >0A,>28
       byte >1B,>6C
       byte >08,>0C
       byte >1C,>14
       byte >17,>FC
       byte >0D,>E8
       byte >07,>50
g_serf_down2:                          ; >b55b
       byte >12
       byte >0F,>F8
       byte >0D,>68
       byte >06,>30
       byte >01,>40
       byte >23,>E2
       byte >37,>F6
       byte >37,>76
       byte >17,>F4
       byte >17,>74
       byte >05,>D0
       byte >00,>80
       byte >0A,>28
       byte >1B,>6C
       byte >08,>0C
       byte >1C,>14
       byte >17,>FC
       byte >0D,>E8
       byte >07,>50
g_serf_down3:                          ; >b580
       byte >12
       byte >07,>7C
       byte >07,>74
       byte >1F,>58
       byte >3D,>60
       byte >3D,>E0
       byte >3B,>F2
       byte >07,>77
       byte >17,>F7
       byte >17,>77
       byte >05,>D2
       byte >00,>80
       byte >0A,>28
       byte >1B,>6C
       byte >08,>0C
       byte >1C,>14
       byte >17,>FC
       byte >0D,>E8
       byte >07,>A0
g_serf_up1:                            ; >b5a5
       byte >12
       byte >1E,>40
       byte >1E,>70
       byte >0A,>B0
       byte >07,>D8
       byte >0F,>D8
       byte >4F,>E8
       byte >EF,>E0
       byte >EC,>6C
       byte >E2,>4C
       byte >8D,>A8
       byte >15,>70
       byte >1B,>D0
       byte >3A,>98
       byte >2B,>68
       byte >15,>D0
       byte >2F,>B8
       byte >13,>50
       byte >0A,>A0
g_serf_up2:                            ; >b5ca
       byte >12
       byte >0E,>E0
       byte >0E,>E0
       byte >02,>80
       byte >07,>C0
       byte >47,>C4
       byte >6F,>EC
       byte >6F,>EC
       byte >2C,>68
       byte >23,>88
       byte >0D,>A0
       byte >15,>70
       byte >1B,>D0
       byte >3A,>98
       byte >2B,>68
       byte >15,>D0
       byte >2F,>B8
       byte >13,>50
       byte >0A,>A0
g_serf_up3:                            ; >b5ef
       byte >12
       byte >04,>F0
       byte >1C,>F0
       byte >1A,>A0
       byte >37,>C0
       byte >37,>E0
       byte >2F,>E4
       byte >0F,>EE
       byte >6C,>3E
       byte >63,>8E
       byte >2D,>A2
       byte >15,>70
       byte >1B,>D0
       byte >3A,>98
       byte >2B,>68
       byte >15,>D0
       byte >2F,>B8
       byte >13,>50
       byte >0A,>A0
g_serf_left1:                          ; >b614
       byte >12
       byte >03,>70
       byte >0F,>78
       byte >3F,>1C
       byte >FB,>EC
       byte >CB,>10
       byte >77,>88
       byte >07,>C8
       byte >37,>88
       byte >77,>30
       byte >0F,>C0
       byte >11,>50
       byte >60,>B8
       byte >68,>68
       byte >19,>D0
       byte >07,>A8
       byte >19,>58
       byte >16,>F0
       byte >0A,>A0
g_serf_left2:                          ; >b639
       byte >12
       byte >3F,>E0
       byte >2F,>E0
       byte >24,>C0
       byte >19,>E0
       byte >03,>F0
       byte >06,>38
       byte >06,>18
       byte >07,>18
       byte >07,>30
       byte >0F,>C0
       byte >11,>50
       byte >60,>B8
       byte >68,>68
       byte >19,>D0
       byte >07,>A8
       byte >19,>58
       byte >16,>F0
       byte >0A,>A0
g_serf_left3:                          ; >b65e
       byte >12
       byte >03,>F0
       byte >3A,>F8
       byte >5A,>5C
       byte >4D,>9C
       byte >30,>30
       byte >07,>F8
       byte >08,>7A
       byte >18,>1A
       byte >07,>3C
       byte >0F,>C0
       byte >11,>50
       byte >60,>B8
       byte >68,>68
       byte >19,>D0
       byte >07,>A8
       byte >19,>58
       byte >16,>F0
       byte >0A,>A0
g_serf_right1:                         ; >b683
       byte >12
       byte >0F,>C0
       byte >1F,>5C
       byte >3A,>5A
       byte >39,>B2
       byte >0C,>0C
       byte >1F,>E0
       byte >5E,>10
       byte >58,>18
       byte >3C,>E0
       byte >03,>F0
       byte >05,>88
       byte >1D,>06
       byte >16,>16
       byte >0B,>98
       byte >15,>E0
       byte >1A,>98
       byte >0F,>E8
       byte >05,>50
g_serf_right2:                         ; >b6a8
       byte >12
       byte >07,>FC
       byte >07,>F4
       byte >03,>24
       byte >07,>98
       byte >0F,>C0
       byte >1C,>60
       byte >18,>60
       byte >18,>E0
       byte >0C,>E0
       byte >03,>F0
       byte >05,>88
       byte >1D,>06
       byte >16,>16
       byte >0B,>98
       byte >15,>E0
       byte >1A,>98
       byte >0F,>E8
       byte >05,>50
g_serf_right3:                         ; >b6cd
       byte >12
       byte >0E,>C0
       byte >1E,>F0
       byte >31,>FC
       byte >37,>DF
       byte >08,>D3
       byte >11,>EE
       byte >13,>E0
       byte >11,>EC
       byte >0C,>EE
       byte >03,>F0
       byte >05,>88
       byte >1D,>06
       byte >16,>16
       byte >0B,>98
       byte >15,>E0
       byte >1A,>98
       byte >0F,>E8
       byte >05,>50
g_clock:                               ; >b6f2
       byte >04,>20
       byte >00,>3F,>FC,>00
       byte >00,>70,>0E,>00
       byte >00,>77,>EE,>00
       byte >00,>67,>E6,>00
       byte >00,>67,>E6,>00
       byte >00,>6B,>F6,>00
       byte >00,>E8,>F7,>00
       byte >00,>CF,>F3,>00
       byte >00,>DF,>FB,>00
       byte >00,>DF,>FB,>00
       byte >00,>C0,>03,>00
       byte >00,>FF,>FF,>00
       byte >00,>FF,>FF,>00
       byte >01,>F9,>9F,>80
       byte >01,>E0,>07,>80
       byte >01,>C0,>03,>80
       byte >01,>F7,>8F,>80
       byte >01,>C0,>43,>80
       byte >01,>E0,>27,>80
       byte >06,>79,>9E,>60
       byte >06,>9F,>F9,>60
       byte >06,>E7,>E7,>60
       byte >07,>69,>96,>E0
       byte >06,>EE,>77,>60
       byte >06,>F7,>6F,>60
       byte >07,>6E,>F6,>E0
       byte >06,>EF,>77,>60
       byte >06,>F6,>EF,>60
       byte >01,>6F,>76,>00
       byte >00,>6E,>F6,>00
       byte >00,>1F,>68,>00
       byte >00,>03,>E0,>00
a_clock:                               ; >b774
       byte >04,>04
       byte >45,>45,>45,>45
       byte >45,>45,>45,>45
       byte >45,>45,>45,>45
       byte >45,>45,>45,>45
g_wizard_down1:                        ; >b786
       byte >14
       byte >3C,>00
       byte >4C,>F0
       byte >1F,>68
       byte >1B,>84
       byte >06,>6E
       byte >6C,>6E
       byte >EE,>EC
       byte >EF,>E8
       byte >44,>40
       byte >16,>D0
       byte >18,>30
       byte >1F,>F0
       byte >1E,>70
       byte >0C,>E0
       byte >0C,>E0
       byte >04,>C0
       byte >06,>40
       byte >03,>80
       byte >03,>80
       byte >01,>00
g_wizard_down2:                        ; >b7af
       byte >14
       byte >1E,>F0
       byte >26,>C8
       byte >05,>40
       byte >03,>80
       byte >66,>CC
       byte >EC,>6E
       byte >EE,>EE
       byte >6F,>EC
       byte >04,>40
       byte >16,>D0
       byte >18,>30
       byte >1F,>F0
       byte >1E,>70
       byte >0C,>E0
       byte >0C,>E0
       byte >04,>C0
       byte >06,>40
       byte >03,>80
       byte >03,>80
       byte >01,>00
g_wizard_down3:                        ; >b7d8
       byte >14
       byte >00,>78
       byte >1E,>64
       byte >2D,>F0
       byte >43,>B0
       byte >E6,>C0
       byte >EC,>6C
       byte >6E,>EE
       byte >2F,>EE
       byte >04,>44
       byte >16,>D0
       byte >18,>30
       byte >1F,>F0
       byte >1E,>70
       byte >0C,>E0
       byte >0C,>E0
       byte >04,>C0
       byte >06,>40
       byte >03,>80
       byte >03,>80
       byte >01,>00
g_wizard_up1:                          ; >b801
       byte >14
       byte >1E,>00
       byte >26,>78
       byte >0F,>D4
       byte >0D,>C2
       byte >03,>E7
       byte >3E,>F7
       byte >FF,>F6
       byte >77,>F4
       byte >20,>00
       byte >0F,>F8
       byte >0D,>F8
       byte >08,>F8
       byte >0D,>F8
       byte >07,>F0
       byte >07,>70
       byte >02,>20
       byte >03,>60
       byte >01,>C0
       byte >01,>C0
       byte >00,>80
g_wizard_up2:                          ; >b82a
       byte >14
       byte >0F,>78
       byte >13,>64
       byte >02,>A0
       byte >01,>C0
       byte >33,>E6
       byte >77,>F7
       byte >77,>F7
       byte >37,>F6
       byte >00,>00
       byte >0F,>F8
       byte >0D,>F8
       byte >08,>F8
       byte >0D,>F8
       byte >07,>F0
       byte >07,>70
       byte >02,>20
       byte >03,>60
       byte >01,>C0
       byte >01,>C0
       byte >00,>80
g_wizard_up3:                          ; >b853
       byte >14
       byte >00,>3C
       byte >0F,>32
       byte >16,>F8
       byte >21,>D8
       byte >73,>E0
       byte >77,>F6
       byte >37,>F7
       byte >17,>F7
       byte >00,>02
       byte >0F,>F8
       byte >0D,>F8
       byte >08,>F8
       byte >0D,>F8
       byte >07,>F0
       byte >07,>70
       byte >02,>20
       byte >03,>60
       byte >01,>C0
       byte >01,>C0
       byte >00,>80
g_wizard_left1:                        ; >b87c
       byte >14
       byte >0C,>F0
       byte >1C,>38
       byte >33,>98
       byte >47,>60
       byte >06,>10
       byte >37,>08
       byte >07,>98
       byte >31,>F0
       byte >35,>80
       byte >0D,>78
       byte >00,>D8
       byte >1F,>88
       byte >0F,>D8
       byte >05,>F0
       byte >05,>F0
       byte >02,>E0
       byte >02,>E0
       byte >01,>C0
       byte >01,>C0
       byte >00,>80
g_wizard_left2:                        ; >b8a5
       byte >14
       byte >07,>C0
       byte >09,>C0
       byte >00,>00
       byte >03,>F0
       byte >06,>38
       byte >04,>18
       byte >07,>98
       byte >31,>F0
       byte >35,>80
       byte >0D,>78
       byte >00,>D8
       byte >1F,>88
       byte >0F,>D8
       byte >05,>F0
       byte >05,>F0
       byte >02,>E0
       byte >02,>E0
       byte >01,>C0
       byte >01,>C0
       byte >00,>80
g_wizard_left3:                        ; >b8ce
       byte >14
       byte >03,>F0
       byte >1C,>38
       byte >33,>D8
       byte >47,>E0
       byte >04,>74
       byte >08,>3A
       byte >07,>1E
       byte >31,>F8
       byte >35,>80
       byte >0D,>78
       byte >00,>D8
       byte >1F,>88
       byte >0F,>D8
       byte >05,>F0
       byte >05,>F0
       byte >02,>E0
       byte >02,>E0
       byte >01,>C0
       byte >01,>C0
       byte >00,>80
g_wizard_right1:                       ; >b8f7
       byte >14
       byte >0F,>30
       byte >1C,>38
       byte >1B,>CC
       byte >07,>E2
       byte >2E,>20
       byte >5C,>10
       byte >78,>E0
       byte >1F,>8C
       byte >01,>AC
       byte >1E,>B0
       byte >1B,>00
       byte >11,>F8
       byte >1B,>F0
       byte >0F,>A0
       byte >0F,>A0
       byte >07,>40
       byte >07,>40
       byte >03,>80
       byte >03,>80
       byte >01,>00
g_wizard_right2:                       ; >b920
       byte >14
       byte >03,>E0
       byte >03,>90
       byte >00,>00
       byte >0F,>C0
       byte >1C,>60
       byte >18,>20
       byte >19,>E0
       byte >0F,>8C
       byte >01,>AC
       byte >1E,>B0
       byte >1B,>00
       byte >11,>F8
       byte >1B,>F0
       byte >0F,>A0
       byte >0F,>A0
       byte >07,>40
       byte >07,>40
       byte >03,>80
       byte >03,>80
       byte >01,>00
g_wizard_right3:                       ; >b949
       byte >14
       byte >0F,>30
       byte >1C,>38
       byte >19,>CC
       byte >06,>E2
       byte >08,>60
       byte >10,>EC
       byte >19,>E0
       byte >0F,>8C
       byte >01,>AC
       byte >1E,>B0
       byte >1B,>00
       byte >11,>F8
       byte >1B,>F0
       byte >0F,>A0
       byte >0F,>A0
       byte >07,>40
       byte >07,>40
       byte >03,>80
       byte >03,>80
       byte >01,>00
g_sword7:                              ; >b972
       byte >0C
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>20
       byte >00,>10
       byte >00,>12
       byte >7F,>DF
       byte >FF,>DF
       byte >00,>12
       byte >00,>10
       byte >00,>20
g_sword4:                              ; >b98b
       byte >0D
       byte >00,>00
       byte >00,>1C
       byte >01,>DC
       byte >00,>7C
       byte >00,>30
       byte >00,>D8
       byte >01,>C8
       byte >03,>88
       byte >07,>00
       byte >0E,>00
       byte >1C,>00
       byte >18,>00
       byte >10,>00
g_sword5:                              ; >b9a6
       byte >10
       byte >01,>80
       byte >03,>C0
       byte >01,>80
       byte >01,>80
       byte >07,>E0
       byte >08,>10
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >00,>80
g_sword6:                              ; >b9c7
       byte >0D
       byte >00,>00
       byte >00,>00
       byte >38,>00
       byte >3B,>80
       byte >3E,>00
       byte >0C,>00
       byte >1B,>00
       byte >13,>80
       byte >11,>C0
       byte >00,>E0
       byte >00,>70
       byte >00,>38
       byte >00,>1C
g_sword3:                              ; >b9e2
       byte >0C
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >04,>00
       byte >08,>00
       byte >48,>00
       byte >FD,>FF
       byte >FD,>FE
       byte >48,>00
       byte >08,>00
       byte >04,>00
g_sword2:                              ; >b9fb
       byte >0C
       byte >00,>00
       byte >00,>08
       byte >00,>18
       byte >00,>38
       byte >00,>70
       byte >00,>E0
       byte >11,>C0
       byte >13,>80
       byte >1D,>00
       byte >0C,>00
       byte >3E,>00
       byte >3B,>80
       byte >38,>00
g_sword1:                              ; >ba16
       byte >10
       byte >01,>00
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >08,>10
       byte >07,>E0
       byte >01,>80
       byte >01,>80
       byte >03,>C0
       byte >01,>80
g_sword8:                              ; >ba37
       byte >10
       byte >00,>00
       byte >00,>00
       byte >10,>00
       byte >18,>00
       byte >1C,>00
       byte >0E,>00
       byte >07,>00
       byte >03,>88
       byte >01,>C8
       byte >00,>D8
       byte >00,>30
       byte >00,>7C
       byte >01,>DC
       byte >00,>1C
       byte >00,>00
       byte >00,>00
g_axe1:                                ; >ba58
       byte >10
       byte >00,>00
       byte >00,>00
       byte >3C,>00
       byte >7E,>00
       byte >C3,>00
       byte >3C,>00
       byte >18,>00
       byte >3D,>FF
       byte >3D,>FF
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
g_axe2:                                ; >ba79
       byte >10
       byte >00,>00
       byte >00,>04
       byte >00,>0E
       byte >00,>1C
       byte >00,>38
       byte >3C,>70
       byte >60,>E0
       byte >D9,>C0
       byte >BA,>80
       byte >BF,>00
       byte >8E,>00
       byte >1C,>00
       byte >08,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
g_axe3:                                ; >ba9a
       byte >10
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >09,>80
       byte >18,>00
       byte >35,>80
       byte >37,>80
       byte >37,>80
       byte >35,>80
       byte >18,>00
       byte >08,>00
g_axe4:                                ; >babb
       byte >10
       byte >00,>00
       byte >20,>00
       byte >70,>00
       byte >38,>00
       byte >1C,>00
       byte >0E,>00
       byte >07,>00
       byte >03,>80
       byte >01,>40
       byte >00,>E0
       byte >04,>70
       byte >05,>F8
       byte >05,>D0
       byte >06,>C0
       byte >03,>00
       byte >01,>E0
g_axe5:                                ; >badc
       byte >10
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >FF,>BC
       byte >FF,>BC
       byte >00,>18
       byte >00,>3C
       byte >00,>C3
       byte >00,>7E
       byte >00,>3C
       byte >00,>00
       byte >00,>00
g_axe6:                                ; >bafd
       byte >10
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>10
       byte >00,>38
       byte >00,>71
       byte >00,>FD
       byte >01,>5D
       byte >03,>9B
       byte >07,>06
       byte >0E,>3C
       byte >1C,>00
       byte >38,>00
       byte >70,>00
       byte >20,>00
       byte >00,>00
g_axe7:                                ; >bb1e
       byte >10
       byte >00,>10
       byte >00,>18
       byte >01,>AC
       byte >01,>EC
       byte >01,>EC
       byte >01,>AC
       byte >00,>18
       byte >01,>90
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
g_axe8:                                ; >bb3f
       byte >10
       byte >07,>80
       byte >00,>C0
       byte >03,>60
       byte >0B,>A0
       byte >1F,>A0
       byte >0E,>20
       byte >07,>00
       byte >02,>80
       byte >01,>C0
       byte >00,>E0
       byte >00,>70
       byte >00,>38
       byte >00,>1C
       byte >00,>0E
       byte >00,>04
       byte >00,>00
g_fireball1:                           ; >bb60
       byte >0F
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>24
       byte >00,>80
       byte >09,>80
       byte >02,>D0
       byte >0D,>60
       byte >06,>F0
       byte >43,>42
       byte >05,>A0
       byte >12,>A0
       byte >00,>00
       byte >00,>00
       byte >01,>00
g_fireball2:                           ; >bb7f
       byte >0F
       byte >00,>00
       byte >00,>08
       byte >00,>00
       byte >20,>80
       byte >01,>00
       byte >03,>A0
       byte >02,>08
       byte >15,>F0
       byte >05,>A8
       byte >06,>60
       byte >01,>80
       byte >08,>20
       byte >04,>80
       byte >00,>10
       byte >00,>00
       byte >0F,>00
       byte >00,>00
       byte >80,>00
       byte >00,>01
       byte >00,>04
       byte >10,>01
       byte >82,>03
       byte >60,>45
       byte >68,>0E
       byte >B0,>07
       byte >42,>09
       byte >90,>01
       byte >00,>20
       byte >00,>00
       byte >08,>10
       byte >80
g_fireball3:                           ; >bbbd
       byte >0F
       byte >00,>00
       byte >01,>00
       byte >10,>04
       byte >00,>00
       byte >00,>40
       byte >01,>90
       byte >07,>40
       byte >05,>E2
       byte >17,>68
       byte >03,>C0
       byte >09,>C0
       byte >00,>02
       byte >01,>00
       byte >00,>00
       byte >00,>00
g_cursor_l:                            ; >bbdc
       byte >14
       byte >00,>01
       byte >00,>03
       byte >00,>07
       byte >00,>0F
       byte >00,>1F
       byte >00,>43
       byte >00,>C3
       byte >01,>C3
       byte >03,>F8
       byte >07,>F8
       byte >07,>F8
       byte >03,>F8
       byte >01,>C3
       byte >00,>C3
       byte >00,>43
       byte >00,>1F
       byte >00,>0F
       byte >00,>07
       byte >00,>03
       byte >00,>01
g_cursor_r:                            ; >bc05
       byte >14
       byte >80,>00
       byte >C0,>00
       byte >E0,>00
       byte >F0,>00
       byte >F8,>00
       byte >C2,>00
       byte >C3,>00
       byte >C3,>80
       byte >1F,>C0
       byte >1F,>E0
       byte >1F,>E0
       byte >1F,>C0
       byte >C3,>80
       byte >C3,>00
       byte >C2,>00
       byte >F8,>00
       byte >F0,>00
       byte >E0,>00
       byte >C0,>00
       byte >80,>00
g_keyboard_l:                          ; >bc2e
       byte >10
       byte >0F,>FF
       byte >0F,>FF
       byte >09,>24
       byte >09,>24
       byte >0F,>FF
       byte >09,>24
       byte >09,>24
       byte >0F,>FF
       byte >0C,>92
       byte >0C,>92
       byte >07,>FF
       byte >08,>00
       byte >0F,>FF
       byte >08,>45
       byte >0D,>11
       byte >07,>FF
g_keyboard_r:                          ; >bc4f
       byte >10
       byte >FF,>F8
       byte >FF,>F8
       byte >92,>48
       byte >92,>48
       byte >FF,>F8
       byte >92,>48
       byte >92,>48
       byte >FF,>F8
       byte >49,>38
       byte >49,>38
       byte >FF,>F0
       byte >00,>08
       byte >FF,>F8
       byte >FF,>F8
       byte >FF,>F8
       byte >FF,>F0
g_kempston_l:                          ; >bc70
       byte >17
       byte >00,>C7
       byte >01,>8F
       byte >03,>1F
       byte >00,>00
       byte >03,>1F
       byte >01,>8F
       byte >00,>C7
       byte >00,>00
       byte >00,>33
       byte >00,>0B
       byte >00,>0B
       byte >00,>0B
       byte >00,>01
       byte >00,>01
       byte >00,>00
       byte >00,>03
       byte >00,>07
       byte >00,>0F
       byte >00,>09
       byte >00,>09
       byte >00,>0C
       byte >00,>06
       byte >00,>03
g_kempston_r:                          ; >bc9f
       byte >17
       byte >FF,>00
       byte >FF,>80
       byte >FF,>C0
       byte >00,>00
       byte >FF,>C0
       byte >FF,>80
       byte >FF,>00
       byte >00,>00
       byte >FC,>00
       byte >F0,>00
       byte >F0,>00
       byte >F0,>00
       byte >80,>00
       byte >80,>00
       byte >00,>00
       byte >C0,>00
       byte >E0,>00
       byte >F0,>00
       byte >F0,>00
       byte >F0,>00
       byte >70,>00
       byte >60,>00
       byte >C0,>00
g_cave_door_frame:                     ; >bcce
       byte >04,>18
       byte >FF,>00,>00,>FF
       byte >03,>00,>00,>B0
       byte >03,>00,>00,>B0
       byte >07,>00,>00,>98
       byte >0D,>00,>00,>98
       byte >18,>80,>01,>0E
       byte >38,>80,>01,>0C
       byte >78,>80,>01,>18
       byte >58,>80,>01,>30
       byte >CC,>80,>01,>38
       byte >8C,>40,>02,>2C
       byte >0C,>40,>02,>26
       byte >0C,>40,>02,>3B
       byte >1C,>40,>02,>E1
       byte >34,>40,>02,>83
       byte >62,>20,>04,>86
       byte >F2,>20,>04,>86
       byte >7F,>2C,>05,>4C
       byte >0F,>62,>25,>4C
       byte >03,>C1,>7D,>58
       byte >00,>F0,>DF,>78
       byte >00,>3D,>87,>F0
       byte >00,>0F,>00,>C0
       byte >00,>02,>00,>00
g_pumpkin1:                            ; >bd30
       byte >13
       byte >07,>E0
       byte >1F,>F8
       byte >3F,>FC
       byte >7D,>BE
       byte >7B,>9E
       byte >F5,>0F
       byte >EF,>67
       byte >F6,>67
       byte >FF,>FF
       byte >FF,>7F
       byte >EA,>47
       byte >F7,>CF
       byte >7B,>CE
       byte >7F,>FE
       byte >3F,>FC
       byte >0D,>B0
       byte >01,>C0
       byte >00,>E0
       byte >00,>60
g_pumpkin2:                            ; >bd57
       byte >13
       byte >07,>E0
       byte >1F,>F8
       byte >3F,>FC
       byte >7D,>FE
       byte >79,>BE
       byte >F0,>5F
       byte >E6,>EF
       byte >E6,>77
       byte >FF,>FF
       byte >FE,>FF
       byte >E2,>6F
       byte >F3,>DF
       byte >73,>FF
       byte >7F,>FE
       byte >3F,>FC
       byte >0D,>B0
       byte >01,>C0
       byte >00,>E0
       byte >00,>60
lines_cav_long:                        ; >bd7e
       byte >00,>17,>01,>04,>FF
       byte >01,>FF
       byte >02,>03,>19,>01,>FF
       byte >03,>FF
       byte >04,>FF
       byte >05,>06,>1B,>03,>FF
       byte >06,>FF
       byte >07,>08,>06,>1D,>FF
       byte >08,>FF
       byte >09,>04,>33,>0A,>FF
       byte >0A,>FF
       byte >0B,>0D,>1F,>08,>FF
       byte >0C,>FF
       byte >0D,>FF
       byte >0E,>0F,>0D,>0C,>FF
       byte >0F,>FF
       byte >10,>31,>0A,>35,>FF
       byte >11,>12,>23,>0F,>FF
       byte >12,>FF
       byte >13,>36,>35,>FF
       byte >14,>25,>15,>12,>FF
       byte >15,>FF
       byte >16,>17,>04,>33,>FF
       byte >17,>FF
       byte >18,>19,>17,>01,>FF
       byte >19,>FF
       byte >1A,>1B,>19,>03,>FF
       byte >1B,>FF
       byte >1C,>1D,>1B,>06,>FF
       byte >1D,>FF
       byte >1E,>1F,>1D,>08,>FF
       byte >1F,>FF
       byte >20,>0D,>1F,>FF
       byte >21,>FF
       byte >22,>23,>21,>0F,>FF
       byte >23,>FF
       byte >24,>25,>23,>12,>FF
       byte >25,>FF
       byte >26,>25,>27,>15,>FF
       byte >27,>FF
       byte >28,>27,>29,>3C,>FF
       byte >29,>FF
       byte >2A,>2B,>3A,>29,>FF
       byte >2B,>FF
       byte >2C,>2D,>2B,>38,>FF
       byte >2D,>FF
       byte >2E,>2F,>2D,>36,>FF
       byte >2F,>FF
       byte >30,>13,>31,>2F,>FF
       byte >31,>FF
       byte >32,>33,>31,>0A,>FF
       byte >33,>FF,>34,>FF
       byte >35,>34,>FF
       byte >36,>FF
       byte >37,>2D,>38,>36,>FF
       byte >38,>FF
       byte >39,>2B,>38,>3A,>FF
       byte >3A,>FF
       byte >3B,>3A,>29,>3C,>FF
_be4c:                                 ; >be4c
       byte >3C,>FF
       byte >3D,>15,>3C,>27,>FF
       byte >FF
points_cav_tall:                       ; >be54
       byte >79,>0A
       byte >86,>04
       byte >91,>04
       byte >A6,>19
       byte >46,>0A
       byte >9B,>38
       byte >A7,>4B
       byte >9A,>58
       byte >AA,>68
       byte >37,>01
       byte >2A,>07
       byte >9B,>7E
       byte >9B,>87
       byte >9B,>8F
       byte >A8,>8F
       byte >95,>A1
       byte >2A,>1E
       byte >95,>B8
       byte >88,>BE
       byte >24,>30
       byte >79,>B5
       byte >46,>B5
       byte >4F,>27
       byte >70,>27
       byte >79,>23
       byte >82,>23
       byte >8F,>30
       byte >84,>47
       byte >89,>52
       byte >80,>5B
       byte >8B,>66
       byte >85,>74
       byte >85,>7D
       byte >89,>80
       byte >81,>88
       byte >81,>99
       byte >77,>9D
       byte >70,>98
       byte >4F,>98
       byte >46,>9C
       byte >3D,>9C
       byte >30,>8F
       byte >3B,>78
       byte >36,>6D
       byte >3F,>64
       byte >34,>59
       byte >3A,>4C
       byte >3A,>42
       byte >36,>3F
       byte >3E,>37
       byte >3E,>26
       byte >47,>22
       byte >24,>38
       byte >18,>30
       byte >24,>41
       byte >15,>57
       byte >25,>67
       byte >18,>74
       byte >24,>87
       byte >18,>A6
       byte >2E,>BB
       byte >39,>BB
points_cav_wide:                       ; >bed0
       byte >0A,>79
       byte >04,>86
       byte >04,>91
       byte >19,>A6
       byte >0A,>46
       byte >38,>9B
       byte >4B,>A7
       byte >58,>9A
       byte >68,>AA
       byte >01,>37
       byte >07,>2A
       byte >7E,>9B
       byte >87,>9B
       byte >8F,>9B
       byte >8F,>A8
       byte >A1,>95
       byte >1E,>2A
       byte >B8,>95
       byte >BE,>88
       byte >30,>24
       byte >B5,>79
       byte >B5,>46
       byte >27,>4F
       byte >27,>70
       byte >23,>79
       byte >23,>82
       byte >30,>8F
       byte >47,>84
       byte >52,>89
       byte >5B,>80
       byte >66,>8B
       byte >74,>85
       byte >7D,>85
       byte >80,>89
       byte >88,>81
       byte >99,>81
       byte >9D,>77
       byte >98,>70
       byte >98,>4F
       byte >9C,>46
       byte >9C,>3D
       byte >8F,>30
       byte >78,>3B
       byte >6D,>36
       byte >64,>3F
       byte >59,>34
       byte >4C,>3A
       byte >42,>3A
       byte >3F,>36
       byte >37,>3E
       byte >26,>3E
       byte >22,>47
       byte >38,>24
       byte >30,>18
       byte >41,>24
       byte >57,>15
       byte >67,>25
       byte >74,>18
       byte >87,>24
       byte >A6,>18
       byte >BB,>2E
       byte >BB,>39

* Data block at bf4c
charset:                               ; >bf4c
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; space
       byte >18,>18,>18,>18,>18,>00,>18,>18                          ; !
       byte >28,>28,>00,>00,>00,>00,>00,>00                          ; "
       byte >00,>18,>18,>00,>00,>18,>18,>00
       byte >00,>62,>64,>08,>10,>26,>46,>00                          ; %
       byte >3C,>42,>99,>A1,>A1,>99,>42,>3C                          ; (c)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; space
       byte >10,>10,>00,>00,>00,>00,>00,>00                          ; '
       byte >08,>18,>18,>18,>18,>18,>18,>08
       byte >10,>18,>18,>18,>18,>18,>18,>10
       byte >00,>14,>58,>3E,>7C,>1A,>28,>00                          ; *
       byte >00,>18,>18,>7E,>78,>18,>18,>00                          ; +
       byte >00,>00,>00,>00,>00,>00,>20,>20                          ; ,
       byte >00,>00,>00,>7E,>7E,>00,>00,>00                          ; -
       byte >00,>00,>00,>00,>00,>00,>18,>18                          ; .
       byte >0C,>0C,>18,>18,>30,>30,>60,>60                          ; /

* Data block at bfcc
digit_charset:                         ; >bfcc
       byte >7C,>FE,>C6,>C6,>C6,>FE,>7C,>00                          ; 0
       byte >18,>38,>58,>18,>18,>18,>3C,>00                          ; 1
       byte >7C,>FE,>06,>7C,>C0,>FE,>FE,>00                          ; 2
       byte >FE,>FC,>08,>1C,>06,>FE,>FC,>00                          ; 3
       byte >0C,>1C,>3C,>6C,>FE,>0C,>0C,>00                          ; 4
       byte >FE,>FE,>C0,>FC,>06,>FE,>7C,>00                          ; 5
       byte >7C,>FE,>C0,>FC,>C6,>FE,>7C,>00                          ; 6
       byte >FE,>FC,>0C,>18,>18,>30,>30,>00                          ; 7
       byte >7C,>FE,>C6,>7C,>C6,>FE,>7C,>00                          ; 8
       byte >7C,>FE,>C6,>7E,>06,>FE,>7C,>00                          ; 9
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >38,>38,>6C,>7C,>EE,>EE,>C6,>00                          ; A
       byte >FC,>FE,>E6,>FC,>E6,>FE,>FC,>00                          ; B
       byte >3C,>7E,>F8,>E0,>F8,>7E,>3C,>00                          ; C
       byte >F8,>FC,>FE,>C6,>FE,>FC,>F8,>00                          ; D
       byte >F8,>F8,>E0,>FC,>E0,>FE,>FE,>00                          ; E
       byte >FE,>FE,>E0,>FC,>E0,>E0,>E0,>00                          ; F
       byte >3C,>7E,>F8,>E0,>FE,>7E,>3A,>00                          ; G
       byte >EE,>EE,>FE,>FE,>FE,>EE,>EE,>00                          ; H
       byte >7C,>7C,>38,>38,>38,>7C,>7C,>00                          ; I
       byte >0E,>0E,>0E,>0E,>EE,>7C,>38,>00                          ; J
       byte >EE,>EC,>F8,>F8,>F8,>EC,>EE,>00                          ; K
       byte >E0,>E0,>E0,>E0,>FE,>FE,>FE,>00                          ; L
       byte >82,>EE,>FE,>FE,>D6,>D6,>D6,>00                          ; M
       byte >8E,>CE,>EE,>FE,>EE,>E6,>E2,>00                          ; N
       byte >38,>7C,>FE,>EE,>FE,>7C,>38,>00                          ; O
       byte >FC,>FE,>E6,>FE,>FC,>E0,>E0,>00                          ; P
       byte >38,>7C,>FE,>EE,>FE,>7C,>3E,>00                          ; Q
       byte >FC,>FE,>E6,>FE,>FC,>EC,>EE,>00                          ; R
       byte >7C,>FE,>F0,>7C,>1E,>FE,>7C,>00                          ; S
       byte >FE,>FE,>FE,>38,>38,>38,>38,>00                          ; T
       byte >EE,>EE,>EE,>EE,>FE,>FE,>7C,>00                          ; U
       byte >EE,>EE,>6C,>7C,>38,>38,>10,>00                          ; V
       byte >D6,>D6,>D6,>FE,>FE,>EE,>82,>00                          ; W
       byte >EE,>EE,>6C,>38,>6C,>EE,>EE,>00                          ; X
       byte >EE,>6C,>7C,>38,>38,>38,>38,>00                          ; Y
       byte >FE,>FC,>F8,>10,>3E,>7E,>FE,>00                          ; Z

* Data block at c124
g_can:                                 ; >c124
       byte >14
       byte >07,>E0
       byte >18,>18
       byte >2F,>F4
       byte >7E,>1E
       byte >3E,>34
       byte >3E,>54
       byte >3E,>EC
       byte >3D,>DC
       byte >3D,>BC
       byte >39,>DC
       byte >23,>BC
       byte >27,>7C
       byte >26,>BC
       byte >2F,>FC
       byte >38,>1C
       byte >20,>C4
       byte >5D,>22
       byte >20,>C4
       byte >18,>18
       byte >07,>E0
g_moneybag:                            ; >c14d
       byte >10
       byte >1F,>F8
       byte >7F,>7E
       byte >F8,>1E
       byte >F0,>4F
       byte >F8,>0F
       byte >F9,>7F
       byte >FC,>0F
       byte >7F,>7F
       byte >7F,>FF
       byte >3E,>1E
       byte >1D,>EE
       byte >87,>B4
       byte >7F,>18
       byte >CE,>04
       byte >11,>34
       byte >0E,>C8
g_coin:                                ; >c16e
       byte >10
       byte >07,>A0
       byte >1F,>E8
       byte >3B,>74
       byte >6A,>9A
       byte >5F,>DA
       byte >D8,>CD
       byte >B0,>75
       byte >FC,>75
       byte >F2,>35
       byte >C0,>1D
       byte >C8,>1D
       byte >76,>3A
       byte >70,>3A
       byte >38,>74
       byte >1F,>E8
       byte >07,>A0
g_gem:                                 ; >c18f
       byte >0D
       byte >1F,>F8
       byte >28,>14
       byte >48,>12
       byte >9A,>B1
       byte >F7,>EF
       byte >D5,>58
       byte >A7,>B5
       byte >F7,>F1
       byte >08,>0F
       byte >F7,>F1
       byte >77,>52
       byte >37,>D4
       byte >17,>F8
g_candy:                               ; >c1aa
       byte >10
       byte >10,>00
       byte >38,>00
       byte >44,>00
       byte >82,>00
       byte >7F,>00
       byte >3F,>80
       byte >10,>40
       byte >08,>20
       byte >07,>F0
       byte >03,>F8
       byte >01,>04
       byte >00,>82
       byte >00,>7F
       byte >00,>3E
       byte >00,>14
       byte >00,>08
g_chop:                                ; >c1cb
       byte >14
       byte >0F,>FC
       byte >10,>02
       byte >11,>C1
       byte >11,>C3
       byte >18,>0E
       byte >0F,>FC
       byte >0F,>F8
       byte >07,>F8
       byte >07,>F0
       byte >07,>F0
       byte >03,>E0
       byte >03,>E0
       byte >03,>C0
       byte >00,>00
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>C0
       byte >07,>E0
       byte >07,>60
g_lollipop:                            ; >c1f4
       byte >12
       byte >00,>18
       byte >00,>38
       byte >00,>30
       byte >00,>70
       byte >00,>60
       byte >00,>E0
       byte >0F,>40
       byte >3F,>C0
       byte >7F,>E0
       byte >7F,>E0
       byte >FF,>F0
       byte >CF,>F0
       byte >CF,>F0
       byte >C7,>F0
       byte >61,>E0
       byte >71,>E0
       byte >3F,>C0
       byte >0F,>00
g_icecream:                            ; >c219
       byte >12
       byte >00,>01
       byte >00,>0F
       byte >00,>54
       byte >03,>FE
       byte >15,>54
       byte >3F,>FC
       byte >7D,>54
       byte >07,>F8
       byte >C9,>D0
       byte >D0,>F8
       byte >E8,>D0
       byte >F2,>70
       byte >79,>50
       byte >74,>60
       byte >3D,>40
       byte >0F,>00
g_sparkle1:                            ; >c23a
       byte >0C
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >02,>00
       byte >01,>40
       byte >04,>20
       byte >02,>80
       byte >0A,>A0
       byte >00,>50
       byte >01,>00
       byte >04,>40
g_sparkle2:                            ; >c253
       byte >0D
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>80
       byte >02,>00
       byte >09,>50
       byte >04,>80
       byte >02,>D0
       byte >0B,>88
       byte >01,>A0
       byte >15,>08
       byte >00,>A0
       byte >02,>00
g_sparkle3:                            ; >c26e
       byte >0F
       byte >00,>00
       byte >01,>20
       byte >02,>08
       byte >80,>A0
       byte >22,>14
       byte >14,>60
       byte >03,>50
       byte >55,>82
       byte >09,>74
       byte >13,>40
       byte >24,>50
       byte >01,>94
       byte >0A,>40
       byte >00,>10
       byte >01,>00
g_sparkle4:                            ; >c28d
       byte >10
       byte >00,>80
       byte >12,>08
       byte >00,>40
       byte >2A,>02
       byte >00,>A8
       byte >85,>40
       byte >12,>52
       byte >45,>A8
       byte >11,>14
       byte >05,>28
       byte >52,>52
       byte >05,>00
       byte >08,>90
       byte >22,>44
       byte >09,>20
       byte >00,>40
g_cave_locked:                         ; >c2ae
       byte >04,>18
       byte >FF,>1B,>18,>FF
       byte >03,>1B,>18,>B0
       byte >03,>1B,>18,>B0
       byte >07,>1B,>18,>98
       byte >0D,>33,>0C,>98
       byte >1A,>33,>0C,>98
       byte >3A,>33,>0C,>EC
       byte >7A,>33,>00,>58
       byte >5A,>63,>0E,>70
       byte >CE,>63,>17,>78
       byte >8C,>63,>19,>2C
       byte >0C,>63,>0E,>26
       byte >0C,>C3,>00,>23
       byte >1C,>C3,>03,>21
       byte >32,>C3,>03,>43
       byte >62,>43,>02,>46
       byte >F8,>00,>00,>86
       byte >7F,>C0,>03,>0C
       byte >0F,>38,>1C,>0C
       byte >03,>C7,>FC,>18
       byte >00,>F0,>DF,>38
       byte >00,>3D,>87,>F0
       byte >00,>0F,>00,>C0
       byte >00,>02,>00,>00
g_spider1:                             ; >c310
       byte >0E
       byte >0C,>30
       byte >0C,>30
       byte >C0,>03
       byte >C6,>63
       byte >60,>06
       byte >1F,>F8
       byte >39,>9C
       byte >74,>2E
       byte >76,>6E
       byte >79,>9E
       byte >7F,>FE
       byte >3F,>FC
       byte >1F,>F8
       byte >0F,>F0
g_spider2:                             ; >c32d
       byte >0E
       byte >00,>00
       byte >60,>06
       byte >66,>66
       byte >06,>60
       byte >33,>CC
       byte >1F,>F8
       byte >39,>9C
       byte >74,>2E
       byte >76,>6E
       byte >79,>9E
       byte >7F,>FE
       byte >3F,>FC
       byte >1F,>F8
       byte >0F,>F0
g_spikey1:                             ; >c34a
       byte >10
       byte >03,>FF
       byte >FF,>FC
       byte >3F,>F0
       byte >0F,>FC
       byte >3F,>FF
       byte >FF,>FC
       byte >3F,>F8
       byte >13,>9E
       byte >65,>2F
       byte >ED,>68
       byte >33,>9E
       byte >3F,>F1
       byte >67,>F8
       byte >03,>B8
       byte >03,>1C
       byte >02,>00
g_spikey2:                             ; >c36b
       byte >10
       byte >FF,>80
       byte >7F,>FF
       byte >0F,>FC
       byte >3F,>F0
       byte >FF,>FF
       byte >7F,>FE
       byte >1F,>FC
       byte >33,>98
       byte >65,>2F
       byte >7D,>6E
       byte >73,>98
       byte >1F,>F8
       byte >3F,>F8
       byte >7F,>6E
       byte >63,>62
       byte >01,>20
g_blob1:                               ; >c38c
       byte >0B
       byte >0E,>E0
       byte >1F,>F0
       byte >39,>38
       byte >34,>90
       byte >36,>D8
       byte >39,>38
       byte >1F,>F0
       byte >0F,>E0
       byte >1C,>70
       byte >38,>38
       byte >F0,>1E
g_blob2:                               ; >c3a3
       byte >09
       byte >0E,>E0
       byte >1F,>F0
       byte >39,>38
       byte >34,>98
       byte >36,>D8
       byte >39,>38
       byte >1F,>F0
       byte >3F,>F8
       byte >F8,>3E
g_ghoul1:                              ; >c3b6
       byte >14
       byte >01,>C0
       byte >03,>80
       byte >03,>00
       byte >03,>00
       byte >83,>81
       byte >87,>C1
       byte >8F,>E1
       byte >CF,>F3
       byte >DF,>F3
       byte >DF,>FB
       byte >DF,>FB
       byte >DF,>FB
       byte >D9,>9B
       byte >D9,>9B
       byte >19,>98
       byte >19,>98
       byte >19,>98
       byte >1F,>F8
       byte >0F,>F0
       byte >07,>E0
g_ghoul2:                              ; >c3df
       byte >14
       byte >03,>80
       byte >01,>C0
       byte >00,>C0
       byte >00,>C0
       byte >01,>C0
       byte >03,>E0
       byte >87,>F1
       byte >8F,>F1
       byte >8F,>F9
       byte >DF,>FB
       byte >DF,>FB
       byte >DF,>FB
       byte >D9,>9B
       byte >D9,>9B
       byte >D9,>9B
       byte >D9,>9B
       byte >99,>99
       byte >0F,>F0
       byte >0F,>F0
       byte >07,>E0
g_ghost1:                              ; >c408
       byte >10
       byte >03,>C0
       byte >07,>E0
       byte >7F,>FE
       byte >FF,>FF
       byte >FF,>FF
       byte >7F,>FE
       byte >3F,>FE
       byte >1F,>FC
       byte >1C,>EC
       byte >18,>44
       byte >18,>44
       byte >1C,>44
       byte >0C,>CC
       byte >0F,>F8
       byte >07,>F0
       byte >03,>C0
g_ghost2:                              ; >c429
       byte >10
       byte >78,>0C
       byte >FC,>1E
       byte >FE,>3F
       byte >FF,>FF
       byte >7F,>FF
       byte >3F,>FE
       byte >1F,>FC
       byte >1F,>FC
       byte >1C,>EC
       byte >18,>44
       byte >18,>44
       byte >1C,>44
       byte >0C,>CC
       byte >0F,>F8
       byte >07,>F0
       byte >03,>C0
g_bat1:                                ; >c44a
       byte >12
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >04,>40
       byte >0C,>60
       byte >03,>80
       byte >07,>C0
       byte >06,>C0
       byte >0D,>60
       byte >1F,>F0
       byte >1C,>70
       byte >38,>38
       byte >30,>18
       byte >60,>0C
       byte >40,>04
       byte >C0,>06
       byte >80,>02
       byte >80,>02
g_bat2:                                ; >c46f
       byte >0E
       byte >80,>02
       byte >80,>02
       byte >80,>02
       byte >40,>04
       byte >60,>0C
       byte >64,>4C
       byte >3C,>78
       byte >3B,>B8
       byte >17,>D0
       byte >06,>C0
       byte >05,>40
       byte >0F,>E0
       byte >0C,>60
       byte >08,>20

* Data block at c48c
g_chicken_empty:                       ; >c48c
       byte >06,>1E
       byte >00,>00,>0F,>FF,>F8,>00
       byte >00,>00,>FF,>FE,>3E,>00
       byte >00,>07,>FF,>FD,>DF,>80
       byte >00,>1F,>E7,>01,>E8,>C0
       byte >00,>7E,>E4,>F0,>E7,>60
       byte >01,>F6,>73,>FC,>73,>80
       byte >03,>33,>27,>F8,>33,>C0
       byte >04,>18,>0F,>FD,>38,>C0
       byte >08,>00,>0F,>FD,>18,>E0
       byte >00,>00,>1F,>FD,>18,>E0
       byte >00,>00,>1F,>FD,>18,>E0
       byte >00,>00,>3F,>FD,>18,>E0
       byte >00,>00,>3F,>FB,>38,>E0
       byte >00,>00,>7F,>FB,>38,>E8
       byte >00,>00,>7F,>F6,>71,>D8
       byte >00,>1E,>DF,>EE,>71,>DC
       byte >00,>0D,>3F,>DC,>F3,>BC
       byte >00,>02,>FF,>3C,>E3,>78
       byte >00,>05,>E0,>79,>E3,>70
       byte >00,>0B,>9E,>F1,>D8,>E0
       byte >00,>17,>3E,>E3,>BF,>C0
       byte >0C,>2E,>1F,>1B,>7F,>80
       byte >1E,>DC,>07,>FC,>FE,>00
       byte >37,>B8,>01,>BB,>F8,>00
       byte >33,>F0,>00,>3F,>E0,>00
       byte >1D,>E0,>00,>00,>00,>00
       byte >03,>C0,>00,>00,>00,>00
       byte >06,>E0,>00,>00,>00,>00
       byte >06,>60,>00,>00,>00,>00
       byte >03,>C0,>00,>00,>00,>00

* Data block at c542
g_chicken_full:                        ; >c542
       byte >06,>1E
       byte >00,>00,>FF,>FF,>FE,>00
       byte >00,>07,>FF,>FF,>FF,>80
       byte >00,>1F,>FF,>0F,>FF,>C0
       byte >00,>7F,>FE,>F7,>FF,>E0
       byte >01,>FF,>F9,>BB,>FF,>F0
       byte >03,>FF,>F7,>FD,>FF,>F8
       byte >07,>FF,>EF,>F5,>FF,>FC
       byte >0F,>FF,>DF,>DE,>FF,>EC
       byte >1F,>DF,>5D,>BE,>FF,>FE
       byte >36,>FD,>BF,>F6,>DE,>FE
       byte >3F,>FF,>B7,>FE,>FF,>FE
       byte >1B,>BF,>7E,>BE,>FF,>BA
       byte >0E,>FB,>7F,>FD,>BB,>FA
       byte >07,>BE,>F7,>7D,>FF,>FE
       byte >01,>F6,>FF,>DB,>FF,>FE
       byte >00,>DD,>FE,>F7,>FF,>7E
       byte >00,>3B,>77,>ED,>7F,>DE
       byte >00,>17,>FE,>DF,>FF,>EC
       byte >00,>0B,>FF,>3F,>FB,>F8
       byte >00,>1F,>C0,>FB,>FF,>B0
       byte >00,>1F,>BF,>FF,>BF,>E0
       byte >0C,>2F,>37,>BF,>FB,>C0
       byte >1E,>DE,>1D,>FB,>FF,>80
       byte >37,>B8,>07,>BF,>BE,>00
       byte >33,>F0,>01,>FB,>F8,>00
       byte >1D,>E0,>00,>3F,>E0,>00
       byte >03,>C0,>00,>00,>00,>00
       byte >06,>E0,>00,>00,>00,>00
       byte >06,>60,>00,>00,>00,>00
       byte >03,>C0,>00,>00,>00,>00

* Data block at c5f8
g_pop1:                                ; >c5f8
       byte >0B
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >03,>40
       byte >05,>C0
       byte >07,>60
       byte >06,>A0
       byte >03,>C0
       byte >01,>00
g_pop2:                                ; >c60f
       byte >0D
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>80
       byte >01,>A0
       byte >0B,>48
       byte >02,>F0
       byte >1F,>40
       byte >06,>F8
       byte >07,>B0
       byte >09,>C8
       byte >02,>A0
       byte >02,>90
g_pop3:                                ; >c62a
       byte >0F
       byte >00,>00
       byte >05,>00
       byte >11,>10
       byte >09,>10
       byte >04,>24
       byte >38,>08
       byte >00,>10
       byte >70,>00
       byte >00,>0E
       byte >10,>00
       byte >64,>2C
       byte >0A,>92
       byte >12,>A8
       byte >02,>80
       byte >00,>80
g_pop4:                                ; >c649
       byte >10
       byte >01,>00
       byte >11,>10
       byte >08,>20
       byte >00,>02
       byte >40,>04
       byte >20,>00
       byte >00,>00
       byte >C0,>00
       byte >00,>03
       byte >00,>00
       byte >40,>02
       byte >80,>01
       byte >00,>00
       byte >20,>04
       byte >44,>82
       byte >04,>80
g_wall_antlers:                        ; >c66a
       byte >04,>10
       byte >00,>03,>C0,>00
       byte >00,>04,>20,>00
       byte >00,>08,>10,>00
       byte >00,>13,>C8,>00
       byte >00,>27,>E4,>00
       byte >00,>2D,>B4,>00
       byte >00,>49,>92,>00
       byte >00,>7F,>FE,>00
       byte >03,>F9,>9F,>C0
       byte >07,>F5,>AF,>E0
       byte >0F,>F6,>6F,>F0
       byte >1C,>B9,>9D,>38
       byte >30,>9F,>F9,>0C
       byte >20,>8F,>F1,>04
       byte >00,>C0,>03,>00
       byte >00,>3F,>FC,>00
g_wall_trophy:                         ; >c6ac
       byte >02,>10
       byte >03,>C0
       byte >04,>20
       byte >08,>10
       byte >13,>C8
       byte >27,>E4
       byte >2D,>B4
       byte >4D,>B2
       byte >4F,>F2
       byte >49,>92
       byte >94,>29
       byte >B6,>6D
       byte >B9,>9D
       byte >BF,>FD
       byte >98,>19
       byte >C0,>03
       byte >3F,>FC
g_bookcase:                            ; >c6ce
       byte >05,>20
       byte >1F,>FF,>FF,>FF,>F8
       byte >18,>00,>00,>00,>18
       byte >14,>00,>00,>00,>28
       byte >13,>FF,>FF,>FF,>C8
       byte >12,>00,>00,>00,>48
       byte >12,>00,>00,>00,>48
       byte >12,>00,>00,>00,>48
       byte >3F,>FF,>FF,>FF,>FC
       byte >30,>00,>00,>00,>0C
       byte >28,>00,>00,>00,>14
       byte >24,>00,>00,>00,>24
       byte >23,>FF,>FF,>FF,>C4
       byte >22,>00,>00,>00,>44
       byte >22,>00,>00,>00,>44
       byte >22,>00,>00,>00,>44
       byte >7F,>FF,>FF,>FF,>FE
       byte >60,>00,>00,>00,>06
       byte >50,>C6,>F6,>EF,>0A
       byte >48,>C7,>F6,>ED,>12
       byte >47,>CE,>F6,>EB,>E2
       byte >44,>CE,>F6,>ED,>22
       byte >44,>DC,>F6,>EB,>22
       byte >44,>DC,>F6,>ED,>22
       byte >44,>F8,>F6,>EB,>22
       byte >FF,>FF,>FF,>FF,>FF
       byte >00,>00,>00,>00,>00
       byte >FF,>FF,>FF,>FF,>FF
       byte >7F,>FF,>FF,>FF,>FE
       byte >3F,>FF,>FF,>FF,>FC
       byte >1F,>FF,>FF,>FF,>F8
       byte >0F,>FF,>FF,>FF,>F0
       byte >07,>FF,>FF,>FF,>E0
g_trap_open:                           ; >c770
       byte >04,>20
       byte >00,>3C,>F0,>00
       byte >0E,>66,>F9,>C0
       byte >1F,>5E,>BB,>F8
       byte >3F,>5C,>D1,>FC
       byte >77,>58,>55,>FE
       byte >7B,>6B,>56,>0E
       byte >DD,>BB,>77,>F6
       byte >DF,>D8,>01,>8E
       byte >4F,>00,>00,>76
       byte >63,>00,>00,>F2
       byte >3E,>00,>00,>F0
       byte >00,>00,>00,>CE
       byte >7E,>00,>00,>1F
       byte >3F,>00,>00,>7F
       byte >DE,>00,>00,>5F
       byte >DB,>00,>00,>63
       byte >BE,>00,>00,>3E
       byte >E0,>00,>00,>00
       byte >0E,>00,>00,>3E
       byte >7E,>00,>00,>7F
       byte >4E,>00,>00,>43
       byte >73,>00,>00,>7D
       byte >3F,>00,>00,>0F
       byte >00,>00,>00,>E3
       byte >3F,>36,>7D,>78
       byte >7F,>EE,>FE,>BC
       byte >6F,>EE,>BE,>BC
       byte >2F,>DA,>BE,>CC
       byte >37,>DE,>BF,>78
       byte >19,>DA,>C7,>60
       byte >0F,>CE,>7E,>00
       byte >01,>C6,>00,>00
g_trap_closed:                         ; >c7f2
       byte >04,>20
       byte >00,>3C,>F0,>00
       byte >0E,>66,>F9,>C0
       byte >1F,>5E,>BB,>F8
       byte >3F,>5C,>D1,>FC
       byte >77,>58,>55,>FE
       byte >7B,>6B,>56,>0E
       byte >DD,>BB,>77,>F6
       byte >DF,>D8,>01,>8E
       byte >4F,>FF,>FF,>76
       byte >63,>92,>49,>F2
       byte >3E,>92,>49,>F0
       byte >00,>FF,>F9,>CE
       byte >7E,>EA,>AD,>1F
       byte >3F,>FF,>F9,>7F
       byte >DE,>92,>49,>5F
       byte >DB,>92,>49,>63
       byte >BE,>92,>49,>3E
       byte >E0,>92,>49,>00
       byte >0E,>FF,>F9,>3E
       byte >7E,>EA,>AD,>7F
       byte >4E,>FF,>F9,>43
       byte >73,>92,>49,>7D
       byte >3F,>92,>49,>0F
       byte >00,>FF,>FF,>E3
       byte >3F,>36,>7D,>78
       byte >7F,>EE,>FE,>BC
       byte >6F,>EE,>BE,>BC
       byte >2F,>DA,>BE,>CC
       byte >37,>DE,>BF,>78
       byte >19,>DA,>C7,>60
       byte >0F,>CE,>7E,>00
       byte >01,>C6,>00,>00
g_rug:                                 ; >c874
       byte >06,>27
       byte >00,>03,>80,>00,>02,>00
       byte >00,>07,>C0,>00,>0D,>00
       byte >00,>07,>C0,>00,>1E,>00
       byte >00,>07,>C0,>00,>1F,>00
       byte >00,>03,>C0,>00,>1F,>00
       byte >00,>03,>80,>00,>3E,>00
       byte >00,>03,>80,>00,>3C,>00
       byte >00,>03,>80,>00,>7C,>00
       byte >00,>03,>80,>00,>78,>00
       byte >00,>03,>80,>00,>70,>00
       byte >00,>02,>80,>00,>F0,>00
       byte >00,>07,>80,>00,>B0,>00
       byte >00,>07,>C7,>E1,>F0,>00
       byte >00,>06,>7E,>3B,>20,>00
       byte >00,>07,>FD,>DF,>E0,>00
       byte >03,>CF,>1E,>3C,>E0,>00
       byte >0F,>FE,>EF,>FB,>70,>00
       byte >79,>BF,>1C,>FC,>DE,>00
       byte >BB,>D9,>FB,>67,>F3,>F0
       byte >FF,>F6,>FC,>DB,>1E,>7F
       byte >BB,>D9,>8F,>E6,>EF,>CE
       byte >E9,>BF,>76,>3F,>1C,>03
       byte >0F,>FB,>8D,>D9,>F0,>00
       byte >03,>CC,>FE,>36,>E0,>00
       byte >00,>07,>C7,>F9,>E0,>00
       byte >00,>07,>FF,>FF,>20,>00
       byte >00,>04,>C7,>E1,>F0,>00
       byte >00,>07,>80,>00,>B0,>00
       byte >00,>02,>80,>00,>F0,>00
       byte >00,>03,>80,>00,>50,>00
       byte >00,>02,>80,>00,>78,>00
       byte >00,>03,>80,>00,>7C,>00
       byte >00,>03,>80,>00,>3C,>00
       byte >00,>03,>80,>00,>3E,>00
       byte >00,>03,>C0,>00,>1F,>00
       byte >00,>07,>C0,>00,>1F,>00
       byte >00,>07,>C0,>00,>1E,>00
       byte >00,>07,>C0,>00,>0D,>00
       byte >00,>03,>80,>00,>02,>00
a_wall_antlers:                        ; >c960
       byte >04,>02
       byte >47,>47,>47,>47
       byte >47,>47,>47,>47
a_wall_trophy:                         ; >c96a
       byte >02,>02
       byte >45,>45,>45,>45
a_bookcase:                            ; >c970
       byte >05,>04
       byte >46,>46,>46,>46,>46
       byte >46,>46,>46,>46,>46
       byte >46,>45,>43,>44,>46
       byte >46,>46,>46,>46,>46
a_trap_open:                           ; >c986
       byte >04,>04
       byte >43,>43,>43,>43
       byte >43,>00,>00,>43
       byte >43,>00,>00,>43
       byte >43,>43,>43,>43
a_trap_closed:                         ; >c998
       byte >04,>04
       byte >43,>43,>43,>43
       byte >43,>46,>46,>43
       byte >43,>46,>46,>43
       byte >43,>43,>43,>43
a_rug:                                 ; >c9aa
       byte >06,>05
       byte >07,>07,>07,>07,>07,>07
       byte >07,>07,>07,>07,>07,>07
       byte >07,>07,>07,>07,>07,>07
       byte >07,>07,>07,>07,>07,>07
       byte >07,>07,>07,>07,>07,>07
g_acg_shield:                          ; >c9ca
       byte >02,>10
       byte >01,>80
       byte >07,>E0
       byte >0F,>F0
       byte >1F,>D8
       byte >30,>0C
       byte >3F,>DC
       byte >7F,>FE
       byte >7F,>FE
       byte >54,>42
       byte >D5,>DB
       byte >C5,>D3
       byte >D5,>DF
       byte >C4,>43
       byte >FF,>FF
       byte >E7,>E7
       byte >81,>81
g_wall_shield:                         ; >c9ec
       byte >02,>10
       byte >01,>80
       byte >07,>E0
       byte >08,>10
       byte >19,>98
       byte >39,>9C
       byte >30,>0C
       byte >75,>AE
       byte >7F,>FE
       byte >7F,>FE
       byte >DC,>2F
       byte >D7,>EB
       byte >C4,>23
       byte >D7,>EB
       byte >FD,>7F
       byte >E7,>E7
       byte >81,>81
g_suit_armour:                         ; >ca0e
       byte >02,>20
       byte >30,>0C
       byte >1C,>38
       byte >1E,>7A
       byte >0E,>72
       byte >06,>62
       byte >0A,>52
       byte >1C,>3A
       byte >0A,>52
       byte >07,>E2
       byte >47,>E7
       byte >47,>E2
       byte >07,>E0
       byte >60,>06
       byte >67,>E6
       byte >A6,>65
       byte >CC,>33
       byte >AD,>B5
       byte >6D,>B6
       byte >7F,>FE
       byte >7F,>FE
       byte >78,>1E
       byte >37,>EC
       byte >03,>C0
       byte >07,>E0
       byte >0E,>70
       byte >19,>98
       byte >07,>E0
       byte >0F,>F0
       byte >07,>E0
       byte >03,>C0
       byte >00,>00
       byte >00,>00
a_acg_shield:                          ; >ca50
       byte >02,>02
       byte >43,>47
       byte >47,>43
a_wall_shield:                         ; >ca56
       byte >02,>02
       byte >FF,>FF
       byte >FF,>FF
a_suit_armour:                         ; >ca5c
       byte >02,>04
       byte >45,>45
       byte >45,>45
       byte >45,>45
       byte >45,>45
a_cave_door_shut:                      ; >ca66
       byte >04,>03
       byte >FF,>47,>47,>FF
       byte >FF,>47,>47,>FF
       byte >FF,>FF,>FF,>FF
a_door_shut:                           ; >ca74
       byte >04,>03
       byte >43,>47,>47,>43
       byte >43,>47,>47,>43
       byte >43,>43,>43,>43
g_door_shut:                           ; >ca82
       byte >04,>18
       byte >FF,>3B,>DC,>FF
       byte >1F,>3B,>DC,>F8
       byte >0C,>3B,>DC,>40
       byte >3E,>3B,>DC,>7C
       byte >7C,>00,>00,>3E
       byte >04,>7B,>CE,>20
       byte >F8,>7B,>D7,>1F
       byte >F8,>7B,>D1,>1F
       byte >08,>7B,>CE,>08
       byte >F0,>7B,>C0,>0F
       byte >F0,>00,>00,>0F
       byte >10,>FB,>DF,>08
       byte >F0,>FB,>DF,>1F
       byte >F8,>7B,>DE,>1F
       byte >CC,>3B,>DC,>33
       byte >3F,>0B,>D0,>7C
       byte >7D,>80,>01,>BE
       byte >3B,>F0,>0F,>DC
       byte >17,>BF,>FD,>E8
       byte >07,>7B,>DE,>E0
       byte >03,>7B,>DE,>C0
       byte >00,>77,>EE,>00
       byte >00,>07,>E0,>00
       byte >00,>00,>00,>00
g_cave_door_shut:                      ; >cae4
       byte >04,>18
       byte >FF,>3B,>DC,>FF
       byte >03,>3B,>DC,>B0
       byte >03,>3B,>DC,>B0
       byte >07,>3B,>DC,>98
       byte >0D,>00,>00,>98
       byte >1A,>7B,>CE,>4E
       byte >3A,>7B,>D7,>EC
       byte >7A,>7B,>D1,>58
       byte >5A,>7B,>CE,>70
       byte >CE,>7B,>C0,>78
       byte >8C,>00,>00,>2C
       byte >0C,>FB,>DF,>26
       byte >0C,>FB,>DF,>23
       byte >1C,>7B,>DE,>21
       byte >32,>3B,>DC,>43
       byte >62,>0B,>D0,>46
       byte >F1,>00,>00,>86
       byte >7F,>C0,>03,>0C
       byte >0F,>38,>1C,>0C
       byte >03,>C7,>FC,>18
       byte >00,>F0,>DF,>38
       byte >00,>3D,>87,>F0
       byte >00,>0F,>00,>C0
       byte >00,>02,>00,>00
g_mummy1:                              ; >cb46
       byte >18
       byte >0F,>00
       byte >0F,>78
       byte >03,>78
       byte >04,>30
       byte >07,>70
       byte >07,>40
       byte >01,>F0
       byte >07,>E0
       byte >0E,>20
       byte >0F,>E0
       byte >0F,>E0
       byte >04,>20
       byte >CF,>E5
       byte >E8,>67
       byte >F7,>CB
       byte >5B,>BE
       byte >17,>D4
       byte >03,>80
       byte >07,>C0
       byte >0C,>60
       byte >0F,>E0
       byte >0D,>60
       byte >07,>C0
       byte >03,>80
g_mummy2:                              ; >cb77
       byte >18
       byte >0F,>E8
       byte >0F,>E8
       byte >03,>30
       byte >04,>70
       byte >07,>40
       byte >07,>F0
       byte >01,>E0
       byte >07,>E0
       byte >07,>10
       byte >07,>F0
       byte >07,>F0
       byte >02,>10
       byte >AF,>E5
       byte >78,>67
       byte >F7,>CB
       byte >5B,>BE
       byte >17,>D4
       byte >03,>80
       byte >07,>C0
       byte >0C,>60
       byte >0F,>E0
       byte >0D,>60
       byte >07,>C0
       byte >03,>80
g_mummy3:                              ; >cba8
       byte >18
       byte >00,>78
       byte >0F,>78
       byte >0F,>30
       byte >07,>70
       byte >04,>40
       byte >07,>70
       byte >07,>70
       byte >01,>E0
       byte >07,>10
       byte >07,>F0
       byte >07,>F0
       byte >02,>10
       byte >A7,>F5
       byte >E4,>37
       byte >F3,>EB
       byte >5B,>FE
       byte >17,>F4
       byte >01,>C0
       byte >03,>E0
       byte >06,>30
       byte >07,>F0
       byte >06,>B0
       byte >03,>E0
       byte >01,>C0
g_franken1:                            ; >cbd9
       byte >18
       byte >3E,>00
       byte >1E,>60
       byte >00,>F0
       byte >0E,>70
       byte >0E,>B0
       byte >0E,>C4
       byte >4F,>E4
       byte >4F,>EA
       byte >A0,>0A
       byte >AF,>EE
       byte >EE,>EE
       byte >FE,>FE
       byte >FF,>FE
       byte >7E,>FC
       byte >0F,>E0
       byte >20,>08
       byte >37,>D8
       byte >24,>48
       byte >0F,>E0
       byte >14,>50
       byte >16,>D0
       byte >10,>10
       byte >1A,>B0
       byte >0F,>E0
g_franken2:                            ; >cc0a
       byte >18
       byte >1E,>F0
       byte >1E,>F0
       byte >00,>00
       byte >0E,>E0
       byte >4E,>E4
       byte >4E,>E4
       byte >AF,>EA
       byte >AF,>EA
       byte >E0,>0E
       byte >EF,>EE
       byte >EF,>EE
       byte >FE,>FE
       byte >FF,>FE
       byte >7E,>FC
       byte >0F,>E0
       byte >20,>08
       byte >37,>D8
       byte >24,>48
       byte >0F,>E0
       byte >14,>50
       byte >16,>D0
       byte >10,>10
       byte >1A,>B0
       byte >0F,>E0
g_franken3:                            ; >cc3b
       byte >18
       byte >00,>F8
       byte >0C,>F0
       byte >1E,>00
       byte >1C,>E0
       byte >1A,>E0
       byte >46,>E0
       byte >4F,>E0
       byte >AE,>E4
       byte >0A,>A0
       byte >EF,>EA
       byte >EF,>EE
       byte >FE,>FE
       byte >FF,>FE
       byte >7E,>FC
       byte >0F,>F0
       byte >20,>08
       byte >37,>D8
       byte >24,>48
       byte >0F,>E0
       byte >14,>50
       byte >16,>D0
       byte >10,>10
       byte >1A,>B0
       byte >0F,>E0
g_devil1:                              ; >cc6c
       byte >18
       byte >0C,>07
       byte >0C,>63
       byte >00,>65
       byte >0C,>04
       byte >0C,>EC
       byte >0E,>F8
       byte >0F,>D0
       byte >0F,>C0
       byte >05,>40
       byte >0B,>A0
       byte >0D,>60
       byte >AB,>A8
       byte >FF,>FF
       byte >3F,>FC
       byte >07,>C0
       byte >0A,>A0
       byte >11,>10
       byte >14,>50
       byte >16,>D0
       byte >31,>18
       byte >7B,>BC
       byte >6F,>EC
       byte >47,>C4
       byte >40,>04
g_devil2:                              ; >cc9d
       byte >18
       byte >06,>C7
       byte >06,>C3
       byte >00,>05
       byte >06,>C4
       byte >06,>CC
       byte >06,>D8
       byte >07,>D0
       byte >07,>C0
       byte >05,>40
       byte >0B,>A0
       byte >0D,>60
       byte >AB,>AA
       byte >FF,>FE
       byte >3F,>F8
       byte >07,>C0
       byte >0A,>A0
       byte >11,>10
       byte >14,>50
       byte >16,>D0
       byte >31,>18
       byte >7B,>BC
       byte >6F,>EC
       byte >47,>C4
       byte >40,>04
g_devil3:                              ; >ccce
       byte >18
       byte >00,>37
       byte >06,>33
       byte >06,>05
       byte >00,>34
       byte >07,>3C
       byte >07,>78
       byte >03,>F0
       byte >07,>F0
       byte >02,>A0
       byte >05,>D0
       byte >06,>B0
       byte >A5,>D5
       byte >FF,>FF
       byte >3F,>FC
       byte >03,>E0
       byte >05,>50
       byte >08,>88
       byte >0A,>28
       byte >0B,>68
       byte >18,>8C
       byte >39,>CE
       byte >37,>F6
       byte >23,>E2
       byte >20,>02
g_dracula1:                            ; >ccff
       byte >18
       byte >00,>F0
       byte >0C,>00
       byte >1C,>C0
       byte >38,>C0
       byte >B4,>C2
       byte >CE,>DE
       byte >F7,>DE
       byte >F7,>DE
       byte >F8,>3E
       byte >7F,>FC
       byte >7F,>FC
       byte >6B,>AC
       byte >23,>88
       byte >3F,>F8
       byte >0F,>E0
       byte >3A,>B8
       byte >72,>9C
       byte >41,>04
       byte >54,>54
       byte >16,>D0
       byte >19,>30
       byte >1B,>B0
       byte >0F,>E0
       byte >07,>C0
g_dracula2:                            ; >cd30
       byte >18
       byte >1E,>F0
       byte >0E,>E0
       byte >00,>00
       byte >06,>C0
       byte >86,>C2
       byte >F6,>DE
       byte >F7,>DE
       byte >F7,>DE
       byte >F8,>3E
       byte >7F,>FC
       byte >7F,>FC
       byte >6B,>AC
       byte >23,>88
       byte >3F,>F8
       byte >0F,>E0
       byte >3A,>B8
       byte >72,>9C
       byte >41,>04
       byte >54,>54
       byte >16,>D0
       byte >19,>30
       byte >1B,>B0
       byte >0F,>E0
       byte >07,>C0
g_dracula3:                            ; >cd61
       byte >18
       byte >1E,>00
       byte >00,>60
       byte >06,>70
       byte >06,>38
       byte >86,>5A
       byte >F6,>E6
       byte >F7,>DE
       byte >F7,>DE
       byte >F8,>3E
       byte >7F,>FC
       byte >7F,>EC
       byte >6B,>AC
       byte >23,>88
       byte >3F,>F8
       byte >0F,>E0
       byte >3A,>B8
       byte >72,>9C
       byte >41,>04
       byte >54,>54
       byte >16,>D0
       byte >19,>30
       byte >1B,>B0
       byte >0F,>E0
       byte >07,>C0
g_tombstone:                           ; >cd92
       byte >15
       byte >22,>00
       byte >4B,>C0
       byte >56,>80
       byte >37,>60
       byte >FB,>00
       byte >7B,>80
       byte >FD,>80
       byte >7D,>CE
       byte >9E,>AE
       byte >9E,>77
       byte >2F,>F9
       byte >4F,>F6
       byte >07,>EC
       byte >07,>C0
       byte >0F,>D8
       byte >1F,>DC
       byte >3D,>EC
       byte >3D,>E2
       byte >3A,>DC
       byte >16,>B8
       byte >00,>70
g_crucifix:                            ; >cdbd
       byte >12
       byte >01,>80
       byte >03,>C0
       byte >03,>C0
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >01,>80
       byte >03,>C0
       byte >66,>66
       byte >FD,>BF
       byte >FD,>BF
       byte >66,>66
       byte >03,>C0
       byte >01,>80
       byte >03,>C0
       byte >03,>C0
       byte >01,>80
g_skull:                               ; >cde2
       byte >0F
       byte >02,>D0
       byte >03,>50
       byte >04,>A8
       byte >0C,>08
       byte >1C,>C8
       byte >38,>44
       byte >30,>84
       byte >76,>32
       byte >7B,>5A
       byte >73,>1A
       byte >79,>12
       byte >38,>02
       byte >3F,>02
       byte >1F,>FC
       byte >07,>F0
g_witch_l1:                            ; >ce01
       byte >16
       byte >00,>0A
       byte >07,>DA
       byte >00,>BA
       byte >3C,>D8
       byte >07,>FC
       byte >07,>FE
       byte >07,>FE
       byte >05,>FF
       byte >1D,>FF
       byte >3E,>F7
       byte >E6,>F6
       byte >C3,>78
       byte >09,>60
       byte >0F,>C0
       byte >0F,>C0
       byte >2F,>20
       byte >3B,>40
       byte >16,>E0
       byte >0D,>F0
       byte >03,>F8
       byte >07,>FC
       byte >08,>1F
g_witch_l2:                            ; >ce2e
       byte >16
       byte >00,>80
       byte >07,>D5
       byte >00,>BA
       byte >3C,>D4
       byte >07,>FC
       byte >07,>FE
       byte >07,>FE
       byte >05,>FF
       byte >0D,>FF
       byte >1E,>F7
       byte >76,>F6
       byte >E3,>7C
       byte >49,>60
       byte >0F,>C0
       byte >0F,>00
       byte >2F,>20
       byte >3B,>40
       byte >16,>E0
       byte >0D,>F0
       byte >03,>F8
       byte >07,>FC
       byte >08,>1F
g_witch_r1:                            ; >ce5b
       byte >16
       byte >10,>00
       byte >AB,>E0
       byte >5D,>00
       byte >2B,>3C
       byte >3F,>E0
       byte >7F,>E0
       byte >7F,>E0
       byte >FF,>A0
       byte >FF,>B0
       byte >EF,>78
       byte >6F,>6E
       byte >3E,>C7
       byte >06,>92
       byte >03,>F0
       byte >00,>F0
       byte >04,>F4
       byte >02,>DC
       byte >07,>68
       byte >0F,>B0
       byte >1F,>C0
       byte >3F,>E0
       byte >F8,>10
g_witch_r2:                            ; >ce88
       byte >16
       byte >50,>00
       byte >AB,>E0
       byte >5D,>00
       byte >2B,>3C
       byte >3F,>E0
       byte >7F,>E0
       byte >7F,>E0
       byte >FF,>A0
       byte >FF,>B8
       byte >EF,>7C
       byte >6F,>67
       byte >3E,>C3
       byte >06,>90
       byte >03,>F0
       byte >00,>F0
       byte >04,>F4
       byte >02,>DC
       byte >07,>68
       byte >0F,>B0
       byte >1F,>C0
       byte >3F,>E0
       byte >F8,>10
g_monk_l1:                             ; >ceb5
       byte >13
       byte >0C,>CE
       byte >1F,>FC
       byte >3F,>F8
       byte >2F,>B0
       byte >17,>B0
       byte >3B,>10
       byte >3D,>B0
       byte >7E,>F0
       byte >FF,>70
       byte >E3,>70
       byte >1D,>70
       byte >0A,>E0
       byte >15,>C6
       byte >24,>3C
       byte >47,>FC
       byte >4F,>F8
       byte >7F,>E0
       byte >3F,>80
       byte >1E,>00
g_monk_l2:                             ; >cedc
       byte >13
       byte >03,>00
       byte >1F,>FF
       byte >0F,>FC
       byte >37,>B0
       byte >3B,>B0
       byte >7D,>10
       byte >7E,>D0
       byte >FF,>70
       byte >E7,>B0
       byte >0B,>B0
       byte >0D,>70
       byte >0C,>E0
       byte >17,>C0
       byte >26,>1F
       byte >47,>FC
       byte >4F,>F8
       byte >7F,>E0
       byte >3F,>80
       byte >1E,>00
g_monk_r1:                             ; >cf03
       byte >13
       byte >00,>C0
       byte >FF,>F8
       byte >3F,>F0
       byte >0D,>EC
       byte >0D,>DC
       byte >08,>BE
       byte >0D,>7E
       byte >0E,>FF
       byte >0D,>E7
       byte >0D,>D0
       byte >0E,>B0
       byte >07,>30
       byte >03,>E8
       byte >F8,>64
       byte >3F,>E2
       byte >1F,>F2
       byte >07,>F3
       byte >01,>FC
       byte >00,>78
g_monk_r2:                             ; >cf2a
       byte >13
       byte >73,>30
       byte >3F,>F8
       byte >1F,>FC
       byte >0D,>F4
       byte >0D,>E8
       byte >08,>DC
       byte >0D,>BC
       byte >0F,>7E
       byte >0E,>FF
       byte >0E,>C7
       byte >0E,>B8
       byte >07,>50
       byte >63,>A8
       byte >3C,>24
       byte >3F,>E2
       byte >1F,>F2
       byte >07,>FE
       byte >01,>FC
       byte >00,>78
g_bat_l1:                              ; >cf51
       byte >13
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >67,>F0
       byte >FF,>FF
       byte >BF,>FE
       byte >DF,>80
       byte >F7,>F0
       byte >DC,>10
       byte >25,>F8
       byte >0B,>E8
       byte >0C,>18
       byte >07,>F8
       byte >03,>F8
       byte >00,>FC
       byte >00,>1F
g_bat_l2:                              ; >cf78
       byte >0D
       byte >00,>1F
       byte >00,>FC
       byte >03,>F8
       byte >07,>04
       byte >08,>38
       byte >07,>90
       byte >67,>E0
       byte >FF,>9F
       byte >BF,>FE
       byte >DF,>F0
       byte >F0,>00
       byte >B0,>00
       byte >20,>00
g_bat_r1:                              ; >cf93
       byte >0D
       byte >F8,>00
       byte >3F,>00
       byte >1F,>C0
       byte >2F,>E0
       byte >1C,>10
       byte >09,>E0
       byte >07,>E6
       byte >F9,>FF
       byte >7F,>FD
       byte >0F,>FB
       byte >00,>0F
       byte >00,>0D
       byte >00,>04
g_bat_r2:                              ; >cfae
       byte >13
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >00,>00
       byte >0F,>E6
       byte >FF,>FF
       byte >7F,>FD
       byte >01,>FB
       byte >0F,>EF
       byte >08,>6D
       byte >1F,>A4
       byte >27,>D0
       byte >18,>30
       byte >1F,>E0
       byte >1F,>C0
       byte >3F,>00
       byte >F8,>00
g_barrel:                              ; >cfd5
       byte >04,>20
       byte >00,>0F,>F0,>00
       byte >00,>70,>0E,>00
       byte >01,>87,>B1,>80
       byte >02,>7B,>DE,>40
       byte >04,>FD,>EF,>A0
       byte >0B,>7E,>F7,>D0
       byte >17,>BF,>7B,>E8
       byte >17,>DF,>BD,>E8
       byte >2F,>FF,>FF,>F4
       byte >6E,>63,>8F,>B6
       byte >5E,>49,>27,>BA
       byte >56,>49,>24,>2A
       byte >5E,>63,>8C,>BA
       byte >DC,>49,>24,>FB
       byte >EE,>49,>24,>F7
       byte >AF,>63,>8C,>B5
       byte >B7,>FF,>FF,>ED
       byte >BB,>DF,>F7,>DD
       byte >9D,>EF,>FB,>B9
       byte >CE,>77,>FE,>73
       byte >C7,>8F,>F1,>E3
       byte >63,>F0,>0F,>C6
       byte >70,>FF,>FF,>0E
       byte >38,>1F,>F8,>1C
       byte >1E,>00,>40,>78
       byte >0F,>C0,>23,>F0
       byte >03,>FF,>FF,>C0
       byte >00,>FF,>FF,>00
       byte >00,>1F,>F8,>00
       byte >00,>00,>00,>00
       byte >00,>00,>00,>00
       byte >00,>00,>00,>00
a_barrel:                              ; >d057
       byte >04,>04
       byte >46,>46,>46,>46
       byte >46,>46,>46,>46
       byte >46,>46,>46,>46
       byte >46,>46,>46,>46
g_acg_door:                            ; >d069
       byte >08,>28
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>3C,>00,>00,>00,>00,>3C,>00
       byte >00,>42,>00,>00,>00,>00,>42,>00
       byte >00,>BD,>00,>00,>00,>00,>BD,>00
       byte >00,>EF,>00,>00,>00,>00,>F7,>00
       byte >FF,>EB,>FF,>FF,>7F,>FF,>F7,>FF
       byte >00,>6A,>1F,>FF,>7F,>F8,>56,>00
       byte >00,>5A,>3F,>FF,>7F,>FC,>52,>00
       byte >00,>D6,>3F,>E3,>63,>FC,>6B,>00
       byte >00,>D6,>7F,>D1,>51,>FE,>6B,>00
       byte >00,>B6,>7F,>D1,>51,>FE,>69,>00
       byte >00,>B6,>FF,>CD,>4D,>FF,>6D,>00
       byte >01,>B6,>FF,>E3,>63,>FF,>6D,>80
       byte >01,>A4,>FF,>FF,>FF,>FF,>25,>80
       byte >01,>2C,>FF,>36,>30,>FF,>34,>80
       byte >01,>6C,>FF,>34,>E6,>FF,>36,>80
       byte >03,>6C,>FF,>04,>E4,>FF,>36,>C0
       byte >03,>6C,>FF,>04,>E4,>FF,>36,>C0
       byte >02,>6C,>FF,>34,>E7,>FF,>36,>40
       byte >02,>6C,>FF,>34,>E7,>FF,>36,>40
       byte >06,>CC,>7F,>8E,>30,>FE,>33,>60
       byte >04,>CC,>7F,>FF,>FF,>FE,>33,>20
       byte >07,>F4,>3F,>FF,>7F,>FC,>2F,>E0
       byte >1F,>FC,>1F,>FF,>7F,>F8,>3F,>F8
       byte >38,>0E,>0F,>FF,>7F,>F0,>70,>1C
       byte >67,>F3,>03,>FF,>7F,>C0,>CF,>E6
       byte >5F,>FD,>00,>7F,>FE,>00,>BF,>FA
       byte >3F,>FE,>00,>07,>60,>00,>7F,>FC
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >7F,>FF,>FF,>FF,>FF,>FF,>FF,>FE
       byte >7F,>FF,>FF,>FF,>FF,>FF,>FF,>FE
       byte >FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >AA,>AA,>AA,>AA,>AA,>AA,>AA,>AA
       byte >55,>55,>55,>55,>55,>55,>55,>56
       byte >2A,>AA,>AA,>AA,>AA,>AA,>AA,>AC
       byte >00,>00,>00,>00,>00,>00,>00,>00
a_acg_door:                            ; >d1ab
       byte >08,>05
       byte >FF,>47,>43,>43,>43,>43,>47,>FF
       byte >FF,>47,>43,>43,>43,>43,>47,>FF
       byte >47,>47,>43,>43,>43,>43,>47,>47
       byte >47,>47,>43,>43,>43,>43,>47,>47
       byte >46,>46,>46,>46,>46,>46,>46,>46
g_acg_key1:                            ; >d1d5
       byte >0B
       byte >0C,>CE
       byte >0C,>DF
       byte >0F,>D8
       byte >0F,>D8
       byte >0C,>D8
       byte >0C,>DF
       byte >07,>FE
       byte >3F,>FF
       byte >5F,>FF
       byte >40,>00
       byte >3F,>FF
g_acg_key2:                            ; >d1ec
       byte >0F
       byte >3C,>00
       byte >7E,>00
       byte >66,>00
       byte >6E,>01
       byte >60,>01
       byte >7E,>03
       byte >3C,>0F
       byte >FF,>F0
       byte >FF,>FF
       byte >00,>0F
       byte >FF,>F0
       byte >00,>0F
       byte >00,>03
       byte >00,>01
       byte >00,>01
g_acg_key3:                            ; >d20b
       byte >13
       byte >1C,>00
       byte >7F,>00
       byte >7F,>00
       byte >C3,>80
       byte >C3,>C0
       byte >81,>DC
       byte >81,>66
       byte >1B,>42
       byte >9F,>73
       byte >C7,>B1
       byte >C7,>B1
       byte >9F,>73
       byte >1B,>42
       byte >81,>66
       byte >81,>BC
       byte >C3,>80
       byte >F8,>80
       byte >7F,>00
       byte >1C,>00
g_mushroom:                            ; >d232
       byte >10
       byte >00,>70
       byte >00,>FC
       byte >00,>7E
       byte >00,>7E
       byte >00,>FC
       byte >00,>FC
       byte >7E,>3C
       byte >CF,>C8
       byte >6F,>F0
       byte >FF,>3C
       byte >7F,>3E
       byte >77,>F3
       byte >33,>F3
       byte >1F,>9E
       byte >0F,>FC
       byte >03,>F0
g_pumpkin_picture:                     ; >d253
       byte >04,>10
       byte >01,>FF,>FF,>80
       byte >01,>FF,>FF,>80
       byte >01,>80,>01,>80
       byte >01,>87,>E1,>80
       byte >03,>8D,>31,>C0
       byte >03,>18,>98,>C0
       byte >03,>13,>C8,>C0
       byte >03,>16,>68,>C0
       byte >07,>1F,>F8,>E0
       byte >06,>19,>98,>60
       byte >06,>19,>98,>60
       byte >06,>0F,>F0,>60
       byte >0E,>00,>00,>70
       byte >0C,>00,>00,>30
       byte >0F,>FF,>FF,>F0
       byte >0F,>FF,>FF,>F0
a_pumpkin_picture:                     ; >d295
       byte >04,>02
       byte >46,>46,>46,>46
       byte >46,>46,>46,>46
g_spanner:                             ; >d29f
       byte >10
       byte >20,>00
       byte >70,>00
       byte >78,>00
       byte >3C,>00
       byte >1E,>00
       byte >0F,>00
       byte >07,>80
       byte >03,>C0
       byte >01,>E0
       byte >00,>F8
       byte >00,>7E
       byte >00,>7F
       byte >00,>7F
       byte >00,>63
       byte >00,>63
       byte >00,>22
g_ghostlet1:                           ; >d2c0
       byte >0B
       byte >09,>10
       byte >DD,>B9
       byte >FF,>FF
       byte >7F,>FF
       byte >3F,>FE
       byte >1C,>9C
       byte >0A,>2C
       byte >0B,>6C
       byte >0C,>98
       byte >07,>F0
       byte >01,>E0
g_ghostlet2:                           ; >d2d7
       byte >0B
       byte >00,>00
       byte >00,>00
       byte >01,>01
       byte >D7,>D7
       byte >FF,>FF
       byte >F9,>3E
       byte >74,>5C
       byte >36,>D8
       byte >19,>30
       byte >0F,>E0
       byte >03,>C0
g_skeleton:                            ; >d2ee
       byte >05,>28
       byte >00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00
       byte >00,>00,>60,>00,>00
       byte >00,>E0,>78,>00,>00
       byte >00,>FC,>EC,>40,>00
       byte >00,>6E,>C6,>70,>00
       byte >00,>C1,>C3,>60,>00
       byte >00,>C6,>A1,>C0,>00
       byte >00,>BF,>30,>80,>00
       byte >00,>7C,>1C,>00,>00
       byte >00,>6B,>9F,>00,>00
       byte >FF,>50,>4E,>FF,>00
       byte >00,>24,>E1,>00,>00
       byte >00,>28,>10,>00,>00
       byte >00,>12,>60,>00,>00
       byte >00,>14,>30,>00,>00
       byte >00,>14,>18,>00,>00
       byte >00,>14,>46,>00,>00
       byte >00,>0C,>99,>00,>00
       byte >00,>02,>AE,>E0,>00
       byte >00,>06,>7B,>60,>00
       byte >50,>0C,>E7,>30,>00
       byte >27,>18,>87,>18,>50
       byte >17,>78,>FF,>0B,>98
       byte >07,>00,>7E,>03,>B0
       byte >05,>00,>3C,>03,>80
       byte >05,>00,>00,>00,>E0
       byte >0B,>00,>00,>00,>40
       byte >14,>00,>00,>00,>F0
       byte >14,>00,>00,>00,>28
       byte >68,>00,>00,>00,>2E
       byte >F0,>00,>00,>00,>1F
       byte >B8,>00,>00,>00,>1B
       byte >F8,>00,>00,>00,>1F
       byte >70,>00,>00,>00,>0E
a_skeleton:                            ; >d3b8
       byte >05,>05
       byte >FF,>FF,>FF,>FF,>FF
       byte >FF,>47,>47,>47,>FF
       byte >FF,>47,>47,>FF,>FF
       byte >47,>47,>47,>47,>47
       byte >47,>FF,>FF,>FF,>47
g_hunchback1:                          ; >d3d3
       byte >18
       byte >00,>3C
       byte >3C,>38
       byte >1C,>00
       byte >00,>38
       byte >0E,>38
       byte >0E,>38
       byte >0F,>38
       byte >67,>F8
       byte >03,>F8
       byte >60,>00
       byte >77,>F8
       byte >37,>38
       byte >37,>78
       byte >43,>9C
       byte >1D,>8C
       byte >06,>C2
       byte >7B,>62
       byte >7F,>72
       byte >53,>62
       byte >73,>44
       byte >3E,>CC
       byte >1E,>F8
       byte >05,>F0
       byte >03,>E0
g_hunchback2:                          ; >d404
       byte >18
       byte >0F,>3C
       byte >07,>38
       byte >00,>00
       byte >07,>38
       byte >07,>38
       byte >07,>38
       byte >07,>38
       byte >37,>F8
       byte >07,>F8
       byte >30,>00
       byte >27,>F8
       byte >26,>78
       byte >26,>F8
       byte >03,>9C
       byte >1D,>8C
       byte >06,>CC
       byte >7B,>66
       byte >7F,>66
       byte >53,>66
       byte >73,>4C
       byte >3E,>CC
       byte >1E,>F8
       byte >05,>F0
       byte >03,>E0
g_hunchback3:                          ; >d435
       byte >18
       byte >0F,>00
       byte >07,>3C
       byte >00,>38
       byte >07,>00
       byte >07,>38
       byte >07,>3C
       byte >07,>3C
       byte >67,>F8
       byte >07,>F8
       byte >60,>00
       byte >77,>F8
       byte >37,>38
       byte >37,>38
       byte >43,>9C
       byte >1D,>8C
       byte >06,>C2
       byte >7B,>62
       byte >7F,>72
       byte >53,>62
       byte >73,>44
       byte >3E,>CC
       byte >1E,>F8
       byte >05,>F0
       byte >03,>E0
g_barrel_stack:                        ; >d466
       byte >05,>1B
       byte >03,>C0,>3C,>03,>C0
       byte >0F,>F0,>FF,>0F,>F0
       byte >1F,>F9,>FF,>9F,>F8
       byte >1F,>F9,>FF,>9F,>F8
       byte >2F,>F6,>FF,>6F,>F4
       byte >43,>C0,>3C,>03,>C4
       byte >30,>0F,>00,>F0,>0C
       byte >2C,>3F,>C3,>FC,>34
       byte >23,>7F,>E7,>FE,>C4
       byte >30,>7F,>E7,>FE,>0C
       byte >2C,>BF,>DB,>FC,>34
       byte >13,>8F,>00,>F1,>C8
       byte >10,>C0,>3C,>03,>08
       byte >0C,>B0,>FF,>0D,>30
       byte >03,>8D,>FF,>B1,>C0
       byte >00,>C1,>FF,>83,>00
       byte >00,>D2,>FF,>4B,>00
       byte >00,>4E,>3C,>72,>00
       byte >00,>43,>00,>C2,>00
       byte >00,>32,>C3,>4C,>00
       byte >00,>0E,>3C,>70,>00
       byte >00,>03,>00,>C0,>00
       byte >00,>02,>C3,>40,>00
       byte >00,>01,>3C,>80,>00
       byte >00,>01,>00,>80,>00
       byte >00,>00,>C3,>00,>00
       byte >00,>00,>3C,>00,>00
a_barrel_stack:                        ; >d4ef
       byte >05,>04
       byte >43,>43,>43,>43,>43
       byte >43,>43,>43,>43,>43
       byte >43,>43,>43,>43,>43
       byte >43,>43,>43,>43,>43

* instruction moved from printer buffer (5B80) in original code
jp_hl:                                 ; >d505
       nop                             ; NOP               ; 

       ;                               ;                   

* Note: data below must be aligned to 16-byte boundary

* Data block at ea90
player:                                ; >ea90
       byte >00

* Data block at ea91
player_room:                           ; >ea91
       byte >00

* Data block at ea92
player_contact:                        ; >ea92
       byte >00

* Data block at ea93
player_x:                              ; >ea93
       byte >00

* Data block at ea94
player_y:                              ; >ea94
       byte >00

* Data block at ea95
player_attr:                           ; >ea95
       byte >00

* Data block at ea96
player_steps_x:                        ; >ea96
       byte >00

* Data block at ea97
player_steps_y:                        ; >ea97
       byte >00

* Data block at ea98
weapon:                                ; >ea98
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eaa0
sound:                                 ; >eaa0
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eaa8
acg_key_1:                             ; >eaa8
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eab0
acg_key_2:                             ; >eab0
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eab8
acg_key_3:                             ; >eab8
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eac0
green_key:                             ; >eac0
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eac8
red_key:                               ; >eac8
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at ead0
cyan_key:                              ; >ead0
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at ead8
yellow_key:                            ; >ead8
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eae0
leaf:                                  ; >eae0
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eae8
tombstone1:                            ; >eae8
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eaf0
tombstone2:                            ; >eaf0
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eaf8
tombstone3:                            ; >eaf8
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eb00
tombstone4:                            ; >eb00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eb08
crucafix:                              ; >eb08
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eb10
spanner:                               ; >eb10
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eb18
wine:                                  ; >eb18
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eb20
coin:                                  ; >eb20
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eb28
wing:                                  ; >eb28
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eb30
whip:                                  ; >eb30
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eb38
frogsleg:                              ; >eb38
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eb40
jewel:                                 ; >eb40
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eb48
moneybag:                              ; >eb48
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eb50
skull:                                 ; >eb50
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eb58
food_items:                            ; >eb58
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at edd8
food_end:                              ; >edd8
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at ee58
some_room:                             ; >ee58
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at ee60
creature1:                             ; >ee60
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at ee70
creature2:                             ; >ee70
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at ee80
creature3:                             ; >ee80
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at ee90
mummy:                                 ; >ee90
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eea0
dracula:                               ; >eea0
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eeb0
devil:                                 ; >eeb0
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eec0
frankenstein:                          ; >eec0
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eed0
hunchback:                             ; >eed0
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at eee0
linked_items:                          ; >eee0
       byte >00,>00,>00,>00,>00,>00,>00,>00
_eee8:                                 ; >eee8
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>DB,>02,>4D,>00
       byte >38,>00,>00,>00,>E2,>5A,>00,>38
       byte >F3,>0D,>CE,>0B,>E3,>50,>CE,>0B
       byte >E4,>50,>1D,>17,>DC,>0A,>CE,>0B
       byte >E7,>50,>1A,>17,>DC,>0A,>D7,>18
       byte >38,>00,>38,>00,>0D,>19,>DB,>02
       byte >DB,>02,>4D,>00,>DE,>53,>22,>00
       byte >DD,>53,>12,>02,>5C,>0E,>C0,>57
       byte >71,>0E,>F3,>0D,>21,>17,>C6,>1E
       byte >FE,>5F,>76,>1B,>03,>13,>00,>3E
       byte >00,>3C,>42,>42,>7E,>42,>42,>00
       byte >00,>7C,>42,>7C,>42,>42,>7C,>00
       byte >00,>3C,>42,>40,>40,>42,>3C,>00
       byte >00,>78,>44,>42,>42,>44,>78,>00
       byte >00,>7E,>40,>7C,>40,>40,>7E,>00
       byte >00,>7E,>40,>7C,>40,>40,>40,>00
       byte >00,>3C,>42,>40,>4E,>42,>3C,>00
       byte >00,>42,>42,>7E,>42,>42,>42,>00
       byte >00,>3E,>08,>08,>08,>08,>3E,>00
       byte >00,>02,>02,>02,>42,>42,>3C,>00
       byte >00,>44,>48,>70,>48,>44,>42,>00
       byte >00,>40,>40,>40,>40,>40,>7E,>00
       byte >00,>42,>66,>5A,>42,>42,>42,>00
       byte >00,>42,>62,>52,>4A,>46,>42,>00
       byte >00,>3C,>42,>42,>42,>42,>3C,>00
       byte >00,>7C,>42,>42,>7C,>40,>40,>00
       byte >00,>3C,>42,>42,>52,>4A,>3C,>00
       byte >00,>7C,>42,>42,>7C,>44,>42,>00
       byte >00,>3C,>40,>3C,>02,>42,>3C,>00
       byte >00,>FE,>10,>10,>10,>10,>10,>00
       byte >00,>42,>42,>42,>42,>42,>3C,>00
