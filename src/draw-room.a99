*********************************************************************
*
* This entry point is used by the routine at #R$7dc3.
*
draw_room_decor:                             ; >7e23
       .proc
       seto @room_data_rom_bank
       movb @player_room,a             ; LD A,($EA91)      ;
       movb a,@l                       ; LD L,A            ;
       sb   h,h                        ; LD H,$00          ;
       a    hl,hl                      ; ADD HL,HL         ; * 2 (bytes per entry)
       li   bc,room_table              ; LD BC,$757D       ;
       a    bc,hl                      ; ADD HL,BC         ;
;      movb *hl,a                      ; LD A,(HL)         ; room data LSB
;      inc  hl                         ; INC HL            ;
;      movb *hl,h                      ; LD H,(HL)         ; room data MSB
;      movb a,@l                       ; LD L,A            ;
       mov  *hl,@room_ptr              ; LD ($5E1B),HL     ;
decor_loop:                            ; >7e35
       seto @room_data_rom_bank
       mov  @room_ptr,hl               ; LD HL,($5E1B)     ;
;      movb *hl,a                      ; LD A,(HL)         ; room item LSB
;      inc  hl                         ; INC HL            ;
;      inc  hl                         ; INC HL            ;
       mov  *hl+,r0                                        ; Get room item
       mov  hl,@room_ptr               ; LD ($5E1B),HL     ; Store updated pointer
;      dec  hl                         ; DEC HL            ;
;      movb *hl,h                      ; LD H,(HL)         ; room item MSB
;      movb a,@l                       ; LD L,A            ;
;      socb h,a                        ; OR H              ; end of list?
       mov  r0,hl                                          ; Room item
       jeq  draw_room_decor_1          ; JR NZ,$7E93       ; jump if the end
* This entry point is used by the routine at #R$7e13.
;loc_7e93:                              ; >7e93
       li   r0,decor_loop              ; LD BC,$7E35       ; Return address
       .push r0                        ; PUSH BC           ;
;      li   bc,room_table              ; LD BC,$757D       ;
;      ; AND A                         ; AND A             ;
;      s    bc,hl                      ; SBC HL,BC         ;
       ai   hl,-room_table                                 ; Use item's offset from room table (negative)
;      .push hl                        ; PUSH HL           ;
;      .pop ix                         ; POP IX            ;
       li   ix,linked_items_end                            ; to find the item in the linked_items_table
       a    hl,ix
       movb @player_room,a             ; LD A,($EA91)      ;
       cb   a,@>01(ix)                 ; CP (IX+$01)       ; in player room?
       jeq  loc_7ead                   ; JR Z,$7EAD        ; jump if so
;      li   bc,>0008                   ; LD BC,$0008       ;
;      a    bc,ix                      ; ADD IX,BC         ; If not in player room, adjust by 8
       ai   ix,8
loc_7ead:                              ; >7ead
       li   hl,handler_table2          ; LD HL,$802A       ;
       movb *ix,@c                     ; LD C,(IX+$00)     ;
       b    @branch_c_hl
draw_room_decor_1:
       .endproc
*// draw_room_decor

* Data block at 802a
handler_table2:                        ; >802a
       data h_creat_delay,h_door_exit,h_door_exit,h_big_door_exit      ; &00
       data h_creat_delay,h_creat_delay,h_creat_delay,h_creat_delay    ; &04
       data h_door_locked,h_door_locked,h_door_locked,h_door_locked    ; &08
       data h_cave_locked,h_cave_locked,h_cave_locked,h_cave_locked    ; &0c
       data h_clock,draw_room_item,draw_room_item,h_creat_delay        ; &10
       data h_creat_delay,draw_room_item,draw_room_item,h_bookcase     ; &14
       data h_trap_closed,h_trap_open,h_barrel,draw_room_item          ; &18
       data draw_room_item,draw_room_item,draw_room_item,h_creat_delay ; &1c
       data h_door_closed,h_door_open,h_door_closed,h_door_open        ; &20
       data h_acg_exit,draw_room_item,draw_room_item,draw_room_item    ; &24

*********************************************************************
*
* draw room item
*
* Used by the routines at #R$915f, #R$91bc, #R$91f2, #R$9244, #R$9252, #R$9421,
* #R$961b and #R$9731.
draw_room_item_call:                   ; >91fe
       .proc
draw_room_item:
*      Moved next lines to draw_bgrnd_attrs
;       movb @entity_x(ix),@e           ; LD E,(IX+$03)     ; xpos
;       movb @entity_y(ix),d            ; LD D,(IX+$04)     ; ypos
;       sb   one,d                      ; DEC D             ;
;       movb *ix,@c                     ; LD C,(IX+$00)     ; graphic
;       movb @entity_flags(ix),b        ; LD B,(IX+$05)     ; attr
       bl   @draw_bgrnd_attrs          ; CALL $9980        ; B=attr, C=graphic, E=xpos, D=ypos
       movb @game_flags,a              ; LD A,($5E14)      ; b0 set if room content drawn
       ; AND A                         ; AND A             ; room content drawn?
       jne  !                          ; RET NZ            ; return if so
       b    @draw_bgrnd_graphics_branch
!      .endproc                            ;

*********************************************************************
*
* draw lines that make up outer room frame
*
* Used by the routine at #R$9117.
draw_room_frame:                       ; >9bea
       .proc
       seto @room_data_rom_bank
       sb   a,a                        ; XOR A             ;
       movb a,@game_flags              ; LD ($5E14),A      ; b0 set if room content drawn
       movb @player_room,a             ; LD A,($EA91)      ;
       jmp  !
* This entry point is used by the routine at #R$9731.
draw_room_a:                           ; >9bf1
       .proc
!      li   bc,room_attrs              ; LD BC,$A854       ; room attr colour and style (0-B)
       movb a,@l                       ; LD L,A            ;
       sb   h,h                        ; LD H,$00          ;
       a    hl,hl                      ; ADD HL,HL         ; 2 bytes per entry
       a    bc,hl                      ; ADD HL,BC         ;
       movb *hl+,a                     ; LD A,(HL)         ; attr colour
;      inc  hl                         ; INC HL            ;
       movb a,@room_attr               ; LD ($5E1A),A      ;
       .exx                            ; EXX               ;
       li   hl,zx_attrs                ; LD HL,$5800       ;
       li   bc,>1818                   ; LD BC,$1818       ; 24x24 room area
       movb @room_attr,a               ; LD A,($5E1A)      ;
       bl   @fill_bc_hl_a              ; CALL $809A        ; fill C rows of B columns of value A at address HL
       .exx                            ; EXX               ;
       movb *hl,@l                     ; LD L,(HL)         ; style?
       sb   h,h                        ; LD H,$00          ;
       a    hl,hl                      ; ADD HL,HL         ; * 2
;      movb @l,@c                      ; LD C,L            ;
;      movb h,b                        ; LD B,H            ;
       mov  hl,bc
       a    hl,hl                      ; ADD HL,HL         ; * 4
       a    bc,hl                      ; ADD HL,BC         ; * 6
       li   bc,room_styles             ; LD BC,$A982       ;
       a    bc,hl                      ; ADD HL,BC         ;
;      movb *hl,a                      ; LD A,(HL)         ;
;      inc  hl                         ; INC HL            ;
;      movb a,@room_width              ; LD ($5E1D),A      ;
       movb *hl+,@room_width           ; LD A,(HL)         ;
;      movb *hl,a                      ; LD A,(HL)         ;
;      inc  hl                         ; INC HL            ;
;      movb a,@room_height             ; LD ($5E1E),A      ;
       movb *hl+,@room_height          ; LD A,(HL)         ;
;      movb *hl,@e                     ; LD E,(HL)         ; points LSB
;      inc  hl                         ; INC HL            ;
;      movb *hl,d                      ; LD D,(HL)         ; points MSB
;      inc  hl                         ; INC HL            ;
       mov  *hl+,de
;      movb *hl,a                      ; LD A,(HL)         ; lines LSB
;      inc  hl                         ; INC HL            ;
;      movb *hl,h                      ; LD H,(HL)         ; lines MSB
;      movb a,@l                       ; LD L,A            ;
       mov  *hl,hl                                         ; hl = lines
;      .push de                        ; PUSH DE           ;
;      .pop ix                         ; POP IX            ;
        mov de,ix                                          ; ix = points
       .push bc                        ; PUSH BC           ;
loc_9c2e:                              ; >9c2e
       .pop bc                         ; POP BC            ;
       clr  af
       movb *hl+,a                     ; LD A,(HL)         ; x of first point
;      inc  hl                         ; INC HL            ;
       cb   a,@b255                    ; CP $FF            ; end marker?
       jne  !                          ; RET Z             ; return if so
       .endproc                        ;
!
       sla  a,1                        ; SLA A             ; * 2 (bytes per point)
       movb a,@loc_9c3d+>0003          ; LD ($9C3F),A      ; offset of source x
       ab   one,a                      ; INC A             ;
       movb a,@loc_9c40+>0003          ; LD ($9C42),A      ; offset of source y
loc_9c3d:                              ; >9c3d
       movb @0(ix),@c                  ; LD C,(IX+$00)     ; source x
loc_9c40:                              ; >9c40
       movb @0(ix),b                   ; LD B,(IX+$00)     ; source y
loc_9c43:                              ; >9c43
       .push bc                        ; PUSH BC           ;
       movb *hl+,a                     ; LD A,(HL)         ; next point x
;      inc  hl                         ; INC HL            ;
       cb   a,@b255                    ; CP $FF            ; end marker?
       jeq  loc_9c2e                   ; JR Z,$9C2E        ; jump if so (next source point)
       sla  a,1                        ; SLA A             ; * 2 (bytes per point)
       movb a,@loc_9c53+>0003          ; LD ($9C55),A      ; offset of target x
       ab   one,a                      ; INC A             ;
       movb a,@loc_9c56+>0003          ; LD ($9C58),A      ; offset of target y
loc_9c53:                              ; >9c53
       movb @0(ix),@e                  ; LD E,(IX+$00)     ; target x
loc_9c56:                              ; >9c56
       movb @0(ix),d                   ; LD D,(IX+$00)     ; target y
       .push hl                        ; PUSH HL           ;
       bl   @draw_line_bc_de           ; CALL $9C79        ; draw line from (B,C) to (D,E)
       .pop hl                         ; POP HL            ;
       .pop bc                         ; POP BC            ;
       jmp  loc_9c43                   ; JR $9C43          ; next target point
*// draw_room_frame

*********************************************************************
*
* draw line from (C, B) = (x1, y1) to (E, D) = (x2, y2)
*
* Used by the routine at #R$9bea.
*
draw_line_bc_de:                       ; >9c79
       .proc
;      movb b,h                        ; LD H,B            ; move start point to HL
;      movb @c,@l                      ; LD L,C            ;
       mov  bc,hl                                          ; (L, H) = (x1, y1)
       sb   @c,@c                      ; LD C,$00          ; clear flags
       movb h,a                        ; LD A,H            ; y1
       cb   d,a                                            ; y2 <= y1: drawing upwards?
       jle  !                          ; JR NC,$9C85       ; jump if so
       socb @bits+0,@c                 ; SET 0,C           ; flag drawing down
       sb   d,a                        ; SUB D             ; y1 - y2
       neg  a                          ; NEG               ; abs(y1 - y2)
       jmp  !!
!:
       sb   d,a                        ; SUB D             ; y1 - y2 (positive)
!:
       movb a,b                        ; LD B,A            ; b = abs(y1 - y2) vertical size
       movb @l,a                       ; LD A,L            ; x1
       cb   @e,a                       ; SUB E             ; x2 <= x1: drawing left?
       jle  !                          ; JR NC,$9C8E       ; jump if so
       socb @bits+1,@c                 ; SET 1,C           ; flag drawing right
       sb   @e,a                       ; SUB E             ; x1 - x2
       neg  a                          ; NEG               ; abs(x1 - x2)
       jmp  !!
!:
       sb   @e,a                       ; SUB E             ; x1 - x2 (positive)
!:                                                         ; a = abs(x1 - x2) horizontal size
;     .ex_af_af_                       ; EX AF,AF'         ;
       movb @c,a_                      ; LD A,C            ; a_ = line_flags
       movb a_,@line_flags             ; LD ($5E24),A      ;
;      .ex_af_af_                      ; EX AF,AF'         ;
       cb   a,b                        ; CP B              ; abs(x1 - x2) < abs(y1 - y2) drawing less horiz than vert?
       jl   line_steep                 ; JP C,$9CD6        ; jump if so -> steep
*      Flat
       movb a,@line_counter            ; LD ($5E23),A      ; horiz counter = abs(x1 - x2)
       .push de                        ; PUSH DE           ; Push (y2, x2)
       .push hl                        ; PUSH HL           ; Push (y1, x1)
       movb a,@e                       ; LD E,A            ; horiz line size = abs(x1 - x2)
       sb   d,d                        ; LD D,$00          ; d = 0
       movb d,@l                       ; LD L,D            ; l = 0
       movb b,h                        ; LD H,B            ; h = abs(y1 - y2) vert line size
       bl   @line_slope                ; CALL $A379        ; determine Bresenham line slope step: hl = hl / de, de = hl % de
       movb @line_flags,a              ; LD A,($5E24)      ;
       movb a,r0                       ; BIT 0,A           ; Are we drawing down?
       andi r0,>0100                   ;
       jne  !                          ; JR NZ,$9CAF       ; Jump if so
       neg  hl                         ; CALL $A39E        ; HL = -HL
!:                                     ; >9caf
       movb @line_flags,a              ; LD A,($5E24)      ;
       movb one,@c                     ; LD C,$01          ; x step = 1
       movb a,r0                       ; BIT 1,A           ; drawing right?
       andi r0,>0200                   ;
       jne  !                          ; JR NZ,$9CBA       ; jump if so
       movb @b255,@c                   ; LD C,$FF          ; x step = -1
!:                                     ; >9cba
       .ex_de_hl                       ; EX DE,HL          ;
       .pop hl                         ; POP HL            ;
       movb @line_counter,a            ; LD A,($5E23)      ;
       ab   one,a                      ; INC A             ;
       movb a,b                        ; LD B,A            ; b = line_counter + 1
       movb @e,a                       ; LD A,E            ;
;      .ex_af_af_                      ; EX AF,AF'         ;
flat_loop:                             ; >9cc3
       .push bc                        ; PUSH BC           ;
       bl   @plot_l_h                  ; CALL $9C61        ; plot pixel at L,H
       movb @l,a_                      ; LD A,L            ; a_
;      .ex_af_af_                      ; EX AF,AF'         ;
       movb a,@l                       ; LD L,A            ;
       a    de,hl                      ; ADD HL,DE         ; step partial y
       movb @l,a                       ; LD A,L            ;
;      .ex_af_af_                      ; EX AF,AF'         ;
       .pop bc                         ; POP BC            ;
       ab   @c,a_                      ; ADD A,C           ; step x
       movb a_,@l                      ; LD L,A            ;
       sb   one,b                      ; DJNZ $9CC3        ;
       jne  flat_loop                   ;
       .pop hl                         ; POP HL            ;
       jmp  plot_l_h_branch            ; JP $9C61          ; plot final pixel at L,H
*      Steep
line_steep:                            ; >9cd6
;      .ex_af_af_                      ; EX AF,AF'         ;
       movb b,a_                       ; LD A,B            ; a_= abs(y1 - y2)
       movb a_,@line_counter           ; LD ($5E23),A      ; vert counter = abs(y1 - y2)
;      .ex_af_af_                      ; EX AF,AF'         ;
       .push de                        ; PUSH DE           ;
       .push hl                        ; PUSH HL           ;
       movb b,@e                       ; LD E,B            ; e = abs(y1 - y2)
       sb   d,d                        ; LD D,$00          ; d = 0
       movb d,@l                       ; LD L,D            ; l = 0
       movb a,h                        ; LD H,A            ; h = abs(x1 - x2)
       bl   @line_slope                ; CALL $A379        ; determine Bresenham line slope step: hl = hl / de, de = hl % de
       movb @line_flags,a              ; LD A,($5E24)      ;
       movb a,r0                       ; BIT 1,A           ; drawing right?
       andi r0,>0200                   ;
       jne  !                          ; JR NZ,$9CF0       ; jump if so
       neg  hl                         ; CALL $A39E        ; HL = -HL
!:                                     ; >9cf0
       movb one,@c                     ; LD C,$01          ; y step = 1
       movb @line_flags,a              ; LD A,($5E24)      ;
       movb a,r0                       ; BIT 0,A           ; drawing down?
       andi r0,>0100                   ;
       jne  !                          ; JR NZ,$9CFB       ; jump if so
       movb @b255,@c                   ; LD C,$FF          ; y step = -1
!:                                     ; >9cfb
       .ex_de_hl                       ; EX DE,HL          ;
       .pop hl                         ; POP HL            ;
       movb @line_counter,a            ; LD A,($5E23)      ;
       ab   one,a                      ; INC A             ;
       movb a,b                        ; LD B,A            ; b = line_counter + 1
       movb @e,a                       ; LD A,E            ;
;      .ex_af_af_                      ; EX AF,AF'         ;
steep_loop:                            ; >9d04
       .push bc                        ; PUSH BC           ;
       bl   @plot_l_h                  ; CALL $9C61        ; plot pixel at L,H
       movb h,a_                       ; LD A,H            ; a_
;      .ex_af_af_                      ; EX AF,AF'         ;
       movb @l,h                       ; LD H,L            ;
       movb a,@l                       ; LD L,A            ;
       a    de,hl                      ; ADD HL,DE         ; step partial x
       movb @l,a                       ; LD A,L            ;
       movb h,@l                       ; LD L,H            ;
;      .ex_af_af_                      ; EX AF,AF'         ;
       .pop bc                         ; POP BC            ;
       ab   @c,a_                      ; ADD A,C           ; step y
       movb a_,h                       ; LD H,A            ;
       sb   one,b                      ; DJNZ $9D04        ;
       jne  steep_loop                 ;
       .pop hl                         ; POP HL            ;
       jmp  plot_l_h_branch            ; JP $9C61          ; plot final pixel at L,H
*// draw_line_bc_de

*********************************************************************
*
* determine Bresenham line slope step
*
* Used by the routine at #R$9c79.
*
* h = abs(y1 - y2), l = 0
* d = 0, e = abs(x1 - x2)
*
* Result: hl = hl / de, de = hl % de
*
* hl   de      hl   de
* 0000 00b7 -> 0000 0000
* 1b00 001b -> 00ff 001b
* 0000 0081 -> 0000 0000
* 1400 001d -> 00b0 0010
*
line_slope:                            ; >a379
       clr  r0
       mov  hl,r1
       div  de,r0
       mov  r0,hl
       mov  r1,de
       rt
;
;       .proc
;;      movb h,@l                       ; LD L,H            ;
;;      sb   h,h                        ; LD H,$00          ;
;       swpb hl                                             ; hl = abs(y1 - y2)
;;      .exx                            ; EXX               ;
;       li   hl_,>0000                  ; LD HL,$0000       ; X Quotient
;       li   bc_,8                      ; LD B,$08          ; X
;line_slope_1:                          ; >a382
;;      .exx                            ; EXX               ;
;       ; SLA L                         ; SLA L             ;
;       sla  hl,1                       ; RL H              ; hl *= 2
;;      .push hl                        ; PUSH HL           ;
;       ; AND A                         ; AND A             ;
;       c    de,hl
;       jh   line_slope_3
;       s    de,hl                      ; SBC HL,DE         ; hl -= de
;;      joc  line_slope_3               ; JR C,$A399        ; Jump if < 0
;;      .pop af                         ; POP AF            ; Drop stack value
;;      .exx                            ; EXX               ;
;       a    hl_,hl_                    ; ADD HL,HL         ; X hl_ *= 2
;       inc  hl_                        ; INC HL            ; X hl_ += 1
;line_slope_2:                          ; >a391
;       dec  bc_                        ; DJNZ $A382        ; X
;       jne  line_slope_1               ;                   ; X
;;      .push hl_                       ; PUSH HL           ; X
;;      .exx                            ; EXX               ;
;;      movb @l,@e                      ; LD E,L            ; Remainder
;;      movb h,d                        ; LD D,H            ;
;       mov  hl,de
;;      .pop hl                         ; POP HL            ;
;       mov  hl_,hl                                         ; Quotient
;       .endproc                        ; RET               ;
;line_slope_3:                          ; >a399
;;      .pop hl                         ; POP HL            ; Restore hl value before subtraction
;;      .exx                            ; EXX               ;
;       a    hl_,hl_                    ; ADD HL,HL         ; X hl_ *= 2
;       jmp  line_slope_2               ; JR $A391          ; X
*// line_slope

*********************************************************************
*
* plot pixel at L,H
*
* Used by the routine at #R$9c79.
plot_l_h:                              ; >9c61
       .proc
plot_l_h_branch:
;       movb @l,a                       ; LD A,L            ;
;       andi a,>0700                    ; AND $07           ;
;       ab   one,a                      ; INC A             ;
;       movb a,b                        ; LD B,A            ;
;       sb   a,a                        ; XOR A             ;
;       ; SCF                           ; SCF               ;
;loc_9c68:                              ; >9c68
;       srl  a,1                        ; RRA               ;
;       sb   one,b                      ; DJNZ $9C68        ;
;       jne  loc_9c68                   ;
;       .push hl                        ; PUSH HL           ;
;       .push af                        ; PUSH AF           ;
;       .ex_af_af_                      ; EX AF,AF'         ;
;       .push af                        ; PUSH AF           ;
;       bl   @xy_to_display             ; CALL $9BA2        ; convert coords in HL to display address in HL
;       .pop af                         ; POP AF            ;
;       .ex_af_af_                      ; EX AF,AF'         ;
;       .pop af                         ; POP AF            ;
;       socb *hl,a                      ; OR (HL)           ; merge pixel
;       movb a,*hl                      ; LD (HL),A         ; write to display
;       .pop hl                         ; POP HL            ;
       li   r2,>8000
       mov  hl,r0
       andi r0,7
       jeq  !
       srl  r2,0
!      .push hl
       bl   @xy_to_display
       socb r2,*hl
       .pop hl
       .endproc                        ; RET               ;
*// plot_l_h
