*********************************************************************
*
* return address of sprite @saved_graphic in DE
*
* Used by the routine at #R$9f80.
*
get_saved_sprite_addr:                 ; >9e86
       movb @saved_graphic,a           ; LD A,($5E15)      ;
*
* return address of sprite A in DE
*
* Used by the routines at #R$8cb7, #R$8d45, #R$8e26 and #R$9e96.
*
get_sprite_addr:                       ; >9e89
       seto @sprite_graphics_rom_bank
       sb   one,a                      ; DEC A             ; one-based
       sb   h,h
       movb a,@l                       ; LD L,A            ;
;      sb   h,h                        ; LD H,$00          ;
;      a    hl,hl                      ; ADD HL,HL         ;
;      li   bc,sprite_table            ; LD BC,$A4BE       ;
;      a    bc,hl                      ; ADD HL,BC         ;
;      movb *hl,@e                     ; LD E,(HL)         ;
;      inc  hl                         ; INC HL            ;
;      movb *hl,d                      ; LD D,(HL)         ;
       sla  hl,1
       mov  @sprite_table(hl),de
       rt                              ; RET               ;
*
* return addr of entity sprite addr in DE
*
* Used by the routine at #R$9f9f.
get_sprite_addr_ix:                    ; >9e96
       movb *ix,a                      ; LD A,(IX+$00)     ;
       jmp  get_sprite_addr            ; JR $9E89          ; return address of sprite A in DE
*// get_sprite_addr

*********************************************************************
*
* This entry point is used by the routines at #R$9f4a, #R$9f56 and #R$9fca.
* Branch target
*
* c: lines to draw ?
* de: sprite data address
* hl: screen address
*
draw_sprite:                           ; >9e9b
       movb @c,a                       ; LD A,C            ; EXX
       ; AND A                         ; AND A             ; EXX
       jeq  _draw_sprite_3             ; JR Z,$9EAF        ; EXX Jump if C_ == 0
       sb   one,@c                     ; DEC C             ; EXX C_--
       bl   @undraw_sprite_line       ; CALL $9EDC        ; EXX
       .exx                            ; EXX               ;
       movb @c,a                       ; LD A,C            ;
       ; AND A                         ; AND A             ;
       jeq  _draw_sprite_2             ; JR Z,$9EAC        ; Jump if C == 0
_draw_sprite_1:                        ; >9ea8
       sb   one,@c                     ; DEC C             ; C--
       bl   @draw_sprite_line         ; CALL $9F21        ;
_draw_sprite_2:                        ; >9eac
       .exx                            ; EXX               ;
       jmp  draw_sprite                ; JR $9E9B          ; EXX
_draw_sprite_3:                        ; >9eaf             ; If C_ == 0
       .exx                            ; EXX               ;
       movb @c,a                       ; LD A,C            ;
       ; AND A                         ; AND A             ;
       jne  _draw_sprite_1             ; JR NZ,$9EA8       ; Jump if C != 0
* This entry point is used by the routine at #R$9fca.
entry_from_redraw_entity_2:            ; >9eb4
       .exx                            ; EXX               ;
* This entry point is used by the routine at #R$9fca.
entry_from_draw_entity_1:              ; >9eb5             ; EXX
       movb @undraw_height,a           ; LD A,($5E18)      ; EXX
       movb a,@c                       ; LD C,A            ; EXX C_=undraw_height
       movb @draw_height,a             ; LD A,($5E19)      ; EXX
       socb @c,a                       ; OR C              ; EXX both heights zero?
       jne  !                          ; RET Z             ; EXX return if so
       .endproc                        ;                   ; EXX
!
       sb   a,a                        ; XOR A             ; EXX
       movb a,@undraw_height           ; LD ($5E18),A      ; EXX undraw_height=0
       .exx                            ; EXX               ;
       movb @draw_height,a             ; LD A,($5E19)      ;
       movb a,@c                       ; LD C,A            ; C=draw_height
       sb   a,a                        ; XOR A             ;
*
* This entry point is used by the routine at #R$9fca.
entry_from_redraw_entity_3:            ; >9ec8
       movb a,@draw_height             ; LD ($5E19),A      ; draw_height = 0 or provided by caller
       .exx                            ; EXX               ;
       jmp  draw_sprite                ; JR $9E9B          ; EXX
*// draw_sprite

*********************************************************************
*
* Routine at 9ece
*
* hl=data bytes, de=data addr, screen address on stack
*
undraw_unshifted:                      ; >9ece
       .ex_de_hl                       ; EX DE,HL          ; hl=data addr, de=data bytes
       .ex_sp_hl                       ; EX (SP),HL        ; hl=screen addr, stack=data addr
*      First byte
       movb d,a                        ; LD A,D            ;
       ; XOR (HL)                      ; XOR (HL)          ;
       movb *hl,r0
       xor  r0,a
       movb a,*hl                      ; LD (HL),A         ;
*      Second byte
       ab   one,@l                     ; INC L             ;
       movb @e,a                       ; LD A,E            ;
       ; XOR (HL)                      ; XOR (HL)          ;
       movb *hl,r0
       xor  r0,a
       movb a,*hl                      ; LD (HL),A         ;
*      Next line
       .pop de                         ; POP DE            ;
       sb   one,@l                     ; DEC L             ;
       b    @pixel_line_up_branch      ; JP $9F03          ; move up 1 display line in HL

*********************************************************************
*
* Routine at 9edc
*
* Used by the routine at #R$9e96.
*
* de: sprite data address
* hl: screen address
*
undraw_sprite_line:                    ; >9edc
       .proc
       .ex_de_hl                       ; EX DE,HL          ; Now de=screen addr and hl=data addr
       .push de                        ; PUSH DE           ; Push screen address
       movb *hl+,d                     ; LD D,(HL)        ; Get data byte
;      inc  hl                         ; INC HL            ;
       movb *hl+,@e                    ; LD E,(HL)        ; Get data byte
;      inc  hl                         ; INC HL            ;
       .ex_de_hl                       ; EX DE,HL          ; Now hl=data bytes and de=data addr
       sb   a,a                        ; XOR A             ;
       movb h,@f                       ; Added, for shifting into a
jr_undraw:                             ; >9ee4
       nop                             ; JR $9EE4          ; Self-modified, can jump to undraw_unshifted
shift_undraw:                                              ; or into the instructions below
       sla  hl,1                       ; ADD HL,HL         ;
       sla  af,1                       ; ADC A,A           ;
;      sla  hl,1                       ; ADD HL,HL         ;
;      sla  af,1                       ; ADC A,A           ;
;      sla  hl,1                       ; ADD HL,HL         ;
;      sla  af,1                       ; ADC A,A           ;
;      sla  hl,1                       ; ADD HL,HL         ;
;      sla  af,1                       ; ADC A,A           ;
;      sla  hl,1                       ; ADD HL,HL         ;
;      sla  af,1                       ; ADC A,A           ;
;      sla  hl,1                       ; ADD HL,HL         ;
;      sla  af,1                       ; ADC A,A           ;
;      sla  hl,1                       ; ADD HL,HL         ;
;      sla  af,1                       ; ADC A,A           ;
       .ex_de_hl                       ; EX DE,HL          ;
       .ex_sp_hl                       ; EX (SP),HL        ;
*      First byte
       ; XOR (HL)                      ; XOR (HL)          ;
       movb *hl,r0
       xor  r0,a
       movb a,*hl                      ; LD (HL),A         ;
       ab   one,@l                     ; INC L             ;
* This entry point is used by the routine at #R$9f21.
* Branch target
draw_2_bytes:                          ; >9ef9
*      Second byte
       movb d,a                        ; LD A,D            ;
       ; XOR (HL)                      ; XOR (HL)          ;
       movb *hl,r0
       xor  r0,a
       movb a,*hl                      ; LD (HL),A         ;
       ab   one,@l                     ; INC L             ;
*      Third byte
       movb @e,a                       ; LD A,E            ;
       ; XOR (HL)                      ; XOR (HL)          ;
       movb *hl,r0
       xor  r0,a
       movb a,*hl                      ; LD (HL),A         ;
*      Next line
       .pop de                         ; POP DE            ;
       sb   one,@l                     ; DEC L             ;
       sb   one,@l                     ; DEC L             ;
       b    @pixel_line_up_branch

*********************************************************************
* draw 2-byte unshifted graphic
*
* Used by the routine at #R$9f21.
*
* hl=data bytes, de=data addr, screen address on stack
*
draw_unshifted:                       ; >9f13
       .ex_de_hl                       ; EX DE,HL          ; hl=data addr, de=data bytes
       .ex_sp_hl                       ; EX (SP),HL        ; hl=screen addr, stack=data addr
*      First byte
       movb d,a                        ; LD A,D            ;
       ; XOR (HL)                      ; XOR (HL)          ;
       movb *hl,r0
       xor  r0,a
       movb a,*hl                      ; LD (HL),A         ;
*      Second byte
       ab   one,@l                     ; INC L             ;
       movb @e,a                       ; LD A,E            ;
       ; XOR (HL)                      ; XOR (HL)          ;
       movb *hl,r0
       xor  r0,a
       movb a,*hl                      ; LD (HL),A         ;
*      Next line
       .pop de                         ; POP DE            ; de=data addr
       sb   one,@l                     ; DEC L             ;
       b    @pixel_line_up_branch      ; JP $9F03        ; move up 1 display line in HL

*********************************************************************
*
* Routine at 9f21
*
* Used by the routine at #R$9e96.
*
* de: sprite data address
* hl: screen address
*
* This is identical to undraw_sprite_line, except for self-modified part
*
draw_sprite_line:                     ; >9f21
       .proc
       .ex_de_hl                       ; EX DE,HL          ; Now de=screen addr and hl=data addr
       .push de                        ; PUSH DE           ; Push screen address
       movb *hl+,d                     ; LD D,(HL)         ; Get data byte
;      inc  hl                         ; INC HL            ;
       movb *hl+,@e                    ; LD E,(HL)         ; Get data byte
;      inc  hl                         ; INC HL            ;
       .ex_de_hl                       ; EX DE,HL          ; Now hl=data bytes and de=data addr
       sb   a,a                        ; XOR A             ;
       movb h,@f                       ; Added, for shifting into a
jr_draw:                               ; >9f29
       nop                             ; JR $9F13          ; Self-modified, can jump to draw_unshifted
shift_draw:                                                ; or into the instructions below
       sla  hl,1                       ; ADD HL,HL         ;
       sla  af,1                       ; ADC A,A           ;
;      sla  hl,1                       ; ADD HL,HL         ;
;      sla  af,1                       ; ADC A,A           ;
;      sla  hl,1                       ; ADD HL,HL         ;
;      sla  af,1                       ; ADC A,A           ;
;      sla  hl,1                       ; ADD HL,HL         ;
;      sla  af,1                       ; ADC A,A           ;
;      sla  hl,1                       ; ADD HL,HL         ;
;      sla  af,1                       ; ADC A,A           ;
;      sla  hl,1                       ; ADD HL,HL         ;
;      sla  af,1                       ; ADC A,A           ;
;      sla  hl,1                       ; ADD HL,HL         ;
;      sla  af,1                       ; ADC A,A           ;
       .ex_de_hl                       ; EX DE,HL          ;
       .ex_sp_hl                       ; EX (SP),HL        ;
*      First byte
       ; XOR (HL)                      ; XOR (HL)          ;
       movb *hl,r0
       xor  r0,a
       movb a,*hl                      ; LD (HL),A         ; first byte
       ab   one,@l                     ; INC L             ;
*      Second and third bytes
       jmp  draw_2_bytes               ; JR $9EF9          ;

*********************************************************************
*
* Routine at 9f4a
*
* Draw entity graphics (no attrs)
*
* Used by the routines at #R$814b, #R$83ea, #R$871a, #R$8862, #R$8aff, #R$8cb7,
* #R$9291, #R$9358, #R$9443, #R$95cc, #R$a14d, #R$a2ce and #R$a311.
*
* ix: entity
*
draw_entity:                           ; >9f4a
       .ifeq hw_sprites,1
       .proc
       mov  @sprite_attr_table_addr,r0
       jeq  draw_entity_as_bgrnd_branch
       bl   @ti_draw_sprite
       .endproc
       .else
       equ  $
       .endif
draw_entity_as_bgrnd:
       .proc
draw_entity_as_bgrnd_branch:
      bl   @prepare_draw             ; CALL $9F9F        ; prepare for drawing
* This entry point is used by the routine at #R$9f40.
draw_entity_de:                        ; >9f4d
       .exx                            ; EXX               ;
       sb   a,a                        ; XOR A             ; EXX
       movb a,@undraw_height           ; LD ($5E18),A      ; EXX undraw_height = 0
       movb a,@c                       ; LD C,A            ; EXX C_ = 0
       b    @draw_sprite               ; JP $9E9B          ; EXX
*      Expecting draw_sprite to ret
*// draw_entity

*********************************************************************
*
* Routine at 9f56
*
* Undraw entity graphics (no attrs)
*
* Used by the routines at #R$81f0, #R$871a, #R$8c63, #R$9326 and #R$98c8.
*
* Position/graphics provided in advance by calling save_entity.
*
undraw_entity:                         ; >9f56
       .proc
       .ifeq hw_sprites,1
       movb  @bytes+2,a                ; Just set up the values needed for attribute drawing (for now)
       movb  @saved_x,r0
       andi r0,>0700
       jeq  !
       ab   one,a
!      movb a,@width_bytes             ; For attribute drawing
       bl   @get_saved_sprite_addr     ; CALL $9E86        ; return address of saved_graphic in DE
       movb *de,@height_lines          ; For attribute drawing
       .endproc
       .else
       jmp  undraw_entity_as_bgrnd_branch
       .endif
undraw_entity_as_bgrnd:
       .proc
undraw_entity_as_bgrnd_branch:
       bl   @prepare_undraw            ; CALL $9F80        ; prepare for undraw in normal regs. Will set undraw_height.
* This entry point is used by the routine at #R$9f45.
loc_9f59:                              ; >9f59             ; Was used by undraw_entity_de
       .exx                            ; EXX               ;
       sb   a,a                        ; XOR A             ; EXX
       movb a,@c                       ; LD C,A            ; EXX C_ = 0
       movb a,@draw_height             ; LD ($5E19),A      ; EXX draw_height = 0
       movb @undraw_height,a           ; LD A,($5E18)      ; EXX The height of the graphics
       movb a,@height_lines            ; LD ($5E11),A      ; EXX height_lines = undraw_height. For attribute drawing.
       movb @bytes+>02,a               ; LD A,$02          ; EXX 2 bytes wide
       movb @l,r0                      ; LD A,L            ; EXX L_ expected low byte of screen address
                                                           ; This was not set up by prepare_undraw!
       andi r0,>0700                   ; AND $07           ; EXX aligned to cell boundary?
       jeq  loc_9f6d                   ; JR Z,$9F6D        ; EXX jump if so
       ab   one,a                      ; INC A             ; EXX 3 bytes needed
loc_9f6d:                              ; >9f6d
       movb a,@width_bytes             ; LD ($5E10),A      ; EXX For attribute drawing
       .exx                            ; EXX               ;
       b    @draw_sprite               ; JP $9E9B          ; Called without EXX. How does this work when draw_height=0?
*      We will never get to this part of the code because draw_sprite will return to the caller.
       .push de                        ; PUSH DE           ; Now points to next sprite?
       bl   @prepare_undraw_de         ; CALL $9F83        ; Now what is all this?
       .exx                            ; EXX               ;
       .pop de                         ; POP DE            ; EXX
       bl   @prepare_draw_de           ; CALL $9FA2        ; EXX
       .exx                            ; EXX               ;
       jmp  redraw_entity_1            ; JR $9FD1          ; Redraw and undraw again?

*********************************************************************
*
* Routine at 9fca
*
* Undraw entity graphics in old position and redraw in new (no attrs)
*
* Used by the routine at #R$8e26.
*
* ix: entity. Old position/graphics provided in advance by calling save_entity.
*
redraw_entity:                         ; >9fca
       .proc
       .ifeq hw_sprites,1
       mov  @sprite_attr_table_addr,r0
       jeq  redraw_entity_branch
       bl   @ti_draw_sprite
       .endproc
       .endif
redraw_entity_branch:
       bl   @prepare_draw              ; CALL $9F9F        ; prepare for drawing (normal regs)
       .exx                            ; EXX               ;
       bl   @prepare_undraw            ; CALL $9F80        ; EXX prepare for undrawing (shadow regs)
* This entry point is used by the routine at #R$9f56 (undraw).
redraw_entity_1:                       ; >9fd1
       movb @saved_y,a                 ; LD A,($5E17)      ; EXX Old y
       sb   @entity_y(ix),a            ; SUB (IX+$04)      ; EXX Old y - new y
       jne  !                          ; JP Z,$9EB5        ; EXX
*      If y is the same
       b    @entry_from_draw_entity_1                      ; EXX Draw, C=0, C_=0
!
       jlt  redraw_entity_2            ; JP M,$9FEC        ; EXX
*      If new y is smaller, i.e. new is above
       movb a,@c                       ; LD C,A            ; EXX C_ = difference in y (positive)
       movb @undraw_height,a           ; LD A,($5E18)      ; EXX Old height
       cb   a,@c                       ; CP C              ; EXX Old height > diff y
       jhe  !                          ; JP C,$9EB5        ; EXX Jump if not fully separated
       b    @entry_from_draw_entity_1                      ; EXX Draw if old height < difference in y
!
       sb   @c,a                       ; SUB C             ; EXX Old height - difference in y
       movb a,@undraw_height           ; LD ($5E18),A      ; EXX
       b    @draw_sprite               ; JP $9E9B          ; EXX Draw
*      If new y is greater, i.e new is below
redraw_entity_2:                       ; >9fec
       .exx                            ; EXX               ;
       neg a                           ; NEG               ; Make difference in y positive
       movb a,@c                       ; LD C,A            ; C = difference in y
       movb @draw_height,a             ; LD A,($5E19)      ; New height
       cb   a,@c                       ; CP C              ; New height > diff y
       jhe  !                          ; JP C,$9EB4        ; Jump if not fully separated
       b    @entry_from_redraw_entity_2                    ; Draw if new height < difference in y
!
       sb   @c,a                       ; SUB C             ; New height - difference in y
       b    @entry_from_redraw_entity_3 ; JP $9EC8         ; Draw

*********************************************************************
*
* Prepare draw_sprite_line for entity in ix
*
* On return HL=screen address, DE=sprite data addr, C=0, @width_bytes contains 2 or 3, @draw_height and @height_lines contains the height.
*
* Used by the routines at #R$9f4a and #R$9fca.
*
prepare_draw:                          ; >9f9f
       .proc
       bl   @get_sprite_addr_ix        ; CALL $9E96        ; return addr of entity sprite addr in DE
       jmp  !
* This entry point is used by the routines at #R$9f40 and #R$9f56.
prepare_draw_de:                       ; >9fa2
       .proc
!      movb @entity_x(ix),@l           ; LD L,(IX+$03)     ; x
       movb @entity_y(ix),h            ; LD H,(IX+$04)     ; y
;      movb @l,a                       ; LD A,L            ; xpos (b2-0 determine shifting)
;      sb   one,a                      ; DEC A             ;
;      sla  a,1                        ; RLCA              ; * 2 (bytes per
;      andi a,>0e00                    ; AND $0E           ; relative jump offset)
;      movb a,r0
;      cb   a,@bytes+>0e               ; CP $0E            ; originally unshifted?
;      jne  prepare_draw_1             ; JR NZ,$9FB3       ; jump if not (use calculated offset)
;      li   a,(draw_unshifted-jr_draw-2)/2*256             ; LD A,$E8 jr offset back to 'draw_unshifted_2'
;prepare_draw_1:                        ; >9fb3
;      movb a,@jr_draw+1               ; LD ($9F2A),A      ; set jr offset for data shifting
;      movb @bytes+>02,a               ; LD A,$02          ; 2 bytes wide
;      cb   r0,@bytes+>0e
;      jeq  prepare_draw_2             ; JR Z,$9FBB        ;
;      ab   one,a                      ; INC A             ; any shift requires 3 bytes
       mov  hl,r0
       andi r0,7
       jne  !
       li   a,(draw_unshifted-jr_draw-2)/2*256
       movb a,@jr_draw+1
       movb @bytes+2,a
       jmp  prepare_draw_2
!      movb @zero,@jr_draw+1
       li   r1,8
       s    r0,r1
       sla  r1,4
       mov  @shift_draw,r0
       andi r0,>ff0f
       soc  r1,r0
       mov  r0,@shift_draw
       mov  @shift_draw+2,r0
       andi r0,>ff0f
       soc  r1,r0
       mov  r0,@shift_draw+2
       movb @bytes+3,a
prepare_draw_2:                        ; >9fbb
       movb a,@width_bytes             ; LD ($5E10),A      ; Save width for attribute drawing
       bl   @xy_to_display             ; CALL $9BA2        ; convert coords in HL to display address in HL
       movb *de+,a                     ; LD A,(DE)         ; Get height
       movb a,@draw_height             ; LD ($5E19),A      ; Save height
       movb a,@height_lines            ; LD ($5E11),A      ; Save height for attribute drawing
       sb   @c,@c                      ; LD C,$00          ; C = 0
;      inc  de                         ; INC DE            ; Advance to bitmap data
       .endproc                        ; RET               ;

*********************************************************************
*
* Prepare undraw_sprite_line for saved entity
*
* On return HL=screen address, DE=sprite data addr, C=0, @undraw_height contains the height.
*
* Used by the routines at #R$9f56 and #R$9fca.
*
prepare_undraw:                        ; >9f80
       .proc
       bl   @get_saved_sprite_addr     ; CALL $9E86        ; return address of saved_graphic in DE
       jmp  !
* This entry point is used by the routines at #R$9f45 and #R$9f56.
prepare_undraw_de:                     ; >9f83
       .proc
!
       movb @saved_x,@l                ; LD HL,($5E16)     ;
       movb @saved_y,h
;      movb @l,a                       ; LD A,L            ; xpos (b2-0 determine shifting)
;      sb   one,a                      ; DEC A             ;
;      sla  a,1                        ; RLCA              ; * 2 (bytes per
;      andi a,>0e00                    ; AND $0E           ; relative jump offset)
;      cb   a,@bytes+>0e               ; CP $0E            ; originally unshifted?
;      jne  prepare_undraw_1           ; JR NZ,$9F91       ; jump if not (use calculated offset)
;      li   a,(undraw_unshifted-jr_undraw-2)/2*256         ; LD A,$E8 jr offset back to 'draw_unshifted'
;      movb a,@jr_undraw+1             ; LD ($9EE5),A      ; set jr offset for data shifting
       mov  hl,r0
       andi r0,7
       jne  !
       li   a,(undraw_unshifted-jr_undraw-2)/2*256
       movb a,@jr_undraw+1
       jmp  prepare_undraw_1
!      movb @zero,@jr_undraw+1
       li   r1,8
       s    r0,r1
       sla  r1,4
       mov  @shift_undraw,r0
       andi r0,>ff0f
       soc  r1,r0
       mov  r0,@shift_undraw
       mov  @shift_undraw+2,r0
       andi r0,>ff0f
       soc  r1,r0
       mov  r0,@shift_undraw+2
prepare_undraw_1:                      ; >9f91
       bl   @xy_to_display             ; CALL $9BA2        ; convert coords in HL to display address in HL
       movb *de+,a                     ; LD A,(DE)         ; Get height
       movb a,@undraw_height           ; LD ($5E18),A      ; Save height
       sb   @c,@c                      ; LD C,$00          ; C = 0
;      inc  de                         ; INC DE            ; Advance to bitmap data
       .endproc                        ; RET               ;

*********************************************************************
*
* save entity position for undraw
*
* Used by the routines at #R$81db, #R$81f0, #R$82f1, #R$8301, #R$845f, #R$85f7,
* #R$862e, #R$8672, #R$871a, #R$8787, #R$87a6, #R$8862, #R$8906, #R$8988,
* #R$89ed, #R$8a2f, #R$8a80, #R$8aff, #R$8c63, #R$8d77, #R$92f5 and #R$988b.
*
save_entity:                           ; >9ffb
       movb @entity_x(ix),@saved_x     ; LD A,(IX+$03)     ;
;      movb a,@saved_x                 ; LD ($5E16),A      ;
       movb @entity_y(ix),@saved_y     ; LD A,(IX+$04)     ;
;      movb a,@saved_y                 ; LD ($5E17),A      ;
       movb *ix,@saved_graphic         ; LD A,(IX+$00)     ;
;      movb a,@saved_graphic           ; LD ($5E15),A      ;
       rt                              ; RET               ;

*********************************************************************
*
* Routine at a185
*
* Used by the routines at #R$a14d and #R$a2ce.
*
clear_sprite:                          ; >a185
       .proc
       movb @entity_x(ix),@l           ; LD L,(IX+$03)     ;
       movb @entity_y(ix),h            ; LD H,(IX+$04)     ;
       bl   @xy_to_display             ; CALL $9BA2        ; convert coords in HL to display address in HL
       movb @bytes+>14,b               ; LD B,$14          ; 20 pixels high
loc_a190:                              ; >a190
       sb   *hl,*hl                    ; LD (HL),$00       ; clear 2 bytes wide
       ab   one,@l                     ; INC L             ;
       sb   *hl,*hl                    ; LD (HL),$00       ;
       sb   one,@l                     ; DEC L             ;
       bl   @pixel_line_up             ; CALL $9F03        ; move up 1 display line in HL
       sb   one,b                      ; DJNZ $A190        ;
       jne  loc_a190                   ;
       .endproc                        ; RET               ;
