
* Loading screen
* 
* #UDGTABLE
* { #SCR(loading) | Atic Atac Loading Screen. }
* TABLE#
loading:                               ; 4000
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; {Pixels
       byte >2E,>00,>00,>00,>01,>7C,>05,>FF,>FF,>F9,>7F,>FF,>2F,>F0,>00,>00,>02,>F8,>00,>FF,>FF,>FF,>C0,>1F,>C0,>00,>2F,>FF,>DC,>00,>00,>74 ; 
_4040:
       byte >EE,>E0,>00,>00,>0B,>FF,>17,>5F,>FE,>5E,>5F,>F0,>BF,>FF,>F8,>00,>2F,>FF,>C3,>FE,>FF,>F7,>F1,>7F,>FE,>01,>7F,>C5,>F0,>3C,>07,>77 ; 
       byte >0E,>00,>00,>01,>7F,>2F,>C0,>17,>FF,>80,>5F,>F1,>7F,>00,>00,>00,>7F,>EB,>FE,>02,>FF,>F0,>0B,>F0,>3F,>C7,>FF,>C0,>00,>00,>00,>70 ; 
_4080:
       byte >E4,>E0,>00,>05,>FF,>FF,>FE,>17,>FF,>01,>7F,>F8,>BF,>80,>BE,>0B,>FF,>FF,>FF,>82,>FF,>F0,>BF,>FE,>FF,>E2,>FF,>FD,>FF,>00,>07,>27 ; 
       byte >03,>DC,>00,>5F,>60,>01,>7F,>02,>F8,>00,>00,>00,>06,>FF,>FF,>D7,>FF,>F0,>5F,>F2,>FF,>C0,>5E,>00,>0B,>FC,>2F,>FF,>80,>00,>3B,>C0 ; 
       byte >03,>DE,>C0,>00,>00,>EC,>17,>E0,>B0,>00,>10,>00,>00,>00,>00,>17,>F8,>00,>00,>2C,>5F,>00,>00,>F0,>00,>1C,>37,>00,>00,>03,>7B,>C0 ; 
       byte >00,>00,>3C,>1F,>FE,>7E,>00,>00,>00,>00,>3A,>00,>00,>00,>00,>BE,>00,>00,>00,>00,>00,>00,>3E,>C1,>10,>00,>7E,>7F,>F8,>3C,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >6E,>80,>00,>00,>02,>FC,>0B,>FF,>FF,>FD,>7F,>FE,>2F,>F8,>00,>00,>05,>FC,>00,>FF,>FF,>FF,>80,>2F,>C0,>00,>5F,>FF,>FE,>00,>01,>76 ; 
       byte >EE,>E0,>00,>00,>17,>FF,>96,>2F,>FE,>2C,>5F,>F1,>7F,>DF,>F0,>00,>2F,>FF,>E3,>BA,>FF,>F7,>F3,>FF,>FF,>01,>7F,>C2,>F0,>42,>07,>77 ; 
       byte >2E,>80,>00,>02,>FF,>2F,>E0,>17,>FF,>80,>5F,>F1,>7F,>80,>00,>00,>BF,>E5,>FF,>02,>FF,>F0,>17,>E3,>1F,>C2,>FF,>C0,>00,>00,>01,>74 ; 
       byte >EE,>E0,>00,>05,>FF,>FF,>FF,>17,>FF,>01,>7F,>FC,>5F,>C7,>BF,>15,>FF,>FF,>FF,>85,>FF,>F0,>EF,>FA,>FF,>F2,>FF,>FF,>FF,>00,>07,>77 ; 
       byte >01,>EE,>00,>5E,>40,>01,>7F,>02,>F8,>00,>00,>00,>01,>7F,>FD,>D7,>FF,>E0,>5F,>FA,>FF,>C0,>5C,>00,>0B,>FC,>1F,>0F,>80,>00,>77,>80 ; 
       byte >01,>DF,>40,>00,>02,>EE,>0B,>E0,>B0,>00,>00,>00,>00,>00,>00,>7F,>F8,>00,>00,>16,>5E,>00,>07,>F8,>00,>00,>77,>40,>00,>02,>FB,>80 ; 
       byte >00,>00,>58,>3F,>FD,>FC,>00,>00,>00,>05,>5D,>40,>00,>00,>00,>BC,>00,>00,>00,>00,>00,>00,>7E,>76,>08,>00,>3F,>BF,>FC,>1A,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >EE,>C0,>00,>00,>02,>FE,>0B,>FF,>FF,>FE,>BF,>FC,>5F,>FC,>00,>00,>05,>FE,>00,>FF,>FF,>FF,>C0,>2F,>E0,>00,>BF,>FF,>FF,>00,>03,>77 ; 
       byte >EE,>E0,>00,>00,>2F,>FF,>9C,>2F,>FE,>1C,>5F,>F1,>7F,>C6,>F0,>00,>2F,>FF,>F0,>E5,>FF,>F7,>71,>7F,>FF,>02,>FF,>82,>F0,>99,>07,>77 ; 
       byte >6E,>C0,>00,>03,>FE,>17,>F0,>17,>FF,>80,>5F,>F1,>7F,>80,>00,>01,>7F,>C2,>FF,>82,>FF,>F0,>17,>ED,>9F,>E2,>FF,>C0,>00,>00,>03,>F6 ; 
       byte >FE,>E0,>00,>1F,>FF,>BF,>FF,>97,>FF,>01,>7F,>FE,>3F,>EB,>7F,>15,>FF,>FF,>FF,>C5,>FF,>F0,>2F,>F1,>7F,>F2,>FF,>FF,>FE,>00,>07,>7F ; 
       byte >05,>EE,>00,>5C,>00,>01,>7F,>C2,>F8,>00,>00,>00,>00,>DF,>F0,>17,>FF,>C0,>2F,>FB,>FF,>C0,>58,>00,>05,>FC,>00,>01,>80,>00,>77,>A0 ; 
       byte >01,>EF,>80,>00,>0E,>EE,>05,>E0,>B0,>00,>54,>00,>00,>00,>00,>5F,>F8,>00,>00,>0E,>2E,>00,>FF,>FC,>00,>00,>77,>70,>00,>01,>F7,>80 ; 
       byte >00,>00,>60,>3F,>C3,>F8,>00,>00,>00,>00,>38,>00,>00,>00,>00,>B8,>00,>00,>00,>00,>00,>00,>7C,>24,>06,>00,>1F,>C3,>FC,>06,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >EE,>E0,>00,>00,>05,>FE,>0B,>FF,>FF,>FE,>BF,>F8,>BF,>FE,>84,>00,>0B,>FF,>01,>FF,>FF,>FF,>C0,>5F,>E0,>01,>7F,>FF,>FF,>00,>07,>77 ; 
       byte >6E,>C0,>00,>00,>2F,>FF,>80,>2F,>FE,>00,>5F,>F2,>FF,>02,>30,>00,>5F,>FF,>F8,>05,>FF,>F0,>B1,>FF,>FF,>02,>FF,>C3,>C0,>A1,>03,>76 ; 
       byte >EE,>E0,>00,>01,>7F,>F7,>F0,>17,>FF,>80,>5F,>F1,>7F,>C0,>00,>02,>FF,>C2,>FF,>82,>FF,>F0,>2F,>E7,>CF,>E2,>FF,>C0,>00,>00,>07,>77 ; 
       byte >6F,>40,>00,>17,>FF,>BF,>FE,>15,>FF,>02,>F0,>BE,>2F,>F7,>FF,>9F,>FF,>FF,>FF,>E5,>FF,>F0,>5F,>E1,>7F,>F2,>FF,>FF,>FE,>00,>02,>F6 ; 
       byte >06,>EF,>00,>B8,>00,>00,>BF,>C2,>F8,>00,>00,>00,>00,>2F,>C0,>17,>FF,>80,>17,>FD,>7F,>80,>70,>00,>05,>FC,>00,>00,>00,>00,>F7,>60 ; 
       byte >00,>F7,>DF,>00,>1E,>EF,>02,>E0,>50,>01,>21,>00,>00,>00,>00,>5F,>F0,>00,>00,>00,>2E,>03,>FF,>FE,>00,>00,>F7,>78,>00,>FB,>EF,>00 ; 
       byte >00,>00,>7E,>1C,>0F,>E0,>00,>00,>00,>01,>05,>00,>00,>00,>00,>B0,>00,>00,>00,>00,>00,>00,>FC,>00,>01,>00,>07,>F0,>38,>7E,>00,>00 ; 
       byte >0E,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>70 ; 
       byte >EE,>E0,>00,>00,>0B,>FF,>0B,>FF,>FF,>FF,>7F,>F0,>FF,>FF,>CC,>00,>0B,>FF,>81,>FF,>FF,>FF,>E0,>5F,>E0,>01,>7F,>FF,>FE,>00,>07,>77 ; 
       byte >2E,>80,>00,>00,>5F,>FF,>C0,>2F,>FE,>00,>5F,>B2,>FE,>00,>00,>00,>5F,>FF,>F8,>05,>FF,>F0,>71,>7D,>FF,>82,>FF,>C0,>00,>A1,>01,>74 ; 
       byte >EE,>E0,>00,>01,>7E,>F3,>F8,>17,>FF,>80,>5F,>F1,>7F,>E0,>78,>02,>FF,>FD,>7F,>C2,>FF,>E0,>2F,>CF,>EF,>E2,>FF,>C0,>00,>00,>07,>77 ; 
       byte >2F,>00,>00,>2F,>FE,>5F,>FE,>19,>FF,>02,>E0,>5F,>2F,>FF,>FF,>CB,>FF,>FE,>FF,>E5,>FF,>E0,>5F,>E0,>BF,>FB,>FF,>FF,>FC,>00,>00,>F4 ; 
       byte >06,>E7,>00,>B8,>00,>00,>BF,>C1,>F8,>00,>00,>00,>00,>1F,>00,>17,>FC,>00,>0F,>7C,>BF,>80,>00,>00,>02,>F8,>00,>00,>00,>00,>E7,>60 ; 
       byte >00,>7B,>EF,>E0,>3E,>EF,>01,>E0,>70,>00,>14,>00,>00,>00,>00,>5F,>F0,>00,>00,>00,>16,>00,>0F,>FF,>80,>00,>F7,>7C,>07,>F7,>DE,>00 ; 
       byte >00,>00,>3F,>E2,>07,>00,>00,>00,>00,>00,>50,>00,>00,>00,>00,>E0,>00,>00,>00,>00,>00,>01,>78,>00,>01,>00,>00,>E0,>47,>FC,>00,>00 ; 
       byte >0E,>00,>00,>00,>00,>00,>01,>E0,>00,>E3,>80,>0E,>07,>80,>00,>00,>00,>00,>00,>78,>00,>1F,>80,>03,>00,>00,>07,>F0,>00,>00,>00,>70 ; 
       byte >E4,>E0,>00,>00,>0B,>FE,>17,>FF,>FF,>FE,>5F,>F0,>5F,>FF,>FC,>00,>0B,>FF,>C1,>FF,>FF,>FF,>E0,>BF,>F0,>00,>FF,>FF,>FC,>00,>07,>27 ; 
       byte >0E,>00,>00,>00,>BF,>FF,>C0,>2F,>FE,>80,>5F,>D2,>FE,>00,>00,>00,>5F,>FF,>FC,>07,>FF,>F0,>02,>F8,>FF,>85,>FF,>C0,>00,>99,>00,>70 ; 
       byte >E4,>E0,>00,>02,>FF,>FB,>FC,>17,>FF,>80,>7F,>F1,>7F,>E0,>58,>05,>FF,>DF,>7F,>C3,>7F,>E0,>5F,>DF,>FF,>F2,>FF,>81,>E0,>00,>07,>27 ; 
       byte >07,>80,>00,>2F,>FC,>2F,>FF,>05,>FE,>02,>C0,>38,>27,>FF,>FF,>CB,>FF,>FD,>7F,>E5,>FF,>E0,>5F,>C0,>BF,>F9,>7F,>FF,>FC,>00,>01,>E0 ; 
       byte >07,>03,>80,>B0,>00,>00,>5F,>E1,>78,>00,>00,>00,>00,>00,>00,>17,>FC,>00,>00,>BC,>BF,>00,>00,>00,>02,>F8,>00,>00,>00,>01,>C0,>E0 ; 
       byte >00,>1D,>F7,>F8,>20,>47,>00,>00,>00,>02,>5C,>40,>00,>00,>00,>BF,>E0,>00,>00,>00,>1C,>00,>7F,>FF,>C0,>00,>E2,>04,>1F,>FF,>B8,>00 ; 
       byte >00,>00,>0F,>FC,>00,>00,>00,>00,>00,>00,>02,>00,>00,>00,>00,>00,>00,>00,>00,>01,>FC,>FF,>F0,>00,>01,>00,>00,>00,>3F,>F0,>00,>00 ; 
       byte >0E,>00,>00,>00,>00,>70,>02,>F0,>01,>72,>C0,>17,>0B,>C0,>00,>00,>00,>E0,>00,>7E,>00,>2F,>C0,>05,>80,>00,>0B,>FE,>00,>00,>00,>70 ; 
       byte >E0,>E0,>00,>00,>0F,>FE,>17,>EF,>FF,>7E,>5F,>F0,>BF,>FF,>F8,>00,>17,>FF,>C3,>FF,>FF,>FF,>E0,>BF,>FE,>00,>BF,>EF,>F8,>00,>07,>07 ; 
       byte >0E,>00,>00,>00,>BF,>FF,>C0,>3F,>FF,>80,>5F,>E3,>FE,>00,>00,>00,>7F,>FF,>FC,>02,>FF,>F0,>05,>F0,>FF,>85,>FF,>C0,>00,>42,>00,>70 ; 
       byte >E0,>E0,>00,>02,>FF,>FF,>FC,>17,>FF,>80,>5F,>F1,>7F,>C0,>5C,>05,>FF,>FF,>FF,>C1,>7F,>E0,>5F,>FF,>FF,>F2,>FF,>82,>F0,>00,>07,>07 ; 
       byte >07,>80,>00,>2F,>F8,>17,>FF,>05,>FE,>07,>00,>00,>1F,>FF,>FF,>EB,>FF,>F9,>7F,>E5,>FF,>E0,>5F,>80,>5F,>F8,>BF,>FF,>D8,>00,>01,>E0 ; 
       byte >07,>83,>80,>A0,>00,>E0,>2F,>E1,>70,>00,>00,>00,>00,>00,>00,>17,>FC,>00,>00,>5C,>BF,>00,>00,>00,>01,>7C,>07,>00,>00,>01,>C1,>E0 ; 
       byte >00,>00,>F9,>FC,>1E,>07,>00,>00,>00,>00,>B9,>00,>00,>00,>00,>BF,>C0,>00,>00,>00,>00,>00,>7F,>E0,>60,>00,>E0,>78,>3F,>9F,>00,>00 ; 
       byte >00,>00,>01,>F8,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>03,>FF,>F0,>F0,>00,>00,>80,>00,>00,>1F,>80,>00,>00 ; 
       byte >0E,>00,>00,>00,>00,>B8,>05,>F0,>02,>F9,>70,>2F,>27,>E0,>00,>00,>01,>70,>00,>7F,>00,>5F,>C0,>0B,>80,>00,>17,>FF,>F8,>00,>00,>70 ; 
       byte >E4,>E0,>00,>00,>05,>FF,>17,>EF,>FF,>BE,>5F,>F0,>BF,>FF,>F8,>00,>17,>FF,>E3,>FF,>FF,>FF,>F1,>7F,>F6,>00,>BF,>DB,>F8,>00,>07,>27 ; 
       byte >0E,>00,>00,>01,>7F,>DF,>E0,>17,>FF,>80,>5F,>F1,>7F,>00,>00,>00,>5F,>F7,>FE,>02,>FF,>F0,>05,>F0,>7F,>C5,>FF,>C0,>00,>3C,>00,>70 ; 
       byte >E0,>E0,>00,>05,>FF,>FF,>FE,>17,>FF,>00,>BF,>F1,>7F,>80,>5C,>0B,>FF,>FF,>FF,>C7,>FF,>F0,>5F,>FF,>FF,>F2,>FF,>C5,>FC,>00,>07,>07 ; 
       byte >03,>D0,>00,>5F,>F0,>0E,>FF,>07,>F8,>00,>00,>00,>1B,>FF,>FF,>CB,>FF,>F0,>BF,>F5,>FF,>E0,>5F,>00,>77,>F8,>5F,>FF,>F8,>00,>0B,>C0 ; 
       byte >03,>8D,>C0,>E0,>00,>E0,>2F,>E1,>70,>00,>00,>00,>00,>00,>00,>17,>FC,>00,>00,>5C,>5F,>00,>00,>00,>00,>EC,>07,>00,>00,>03,>B1,>C0 ; 
       byte >00,>00,>7C,>21,>FF,>1F,>00,>00,>00,>05,>7E,>A0,>00,>00,>00,>BF,>00,>00,>00,>00,>00,>00,>3F,>00,>10,>00,>F8,>FF,>84,>3E,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>10,>00,>00,>00,>00,>00,>00,>00,>00,>01,>FF,>FC,>78,>00,>00,>C0,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>07,>F1,>3E,>7C,>00,>00,>E0,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>01,>00,>00,>00,>00,>00,>00,>00,>02,>00,>FE,>00,>0E,>7C,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>24,>80,>02,>FF,>C0,>00,>00,>00,>00,>17,>E0,>00,>00,>00,>00,>00,>00,>02,>0F,>FF,>F0,>FE,>CE,>00,>00,>80,>00,>00,>00 ; 
       byte >00,>00,>00,>1A,>EC,>0F,>FD,>BE,>DE,>EF,>FC,>C0,>00,>00,>00,>00,>00,>08,>00,>10,>00,>9F,>FF,>E1,>FF,>C0,>78,>00,>A8,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>1F,>F0,>7F,>F6,>FF,>7F,>E1,>FE,>E0,>00,>00,>00,>01,>00,>00,>10,>00,>1B,>FF,>E3,>F5,>F0,>00,>07,>F2,>00,>F0,>00 ; 
       byte >00,>00,>00,>60,>00,>71,>91,>FF,>DD,>FF,>FC,>31,>FE,>F0,>00,>00,>0D,>E4,>00,>00,>0F,>1D,>7F,>E7,>FB,>60,>F7,>44,>80,>FF,>CF,>C0 ; 
       byte >00,>03,>C0,>00,>F8,>06,>60,>0F,>FF,>78,>00,>0F,>FF,>FE,>F8,>00,>01,>00,>7E,>00,>3F,>07,>AF,>E7,>DE,>C3,>DE,>7F,>FC,>1F,>F3,>F0 ; 
       byte >00,>60,>01,>B0,>30,>60,>00,>00,>7F,>BF,>FF,>FF,>FF,>FF,>FF,>80,>01,>FF,>FF,>03,>01,>EF,>FF,>FC,>F0,>00,>DF,>F9,>FF,>3E,>FF,>80 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>0E,>42,>00,>3C,>00,>01,>C0,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>10,>00,>00,>00,>00,>00,>00,>04,>01,>FF,>00,>1D,>F8,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>02,>24,>07,>7F,>FF,>00,>00,>00,>00,>57,>5A,>00,>00,>00,>48,>00,>00,>02,>1F,>FF,>F1,>FE,>CE,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>45,>D0,>07,>FD,>DD,>BE,>DF,>FF,>60,>01,>00,>00,>00,>00,>00,>00,>82,>00,>9F,>FF,>E3,>FF,>E0,>3C,>08,>80,>80,>00,>00 ; 
       byte >00,>00,>00,>00,>7F,>FE,>3F,>FB,>7F,>BF,>DA,>47,>70,>00,>00,>00,>09,>24,>00,>10,>00,>2B,>FF,>E7,>F6,>F0,>09,>5F,>FD,>42,>F8,>00 ; 
       byte >00,>00,>01,>E0,>00,>E0,>A1,>FF,>EE,>FF,>FC,>84,>FF,>78,>00,>00,>37,>58,>00,>00,>7F,>1D,>BF,>E7,>FD,>40,>E7,>00,>A0,>4F,>B0,>00 ; 
       byte >00,>0F,>C0,>01,>98,>3E,>C0,>07,>FF,>BF,>FF,>F0,>00,>3F,>7C,>00,>00,>01,>FF,>C6,>0F,>03,>AF,>F3,>DF,>F3,>FF,>3F,>8F,>CF,>F3,>F0 ; 
       byte >00,>FC,>01,>30,>20,>C0,>00,>00,>3F,>7F,>FF,>FF,>FF,>FF,>FF,>80,>03,>FF,>FF,>8F,>03,>EF,>FF,>F8,>C7,>FE,>3F,>E3,>FF,>9E,>FE,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>02,>00,>1C,>00,>03,>C0,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>09,>40,>00,>00,>00,>00,>00,>00,>04,>03,>FF,>00,>3D,>F8,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>0A,>A0,>07,>B0,>FF,>E0,>00,>00,>00,>2A,>90,>00,>00,>00,>2A,>00,>00,>02,>1F,>FF,>F1,>FF,>56,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>0A,>A9,>07,>FE,>ED,>BE,>DF,>FF,>B0,>00,>00,>00,>00,>00,>00,>00,>54,>00,>DF,>FF,>E3,>FF,>E0,>0E,>01,>80,>00,>00,>00 ; 
       byte >00,>00,>00,>01,>E0,>0F,>1F,>FB,>BF,>DF,>A0,>23,>B8,>00,>00,>00,>24,>00,>00,>00,>00,>2B,>FF,>E7,>FA,>F0,>00,>27,>F0,>00,>F8,>00 ; 
       byte >00,>00,>03,>D8,>01,>80,>C0,>FF,>F7,>7F,>FE,>79,>FF,>BC,>00,>00,>4B,>A4,>00,>00,>FF,>0E,>BF,>EF,>FD,>40,>99,>10,>08,>C0,>3F,>F8 ; 
       byte >00,>1C,>30,>03,>18,>7F,>80,>07,>FF,>DF,>FF,>FF,>FF,>C0,>1E,>00,>00,>07,>FF,>CF,>E7,>03,>AF,>F3,>DF,>FB,>FF,>80,>FF,>EF,>80,>70 ; 
       byte >01,>CF,>03,>30,>61,>80,>00,>00,>1F,>7F,>FF,>FF,>FF,>FF,>FF,>00,>03,>FF,>FF,>9F,>07,>C3,>E7,>80,>9F,>FF,>80,>03,>FF,>DE,>7C,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>02,>00,>18,>00,>01,>E0,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>04,>04,>00,>00,>00,>00,>00,>00,>04,>03,>FF,>00,>3D,>F4,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>25,>F0,>0F,>DB,>03,>E3,>70,>00,>00,>0D,>14,>00,>00,>00,>1C,>00,>00,>01,>1F,>FF,>F1,>FF,>5B,>00,>00,>80,>00,>00,>00 ; 
       byte >00,>00,>00,>12,>C0,>03,>FF,>6D,>FE,>DF,>FF,>D8,>00,>00,>00,>00,>00,>00,>00,>38,>00,>5F,>FF,>E3,>FF,>E0,>03,>A4,>D2,>04,>00,>00 ; 
       byte >00,>00,>00,>03,>80,>03,>1F,>FD,>DF,>DF,>4E,>11,>DC,>00,>00,>00,>13,>50,>00,>00,>00,>4D,>FF,>E7,>FA,>F0,>00,>1B,>EC,>00,>F0,>00 ; 
       byte >00,>00,>0E,>06,>03,>00,>80,>7F,>F7,>7F,>FF,>07,>FF,>DE,>00,>00,>05,>50,>00,>00,>FF,>0E,>DF,>CF,>FD,>40,>3E,>00,>80,>CF,>1F,>FE ; 
       byte >00,>30,>0C,>06,>18,>C3,>00,>03,>FF,>DF,>FF,>FF,>BF,>FF,>FF,>00,>00,>0F,>FF,>8F,>F3,>0B,>AF,>F9,>DF,>FC,>FF,>BD,>FF,>E0,>7F,>30 ; 
       byte >03,>03,>86,>18,>C3,>00,>00,>C0,>1F,>7F,>EF,>FF,>FF,>FF,>FF,>00,>03,>FF,>FF,>3F,>0F,>00,>00,>00,>BF,>FF,>CF,>F8,>FF,>C0,>38,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>02,>00,>38,>00,>01,>F0,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>80,>00,>00,>00,>00,>00,>00,>00,>11,>A0,>00,>00,>00,>00,>00,>00,>04,>07,>FF,>80,>7D,>F4,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>0D,>EA,>0F,>DD,>FC,>01,>DF,>C0,>00,>12,>40,>00,>00,>00,>BE,>80,>00,>01,>1F,>FF,>E0,>FF,>CD,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>94,>01,>FF,>B6,>FE,>DF,>FF,>EC,>00,>00,>00,>00,>00,>00,>02,>FE,>80,>5F,>FF,>E3,>FD,>E0,>00,>C2,>A4,>00,>00,>00 ; 
       byte >00,>00,>00,>06,>00,>03,>0F,>FE,>EF,>EF,>59,>10,>EE,>00,>00,>00,>0B,>A4,>00,>00,>00,>35,>FF,>E7,>FA,>E0,>00,>25,>D2,>00,>87,>E0 ; 
       byte >00,>00,>1C,>01,>06,>01,>00,>7F,>FB,>BF,>AA,>FF,>FF,>EF,>00,>00,>25,>40,>00,>FE,>7F,>0F,>5F,>CF,>FD,>40,>7F,>00,>00,>9F,>80,>FE ; 
       byte >00,>E0,>03,>06,>19,>86,>00,>01,>FF,>C0,>00,>00,>1F,>FF,>FF,>80,>00,>0F,>FE,>3F,>F9,>1B,>BF,>F9,>DF,>FE,>3E,>3D,>FF,>9B,>FF,>C0 ; 
       byte >06,>00,>CC,>19,>86,>00,>00,>F0,>0E,>FF,>FD,>FF,>FF,>FF,>FE,>00,>01,>FF,>FF,>3F,>00,>00,>00,>00,>3F,>FF,>DF,>FE,>7F,>8F,>80,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>02,>00,>3C,>00,>01,>F8,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>4B,>40,>00,>00,>00,>00,>00,>00,>04,>07,>FF,>80,>7D,>F4,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>07,>B0,>1F,>EE,>FF,>F0,>2F,>FE,>00,>01,>44,>00,>00,>00,>1C,>00,>00,>01,>1F,>FF,>E0,>FF,>8D,>80,>10,>84,>00,>00,>00 ; 
       byte >00,>00,>00,>44,>20,>01,>FF,>BA,>7E,>DF,>FF,>F6,>00,>00,>00,>00,>00,>00,>00,>38,>00,>47,>FF,>E3,>FD,>F0,>00,>6A,>A0,>80,>00,>00 ; 
       byte >00,>00,>00,>1C,>00,>07,>07,>FF,>6F,>FF,>19,>38,>F7,>00,>00,>00,>35,>EA,>00,>00,>00,>16,>FF,>E7,>FA,>E0,>01,>06,>A8,>40,>CF,>F0 ; 
       byte >00,>00,>30,>00,>CC,>03,>00,>3F,>FD,>DF,>55,>D5,>57,>F7,>80,>00,>09,>A4,>01,>FF,>0F,>0F,>5F,>CF,>FE,>80,>7C,>00,>80,>7F,>EE,>3E ; 
       byte >01,>C0,>00,>DC,>1B,>0C,>00,>01,>FF,>DF,>FF,>FE,>00,>00,>FF,>C0,>00,>07,>FC,>7F,>F3,>3B,>AF,>F9,>BE,>FF,>00,>06,>7F,>3B,>FF,>C0 ; 
       byte >0C,>00,>78,>1B,>0C,>00,>00,>F8,>06,>FF,>AA,>EF,>FF,>FF,>C0,>00,>00,>FF,>FF,>7F,>00,>00,>00,>00,>9F,>FF,>BF,>FF,>3E,>3F,>80,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>02,>00,>7C,>00,>03,>F8,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>80,>00,>00,>00,>00,>00,>00,>00,>17,>B0,>00,>00,>00,>00,>00,>00,>02,>0F,>FF,>80,>FD,>EC,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>AE,>FA,>1F,>F6,>FF,>FC,>C0,>FF,>00,>25,>00,>00,>00,>00,>2A,>00,>00,>01,>1F,>FF,>E1,>FF,>C7,>C0,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>80,>00,>FF,>DD,>02,>DF,>FF,>FB,>80,>00,>00,>00,>01,>00,>00,>54,>00,>27,>FF,>E3,>F5,>F0,>00,>15,>D2,>20,>00,>00 ; 
       byte >00,>00,>00,>30,>00,>0D,>07,>FF,>77,>FF,>F8,>F8,>FB,>80,>00,>00,>0F,>D4,>00,>00,>00,>1A,>FF,>E7,>FA,>E0,>00,>12,>E0,>00,>DF,>F0 ; 
       byte >00,>00,>60,>00,>38,>06,>00,>1F,>FE,>EF,>AA,>AA,>AB,>FB,>C0,>00,>02,>00,>01,>FF,>80,>07,>6F,>CF,>FE,>80,>00,>00,>00,>FF,>EF,>8E ; 
       byte >01,>80,>00,>F0,>1E,>18,>00,>00,>FF,>BF,>FF,>FF,>BF,>FF,>00,>00,>00,>00,>00,>FF,>F3,>37,>FF,>F9,>A0,>FF,>3F,>F3,>1E,>7B,>FF,>C0 ; 
       byte >18,>00,>30,>1E,>18,>00,>18,>1C,>06,>FF,>47,>81,>F0,>00,>00,>00,>00,>3F,>FF,>7F,>00,>00,>00,>00,>CF,>FC,>7F,>FF,>00,>7E,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>02,>00,>FE,>00,>06,>FC,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>10,>03,>F0,>00,>00,>00,>00,>00,>EF,>EA,>00,>00,>00,>08,>00,>00,>02,>0F,>FF,>B0,>FE,>EC,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>07,>D0,>1F,>FB,>7F,>0E,>EF,>03,>80,>01,>00,>00,>00,>00,>40,>00,>10,>00,>9F,>FF,>E1,>FF,>C3,>E0,>00,>80,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>7F,>EE,>E2,>FF,>FF,>FD,>C0,>00,>00,>00,>00,>00,>00,>81,>00,>17,>FF,>E3,>F5,>F0,>00,>2F,>EC,>00,>00,>00 ; 
       byte >00,>00,>00,>60,>00,>19,>03,>FF,>BB,>FF,>F8,>FA,>FD,>E0,>00,>01,>B7,>DA,>80,>00,>00,>1B,>7F,>E7,>FB,>60,>00,>01,>AA,>00,>DF,>E0 ; 
       byte >00,>00,>60,>00,>78,>06,>00,>1F,>FE,>F7,>FF,>F5,>55,>FD,>E0,>00,>01,>00,>00,>7E,>EF,>07,>AF,>CF,>DE,>80,>E8,>00,>00,>FF,>F7,>E0 ; 
       byte >00,>C0,>01,>F0,>18,>30,>00,>00,>7F,>BF,>FF,>FF,>FF,>FF,>FF,>C0,>00,>7F,>FC,>78,>01,>77,>FF,>FC,>00,>8E,>7F,>F8,>00,>7D,>FF,>C0 ; 
       byte >30,>00,>00,>10,>30,>00,>26,>00,>01,>FF,>AB,>00,>00,>00,>00,>00,>00,>0F,>FE,>00,>00,>00,>00,>00,>E0,>00,>FF,>FE,>00,>E0,>00,>00 ; 
       byte >80,>01,>BB,>40,>40,>00,>41,>00,>7E,>00,>7C,>00,>01,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >80,>80,>37,>77,>F0,>00,>79,>E3,>FD,>00,>00,>30,>DD,>FA,>1C,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>38 ; 
_5040:
       byte >80,>80,>80,>01,>E0,>0C,>00,>F0,>80,>03,>D0,>00,>09,>00,>38,>FC,>3F,>3F,>00,>3F,>01,>F9,>FF,>CF,>FE,>7C,>7C,>03,>F0,>1F,>80,>1C ; 
       byte >80,>80,>80,>80,>03,>C0,>00,>01,>80,>BC,>FB,>E1,>18,>00,>38,>B4,>2F,>27,>00,>25,>01,>49,>29,>3D,>52,>4B,>DF,>42,>70,>16,>80,>1C ; 
_5080:
       byte >7F,>80,>80,>80,>80,>00,>00,>00,>C0,>00,>1E,>1F,>80,>00,>38,>FF,>9E,>03,>FC,>F3,>C3,>FF,>79,>EF,>F8,>3F,>E7,>F9,>F0,>FD,>FF,>1C ; 
       byte >00,>7F,>80,>80,>80,>80,>00,>00,>00,>01,>FF,>E0,>00,>00,>38,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>1C ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >C0,>03,>7F,>FB,>00,>00,>48,>F8,>3E,>01,>FE,>80,>81,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >C0,>C0,>77,>03,>E0,>00,>61,>DC,>FF,>00,>00,>60,>0F,>E0,>38,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>1C ; 
       byte >C0,>C0,>C0,>03,>C0,>18,>00,>0E,>00,>07,>FB,>00,>07,>00,>38,>F4,>3F,>3F,>00,>3F,>01,>F9,>FF,>CF,>FE,>7F,>7C,>03,>F0,>1F,>80,>1C ; 
       byte >C0,>C0,>C0,>C0,>07,>FC,>00,>01,>81,>D8,>3D,>E9,>18,>00,>38,>EE,>5F,>2F,>00,>2D,>01,>69,>69,>7C,>7C,>5F,>FF,>C2,>F0,>17,>80,>1C ; 
       byte >3F,>C0,>C0,>C0,>C0,>00,>00,>00,>60,>00,>1C,>07,>00,>00,>38,>FF,>DE,>07,>FE,>F3,>C3,>FF,>79,>EF,>F8,>7F,>EF,>FD,>F9,>FD,>FF,>1C ; 
       byte >00,>3F,>C0,>C0,>C0,>C0,>00,>00,>00,>00,>FF,>C0,>00,>00,>1C,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>38 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >E0,>07,>44,>BF,>80,>00,>5F,>FF,>0C,>00,>38,>01,>48,>28,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >E0,>E0,>70,>03,>F6,>00,>68,>9B,>3F,>00,>00,>60,>25,>B8,>38,>FC,>3F,>3F,>07,>FF,>F9,>F9,>FE,>01,>FE,>7F,>E0,>7F,>FF,>9F,>FF,>1C ; 
       byte >E0,>E0,>E0,>0F,>80,>30,>00,>00,>00,>0F,>FF,>B0,>06,>00,>38,>F4,>3D,>3D,>00,>3F,>01,>F9,>FF,>FF,>FA,>7E,>FE,>03,>D0,>1E,>FF,>1C ; 
       byte >E0,>E0,>E0,>E0,>FC,>3F,>80,>03,>01,>C0,>3E,>E8,>30,>00,>38,>BF,>FF,>2F,>FF,>2F,>01,>E9,>E8,>BC,>7E,>5E,>0F,>E2,>F0,>17,>FF,>1C ; 
       byte >1F,>E0,>E0,>E0,>E0,>00,>00,>00,>3C,>00,>70,>0C,>00,>00,>38,>F3,>DE,>07,>9E,>F3,>C0,>78,>79,>EF,>00,>78,>0F,>3D,>F9,>FD,>E0,>1C ; 
       byte >00,>1F,>E0,>E0,>E0,>E0,>00,>00,>00,>00,>00,>00,>00,>00,>1E,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>78 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >F0,>04,>3B,>FF,>C0,>00,>FF,>FF,>C0,>00,>55,>03,>05,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >F0,>F0,>60,>03,>F1,>80,>48,>13,>DE,>00,>00,>60,>4B,>D0,>38,>FC,>3F,>3F,>07,>FF,>F9,>F9,>FE,>01,>FE,>7F,>E0,>7F,>FF,>9F,>FF,>1C ; 
       byte >F0,>F0,>F0,>00,>00,>60,>00,>00,>C0,>17,>FF,>F4,>06,>00,>38,>F4,>3D,>3D,>00,>3D,>01,>F9,>FF,>FF,>FA,>7E,>BA,>03,>D0,>1E,>81,>1C ; 
       byte >F0,>F0,>F0,>F0,>F8,>03,>F0,>03,>01,>80,>3E,>EC,>30,>00,>38,>BF,>FF,>2F,>FF,>3F,>01,>F9,>F8,>FC,>7E,>5E,>0F,>E3,>F0,>1F,>FF,>1C ; 
       byte >0F,>F0,>F0,>F0,>F0,>00,>00,>00,>1F,>C0,>00,>0C,>00,>00,>38,>FF,>DE,>07,>FE,>FF,>C0,>78,>7F,>EF,>E0,>7B,>EF,>FD,>FF,>FD,>FC,>1C ; 
       byte >00,>0F,>F0,>F0,>F0,>F0,>00,>00,>00,>00,>00,>00,>00,>00,>0F,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>F0 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >F8,>01,>7E,>3F,>E0,>00,>FF,>FF,>FE,>00,>1F,>06,>15,>54,>01,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>80 ; 
       byte >F8,>F8,>20,>03,>E0,>F8,>0C,>02,>60,>00,>00,>70,>15,>54,>38,>FC,>3F,>3F,>07,>FF,>F9,>F9,>FF,>03,>FE,>7F,>F0,>7F,>FF,>9F,>FF,>1C ; 
       byte >F8,>F8,>F8,>00,>00,>C0,>00,>00,>F8,>3F,>DD,>F6,>0C,>00,>38,>F4,>3D,>3D,>00,>3D,>01,>79,>7E,>FF,>FA,>7A,>5D,>02,>D0,>1E,>FD,>1C ; 
       byte >F8,>F8,>F8,>F8,>00,>00,>7F,>06,>01,>00,>3E,>DC,>60,>00,>38,>5F,>FE,>3F,>FF,>3F,>01,>F9,>F8,>78,>7E,>7E,>07,>F3,>F0,>1F,>FF,>1C ; 
       byte >07,>F8,>F8,>F8,>F8,>00,>00,>00,>03,>F8,>00,>0C,>00,>00,>38,>FF,>9E,>07,>FE,>7F,>C0,>78,>7F,>EF,>E0,>7B,>EF,>FD,>FF,>FD,>FC,>1C ; 
       byte >00,>07,>F8,>F8,>F8,>F8,>00,>00,>00,>00,>00,>00,>00,>00,>07,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E0 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >FC,>03,>B9,>FF,>F0,>00,>7F,>FF,>E1,>01,>09,>06,>4B,>A0,>07,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>E0 ; 
       byte >FC,>FC,>00,>03,>E0,>7F,>16,>00,>70,>00,>00,>FF,>35,>68,>38,>FC,>3F,>3F,>07,>FF,>F9,>F9,>FF,>03,>FE,>7F,>F0,>7F,>FF,>9F,>FF,>1C ; 
       byte >FC,>FC,>FC,>00,>00,>C0,>00,>00,>7F,>7F,>EE,>F7,>0C,>00,>38,>A4,>29,>2D,>00,>2D,>01,>69,>1D,>FE,>1A,>62,>5D,>02,>D0,>14,>FF,>1C ; 
       byte >FC,>FC,>FC,>FC,>00,>00,>0F,>FE,>01,>00,>3F,>0C,>60,>00,>38,>3F,>FC,>3F,>FF,>3F,>01,>F9,>F8,>78,>7E,>7E,>07,>F3,>F0,>1F,>FF,>1C ; 
       byte >03,>FC,>FC,>FC,>FC,>00,>00,>00,>00,>3C,>00,>18,>00,>00,>38,>F0,>1E,>07,>9E,>03,>C0,>78,>79,>EF,>00,>79,>EF,>3D,>EF,>BD,>E0,>1C ; 
       byte >00,>03,>FC,>FC,>FC,>FC,>00,>00,>00,>00,>00,>00,>00,>00,>01,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>80 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >FE,>07,>B7,>FF,>F0,>00,>01,>FF,>F8,>80,>10,>0C,>35,>D4,>0F,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF,>F0 ; 
       byte >FE,>FE,>00,>01,>00,>06,>D9,>C1,>60,>00,>01,>8F,>48,>24,>38,>FC,>3F,>3F,>00,>3F,>01,>F9,>FF,>87,>FE,>7F,>F8,>03,>F0,>1F,>80,>1C ; 
       byte >FE,>FE,>FE,>00,>00,>C0,>00,>00,>67,>FF,>F7,>77,>0C,>00,>38,>84,>21,>21,>00,>21,>01,>09,>0A,>E1,>42,>42,>20,>82,>10,>10,>80,>1C ; 
       byte >FE,>FE,>FE,>FE,>00,>00,>00,>FF,>00,>00,>10,>04,>C0,>00,>38,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>1C ; 
       byte >01,>FE,>FE,>FE,>FE,>00,>00,>00,>00,>07,>00,>18,>00,>00,>38,>F0,>1F,>F7,>9E,>FF,>C0,>78,>79,>EF,>F8,>7F,>EF,>3D,>E7,>3D,>FF,>1C ; 
       byte >00,>01,>FE,>FE,>FE,>FE,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >FF,>06,>0F,>FF,>F0,>00,>3E,>1F,>FC,>80,>00,>18,>07,>D0,>1E,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>78 ; 
       byte >FF,>FF,>00,>00,>E0,>0C,>0F,>EE,>40,>00,>03,>00,>21,>00,>38,>FC,>3F,>3F,>00,>3F,>01,>F9,>FF,>87,>FE,>7F,>F8,>03,>F0,>1F,>80,>1C ; 
       byte >FF,>FF,>FF,>00,>00,>C0,>00,>00,>C0,>7F,>FB,>B3,>0C,>00,>38,>84,>21,>21,>00,>21,>01,>09,>0A,>01,>42,>43,>E0,>82,>10,>10,>80,>1C ; 
       byte >FF,>FF,>FF,>FF,>00,>00,>00,>01,>80,>00,>0E,>04,>C0,>00,>38,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>1C ; 
       byte >00,>FF,>FF,>FF,>FF,>00,>00,>00,>00,>03,>00,>30,>00,>00,>38,>F0,>1F,>F7,>9E,>FF,>80,>78,>79,>EF,>F8,>3F,>EF,>3D,>E7,>3D,>FF,>1C ; 
       byte >00,>00,>FF,>FF,>FF,>FF,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00 ; }
_5800:
       byte >45,>00,>00,>00,>00,>47,>47,>47,>47,>47,>47,>47,>47,>47,>00,>00,>47,>47,>00,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>00,>00,>45 ; {Attributes
       byte >45,>45,>00,>00,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>00,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>00,>45,>45 ; 
       byte >45,>45,>00,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>43,>45,>45 ; 
       byte >45,>45,>00,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>00,>45,>45 ; 
       byte >45,>45,>00,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>00,>45,>45 ; 
       byte >45,>45,>45,>42,>42,>42,>42,>42,>42,>00,>00,>00,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>42,>45,>45,>45 ; 
       byte >45,>45,>45,>45,>45,>45,>42,>42,>42,>45,>45,>45,>00,>00,>00,>42,>42,>00,>00,>42,>42,>43,>43,>43,>43,>42,>45,>45,>45,>45,>45,>45 ; 
       byte >00,>00,>45,>45,>45,>45,>00,>00,>00,>45,>45,>45,>00,>00,>00,>42,>00,>00,>00,>44,>44,>43,>43,>46,>43,>43,>45,>45,>45,>45,>00,>00 ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>00,>44,>43,>43,>43,>00,>43,>43,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>00,>45,>46,>46,>00,>00,>00,>00,>00,>45,>45,>00,>00,>00,>44,>00,>00,>43,>43,>43,>43,>43,>43,>00,>00,>00,>00,>00,>00 ; 
       byte >00,>00,>00,>45,>45,>46,>46,>46,>46,>46,>46,>00,>45,>45,>00,>00,>00,>44,>44,>47,>43,>43,>43,>43,>43,>43,>47,>45,>45,>00,>00,>00 ; 
       byte >00,>00,>00,>45,>45,>46,>46,>46,>46,>46,>46,>46,>46,>00,>00,>00,>45,>44,>47,>47,>47,>43,>43,>43,>43,>43,>47,>47,>47,>45,>00,>00 ; 
       byte >00,>00,>00,>46,>46,>46,>46,>46,>46,>46,>5E,>5E,>46,>46,>00,>45,>45,>45,>45,>47,>00,>43,>43,>43,>43,>4B,>4D,>4F,>4F,>4D,>41,>41 ; 
       byte >00,>00,>46,>46,>46,>46,>46,>46,>46,>46,>5E,>5E,>5E,>46,>46,>00,>45,>45,>41,>41,>41,>4B,>43,>43,>43,>4B,>41,>4D,>4D,>41,>41,>41 ; 
       byte >46,>46,>46,>46,>46,>46,>46,>46,>46,>46,>46,>46,>46,>46,>46,>46,>00,>41,>41,>41,>41,>4B,>43,>43,>4B,>41,>41,>41,>41,>41,>41,>41 ; 
       byte >46,>46,>46,>46,>46,>46,>44,>44,>46,>46,>5E,>46,>46,>46,>46,>46,>41,>41,>41,>41,>4B,>4B,>4B,>4B,>41,>41,>41,>41,>41,>41,>41,>41 ; 
       byte >42,>44,>44,>44,>44,>00,>44,>44,>44,>44,>43,>46,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47 ; 
       byte >56,>42,>44,>46,>44,>46,>44,>44,>44,>00,>46,>46,>47,>47,>47,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>47 ; 
       byte >74,>56,>42,>44,>44,>46,>00,>44,>46,>44,>44,>44,>46,>00,>47,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>45,>47 ; 
       byte >61,>74,>56,>42,>46,>46,>46,>46,>44,>44,>44,>44,>46,>00,>47,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>47 ; 
       byte >41,>61,>74,>56,>42,>00,>00,>00,>46,>46,>44,>46,>46,>00,>47,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>44,>47 ; 
       byte >00,>41,>61,>74,>56,>42,>00,>00,>00,>00,>46,>46,>00,>00,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47,>47 ; 
       byte >07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07 ; 
_5ae0:
       byte >07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07,>07 ; }

       ;                               ;                   

* Decryption Routine
* 
* .
* 
* .
* 
* Runs "RRD" on every byte from #N$5FFF-#N$DBFF.
gameentry:                             ; 5b80
       li   hl,_5fc8+55                ; LD HL,$5FFF       ; #REGhl=#N$5FFF.
       li   bc,>007c                   ; LD BC,$007C       ; #REGbc=#N$007C.
       sb   a,a                        ; XOR A             ; Reset the flags.
decryption_loop:                       ; 5b87
       ; RRD                           ; RRD               ; RRD operation.
       inc  hl                         ; INC HL            ; Increment #REGhl by one.
       sb   one,b                      ; DJNZ $5B87        ; Decrease counter by one and loop back to #R$5B87 until
       jne  decryption_loop            ;                   
                                                           ; counter is zero.
       sb   one,@c                     ; DEC C             ; Decrease #REGc by one.
       jne  decryption_loop            ; JR NZ,$5B87       ; Loop back to #R$5B87 until #REGc is zero.
       b    @securitycheck             ; JP $6000          ; Jump to #R$6000.
* View the equivalent code in #LUNARJETMAN$5B80.
* .
* Earlier Ultimate games use a much simpler mechanism;
* #LIST
* { #COOKIE$5B80 }
* { #JETPAC$5B80 }
* { #PSSST$5B80 }
* { #TRANZAM$5B80 }
* LIST#

       ;                               ;                   

* Game Options
* 
* #TABLE(default,centre,centre,centre,centre)
* { =h Byte | =h Binary | =h Character | =h Option }
* { #N$00 | #EVAL($00, $02, $08) | Knight | Keyboard }
* { #N$02 | #EVAL($02, $02, $08) | Knight | Kempston Joystick }
* { #N$04 | #EVAL($04, $02, $08) | Knight | Cursor Joystick }
* { #N$08 | #EVAL($08, $02, $08) | Wizard | Keyboard }
* { #N$0A | #EVAL($0A, $02, $08) | Wizard | Kempston Joystick }
* { #N$0C | #EVAL($0C, $02, $08) | Wizard | Cursor Joystick }
* { #N$10 | #EVAL($10, $02, $08) | Serf | Keyboard }
* { #N$12 | #EVAL($12, $02, $08) | Serf | Kempston Joystick }
* { #N$14 | #EVAL($14, $02, $08) | Serf | Cursor Joystick }
* TABLE#
gameoptions:                           ; 5e00
       byte >00

* Font Pointer
* 
* Holds a pointer to the currently used font data.
fontpointer:                           ; 5e01
       data >0600

* Last FRAMES
_5e03:
       byte >00

* In Handlers
_5e04:
       byte >00

* Rand8
_5e05:
       data >302C

* Unused
       byte >0E,>00,>00,>00,>00,>00,>3A,>EF
       byte >22

* Width Bytes
_5e10:
       byte >22

* Height Lines
_5e11:
       byte >AF

* Counter Low
counterlow:                            ; 5e12
       byte >3A

* Counter High
counterhigh:                           ; 5e13
       byte >F5

* Game Flags
gameflags:                             ; 5e14
       byte >AC

* Saved Graphic
_5e15:
       byte >36

* Saved X
saved_x:                               ; 5e16
       byte >0E

* Saved Y
saved_y:                               ; 5e17
       byte >00

* Some Width
_5e18:
       byte >00

* Some Height
_5e19:
       byte >06

* Room Attribute
currentroom_attribute:                 ; 5e1a
       byte >00

* Room Pointer
currentroom:                           ; 5e1b
       data >2C00

* Room Width
currentroom_width:                     ; 5e1d
       byte >30

* Room Height
currentroom_height:                    ; 5e1e
       byte >0E

* Pickup Flags
_5e1f:
       byte >00

* Pickup Pressed
_5e20:
       byte >00

* Lives
playerlives:                           ; 5e21
       byte >00

* Current menu item colour attribute.
current_menuattr:                      ; 5e22
       byte >00

* Line Counter
_5e23:
       byte >00

* Line Flags
_5e24:
       byte >3A

* Number Creatures
* 
* Number of creatures processed this frame.
numcreatures:                          ; 5e25
       byte >EF

* Last Creature Room
_5e26:
       byte >22

* Creature Delay
_5e27:
       byte >22

* Player Energy
playerenergy:                          ; 5e28
       byte >AF

* Chicken Level
chickenlevel:                          ; 5e29
       byte >3A

* Score
_5e2a:
       byte >F5,>AC,>36

* In Doorway
_5e2d:
       byte >0E

* Door Timer
_5e2e:
       byte >00

* Walk Counter
_5e2f:
       byte >00

* Inventory 1
_5e30:
       byte >06
       byte >00
_5e32:
       byte >00
       byte >2C

* Inventory 2
       byte >30
       byte >0E
       byte >00
_5e37:
       byte >00

* Inventory 3
_5e38:
       byte >00

* Flash Timer
       byte >00,>00,>3A
_5e3c:
       byte >EF

* Clock Hours
clockhours:                            ; 5e3d
       byte >22

* Clock Minutes
clockminutes:                          ; 5e3e
       byte >22

* Clock Seconds
clockseconds:                          ; 5e3f
       byte >AF

* Visited Rooms
visitedrooms:                          ; 5e40
       byte >3A
       byte >F5
       byte >C0
       byte >32
       byte >33
       byte >34
       byte >32
       byte >34
       byte >0E
       byte >00
       byte >00
       byte >80
       byte >5B
       byte >00
       byte >0D
       byte >00
       byte >00
       byte >00
       byte >00
       byte >00

* Visited Percentage
visitedpercentage:                     ; 5e54
       byte >00

* Food Pointer
foodpointer:                           ; 5e55
       data 0
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
_5fc8:
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Security Check
* 
* Used by the routine at #R$5B80.
securitycheck:                         ; 6000
       limi 0                          ; DI                ; Disable interrupts.
       li   sp,gameoptions             ; LD SP,$5E00       ; Set the stack pointer to #N$5E00.
_6004:
       movb @decryption_loop+242,a     ; LD A,($5C79)      ; #HTML(#REGa=<a
                                                           ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>+#N$01.)
       cb   a,@bytes+37                ; CP $25            ; {Return if #REGa is not #N$25.
       jeq  !                          ; RET NZ            ; }
       .ret                            ;                   
!
       b    @gameinitialisation        ; JP $7C19          ; Jump to #R$7C19.
* View the equivalent code in;
* #LIST
* { #COOKIE$5F00 }
* { #JETPAC$61E5 }
* { #LUNARJETMAN$8000 }
* { #PSSST$61C6 }
* { #TRANZAM$5F00 }
* LIST#

* Player Initialisation Data
initialisation_player:                 ; 600d
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Weapon Initialisation Data
initialisation_weapon:                 ; 6015
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Sound Initialisation Data
initialisation_sound:                  ; 601d
       byte >00,>00,>00,>00,>00,>00,>00,>00

* A.C.G. Initialisation Data
initialisation_key_acg:                ; 6025
       byte >8C,>00,>00,>58,>58,>46,>00,>00
       byte >8D,>00,>00,>58,>58,>46,>00,>00
       byte >8E,>00,>00,>58,>58,>46,>00,>00

* Key Initialisation Data
initialisation_key_green:              ; 603d
       byte >81,>05,>00,>70,>60,>44,>00,>00
initialisation_key_red:                ; 6045
       byte >81,>17,>00,>80,>40,>42,>00,>00
initialisation_key_cyan:               ; 604d
       byte >81,>53,>00,>58,>58,>45,>00,>00
initialisation_key_yellow:             ; 6055
       byte >81,>66,>00,>30,>87,>46,>00,>00

* Leaf Initialisation Data
initialisation_leaf:                   ; 605d
       byte >80,>09,>00,>40,>40,>42,>00,>00

* Tombstone 1 Initialisation Data
initialisation_tombstone_1:            ; 6065
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Tombstone 2 Initialisation Data
initialisation_tombstone_2:            ; 606d
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Tombstone 3 Initialisation Data
initialisation_tombstone_3:            ; 6075
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Tombstone 4 Initialisation Data
initialisation_tombstone_4:            ; 607d
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Crucifix Initialisation Data
initialisation_crucifix:               ; 6085
       byte >8A,>05,>00,>40,>70,>46,>00,>00

* Spanner Initialisation Data
initialisation_spanner:                ; 608d
       byte >8B,>30,>00,>40,>70,>45,>00,>00

* Wine Initialisation Data
initialisation_wine:                   ; 6095
       byte >82,>3B,>00,>60,>60,>44,>00,>00

* Coin Initialisation Data
initialisation_coin:                   ; 609d
       byte >83,>48,>00,>70,>70,>45,>00,>00

* Wing Initialisation Data
initialisation_wing:                   ; 60a5
       byte >84,>64,>00,>80,>80,>46,>00,>00

* Whip Initialisation Data
initialisation_whip:                   ; 60ad
       byte >85,>6B,>00,>40,>40,>45,>00,>00

* Frog Leg Initialisation Data
initialisation_frog_leg:               ; 60b5
       byte >86,>13,>00,>50,>50,>44,>00,>00

* Gem Initialisation Data
initialisation_gem:                    ; 60bd
       byte >87,>84,>00,>60,>40,>43,>00,>00

* Moneybag Initialisation Data
initialisation_moneybag:               ; 60c5
       byte >88,>1F,>00,>70,>70,>42,>00,>00

* Skull Initialisation Data
initialisation_skull:                  ; 60cd
       byte >89,>49,>00,>50,>40,>47,>00,>00

* Can Initialisation Data
initialisation_can:                    ; 60d5
       byte >50,>27,>00,>57,>67,>43,>00,>00
       byte >50,>7F,>00,>40,>40,>46,>00,>00
       byte >50,>1E,>00,>50,>57,>46,>00,>00
       byte >50,>0C,>00,>60,>60,>43,>00,>00
       byte >50,>67,>00,>57,>40,>42,>00,>00
       byte >50,>41,>00,>57,>67,>42,>00,>00

* Candy Initialisation Data
initialisation_candy:                  ; 6105
       byte >51,>75,>00,>30,>40,>44,>00,>00
       byte >51,>83,>00,>30,>40,>46,>00,>00
       byte >51,>0C,>00,>60,>70,>42,>00,>00
       byte >51,>68,>00,>57,>40,>43,>00,>00
       byte >51,>45,>00,>57,>46,>45,>00,>00
       byte >51,>46,>00,>43,>7B,>45,>00,>00

* Chop Initialisation Data
initialisation_chop:                   ; 6135
       byte >52,>86,>00,>47,>60,>43,>00,>00
       byte >52,>6E,>00,>60,>77,>42,>00,>00
       byte >52,>7D,>00,>57,>67,>43,>00,>00
       byte >52,>6A,>00,>30,>67,>42,>00,>00
       byte >52,>3E,>00,>43,>7B,>42,>00,>00
       byte >52,>35,>00,>57,>67,>43,>00,>00

* Lollipop Initialisation Data
initialisation_lollipop:               ; 6165
       byte >53,>2B,>00,>40,>80,>46,>00,>00
       byte >53,>8A,>00,>57,>67,>45,>00,>00
       byte >53,>09,>00,>80,>90,>44,>00,>00
       byte >53,>70,>00,>80,>90,>43,>00,>00
       byte >53,>74,>00,>57,>87,>42,>00,>00
       byte >53,>33,>00,>57,>67,>45,>00,>00
       byte >54,>78,>00,>37,>37,>47,>00,>00
       byte >54,>8A,>00,>7F,>7F,>47,>00,>00
       byte >54,>0B,>00,>57,>67,>46,>00,>00
       byte >54,>65,>00,>57,>87,>46,>00,>00
       byte >54,>53,>00,>43,>7B,>47,>00,>00
       byte >54,>4C,>00,>6B,>7B,>46,>00,>00
       byte >55,>7B,>00,>50,>60,>45,>00,>00
       byte >55,>87,>00,>57,>67,>45,>00,>00
       byte >55,>0D,>00,>30,>67,>43,>00,>00
       byte >55,>66,>00,>43,>87,>43,>00,>00
       byte >55,>53,>00,>6B,>7B,>42,>00,>00
       byte >55,>4F,>00,>57,>67,>47,>00,>00
       byte >56,>7E,>00,>37,>80,>44,>00,>00
       byte >56,>8C,>00,>57,>67,>44,>00,>00
       byte >56,>70,>00,>30,>90,>44,>00,>00
       byte >56,>66,>00,>6B,>87,>44,>00,>00
       byte >56,>3C,>00,>43,>7B,>42,>00,>00
       byte >56,>39,>00,>43,>7B,>42,>00,>00
       byte >57,>7E,>00,>87,>80,>47,>00,>00
       byte >57,>24,>00,>60,>70,>47,>00,>00
       byte >57,>70,>00,>57,>90,>47,>00,>00
       byte >57,>12,>00,>57,>40,>47,>00,>00
       byte >57,>5E,>00,>57,>67,>47,>00,>00
       byte >57,>1D,>00,>30,>67,>47,>00,>00
       byte >50,>17,>00,>40,>40,>42,>00,>00
       byte >50,>73,>00,>30,>67,>42,>00,>00
       byte >50,>07,>00,>57,>67,>43,>00,>00
       byte >50,>02,>00,>57,>67,>43,>00,>00
       byte >51,>0F,>00,>57,>67,>43,>00,>00
       byte >51,>3A,>00,>30,>48,>43,>00,>00
       byte >51,>41,>00,>80,>67,>42,>00,>00
       byte >51,>85,>00,>43,>7B,>42,>00,>00
       byte >52,>6C,>00,>57,>47,>43,>00,>00
       byte >52,>3A,>00,>57,>48,>43,>00,>00
       byte >52,>69,>00,>30,>40,>03,>00,>00
       byte >52,>80,>00,>30,>40,>03,>00,>00
       byte >53,>04,>00,>57,>67,>42,>00,>00
       byte >53,>4B,>00,>30,>88,>42,>00,>00
       byte >53,>11,>00,>57,>67,>46,>00,>00
       byte >53,>80,>00,>57,>40,>44,>00,>00
       byte >54,>69,>00,>30,>67,>46,>00,>00
       byte >54,>35,>00,>57,>90,>46,>00,>00
       byte >54,>69,>00,>30,>90,>46,>00,>00
       byte >54,>80,>00,>80,>80,>44,>00,>00
       byte >55,>57,>00,>57,>40,>46,>00,>00
       byte >55,>35,>00,>57,>40,>46,>00,>00
       byte >55,>25,>00,>6B,>7B,>43,>00,>00
       byte >55,>1B,>00,>57,>67,>44,>00,>00
       byte >56,>58,>00,>57,>40,>44,>00,>00
       byte >56,>4E,>00,>67,>40,>42,>00,>00
       byte >56,>37,>00,>57,>67,>46,>00,>00
       byte >56,>85,>00,>6B,>7B,>44,>00,>00
       byte >57,>5B,>00,>57,>67,>47,>00,>00
       byte >57,>4E,>00,>40,>67,>47,>00,>00
       byte >57,>49,>00,>57,>67,>47,>00,>00
       byte >57,>28,>00,>57,>67,>47,>00,>00
       byte >A1,>50,>00,>57,>40,>42,>00,>00
       byte >A1,>43,>00,>6B,>54,>42,>01,>00
       byte >A1,>40,>00,>43,>7B,>42,>02,>00
       byte >A1,>8F,>00,>57,>8F,>42,>03,>00
       byte >A1,>8F,>00,>43,>7B,>42,>04,>00
       byte >A1,>8F,>00,>6B,>7B,>42,>05,>00
       byte >A1,>45,>00,>80,>67,>42,>06,>00
       byte >A1,>38,>00,>6B,>54,>42,>07,>00
       byte >A1,>74,>00,>30,>40,>42,>06,>00
       byte >A1,>74,>00,>30,>88,>42,>05,>00
       byte >A1,>74,>00,>78,>88,>42,>04,>00
       byte >A1,>74,>00,>80,>40,>42,>03,>00
       byte >A1,>54,>00,>57,>40,>42,>02,>00
       byte >A1,>3B,>00,>43,>7B,>42,>01,>00
       byte >A1,>3B,>00,>6B,>7B,>42,>00,>00
       byte >A1,>53,>00,>80,>40,>42,>01,>00
       byte >31,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Mummy Initialisation Data
initialisation_mummy:                  ; 640d
       byte >70,>17,>00,>50,>50,>47,>00,>00
       byte >00,>00,>00,>68,>68,>00,>00,>00

* Dracula Initialisation Data
initialisation_dracula:                ; 641d
       byte >7C,>6D,>00,>50,>50,>44,>00,>00
       byte >00,>00,>00,>72,>72,>00,>00,>00

* Devil Initialisation Data
initialisation_devil:                  ; 642d
       byte >78,>43,>00,>50,>50,>43,>00,>00
       byte >00,>00,>00,>72,>72,>00,>00,>00

* Frankenstein Initialisation Data
initialisation_frankenstein:           ; 643d
       byte >74,>55,>00,>50,>50,>42,>00,>00
       byte >00,>00,>00,>50,>60,>00,>00,>00

* Hunchback Initialisation Data
initialisation_hunchback:              ; 644d
       byte >9C,>56,>00,>58,>38,>42,>00,>00
       byte >00,>00,>00,>50,>60,>00,>00,>00

* Door: #N$07 / #N$00
door_07_00:                            ; 645d
       byte >02,>07,>34,>50,>1F,>00,>04,>56
       byte >02,>00,>34,>50,>B7,>80,>04,>06

* Door: #N$19 / #N$00
door_19_00:                            ; 646d
       byte >02,>19,>34,>A0,>6F,>60,>B7,>03
       byte >02,>00,>34,>08,>6F,>E0,>06,>03

* Door: #N$01 / #N$00
door_01_00:                            ; 647d
       byte >0A,>01,>34,>50,>B7,>80,>04,>06
       byte >0A,>00,>34,>50,>1F,>00,>04,>56

* Door: #N$02 / #N$01
door_02_01:                            ; 648d
       byte >02,>02,>34,>A0,>6F,>60,>B7,>03
       byte >02,>01,>34,>08,>6F,>E0,>06,>03

* Door: #N$03 / #N$02
door_03_02:                            ; 649d
       byte >02,>03,>34,>A0,>6F,>60,>B7,>03
       byte >02,>02,>34,>08,>6F,>E0,>06,>03

* Door: #N$04 / #N$03
door_04_03:                            ; 64ad
       byte >02,>04,>34,>50,>1F,>00,>04,>56
       byte >02,>03,>34,>50,>B7,>80,>04,>06

* Door: #N$19 / #N$04
door_19_04:                            ; 64bd
       byte >02,>19,>34,>08,>6F,>E0,>06,>03
       byte >02,>04,>34,>80,>6F,>60,>B7,>03

* Door: #N$05 / #N$04
door_05_04:                            ; 64cd
       byte >02,>05,>34,>50,>1F,>00,>04,>56
       byte >02,>04,>34,>50,>B7,>80,>04,>06

* Door: #N$06 / #N$05
door_06_05:                            ; 64dd
       byte >02,>06,>34,>08,>6F,>E0,>06,>03
       byte >02,>05,>34,>A0,>6F,>60,>B7,>03

* Door: #N$1A / #N$06
door_1a_06:                            ; 64ed
       byte >03,>1A,>38,>48,>B6,>80,>16,>08
       byte >02,>06,>34,>50,>3F,>00,>04,>56

* Door: #N$08 / #N$06
door_08_06:                            ; 64fd
       byte >09,>08,>34,>50,>1F,>00,>04,>56
       byte >09,>06,>34,>50,>97,>80,>04,>06

* Door: #N$07 / #N$06
door_07_06:                            ; 650d
       byte >02,>07,>34,>08,>6F,>E0,>06,>03
       byte >02,>06,>34,>A0,>6F,>60,>B7,>03

* Door: #N$09 / #N$08
door_09_08:                            ; 651d
       byte >02,>09,>34,>50,>1F,>00,>04,>57
       byte >02,>08,>34,>50,>B7,>80,>04,>06

* Door: #N$0A / #N$09
door_0a_09:                            ; 652d
       byte >02,>0A,>34,>A0,>6F,>60,>B7,>03
       byte >02,>09,>34,>08,>6F,>E0,>06,>03

* Door: #N$0B / #N$0A
door_0b_0a:                            ; 653d
       byte >02,>0B,>34,>A0,>6F,>60,>B7,>03
       byte >02,>0A,>34,>08,>6F,>E0,>06,>03

* Door: #N$0C / #N$0B
door_0c_0b:                            ; 654d
       byte >02,>0C,>34,>A0,>6F,>60,>B7,>03
       byte >02,>0B,>34,>08,>6F,>E0,>06,>03

* Door: #N$0D / #N$0C
door_0d_0c:                            ; 655d
       byte >02,>0D,>34,>A0,>6F,>60,>B7,>03
       byte >02,>0C,>34,>08,>6F,>E0,>06,>03

* Door: #N$0E / #N$0D
door_0e_0d:                            ; 656d
       byte >02,>0E,>34,>50,>B7,>80,>04,>06
       byte >02,>0D,>34,>50,>1F,>00,>04,>56

* Door: #N$0F / #N$0E
door_0f_0e:                            ; 657d
       byte >02,>0F,>34,>50,>B7,>80,>04,>06
       byte >02,>0E,>34,>50,>1F,>00,>04,>56

* Door: #N$10 / #N$0F
door_10_0f:                            ; 658d
       byte >02,>10,>34,>50,>B7,>80,>04,>06
       byte >02,>0F,>34,>50,>1F,>00,>04,>56

* Door: #N$11 / #N$10
door_11_10:                            ; 659d
       byte >08,>11,>34,>50,>B7,>80,>04,>06
       byte >08,>10,>34,>50,>1F,>00,>04,>56

* Door: #N$12 / #N$11
door_12_11:                            ; 65ad
       byte >02,>12,>34,>50,>B7,>80,>04,>06
       byte >02,>11,>34,>50,>1F,>00,>04,>56

* Door: #N$13 / #N$12
door_13_12:                            ; 65bd
       byte >02,>13,>34,>50,>B7,>80,>04,>06
       byte >02,>12,>34,>50,>1F,>00,>04,>56

* Door: #N$14 / #N$13
door_14_13:                            ; 65cd
       byte >02,>14,>34,>08,>6F,>E0,>06,>03
       byte >02,>13,>34,>A0,>6F,>60,>B7,>03

* Door: #N$15 / #N$14
door_15_14:                            ; 65dd
       byte >02,>15,>34,>08,>6F,>E0,>06,>03
       byte >02,>14,>34,>A0,>6F,>60,>B7,>03

* Door: #N$16 / #N$15
door_16_15:                            ; 65ed
       byte >02,>16,>34,>08,>6F,>E0,>06,>03
       byte >02,>15,>34,>A0,>6F,>60,>B7,>03

* Door: #N$17 / #N$16
door_17_16:                            ; 65fd
       byte >08,>17,>34,>08,>6F,>E0,>06,>03
       byte >08,>16,>34,>A0,>6F,>60,>B7,>03

* Door: #N$18 / #N$17
door_18_17:                            ; 660d
       byte >09,>18,>34,>50,>1F,>00,>04,>56
       byte >09,>17,>34,>50,>B7,>80,>04,>06

* Door: #N$18 / #N$02
door_18_02:                            ; 661d
       byte >02,>18,>34,>50,>B7,>80,>04,>06
       byte >02,>02,>34,>50,>3F,>00,>04,>56

* Door: #N$1A / #N$1B
door_1a_1b:                            ; 662d
       byte >02,>1A,>34,>50,>28,>00,>04,>56
       byte >02,>1B,>34,>50,>B7,>80,>04,>06

* Door: #N$1B / #N$1C
door_1b_1c:                            ; 663d
       byte >02,>1B,>34,>A0,>6F,>60,>B7,>03
       byte >03,>1C,>74,>08,>77,>E0,>08,>F5

* Door: #N$1C / #N$1D
door_1c_1d:                            ; 664d
       byte >02,>1C,>34,>98,>6F,>60,>AF,>03
       byte >01,>1D,>34,>18,>6F,>E0,>06,>03

* Door: #N$1E / #N$1F
door_1e_1f:                            ; 665d
       byte >02,>1E,>34,>50,>1F,>00,>04,>56
       byte >02,>1F,>34,>50,>B7,>80,>04,>06

* Door: #N$1F / #N$20
door_1f_20:                            ; 666d
       byte >02,>1F,>34,>08,>6F,>E0,>06,>03
       byte >02,>20,>34,>A0,>6F,>60,>B7,>03

* Door: #N$20 / #N$21
door_20_21:                            ; 667d
       byte >02,>20,>34,>08,>6F,>E0,>06,>03
       byte >02,>21,>34,>A0,>6F,>60,>B7,>03

* Door: #N$21 / #N$22
door_21_22:                            ; 668d
       byte >02,>21,>34,>50,>B7,>80,>04,>06
       byte >02,>22,>34,>50,>1F,>00,>04,>56

* Door: #N$22 / #N$23
door_22_23:                            ; 669d
       byte >02,>22,>34,>50,>B7,>80,>04,>06
       byte >02,>23,>34,>50,>1F,>00,>04,>56

* Door: #N$23 / #N$24
door_23_24:                            ; 66ad
       byte >02,>23,>34,>A0,>6F,>60,>B7,>03
       byte >02,>24,>34,>08,>6F,>E0,>06,>03

* Door: #N$24 / #N$25
door_24_25:                            ; 66bd
       byte >02,>24,>34,>A0,>6F,>60,>B7,>03
       byte >02,>25,>34,>08,>6F,>E0,>06,>03

* Door: #N$25 / #N$1E
door_25_1e:                            ; 66cd
       byte >0A,>25,>34,>50,>1F,>00,>04,>56
       byte >0A,>1E,>34,>50,>B7,>80,>04,>06

* Door: #N$24 / #N$26
door_24_26:                            ; 66dd
       byte >02,>24,>34,>50,>3F,>00,>04,>56
       byte >03,>26,>38,>48,>B6,>80,>16,>08

* Door: #N$03 / #N$26
door_03_26:                            ; 66ed
       byte >02,>02,>34,>50,>97,>80,>04,>06
       byte >02,>26,>34,>50,>28,>00,>04,>56

* Door: #N$27 / #N$28
door_27_28:                            ; 66fd
       byte >02,>27,>34,>50,>B7,>80,>04,>06
       byte >02,>28,>34,>50,>1F,>00,>04,>56

* Door: #N$28 / #N$29
door_28_29:                            ; 670d
       byte >0A,>28,>34,>50,>B7,>80,>04,>06
       byte >0A,>29,>34,>50,>1F,>00,>04,>56

* Door: #N$29 / #N$2A
door_29_2a:                            ; 671d
       byte >02,>29,>34,>08,>6F,>E0,>06,>03
       byte >02,>2A,>34,>A0,>6F,>60,>B7,>03

* Door: #N$2A / #N$2B
door_2a_2b:                            ; 672d
       byte >02,>2A,>34,>08,>6F,>E0,>06,>03
       byte >02,>2B,>34,>A0,>6F,>60,>B7,>03

* Door: #N$2B / #N$2C
door_2b_2c:                            ; 673d
       byte >02,>2B,>34,>50,>1F,>00,>04,>56
       byte >02,>2C,>34,>50,>B7,>80,>04,>06

* Door: #N$2C / #N$2D
door_2c_2d:                            ; 674d
       byte >02,>2C,>34,>50,>1F,>00,>04,>56
       byte >02,>2D,>34,>50,>B7,>80,>04,>06

* Door: #N$2D / #N$2E
door_2d_2e:                            ; 675d
       byte >09,>2D,>34,>A0,>6F,>60,>B7,>03
       byte >09,>2E,>34,>08,>6F,>E0,>06,>03

* Door: #N$2E / #N$27
door_2e_27:                            ; 676d
       byte >02,>2E,>34,>A0,>6F,>60,>B7,>03
       byte >02,>27,>34,>08,>6F,>E0,>06,>03

* Door: #N$27 / #N$2F
door_27_2f:                            ; 677d
       byte >02,>27,>34,>50,>1F,>00,>04,>56
       byte >03,>2F,>38,>48,>B6,>80,>16,>08

* Door: #N$20 / #N$2F
door_20_2f:                            ; 678d
       byte >0B,>20,>34,>50,>97,>80,>04,>06
       byte >0B,>2F,>34,>50,>28,>00,>04,>56

* Door: #N$30 / #N$31
door_30_31:                            ; 679d
       byte >01,>30,>34,>50,>A7,>80,>04,>06
       byte >01,>31,>34,>50,>27,>00,>04,>56

* Door: #N$31 / #N$32
door_31_32:                            ; 67ad
       byte >01,>31,>34,>50,>AF,>80,>04,>06
       byte >01,>32,>34,>50,>27,>00,>04,>56

* Door: #N$32 / #N$33
door_32_33:                            ; 67bd
       byte >01,>32,>34,>50,>AF,>80,>04,>06
       byte >01,>33,>34,>50,>2F,>00,>04,>56

* Door: #N$33 / #N$34
door_33_34:                            ; 67cd
       byte >01,>33,>34,>50,>A7,>80,>04,>06
       byte >01,>34,>34,>50,>27,>00,>04,>56

* Door: #N$34 / #N$35
door_34_35:                            ; 67dd
       byte >01,>34,>34,>50,>AF,>80,>04,>06
       byte >01,>35,>34,>50,>2F,>00,>04,>56

* Door: #N$33 / #N$36
door_33_36:                            ; 67ed
       byte >01,>33,>34,>90,>6F,>60,>B7,>03
       byte >01,>36,>34,>10,>6F,>E0,>06,>03

* Door: #N$36 / #N$37
door_36_37:                            ; 67fd
       byte >01,>36,>34,>98,>6F,>60,>B7,>03
       byte >01,>37,>34,>10,>6F,>E0,>06,>03

* Door: #N$37 / #N$38
door_37_38:                            ; 680d
       byte >01,>37,>34,>98,>6F,>60,>B7,>03
       byte >01,>38,>34,>18,>6F,>E0,>06,>03

* Door: #N$38 / #N$39
door_38_39:                            ; 681d
       byte >01,>38,>34,>50,>A7,>80,>04,>06
       byte >01,>39,>34,>50,>2F,>00,>04,>56

* Door: #N$38 / #N$3A
door_38_3a:                            ; 682d
       byte >0D,>38,>34,>90,>6F,>60,>B7,>03
       byte >0D,>3A,>34,>18,>6F,>E0,>06,>03

* Door: #N$39 / #N$3B
door_39_3b:                            ; 683d
       byte >01,>39,>34,>90,>6F,>60,>B7,>03
       byte >01,>3B,>34,>18,>6F,>E0,>06,>03

* Door: #N$3A / #N$3B
door_3a_3b:                            ; 684d
       byte >01,>3A,>34,>50,>A7,>80,>04,>06
       byte >01,>3B,>34,>50,>2F,>00,>04,>56

* Door: #N$3B / #N$3C
door_3b_3c:                            ; 685d
       byte >0D,>3B,>34,>50,>A7,>80,>04,>06
       byte >0D,>3C,>34,>50,>2F,>00,>04,>56

* Door: #N$3B / #N$3D
door_3b_3d:                            ; 686d
       byte >01,>3B,>34,>90,>6F,>60,>B7,>03
       byte >01,>3D,>34,>18,>6F,>E0,>06,>03

* Door: #N$3C / #N$3E
door_3c_3e:                            ; 687d
       byte >01,>3C,>34,>90,>6F,>60,>B7,>03
       byte >01,>3E,>34,>18,>6F,>E0,>06,>03

* Door: #N$3D / #N$3E
door_3d_3e:                            ; 688d
       byte >01,>3D,>34,>50,>A7,>80,>04,>06
       byte >01,>3E,>34,>50,>2F,>00,>04,>56

* Door: #N$3D / #N$3F
door_3d_3f:                            ; 689d
       byte >0E,>3D,>34,>90,>6F,>60,>B7,>03
       byte >0E,>3F,>34,>10,>6F,>E0,>06,>03

* Door: #N$34 / #N$40
door_34_40:                            ; 68ad
       byte >01,>3F,>34,>98,>6F,>60,>B7,>03
       byte >01,>40,>34,>18,>6F,>E0,>06,>03

* Door: #N$40 / #N$41
door_40_41:                            ; 68bd
       byte >01,>40,>34,>90,>6F,>60,>B7,>03
       byte >01,>41,>34,>18,>6F,>E0,>06,>03

* Door: #N$40 / #N$42
door_40_42:                            ; 68cd
       byte >01,>40,>34,>50,>2F,>00,>04,>56
       byte >01,>42,>34,>50,>AF,>80,>04,>06

* Door: #N$42 / #N$43
door_42_43:                            ; 68dd
       byte >01,>42,>34,>50,>27,>00,>04,>56
       byte >01,>43,>34,>50,>A7,>80,>04,>06

* Door: #N$43 / #N$44
door_43_44:                            ; 68ed
       byte >01,>43,>34,>90,>6F,>60,>B7,>03
       byte >01,>44,>34,>10,>6F,>E0,>06,>03

* Door: #N$44 / #N$45
door_44_45:                            ; 68fd
       byte >0C,>44,>34,>98,>6F,>60,>B7,>03
       byte >0C,>45,>34,>18,>6F,>E0,>06,>03

* Door: #N$43 / #N$46
door_43_46:                            ; 690d
       byte >01,>43,>34,>50,>2F,>00,>04,>56
       byte >01,>46,>34,>50,>A7,>80,>04,>06

* Door: #N$46 / #N$47
door_46_47:                            ; 691d
       byte >01,>46,>34,>18,>6F,>E0,>06,>03
       byte >01,>47,>34,>98,>6F,>60,>B7,>03

* Door: #N$47 / #N$48
door_47_48:                            ; 692d
       byte >0C,>47,>34,>10,>6F,>E0,>06,>03
       byte >0C,>48,>34,>90,>6F,>60,>B7,>03

* Door: #N$48 / #N$49
door_48_49:                            ; 693d
       byte >01,>48,>34,>50,>A7,>80,>04,>06
       byte >01,>49,>34,>50,>27,>00,>04,>56

* Door: #N$48 / #N$4A
door_48_4a:                            ; 694d
       byte >0E,>48,>34,>18,>6F,>E0,>06,>03
       byte >0E,>4A,>34,>98,>6F,>60,>B7,>03

* Door: #N$4A / #N$4B
door_4a_4b:                            ; 695d
       byte >01,>4A,>34,>10,>6F,>E0,>06,>03
       byte >01,>4B,>34,>90,>6F,>60,>B7,>03

* Door: #N$4B / #N$4C
door_4b_4c:                            ; 696d
       byte >01,>4B,>34,>50,>2F,>00,>04,>56
       byte >01,>4C,>34,>50,>A7,>80,>04,>06

* Door: #N$48 / #N$4D
door_48_4d:                            ; 697d
       byte >01,>48,>34,>50,>2F,>00,>04,>56
       byte >01,>4D,>34,>50,>AF,>80,>04,>06

* Door: #N$4D / #N$4E
door_4d_4e:                            ; 698d
       byte >0C,>4D,>34,>50,>27,>00,>04,>56
       byte >0C,>4E,>34,>50,>A7,>80,>04,>06

* Door: #N$4E / #N$4F
door_4e_4f:                            ; 699d
       byte >01,>4E,>34,>90,>6F,>60,>B7,>03
       byte >01,>4F,>34,>10,>6F,>E0,>06,>03

* Door: #N$4F / #N$50
door_4f_50:                            ; 69ad
       byte >01,>4F,>34,>98,>6F,>60,>B7,>03
       byte >01,>50,>34,>18,>6F,>E0,>06,>03

* Door: #N$50 / #N$51
door_50_51:                            ; 69bd
       byte >01,>50,>34,>50,>A7,>80,>04,>06
       byte >01,>51,>34,>50,>27,>00,>04,>56

* Door: #N$50 / #N$52
door_50_52:                            ; 69cd
       byte >0D,>50,>34,>90,>6F,>60,>B7,>03
       byte >0D,>52,>34,>10,>6F,>E0,>06,>03

* Door: #N$52 / #N$53
door_52_53:                            ; 69dd
       byte >01,>52,>34,>98,>6F,>60,>B7,>03
       byte >01,>53,>34,>18,>6F,>E0,>06,>03

* Door: #N$1D / #N$43
door_1d_43:                            ; 69ed
       byte >01,>1D,>34,>90,>6F,>60,>B7,>03
       byte >01,>43,>34,>18,>6F,>E0,>06,>03

* Door: #N$46 / #N$51
door_46_51:                            ; 69fd
       byte >01,>46,>34,>50,>2F,>00,>04,>56
       byte >01,>51,>34,>50,>AF,>80,>04,>06

* Door: #N$4C / #N$55
door_4c_55:                            ; 6a0d
       byte >01,>4C,>34,>18,>6F,>E0,>06,>03
       byte >01,>55,>34,>90,>6F,>60,>B7,>03

* Door: #N$54 / #N$55
door_54_55:                            ; 6a1d
       byte >01,>54,>34,>90,>6F,>60,>B7,>03
       byte >01,>55,>34,>18,>6F,>E0,>06,>03

* Door: #N$54 / #N$30
door_54_30:                            ; 6a2d
       byte >01,>54,>34,>18,>6F,>E0,>06,>03
       byte >01,>30,>34,>90,>6F,>60,>B7,>03

* Door: #N$2D / #N$75
door_2d_75:                            ; 6a3d
       byte >02,>2D,>34,>08,>6F,>E0,>06,>03
       byte >02,>75,>34,>A0,>6F,>60,>B7,>03

* Door: #N$75 / #N$76
door_75_76:                            ; 6a4d
       byte >02,>75,>34,>50,>B7,>80,>04,>06
       byte >02,>76,>34,>50,>1F,>00,>04,>56

* Door: #N$76 / #N$77
door_76_77:                            ; 6a5d
       byte >02,>76,>34,>A0,>6F,>60,>B7,>03
       byte >02,>77,>34,>08,>6F,>E0,>06,>03

* Door: #N$77 / #N$78
door_77_78:                            ; 6a6d
       byte >02,>77,>34,>A0,>6F,>60,>B7,>03
       byte >02,>78,>34,>08,>6F,>E0,>06,>03

* Door: #N$78 / #N$79
door_78_79:                            ; 6a7d
       byte >02,>78,>34,>50,>B7,>80,>04,>06
       byte >02,>79,>34,>50,>1F,>00,>04,>56

* Door: #N$79 / #N$7A
door_79_7a:                            ; 6a8d
       byte >02,>79,>34,>50,>B7,>80,>04,>06
       byte >02,>7A,>34,>50,>1F,>00,>04,>56

* Door: #N$7A / #N$7B
door_7a_7b:                            ; 6a9d
       byte >02,>7A,>34,>08,>6F,>E0,>06,>03
       byte >02,>7B,>34,>A0,>6F,>60,>B7,>03

* Door: #N$7B / #N$7C
door_7b_7c:                            ; 6aad
       byte >0B,>7B,>34,>08,>6F,>E0,>06,>03
       byte >0B,>7C,>34,>A0,>6F,>60,>B7,>03

* Door: #N$7C / #N$7D
door_7c_7d:                            ; 6abd
       byte >0B,>7C,>34,>50,>1F,>00,>04,>56
       byte >0B,>7D,>34,>50,>B7,>80,>04,>06

* Door: #N$7D / #N$76
door_7d_76:                            ; 6acd
       byte >02,>7D,>34,>50,>1F,>00,>04,>56
       byte >02,>76,>34,>50,>B7,>80,>04,>06

* Door: #N$7A / #N$7E
door_7a_7e:                            ; 6add
       byte >08,>7A,>34,>A0,>6F,>60,>B7,>03
       byte >08,>7E,>34,>08,>6F,>E0,>06,>03

* Door: #N$7E / #N$29
door_7e_29:                            ; 6aed
       byte >02,>7E,>34,>50,>1F,>00,>04,>56
       byte >02,>29,>34,>50,>B7,>80,>04,>06

* Door: #N$21 / #N$88
door_21_88:                            ; 6afd
       byte >02,>21,>34,>50,>1F,>00,>04,>56
       byte >02,>88,>34,>50,>B7,>80,>04,>06

* Door: #N$7F / #N$80
door_7f_80:                            ; 6b0d
       byte >09,>7F,>34,>A0,>6F,>60,>B7,>03
       byte >09,>80,>34,>08,>6F,>E0,>06,>03

* Door: #N$80 / #N$82
door_80_82:                            ; 6b1d
       byte >02,>80,>34,>50,>B7,>80,>04,>06
       byte >02,>82,>34,>50,>1F,>00,>04,>56

* Door: #N$82 / #N$81
door_82_81:                            ; 6b2d
       byte >02,>82,>34,>08,>6F,>E0,>06,>03
       byte >02,>81,>34,>A0,>6F,>60,>B7,>03

* Door: #N$81 / #N$7F
door_81_7f:                            ; 6b3d
       byte >02,>81,>34,>50,>1F,>00,>04,>56
       byte >02,>7F,>34,>50,>B7,>80,>04,>06

* Door: #N$82 / #N$87
door_82_87:                            ; 6b4d
       byte >0A,>82,>34,>A0,>6F,>60,>B7,>03
       byte >0A,>87,>34,>08,>6F,>E0,>06,>03

* Door: #N$87 / #N$88
door_87_88:                            ; 6b5d
       byte >02,>87,>34,>A0,>6F,>60,>B7,>03
       byte >02,>88,>34,>08,>6F,>E0,>06,>03

* Door: #N$87 / #N$8B
door_87_8b:                            ; 6b6d
       byte >02,>87,>34,>50,>B7,>80,>04,>06
       byte >02,>8B,>34,>50,>1F,>00,>04,>56

* Door: #N$8B / #N$8C
door_8b_8c:                            ; 6b7d
       byte >02,>8B,>34,>50,>B7,>80,>04,>06
       byte >02,>8C,>34,>50,>1F,>00,>04,>56

* Door: #N$8C / #N$8D
door_8c_8d:                            ; 6b8d
       byte >09,>8C,>34,>50,>B7,>80,>04,>06
       byte >09,>8D,>34,>50,>1F,>00,>04,>56

* Door: #N$83 / #N$84
door_83_84:                            ; 6b9d
       byte >08,>83,>34,>A0,>6F,>60,>B7,>03
       byte >08,>84,>34,>08,>6F,>E0,>06,>03

* Door: #N$84 / #N$86
door_84_86:                            ; 6bad
       byte >02,>84,>34,>50,>B7,>80,>04,>06
       byte >02,>86,>34,>50,>1F,>00,>04,>56

* Door: #N$86 / #N$85
door_86_85:                            ; 6bbd
       byte >02,>86,>34,>08,>6F,>E0,>06,>03
       byte >02,>85,>34,>A0,>6F,>60,>B7,>03

* Door: #N$85 / #N$83
door_85_83:                            ; 6bcd
       byte >02,>85,>34,>50,>1F,>00,>04,>56
       byte >02,>83,>34,>50,>B7,>80,>04,>06

* Door: #N$84 / #N$89
door_84_89:                            ; 6bdd
       byte >0B,>84,>34,>A0,>6F,>60,>B7,>03
       byte >0B,>89,>34,>08,>6F,>E0,>06,>03

* Door: #N$89 / #N$8D
door_89_8d:                            ; 6bed
       byte >02,>89,>34,>50,>1F,>00,>04,>56
       byte >02,>8D,>34,>50,>B7,>80,>04,>06

* Door: #N$89 / #N$8A
door_89_8a:                            ; 6bfd
       byte >02,>89,>34,>A0,>6F,>60,>B7,>03
       byte >02,>8A,>34,>08,>6F,>E0,>06,>03

* Door: #N$8A / #N$23
door_8a_23:                            ; 6c0d
       byte >09,>8A,>34,>50,>1F,>00,>04,>56
       byte >09,>23,>34,>50,>B7,>80,>04,>06

* Door: #N$13 / #N$73
door_13_73:                            ; 6c1d
       byte >02,>13,>34,>08,>6F,>E0,>06,>03
       byte >02,>73,>34,>A0,>6F,>60,>B7,>03

* Door: #N$11 / #N$6B
door_11_6b:                            ; 6c2d
       byte >02,>11,>34,>80,>6F,>60,>B7,>03
       byte >02,>6B,>34,>08,>6F,>E0,>06,>03

* Door: #N$6B / #N$6C
door_6b_6c:                            ; 6c3d
       byte >02,>6B,>34,>A0,>6F,>60,>B7,>03
       byte >02,>6C,>34,>08,>6F,>E0,>06,>03

* Door: #N$6C / #N$03
door_6c_03:                            ; 6c4d
       byte >0A,>6C,>34,>A0,>6F,>60,>B7,>03
       byte >0A,>03,>34,>08,>6F,>E0,>06,>03

* Door: #N$0F / #N$6D
door_0f_6d:                            ; 6c5d
       byte >09,>0F,>34,>80,>6F,>60,>B7,>03
       byte >09,>6D,>34,>08,>6F,>E0,>06,>03

* Door: #N$6D / #N$6E
door_6d_6e:                            ; 6c6d
       byte >02,>6D,>34,>A0,>6F,>60,>B7,>03
       byte >02,>6E,>34,>08,>6F,>E0,>06,>03

* Door: #N$6E / #N$05
door_6e_05:                            ; 6c7d
       byte >02,>6E,>34,>A0,>6F,>60,>B7,>03
       byte >02,>05,>34,>08,>6F,>E0,>06,>03

* Door: #N$0D / #N$6F
door_0d_6f:                            ; 6c8d
       byte >0A,>0D,>34,>50,>B7,>80,>04,>06
       byte >0A,>6F,>34,>50,>1F,>00,>04,>56

* Door: #N$6F / #N$70
door_6f_70:                            ; 6c9d
       byte >02,>6F,>34,>50,>B7,>80,>04,>06
       byte >02,>70,>34,>70,>1F,>00,>04,>56

* Door: #N$70 / #N$71
door_70_71:                            ; 6cad
       byte >02,>70,>34,>30,>1F,>00,>04,>56
       byte >03,>71,>38,>48,>B6,>80,>16,>08

* Door: #N$71 / #N$72
door_71_72:                            ; 6cbd
       byte >02,>71,>34,>50,>28,>00,>04,>56
       byte >03,>72,>38,>48,>B6,>80,>16,>08

* Door: #N$72 / #N$35
door_72_35:                            ; 6ccd
       byte >02,>72,>34,>50,>28,>00,>04,>56
       byte >01,>35,>34,>50,>A7,>80,>04,>06

* Door: #N$30 / #N$74
door_30_74:                            ; 6cdd
       byte >01,>30,>34,>18,>6F,>E0,>06,>03
       byte >01,>74,>34,>90,>6F,>60,>B7,>03

* Door: #N$56 / #N$57
door_56_57:                            ; 6ced
       byte >02,>56,>34,>A0,>6F,>60,>B7,>03
       byte >02,>57,>34,>08,>6F,>E0,>06,>03

* Door: #N$57 / #N$58
door_57_58:                            ; 6cfd
       byte >09,>57,>34,>A0,>6F,>60,>B7,>03
       byte >09,>58,>34,>08,>6F,>E0,>06,>03

* Door: #N$58 / #N$59
door_58_59:                            ; 6d0d
       byte >02,>58,>34,>A0,>6F,>60,>B7,>03
       byte >02,>59,>34,>08,>6F,>E0,>06,>03

* Door: #N$5A / #N$5B
door_5a_5b:                            ; 6d1d
       byte >02,>5A,>34,>A0,>6F,>60,>B7,>03
       byte >02,>5B,>34,>08,>6F,>E0,>06,>03

* Door: #N$5B / #N$5C
door_5b_5c:                            ; 6d2d
       byte >08,>5B,>34,>A0,>6F,>60,>B7,>03
       byte >08,>5C,>34,>08,>6F,>E0,>06,>03

* Door: #N$5C / #N$5D
door_5c_5d:                            ; 6d3d
       byte >09,>5C,>34,>A0,>6F,>60,>B7,>03
       byte >09,>5D,>34,>08,>6F,>E0,>06,>03

* Door: #N$5E / #N$5F
door_5e_5f:                            ; 6d4d
       byte >08,>5E,>34,>A0,>6F,>60,>B7,>03
       byte >08,>5F,>34,>08,>6F,>E0,>06,>03

* Door: #N$5F / #N$60
door_5f_60:                            ; 6d5d
       byte >08,>5F,>34,>A0,>6F,>60,>B7,>03
       byte >08,>60,>34,>08,>6F,>E0,>06,>03

* Door: #N$60 / #N$61
door_60_61:                            ; 6d6d
       byte >02,>60,>34,>A0,>6F,>60,>B7,>03
       byte >02,>61,>34,>08,>6F,>E0,>06,>03

* Door: #N$62 / #N$63
door_62_63:                            ; 6d7d
       byte >02,>62,>34,>A0,>6F,>60,>B7,>03
       byte >02,>63,>34,>08,>6F,>E0,>06,>03

* Door: #N$63 / #N$64
door_63_64:                            ; 6d8d
       byte >02,>63,>34,>A0,>6F,>60,>B7,>03
       byte >02,>64,>34,>08,>6F,>E0,>06,>03

* Door: #N$64 / #N$65
door_64_65:                            ; 6d9d
       byte >0B,>64,>34,>A0,>6F,>60,>B7,>03
       byte >0B,>65,>34,>08,>6F,>E0,>06,>03

* Door: #N$56 / #N$5A
door_56_5a:                            ; 6dad
       byte >02,>56,>34,>50,>B7,>80,>04,>06
       byte >02,>5A,>34,>50,>1F,>00,>04,>56

* Door: #N$5A / #N$5E
door_5a_5e:                            ; 6dbd
       byte >0A,>5A,>34,>50,>B7,>80,>04,>06
       byte >0A,>5E,>34,>50,>1F,>00,>04,>56

* Door: #N$5E / #N$62
door_5e_62:                            ; 6dcd
       byte >02,>5E,>34,>50,>B7,>80,>04,>06
       byte >02,>62,>34,>50,>1F,>00,>04,>56

* Door: #N$57 / #N$5B
door_57_5b:                            ; 6ddd
       byte >02,>57,>34,>50,>B7,>80,>04,>06
       byte >02,>5B,>34,>50,>1F,>00,>04,>56

* Door: #N$5B / #N$5F
door_5b_5f:                            ; 6ded
       byte >09,>5B,>34,>30,>B7,>80,>04,>06
       byte >09,>5F,>34,>30,>1F,>00,>04,>56

* Door: #N$5F / #N$63
door_5f_63:                            ; 6dfd
       byte >0A,>5F,>34,>50,>B7,>80,>04,>06
       byte >0A,>63,>34,>50,>1F,>00,>04,>56

* Door: #N$58 / #N$5C
door_58_5c:                            ; 6e0d
       byte >02,>58,>34,>50,>B7,>80,>04,>06
       byte >02,>5C,>34,>50,>1F,>00,>04,>56

* Door: #N$5C / #N$60
door_5c_60:                            ; 6e1d
       byte >08,>5C,>34,>70,>B7,>80,>04,>06
       byte >08,>60,>34,>70,>1F,>00,>04,>56

* Door: #N$60 / #N$64
door_60_64:                            ; 6e2d
       byte >0A,>60,>34,>50,>B7,>80,>04,>06
       byte >0A,>64,>34,>50,>1F,>00,>04,>56

* Door: #N$59 / #N$5D
door_59_5d:                            ; 6e3d
       byte >0B,>59,>34,>50,>B7,>80,>04,>06
       byte >0B,>5D,>34,>50,>1F,>00,>04,>56

* Door: #N$5D / #N$61
door_5d_61:                            ; 6e4d
       byte >02,>5D,>34,>50,>B7,>80,>04,>06
       byte >02,>61,>34,>50,>1F,>00,>04,>56

* Door: #N$61 / #N$65
door_61_65:                            ; 6e5d
       byte >02,>61,>34,>50,>B7,>80,>04,>06
       byte >02,>65,>34,>50,>1F,>00,>04,>56

* Door: #N$67 / #N$56
door_67_56:                            ; 6e6d
       byte >0A,>67,>34,>50,>B7,>80,>04,>06
       byte >0A,>56,>34,>50,>1F,>00,>04,>56

* Door: #N$68 / #N$59
door_68_59:                            ; 6e7d
       byte >08,>68,>34,>50,>B7,>80,>04,>06
       byte >08,>59,>34,>50,>1F,>00,>04,>56

* Door: #N$69 / #N$56
door_69_56:                            ; 6e8d
       byte >0B,>69,>34,>A0,>6F,>60,>B7,>03
       byte >0B,>56,>34,>08,>6F,>E0,>06,>03

* Door: #N$6A / #N$62
door_6a_62:                            ; 6e9d
       byte >09,>6A,>34,>A0,>6F,>60,>B7,>03
       byte >09,>62,>34,>08,>6F,>E0,>06,>03

* Door: #N$66 / #N$5B
door_66_5b:                            ; 6ead
       byte >0B,>66,>34,>30,>1F,>00,>04,>56
       byte >0B,>5B,>34,>70,>B7,>80,>04,>06

* Door: #N$66 / #N$5C
door_66_5c:                            ; 6ebd
       byte >0B,>66,>34,>70,>1F,>00,>04,>56
       byte >0B,>5C,>34,>30,>B7,>80,>04,>06

* Door: #N$66 / #N$5F
door_66_5f:                            ; 6ecd
       byte >0B,>66,>34,>30,>B7,>80,>04,>06
       byte >0B,>5F,>34,>70,>1F,>00,>04,>56

* Door: #N$66 / #N$60
door_66_60:                            ; 6edd
       byte >0B,>66,>34,>70,>B7,>80,>04,>06
       byte >0B,>60,>34,>30,>1F,>00,>04,>56

* Door: #N$65 / #N$1B
door_65_1b:                            ; 6eed
       byte >02,>65,>34,>A0,>6F,>60,>B7,>03
       byte >02,>1B,>34,>08,>6F,>E0,>06,>03

* Door: #N$40 / #N$8F
door_40_8f:                            ; 6efd
       byte >01,>40,>34,>50,>A7,>80,>04,>06
       byte >01,>8F,>34,>50,>2F,>00,>04,>56

* Door: #N$54 / #N$90
door_54_90:                            ; 6f0d
       byte >01,>54,>34,>50,>A7,>80,>04,>06
       byte >01,>90,>34,>50,>2F,>00,>04,>56

* Door: #N$90 / #N$91
door_90_91:                            ; 6f1d
       byte >01,>90,>34,>50,>A7,>80,>04,>06
       byte >01,>91,>34,>50,>2F,>00,>04,>56

* Door: #N$91 / #N$92
door_91_92:                            ; 6f2d
       byte >01,>91,>34,>90,>6F,>60,>B7,>03
       byte >01,>92,>34,>18,>6F,>E0,>06,>03

* Door: #N$92 / #N$93
door_92_93:                            ; 6f3d
       byte >01,>92,>34,>90,>6F,>60,>B7,>03
       byte >01,>93,>34,>18,>6F,>E0,>06,>03

* Door: #N$93 / #N$94
door_93_94:                            ; 6f4d
       byte >01,>93,>34,>90,>6F,>60,>B7,>03
       byte >01,>94,>34,>18,>6F,>E0,>06,>03

* Door: #N$3A / #N$94
door_3a_94:                            ; 6f5d
       byte >01,>3A,>34,>50,>2F,>00,>04,>56
       byte >01,>94,>34,>50,>A7,>80,>04,>06
_6f6d:
       byte >19,>73,>34,>50,>70,>03,>24,>E4
       byte >1B,>74,>34,>48,>74,>03,>00,>00
_6f7d:
       byte >19,>03,>34,>30,>70,>03,>24,>E4
       byte >1B,>65,>34,>38,>74,>03,>00,>00
_6f8d:
       byte >19,>61,>34,>50,>70,>03,>24,>E4
       byte >1B,>4B,>34,>48,>74,>03,>00,>00
_6f9d:
       byte >19,>2D,>34,>50,>90,>03,>24,>E4
       byte >1B,>8D,>34,>48,>94,>03,>00,>00
_6fad:
       byte >19,>76,>34,>50,>70,>03,>24,>E4
       byte >1B,>84,>34,>48,>74,>03,>00,>00
_6fbd:
       byte >19,>8B,>34,>50,>70,>03,>24,>E4
       byte >1B,>6C,>34,>48,>74,>03,>00,>00
_6fcd:
       byte >19,>8D,>34,>50,>50,>03,>24,>E4
       byte >1B,>6E,>34,>48,>54,>03,>00,>00
_6fdd:
       byte >19,>21,>34,>70,>70,>03,>24,>E4
       byte >1B,>03,>34,>68,>74,>03,>00,>00
_6fed:
       byte >19,>15,>34,>50,>80,>03,>24,>E4
       byte >1B,>66,>34,>48,>74,>03,>00,>00
_6ffd:
       byte >19,>78,>34,>70,>70,>03,>24,>E4
       byte >1B,>8A,>34,>68,>74,>03,>00,>00
_700d:
       byte >19,>29,>34,>50,>80,>03,>24,>E4
       byte >1B,>09,>34,>48,>74,>03,>00,>00
_701d:
       byte >11,>0B,>00,>50,>97,>81,>00,>00
       byte >11,>0C,>00,>50,>97,>81,>00,>00
_702d:
       byte >27,>91,>00,>50,>8F,>00,>00,>00
       byte >27,>3D,>00,>5F,>5F,>00,>00,>00
_703d:
       byte >1E,>1F,>00,>98,>67,>60,>00,>00
       byte >1E,>21,>00,>08,>67,>E0,>00,>00
_704d:
       byte >1E,>25,>00,>98,>67,>60,>00,>00
       byte >1E,>23,>00,>08,>67,>E0,>00,>00
_705d:
       byte >1E,>00,>00,>98,>3F,>60,>00,>00
       byte >1E,>06,>00,>38,>47,>00,>00,>00
_706d:
       byte >1E,>00,>00,>98,>8F,>60,>00,>00
       byte >1E,>06,>00,>78,>47,>00,>00,>00
_707d:
       byte >1E,>01,>00,>58,>27,>00,>00,>00
       byte >1E,>03,>00,>58,>27,>00,>00,>00
_708d:
       byte >1E,>05,>00,>58,>B7,>80,>00,>00
       byte >1E,>07,>00,>58,>B7,>80,>00,>00
_709d:
       byte >1E,>17,>00,>58,>27,>00,>00,>00
       byte >1E,>15,>00,>78,>97,>80,>00,>00
_70ad:
       byte >1E,>15,>00,>38,>97,>80,>00,>00
       byte >1E,>13,>00,>58,>27,>00,>00,>00
_70bd:
       byte >1E,>88,>00,>08,>3F,>E0,>00,>00
       byte >1E,>8A,>00,>08,>47,>E0,>00,>00
_70cd:
       byte >1E,>88,>00,>08,>8F,>E0,>00,>00
       byte >1E,>8A,>00,>08,>87,>E0,>00,>00
_70dd:
       byte >1E,>27,>00,>38,>27,>00,>00,>00
       byte >1E,>2B,>00,>38,>27,>00,>00,>00
_70ed:
       byte >1E,>27,>00,>78,>27,>00,>00,>00
       byte >1E,>2B,>00,>78,>27,>00,>00,>00
_70fd:
       byte >1E,>56,>00,>38,>27,>00,>00,>00
       byte >1E,>24,>00,>38,>47,>00,>00,>00
_710d:
       byte >1E,>56,>00,>78,>27,>00,>00,>00
       byte >1E,>24,>00,>78,>47,>00,>00,>00
_711d:
       byte >1E,>7C,>00,>38,>27,>00,>00,>00
       byte >1E,>7A,>00,>38,>27,>00,>00,>00
_712d:
       byte >1E,>7C,>00,>78,>27,>00,>00,>00
       byte >1E,>7A,>00,>78,>27,>00,>00,>00
_713d:
       byte >1E,>09,>00,>08,>3F,>E0,>00,>00
       byte >1E,>7F,>00,>38,>B7,>80,>00,>00
_714d:
       byte >1E,>09,>00,>08,>8F,>E0,>00,>00
       byte >1E,>7F,>00,>78,>B7,>80,>00,>00
_715d:
       byte >12,>0D,>00,>38,>50,>04,>CC,>49
       byte >12,>13,>00,>70,>90,>04,>CC,>49
_716d:
       byte >12,>63,>00,>38,>50,>04,>CC,>49
       byte >12,>5D,>00,>70,>50,>04,>CC,>49
_717d:
       byte >12,>18,>00,>48,>50,>04,>CC,>49
       byte >12,>88,>00,>70,>50,>04,>CC,>49
_718d:
       byte >12,>7A,>00,>38,>50,>04,>CC,>49
       byte >12,>81,>00,>70,>50,>04,>CC,>49
_719d:
       byte >12,>18,>00,>58,>80,>04,>CC,>49
       byte >12,>6D,>00,>30,>90,>04,>CC,>49
_71ad:
       byte >12,>5B,>00,>38,>50,>04,>CC,>49
       byte >12,>5C,>00,>70,>50,>04,>CC,>49
_71bd:
       byte >12,>6A,>00,>78,>98,>04,>CC,>49
       byte >12,>1B,>00,>70,>50,>04,>CC,>49
_71cd:
       byte >12,>2E,>00,>38,>57,>04,>CC,>49
       byte >12,>7D,>00,>48,>50,>04,>CC,>49
_71dd:
       byte >12,>2E,>00,>60,>7F,>04,>CC,>49
       byte >12,>7D,>00,>58,>80,>04,>CC,>49
_71ed:
       byte >12,>2A,>00,>38,>57,>04,>CC,>49
       byte >12,>2D,>00,>30,>80,>04,>CC,>49
_71fd:
       byte >12,>2A,>00,>60,>7F,>04,>CC,>49
       byte >12,>2D,>00,>70,>80,>04,>CC,>49
_720d:
       byte >1C,>8D,>00,>28,>67,>E0,>00,>00
       byte >1D,>8C,>00,>28,>67,>E0,>00,>00
_721d:
       byte >15,>8B,>00,>88,>6F,>40,>00,>00
       byte >16,>8C,>00,>88,>67,>40,>00,>00
_722d:
       byte >1C,>16,>00,>58,>37,>00,>00,>00
       byte >1D,>14,>00,>58,>97,>80,>00,>00
_723d:
       byte >15,>0E,>00,>28,>57,>E0,>00,>00
       byte >16,>12,>00,>88,>6F,>40,>00,>00
_724d:
       byte >1C,>0F,>00,>28,>67,>E0,>00,>00
       byte >1D,>11,>00,>28,>67,>E0,>00,>00
_725d:
       byte >15,>10,>00,>88,>6F,>40,>00,>00
       byte >16,>73,>00,>58,>97,>80,>00,>00
_726d:
       byte >1C,>08,>00,>88,>67,>40,>00,>00
       byte >1D,>18,>00,>88,>67,>40,>00,>00
_727d:
       byte >15,>6F,>00,>28,>67,>E0,>00,>00
       byte >16,>0E,>00,>28,>77,>E0,>00,>00
_728d:
       byte >25,>00,>00,>28,>17,>00,>00,>00
       byte >1D,>19,>00,>58,>37,>00,>00,>00
_729d:
       byte >11,>00,>00,>78,>1C,>00,>00,>00
       byte >16,>0B,>00,>58,>37,>00,>00,>00
_72ad:
       byte >1C,>00,>00,>38,>B7,>80,>00,>00
       byte >1D,>19,>00,>58,>97,>80,>00,>00
_72bd:
       byte >15,>00,>00,>78,>B7,>80,>00,>00
       byte >16,>0B,>00,>58,>97,>81,>00,>00
_72cd:
       byte >11,>04,>00,>28,>47,>E1,>00,>00
       byte >15,>15,>00,>58,>37,>00,>00,>00
_72dd:
       byte >16,>04,>00,>28,>87,>E0,>00,>00
       byte >25,>14,>00,>58,>37,>00,>00,>00
_72ed:
       byte >11,>73,>00,>58,>3C,>00,>00,>00
       byte >16,>6E,>00,>58,>B7,>80,>00,>00
_72fd:
       byte >1C,>6D,>00,>58,>B7,>80,>00,>00
       byte >25,>0E,>00,>88,>6F,>40,>00,>00
_730d:
       byte >25,>07,>00,>A8,>6F,>40,>00,>00
       byte >1C,>06,>00,>38,>97,>80,>00,>00
_731d:
       byte >1C,>06,>00,>78,>97,>80,>00,>00
       byte >1D,>01,>00,>A8,>67,>40,>00,>00
_732d:
       byte >11,>18,>00,>28,>6F,>E1,>00,>00
       byte >1D,>17,>00,>A8,>67,>40,>00,>00
_733d:
       byte >15,>87,>00,>38,>17,>00,>00,>00
       byte >16,>89,>00,>38,>B7,>80,>00,>00
_734d:
       byte >16,>87,>00,>78,>17,>00,>00,>00
       byte >15,>89,>00,>78,>B7,>80,>00,>00
_735d:
       byte >1D,>00,>00,>08,>47,>E0,>00,>00
       byte >16,>82,>00,>38,>B7,>80,>00,>00
_736d:
       byte >16,>00,>00,>08,>87,>E0,>00,>00
       byte >15,>82,>00,>78,>B7,>80,>00,>00
_737d:
       byte >11,>66,>00,>A0,>47,>61,>00,>00
       byte >1D,>61,>00,>A8,>6F,>60,>00,>00
_738d:
       byte >15,>66,>00,>A8,>87,>60,>00,>00
       byte >25,>5D,>00,>A8,>6F,>60,>00,>00
_739d:
       byte >16,>66,>00,>08,>47,>E0,>00,>00
       byte >1D,>65,>00,>58,>B7,>80,>00,>00
_73ad:
       byte >1C,>66,>00,>08,>87,>E0,>00,>00
       byte >16,>64,>00,>58,>B7,>80,>00,>00
_73bd:
       byte >11,>63,>00,>58,>B7,>81,>00,>00
       byte >15,>62,>00,>50,>B7,>80,>00,>00
_73cd:
       byte >16,>70,>00,>38,>B7,>80,>00,>00
       byte >15,>0D,>00,>08,>6F,>E0,>00,>00
_73dd:
       byte >1D,>70,>00,>78,>B7,>80,>00,>00
       byte >16,>0C,>00,>58,>37,>00,>00,>00
_73ed:
       byte >16,>09,>00,>A8,>47,>40,>00,>00
       byte >15,>7F,>00,>08,>60,>E0,>00,>00
_73fd:
       byte >11,>09,>00,>A0,>87,>41,>00,>00
       byte >1D,>7F,>00,>58,>17,>00,>00,>00
_740d:
       byte >15,>5A,>00,>08,>47,>E0,>00,>00
       byte >25,>27,>00,>A8,>47,>60,>00,>00
_741d:
       byte >16,>5A,>00,>08,>87,>E0,>00,>00
       byte >1D,>27,>00,>A8,>87,>60,>00,>00
_742d:
       byte >1C,>29,>00,>A8,>47,>60,>00,>00
       byte >16,>7E,>00,>A8,>60,>60,>00,>00
_743d:
       byte >11,>29,>00,>A0,>87,>61,>00,>00
       byte >15,>7E,>00,>58,>B7,>80,>00,>00
_744d:
       byte >10,>0D,>34,>30,>27,>01,>04,>56
       byte >10,>13,>34,>30,>B7,>81,>04,>06
_745d:
       byte >10,>09,>34,>30,>27,>01,>04,>56
       byte >10,>17,>34,>30,>B7,>81,>04,>06
_746d:
       byte >10,>35,>34,>88,>6F,>61,>B7,>03
       byte >10,>8F,>34,>18,>6F,>E1,>06,>03
_747d:
       byte >10,>67,>34,>98,>6F,>61,>B7,>03
       byte >10,>68,>34,>08,>6F,>E1,>06,>03
_748d:
       byte >10,>8D,>34,>78,>4F,>61,>B7,>03
       byte >10,>22,>34,>28,>6F,>E1,>06,>03
_749d:
       byte >10,>76,>34,>30,>27,>01,>04,>56
       byte >10,>75,>34,>30,>B7,>81,>04,>06
_74ad:
       byte >17,>0A,>34,>40,>47,>00,>04,>56
       byte >17,>16,>34,>40,>97,>80,>04,>06
_74bd:
       byte >17,>3D,>34,>48,>37,>00,>04,>56
       byte >17,>49,>34,>50,>AF,>80,>04,>06
_74cd:
       byte >17,>69,>34,>40,>B7,>80,>04,>06
       byte >17,>6A,>34,>40,>27,>00,>04,>56
_74dd:
       byte >17,>6C,>34,>40,>B7,>80,>04,>06
       byte >17,>6E,>34,>40,>27,>00,>04,>56
_74ed:
       byte >17,>3E,>34,>88,>77,>60,>B7,>03
       byte >17,>41,>34,>48,>A7,>80,>04,>06
_74fd:
       byte >1A,>45,>34,>50,>37,>00,>04,>56
       byte >1A,>53,>34,>50,>A4,>A0,>04,>06
_750d:
       byte >1A,>4C,>34,>88,>6F,>40,>B7,>03
       byte >1A,>4E,>34,>18,>6F,>E0,>06,>03
_751d:
       byte >1A,>38,>34,>50,>37,>00,>04,>56
       byte >1A,>4B,>34,>50,>A7,>A0,>04,>06
_752d:
       byte >1A,>6B,>34,>50,>B7,>A0,>04,>06
       byte >1A,>6D,>34,>50,>27,>00,>04,>56
_753d:
       byte >1A,>8A,>34,>98,>6F,>60,>B7,>03
       byte >1A,>08,>34,>28,>6F,>E1,>06,>03
_754d:
       byte >24,>00,>C4,>98,>7F,>40,>BA,>D6
       byte >24,>8E,>C4,>00,>7F,>E0,>08,>D6
_755d:
       byte >26,>53,>00,>80,>77,>61,>00,>00
       byte >26,>8F,>00,>80,>77,>61,>00,>00
_756d:
       byte >26,>33,>00,>18,>6F,>E1,>00,>00
       byte >26,>55,>00,>50,>A7,>81,>00,>00

* Room Table
roomtable:                             ; 757d
       data room_00                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_01                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_02                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_03                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_04                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_05                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_06                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_07                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_08                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_09                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_0a                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_0b                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_0c                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_0d                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_0e                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_0f                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_10                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_11                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_12                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_13                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_14                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_15                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_16                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_17                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_18                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_19                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_1a                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_1b                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_1c                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_1d                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_1e                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_1f                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_20                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_21                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_22                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_23                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_24                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_25                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_26                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_27                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_28                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_29                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_2a                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_2b                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_2c                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_2d                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_2e                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_2f                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_30                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_31                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_32                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_33                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_34                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_35                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_36                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_37                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_38                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_39                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_3a                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_3b                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_3c                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_3d                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_3e                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_3f                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_40                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_41                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_42                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_43                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_44                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_45                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_46                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_47                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_48                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_49                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_4a                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_4b                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_4c                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_4d                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_4e                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_4f                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_50                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_51                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_52                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_53                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_54                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_55                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_56                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_57                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_58                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_59                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_5a                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_5b                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_5c                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_5d                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_5e                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_5f                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_60                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_61                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_62                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_63                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_64                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_65                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_66                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_67                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_68                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_69                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_6a                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_6b                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_6c                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_6d                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_6e                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_6f                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_70                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_71                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_72                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_73                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_74                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_75                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_76                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_77                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_78                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_79                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_7a                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_7b                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_7c                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_7d                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_7e                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_7f                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_80                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_81                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_82                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_83                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_84                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_85                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_86                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_87                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_88                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_89                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_8a                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_8b                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_8c                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_8d                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_8e                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_8f                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_90                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_91                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_92                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_93                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_94                                                  ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#EVAL((#PC - $757D) / 2)).
       data room_none                                                ; Room ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) * $100)(None).

* Room: #N$00.
room_00:                               ; 76a9
       data door_07_00
       data door_19_00
       data door_01_00
       data _754d
       data _705d
       data _706d
       data _728d
       data _729d
       data _72ad
       data _72bd
       data _735d
       data _736d
       data 0                                                        ; Terminator.

* Room: #N$01.
room_01:                               ; 76c3
       data door_01_00
       data door_02_01
       data _707d
       data _731d
       data 0                                                        ; Terminator.

* Room: #N$02.
room_02:                               ; 76cd
       data door_02_01
       data door_03_02
       data door_18_02
       data door_03_26
       data 0                                                        ; Terminator.

* Room: #N$03.
room_03:                               ; 76d7
       data door_03_02
       data door_04_03
       data door_6c_03
       data _6f7d
       data _6fdd
       data _707d
       data 0                                                        ; Terminator.

* Room: #N$04.
room_04:                               ; 76e5
       data door_04_03
       data door_19_04
       data door_05_04
       data _72cd
       data _72dd
       data 0                                                        ; Terminator.

* Room: #N$05.
room_05:                               ; 76f1
       data door_05_04
       data door_06_05
       data door_6e_05
       data _708d
       data 0                                                        ; Terminator.

* Room: #N$06.
room_06:                               ; 76fb
       data door_06_05
       data door_1a_06
       data door_08_06
       data door_07_06
       data _705d
       data _706d
       data _730d
       data _731d
       data 0                                                        ; Terminator.

* Room: #N$07.
room_07:                               ; 770d
       data door_07_00
       data door_07_06
       data _708d
       data _730d
       data 0                                                        ; Terminator.

* Room: #N$08.
room_08:                               ; 7717
       data door_08_06
       data door_09_08
       data _726d
       data _753d
       data 0                                                        ; Terminator.

* Room: #N$09.
room_09:                               ; 7721
       data door_09_08
       data door_0a_09
       data _700d
       data _745d
       data _713d
       data _714d
       data _73ed
       data _73fd
       data 0                                                        ; Terminator.

* Room: #N$0A.
room_0a:                               ; 7733
       data door_0a_09
       data door_0b_0a
       data _74ad
       data _72bd
       data 0                                                        ; Terminator.

* Room: #N$0B.
room_0b:                               ; 773d
       data door_0b_0a
       data door_0c_0b
       data _701d
       data _729d
       data 0                                                        ; Terminator.

* Room: #N$0C.
room_0c:                               ; 7747
       data door_0c_0b
       data door_0d_0c
       data _701d
       data _73dd
       data 0                                                        ; Terminator.

* Room: #N$0D.
room_0d:                               ; 7751
       data door_0d_0c
       data door_0e_0d
       data door_0d_6f
       data _744d
       data _715d
       data _73cd
       data 0                                                        ; Terminator.

* Room: #N$0E.
room_0e:                               ; 775f
       data door_0e_0d
       data door_0f_0e
       data _723d
       data _727d
       data _72fd
       data 0                                                        ; Terminator.

* Room: #N$0F.
room_0f:                               ; 776b
       data door_0f_0e
       data door_10_0f
       data door_0f_6d
       data _724d
       data 0                                                        ; Terminator.

* Room: #N$10.
room_10:                               ; 7775
       data door_10_0f
       data door_11_10
       data _725d
       data 0                                                        ; Terminator.

* Room: #N$11.
room_11:                               ; 777d
       data door_11_10
       data door_12_11
       data door_11_6b
       data _724d
       data 0                                                        ; Terminator.

* Room: #N$12.
room_12:                               ; 7787
       data door_12_11
       data door_13_12
       data _723d
       data 0                                                        ; Terminator.

* Room: #N$13.
room_13:                               ; 778f
       data door_13_12
       data door_14_13
       data door_13_73
       data _715d
       data _744d
       data _70ad
       data 0                                                        ; Terminator.

* Room: #N$14.
room_14:                               ; 779d
       data door_14_13
       data door_15_14
       data _722d
       data _72dd
       data 0                                                        ; Terminator.

* Room: #N$15.
room_15:                               ; 77a7
       data door_15_14
       data door_16_15
       data _6fed
       data _72cd
       data _709d
       data _70ad
       data 0                                                        ; Terminator.

* Room: #N$16.
room_16:                               ; 77b5
       data door_16_15
       data door_17_16
       data _722d
       data _74ad
       data 0                                                        ; Terminator.

* Room: #N$17.
room_17:                               ; 77bf
       data door_17_16
       data door_18_17
       data _745d
       data _732d
       data _709d
       data 0                                                        ; Terminator.

* Room: #N$18.
room_18:                               ; 77cb
       data door_18_17
       data door_18_02
       data _726d
       data _717d
       data _719d
       data _732d
       data 0                                                        ; Terminator.

* Room: #N$19.
room_19:                               ; 77d9
       data door_19_00
       data door_19_04
       data _728d
       data _72ad
       data 0                                                        ; Terminator.

* Room: #N$1A.
room_1a:                               ; 77e3
       data door_1a_06
       data door_1a_1b
       data 0                                                        ; Terminator.

* Room: #N$1B.
room_1b:                               ; 77e9
       data door_1a_1b
       data door_1b_1c
       data door_65_1b
       data _71bd
       data 0                                                        ; Terminator.

* Room: #N$1C.
room_1c:                               ; 77f3
       data door_1b_1c
       data door_1c_1d
       data 0                                                        ; Terminator.

* Room: #N$1D.
room_1d:                               ; 77f9
       data door_1c_1d
       data door_1d_43
       data 0                                                        ; Terminator.

* Room: #N$1E.
room_1e:                               ; 77ff
       data door_1e_1f
       data door_25_1e
       data 0                                                        ; Terminator.

* Room: #N$1F.
room_1f:                               ; 7805
       data door_1e_1f
       data door_1f_20
       data _703d
       data 0                                                        ; Terminator.

* Room: #N$20.
room_20:                               ; 780d
       data door_1f_20
       data door_20_21
       data door_20_2f
       data 0                                                        ; Terminator.

* Room: #N$21.
room_21:                               ; 7815
       data door_20_21
       data door_21_22
       data door_21_88
       data _6fdd
       data _703d
       data 0                                                        ; Terminator.

* Room: #N$22.
room_22:                               ; 7821
       data door_21_22
       data door_22_23
       data _748d
       data 0                                                        ; Terminator.

* Room: #N$23.
room_23:                               ; 7829
       data door_22_23
       data door_23_24
       data door_8a_23
       data _704d
       data 0                                                        ; Terminator.

* Room: #N$24.
room_24:                               ; 7833
       data door_23_24
       data door_24_25
       data door_24_26
       data _70fd
       data _710d
       data 0                                                        ; Terminator.

* Room: #N$25.
room_25:                               ; 783f
       data door_24_25
       data door_25_1e
       data _704d
       data 0                                                        ; Terminator.

* Room: #N$26.
room_26:                               ; 7847
       data door_24_26
       data door_03_26
       data 0                                                        ; Terminator.

* Room: #N$27.
room_27:                               ; 784d
       data door_27_28
       data door_2e_27
       data door_27_2f
       data _70dd
       data _70ed
       data _740d
       data _741d
       data 0                                                        ; Terminator.

* Room: #N$28.
room_28:                               ; 785d
       data door_27_28
       data door_28_29
       data 0                                                        ; Terminator.

* Room: #N$29.
room_29:                               ; 7863
       data door_28_29
       data door_29_2a
       data door_7e_29
       data _700d
       data _742d
       data _743d
       data 0                                                        ; Terminator.

* Room: #N$2A.
room_2a:                               ; 7871
       data door_29_2a
       data door_2a_2b
       data _71ed
       data _71fd
       data 0                                                        ; Terminator.

* Room: #N$2B.
room_2b:                               ; 787b
       data door_2a_2b
       data door_2b_2c
       data _70dd
       data _70ed
       data 0                                                        ; Terminator.

* Room: #N$2C.
room_2c:                               ; 7885
       data door_2b_2c
       data door_2c_2d
       data 0                                                        ; Terminator.

* Room: #N$2D.
room_2d:                               ; 788b
       data door_2c_2d
       data door_2d_2e
       data door_2d_75
       data _6f9d
       data _71ed
       data _71fd
       data 0                                                        ; Terminator.

* Room: #N$2E.
room_2e:                               ; 7899
       data door_2d_2e
       data door_2e_27
       data _71cd
       data _71dd
       data 0                                                        ; Terminator.

* Room: #N$2F.
room_2f:                               ; 78a3
       data door_27_2f
       data door_20_2f
       data 0                                                        ; Terminator.

* Room: #N$30.
room_30:                               ; 78a9
       data door_30_31
       data door_54_30
       data door_30_74
       data 0                                                        ; Terminator.

* Room: #N$31.
room_31:                               ; 78b1
       data door_30_31
       data door_31_32
       data 0                                                        ; Terminator.

* Room: #N$32.
room_32:                               ; 78b7
       data door_31_32
       data door_32_33
       data 0                                                        ; Terminator.

* Room: #N$33.
room_33:                               ; 78bd
       data door_32_33
       data door_33_34
       data door_33_36
       data _756d
       data 0                                                        ; Terminator.

* Room: #N$34.
room_34:                               ; 78c7
       data door_33_34
       data door_34_35
       data 0                                                        ; Terminator.

* Room: #N$35.
room_35:                               ; 78cd
       data door_34_35
       data door_72_35
       data _746d
       data 0                                                        ; Terminator.

* Room: #N$36.
room_36:                               ; 78d5
       data door_33_36
       data door_36_37
       data 0                                                        ; Terminator.

* Room: #N$37.
room_37:                               ; 78db
       data door_36_37
       data door_37_38
       data 0                                                        ; Terminator.

* Room: #N$38.
room_38:                               ; 78e1
       data door_37_38
       data door_38_39
       data door_38_3a
       data _751d
       data 0                                                        ; Terminator.

* Room: #N$39.
room_39:                               ; 78eb
       data door_38_39
       data door_39_3b
       data 0                                                        ; Terminator.

* Room: #N$3A.
room_3a:                               ; 78f1
       data door_38_3a
       data door_3a_3b
       data door_3a_94
       data 0                                                        ; Terminator.

* Room: #N$3B.
room_3b:                               ; 78f9
       data door_39_3b
       data door_3a_3b
       data door_3b_3c
       data door_3b_3d
       data 0                                                        ; Terminator.

* Room: #N$3C.
room_3c:                               ; 7903
       data door_3b_3c
       data door_3c_3e
       data 0                                                        ; Terminator.

* Room: #N$3D.
room_3d:                               ; 7909
       data door_3b_3d
       data door_3d_3e
       data door_3d_3f
       data _74bd
       data _702d
       data 0                                                        ; Terminator.

* Room: #N$3E.
room_3e:                               ; 7915
       data door_3c_3e
       data door_3d_3e
       data _74ed
       data 0                                                        ; Terminator.

* Room: #N$3F.
room_3f:                               ; 791d
       data door_3d_3f
       data door_34_40
       data 0                                                        ; Terminator.

* Room: #N$40.
room_40:                               ; 7923
       data door_34_40
       data door_40_41
       data door_40_42
       data door_40_8f
       data 0                                                        ; Terminator.

* Room: #N$41.
room_41:                               ; 792d
       data door_40_41
       data _74ed
       data 0                                                        ; Terminator.

* Room: #N$42.
room_42:                               ; 7933
       data door_40_42
       data door_42_43
       data 0                                                        ; Terminator.

* Room: #N$43.
room_43:                               ; 7939
       data door_42_43
       data door_43_44
       data door_43_46
       data door_1d_43
       data 0                                                        ; Terminator.

* Room: #N$44.
room_44:                               ; 7943
       data door_43_44
       data door_44_45
       data 0                                                        ; Terminator.

* Room: #N$45.
room_45:                               ; 7949
       data door_44_45
       data _74fd
       data 0                                                        ; Terminator.

* Room: #N$46.
room_46:                               ; 794f
       data door_43_46
       data door_46_47
       data door_46_51
       data 0                                                        ; Terminator.

* Room: #N$47.
room_47:                               ; 7957
       data door_46_47
       data door_47_48
       data 0                                                        ; Terminator.

* Room: #N$48.
room_48:                               ; 795d
       data door_47_48
       data door_48_49
       data door_48_4a
       data door_48_4d
       data 0                                                        ; Terminator.

* Room: #N$49.
room_49:                               ; 7967
       data door_48_49
       data _74bd
       data 0                                                        ; Terminator.

* Room: #N$4A.
room_4a:                               ; 796d
       data door_48_4a
       data door_4a_4b
       data 0                                                        ; Terminator.

* Room: #N$4B.
room_4b:                               ; 7973
       data door_4a_4b
       data door_4b_4c
       data _6f8d
       data _751d
       data 0                                                        ; Terminator.

* Room: #N$4C.
room_4c:                               ; 797d
       data door_4b_4c
       data door_4c_55
       data _750d
       data 0                                                        ; Terminator.

* Room: #N$4D.
room_4d:                               ; 7985
       data door_48_4d
       data door_4d_4e
       data 0                                                        ; Terminator.

* Room: #N$4E.
room_4e:                               ; 798b
       data door_4d_4e
       data door_4e_4f
       data _750d
       data 0                                                        ; Terminator.

* Room: #N$4F.
room_4f:                               ; 7993
       data door_4e_4f
       data door_4f_50
       data 0                                                        ; Terminator.

* Room: #N$50.
room_50:                               ; 7999
       data door_4f_50
       data door_50_51
       data door_50_52
       data 0                                                        ; Terminator.

* Room: #N$51.
room_51:                               ; 79a1
       data door_50_51
       data door_46_51
       data 0                                                        ; Terminator.

* Room: #N$52.
room_52:                               ; 79a7
       data door_50_52
       data door_52_53
       data 0                                                        ; Terminator.

* Room: #N$53.
room_53:                               ; 79ad
       data door_52_53
       data _74fd
       data _755d
       data 0                                                        ; Terminator.

* Room: #N$54.
room_54:                               ; 79b5
       data door_54_55
       data door_54_30
       data door_54_90
       data 0                                                        ; Terminator.

* Room: #N$55.
room_55:                               ; 79bd
       data door_4c_55
       data door_54_55
       data _756d
       data 0                                                        ; Terminator.

* Room: #N$56.
room_56:                               ; 79c5
       data door_56_57
       data door_56_5a
       data door_67_56
       data door_69_56
       data _70fd
       data _710d
       data 0                                                        ; Terminator.

* Room: #N$57.
room_57:                               ; 79d3
       data door_56_57
       data door_57_58
       data door_57_5b
       data 0                                                        ; Terminator.

* Room: #N$58.
room_58:                               ; 79db
       data door_57_58
       data door_58_59
       data door_58_5c
       data 0                                                        ; Terminator.

* Room: #N$59.
room_59:                               ; 79e3
       data door_58_59
       data door_59_5d
       data door_68_59
       data 0                                                        ; Terminator.

* Room: #N$5A.
room_5a:                               ; 79eb
       data door_5a_5b
       data door_56_5a
       data door_5a_5e
       data _740d
       data _741d
       data 0                                                        ; Terminator.

* Room: #N$5B.
room_5b:                               ; 79f7
       data door_5a_5b
       data door_5b_5c
       data door_57_5b
       data door_5b_5f
       data door_66_5b
       data _71ad
       data 0                                                        ; Terminator.

* Room: #N$5C.
room_5c:                               ; 7a05
       data door_5b_5c
       data door_5c_5d
       data door_58_5c
       data door_5c_60
       data door_66_5c
       data _71ad
       data 0                                                        ; Terminator.

* Room: #N$5D.
room_5d:                               ; 7a13
       data door_5c_5d
       data door_59_5d
       data door_5d_61
       data _716d
       data _738d
       data 0                                                        ; Terminator.

* Room: #N$5E.
room_5e:                               ; 7a1f
       data door_5e_5f
       data door_5a_5e
       data door_5e_62
       data 0                                                        ; Terminator.

* Room: #N$5F.
room_5f:                               ; 7a27
       data door_5e_5f
       data door_5f_60
       data door_5b_5f
       data door_5f_63
       data door_66_5f
       data 0                                                        ; Terminator.

* Room: #N$60.
room_60:                               ; 7a33
       data door_5f_60
       data door_60_61
       data door_5c_60
       data door_60_64
       data door_66_60
       data 0                                                        ; Terminator.

* Room: #N$61.
room_61:                               ; 7a3f
       data door_60_61
       data door_5d_61
       data door_61_65
       data _6f8d
       data _737d
       data 0                                                        ; Terminator.

* Room: #N$62.
room_62:                               ; 7a4b
       data door_62_63
       data door_5e_62
       data door_6a_62
       data _73bd
       data 0                                                        ; Terminator.

* Room: #N$63.
room_63:                               ; 7a55
       data door_62_63
       data door_63_64
       data door_5f_63
       data _716d
       data _73bd
       data 0                                                        ; Terminator.

* Room: #N$64.
room_64:                               ; 7a61
       data door_63_64
       data door_64_65
       data door_60_64
       data _73ad
       data 0                                                        ; Terminator.

* Room: #N$65.
room_65:                               ; 7a6b
       data door_64_65
       data door_61_65
       data door_65_1b
       data _6f7d
       data _739d
       data 0                                                        ; Terminator.

* Room: #N$66.
room_66:                               ; 7a77
       data door_66_5b
       data door_66_5c
       data door_66_5f
       data door_66_60
       data _6fed
       data _737d
       data _738d
       data _739d
       data _73ad
       data 0                                                        ; Terminator.

* Room: #N$67.
room_67:                               ; 7a8b
       data door_67_56
       data _747d
       data 0                                                        ; Terminator.

* Room: #N$68.
room_68:                               ; 7a91
       data door_68_59
       data _747d
       data 0                                                        ; Terminator.

* Room: #N$69.
room_69:                               ; 7a97
       data door_69_56
       data _74cd
       data 0                                                        ; Terminator.

* Room: #N$6A.
room_6a:                               ; 7a9d
       data door_6a_62
       data _74cd
       data _71bd
       data 0                                                        ; Terminator.

* Room: #N$6B.
room_6b:                               ; 7aa5
       data door_11_6b
       data door_6b_6c
       data _752d
       data 0                                                        ; Terminator.

* Room: #N$6C.
room_6c:                               ; 7aad
       data door_6b_6c
       data door_6c_03
       data _6fbd
       data _74dd
       data 0                                                        ; Terminator.

* Room: #N$6D.
room_6d:                               ; 7ab7
       data door_0f_6d
       data door_6d_6e
       data _752d
       data _72fd
       data _719d
       data 0                                                        ; Terminator.

* Room: #N$6E.
room_6e:                               ; 7ac3
       data door_6d_6e
       data door_6e_05
       data _6fcd
       data _74dd
       data _72ed
       data 0                                                        ; Terminator.

* Room: #N$6F.
room_6f:                               ; 7acf
       data door_0d_6f
       data door_6f_70
       data _727d
       data 0                                                        ; Terminator.

* Room: #N$70.
room_70:                               ; 7ad7
       data door_6f_70
       data door_70_71
       data _73cd
       data _73dd
       data 0                                                        ; Terminator.

* Room: #N$71.
room_71:                               ; 7ae1
       data door_70_71
       data door_71_72
       data 0                                                        ; Terminator.

* Room: #N$72.
room_72:                               ; 7ae7
       data door_71_72
       data door_72_35
       data 0                                                        ; Terminator.

* Room: #N$73.
room_73:                               ; 7aed
       data door_13_73
       data _6f6d
       data _725d
       data _72ed
       data 0                                                        ; Terminator.

* Room: #N$74.
room_74:                               ; 7af7
       data door_30_74
       data _6f6d
       data 0                                                        ; Terminator.

* Room: #N$75.
room_75:                               ; 7afd
       data door_2d_75
       data door_75_76
       data _749d
       data 0                                                        ; Terminator.

* Room: #N$76.
room_76:                               ; 7b05
       data door_75_76
       data door_76_77
       data door_7d_76
       data _6fad
       data _749d
       data 0                                                        ; Terminator.

* Room: #N$77.
room_77:                               ; 7b11
       data door_76_77
       data door_77_78
       data 0                                                        ; Terminator.

* Room: #N$78.
room_78:                               ; 7b17
       data door_77_78
       data door_78_79
       data _6ffd
       data 0                                                        ; Terminator.

* Room: #N$79.
room_79:                               ; 7b1f
       data door_78_79
       data door_79_7a
       data 0                                                        ; Terminator.

* Room: #N$7A.
room_7a:                               ; 7b25
       data door_79_7a
       data door_7a_7b
       data door_7a_7e
       data _718d
       data _711d
       data _712d
       data 0                                                        ; Terminator.

* Room: #N$7B.
room_7b:                               ; 7b33
       data door_7a_7b
       data door_7b_7c
       data 0                                                        ; Terminator.

* Room: #N$7C.
room_7c:                               ; 7b39
       data door_7b_7c
       data door_7c_7d
       data _711d
       data _712d
       data 0                                                        ; Terminator.

* Room: #N$7D.
room_7d:                               ; 7b43
       data door_7c_7d
       data door_7d_76
       data _71cd
       data _71dd
       data 0                                                        ; Terminator.

* Room: #N$7E.
room_7e:                               ; 7b4d
       data door_7a_7e
       data door_7e_29
       data _742d
       data _743d
       data 0                                                        ; Terminator.

* Room: #N$7F.
room_7f:                               ; 7b57
       data door_7f_80
       data door_81_7f
       data _713d
       data _714d
       data 0                                                        ; Terminator.

* Room: #N$80.
room_80:                               ; 7b61
       data door_7f_80
       data door_80_82
       data 0                                                        ; Terminator.

* Room: #N$81.
room_81:                               ; 7b67
       data door_82_81
       data door_81_7f
       data _718d
       data 0                                                        ; Terminator.

* Room: #N$82.
room_82:                               ; 7b6f
       data door_80_82
       data door_82_81
       data door_82_87
       data _735d
       data _736d
       data 0                                                        ; Terminator.

* Room: #N$83.
room_83:                               ; 7b7b
       data door_83_84
       data door_85_83
       data 0                                                        ; Terminator.

* Room: #N$84.
room_84:                               ; 7b81
       data door_83_84
       data door_84_86
       data door_84_89
       data _6fad
       data 0                                                        ; Terminator.

* Room: #N$85.
room_85:                               ; 7b8b
       data door_86_85
       data door_85_83
       data 0                                                        ; Terminator.

* Room: #N$86.
room_86:                               ; 7b91
       data door_84_86
       data door_86_85
       data 0                                                        ; Terminator.

* Room: #N$87.
room_87:                               ; 7b97
       data door_82_87
       data door_87_88
       data door_87_8b
       data _733d
       data _734d
       data 0                                                        ; Terminator.

* Room: #N$88.
room_88:                               ; 7ba3
       data door_21_88
       data door_87_88
       data _717d
       data _70bd
       data _70cd
       data 0                                                        ; Terminator.

* Room: #N$89.
room_89:                               ; 7baf
       data door_84_89
       data door_89_8d
       data door_89_8a
       data _733d
       data _734d
       data 0                                                        ; Terminator.

* Room: #N$8A.
room_8a:                               ; 7bbb
       data door_89_8a
       data door_8a_23
       data _6ffd
       data _753d
       data _70bd
       data _70cd
       data 0                                                        ; Terminator.

* Room: #N$8B.
room_8b:                               ; 7bc9
       data door_87_8b
       data door_8b_8c
       data _6fbd
       data _721d
       data 0                                                        ; Terminator.

* Room: #N$8C.
room_8c:                               ; 7bd3
       data door_8b_8c
       data door_8c_8d
       data _720d
       data _721d
       data 0                                                        ; Terminator.

* Room: #N$8D.
room_8d:                               ; 7bdd
       data door_8c_8d
       data door_89_8d
       data _6f9d
       data _6fcd
       data _720d
       data _748d
       data 0                                                        ; Terminator.

* Room: #N$8E.
room_8e:                               ; 7beb
       data _754d
       data 0                                                        ; Terminator.

* Room: #N$8F.
room_8f:                               ; 7bef
       data door_40_8f
       data _746d
       data _755d
       data 0                                                        ; Terminator.

* Room: #N$90.
room_90:                               ; 7bf7
       data door_54_90
       data door_90_91
       data 0                                                        ; Terminator.

* Room: #N$91.
room_91:                               ; 7bfd
       data door_90_91
       data door_91_92
       data _702d
       data 0                                                        ; Terminator.

* Room: #N$92.
room_92:                               ; 7c05
       data door_91_92
       data door_92_93
       data 0                                                        ; Terminator.

* Room: #N$93.
room_93:                               ; 7c0b
       data door_92_93
       data door_93_94
       data 0                                                        ; Terminator.

* Room: #N$94.
room_94:                               ; 7c11
       data door_93_94
       data door_3a_94
       data 0                                                        ; Terminator.

* Room: None.
room_none:                             ; 7c17
       data 0                                                        ; Terminator.

* Game Entry Point
* 
* Used by the routine at #R$6000.
gameinitialisation:                    ; 7c19
       li   hl,gameoptions             ; LD HL,$5E00       ; {Write #N$00 to #N$10 bytes, from #R$5E00 to #N$5E10.
       movb @bytes+16,b                ; LD B,$10          ; 
gameinitialisation_loop:               ; 7c1e
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       inc  hl                         ; INC HL            ; 
       sb   one,b                      ; DJNZ $7C1E        ; }
       jne  gameinitialisation_loop    ;                   
       li   hl,mainfont                ; LD HL,$BE4C       ; {Write #R$BE4C to #R$5E01.
       mov  hl,@fontpointer            ; LD ($5E01),HL     ; }
* This entry point is used by the routine at #R$8C35.
game_restart:                          ; 7c29
       .call @clearscreen              ; CALL $80AA        ; Call #R$80AA.
       .call @menuicons                ; CALL $A311        ; Call #R$A311.
gameselect_loop:                       ; 7c2f
       .call @gamemenu                 ; CALL $7CAF        ; Call #R$7CAF.
       movb @bytes+247,a               ; LD A,$F7          ; {Read from the keyboard;
       ; OUT ($FD),A                   ; OUT ($FD),A       ; #TABLE(default,centre,centre,centre,centre,centre,centre)
       ; IN A,($FE)                    ; IN A,($FE)        ; { =h,r2 Port Number | =h,c5 Bit }
                                                           ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                                                           ; { #N$F7 | 1 | 2 | 3 | 4 | 5 }
                                                           ; TABLE#}
       inv  a                          ; CPL               ; Flip the bits.
       movb a,@e                       ; LD E,A            ; #REGe=#REGa.
       movb @gameoptions,a             ; LD A,($5E00)      ; #REGa=#R$5E00.
* Handle Keyboard selection.
       movb @e,r0                      ; BIT 0,E           ; Has key "1" been pressed? ("KEYBOARD").
       andi r0,1*256                   ;                   
       jeq  gameselect_checkkempston   ; JR Z,$7C43        ; If not jump to #R$7C43.
       ; AND %11111001                 ; AND %11111001     ; Keep only bits 0, 3-7.
* Handle Kempston Joystick selection.
gameselect_checkkempston:              ; 7c43
       movb @e,r0                      ; BIT 1,E           ; Has key "2" been pressed? ("KEMPSTON JOYSTICK").
       andi r0,2*256                   ;                   
       jeq  gameselect_checkcursor     ; JR Z,$7C4B        ; If not jump to #R$7C4B.
       ; AND %11111001                 ; AND %11111001     ; Keep only bits 0, 3-7.
       socb %00000010,a                ; OR %00000010      ; Set control method = #N$02.
* Handle Cursor Joystick selection.
gameselect_checkcursor:                ; 7c4b
       movb @e,r0                      ; BIT 2,E           ; Has key "3" been pressed? ("CURSOR JOYSTICK").
       andi r0,4*256                   ;                   
       jeq  gameselect_checkknight     ; JR Z,$7C53        ; If not jump to #R$7C53.
       ; AND %11111001                 ; AND %11111001     ; Keep only bits 0, 3-7.
       socb %00000100,a                ; OR %00000100      ; Set control method = #N$04.
* Handle "Knight" selection.
gameselect_checkknight:                ; 7c53
       movb @e,r0                      ; BIT 3,E           ; Has key "4" been pressed? ("KNIGHT").
       andi r0,8*256                   ;                   
       jeq  gameselect_checkwizard     ; JR Z,$7C59        ; If not jump to #R$7C59.
       ; AND %11100111                 ; AND %11100111     ; Keep only bits 0-2, 5-7.
* Handle "Wizard" selection.
gameselect_checkwizard:                ; 7c59
       movb @e,r0                      ; BIT 4,E           ; Has key "5" been pressed? ("WIZARD").
       andi r0,16*256                  ;                   
       jeq  _7c61                      ; JR Z,$7C61        ; If not jump to #R$7C61.
       ; AND %11100111                 ; AND %11100111     ; Keep only bits 0-2, 5-7.
       socb %00001000,a                ; OR %00001000      ; Set player = #N$08.
_7c61:
       movb a,d                        ; LD D,A            ; 
       movb @bytes+239,a               ; LD A,$EF          ; {Read from the keyboard;
       ; OUT ($FD),A                   ; OUT ($FD),A       ; #TABLE(default,centre,centre,centre,centre,centre,centre)
       ; IN A,($FE)                    ; IN A,($FE)        ; { =h,r2 Port Number | =h,c5 Bit }
                                                           ; { =h 0 | =h 1 | =h 2 | =h 3 | =h 4 }
                                                           ; { #N$EF | 0 | 9 | 8 | 7 | 6 }
                                                           ; TABLE#}
       inv  a                          ; CPL               ; Flip the bits.
       movb a,@e                       ; LD E,A            ; 
       movb d,a                        ; LD A,D            ; 
* Handle choosing "Serf".
gameselect_checkserf:                  ; 7c6b
       movb @e,r0                      ; BIT 4,E           ; Has key "6" been pressed? ("SERF").
       andi r0,16*256                  ;                   
       jeq  _7c73                      ; JR Z,$7C73        ; If not skip to #R$7C73.
       ; AND %11100111                 ; AND %11100111     ; Keep only bits 0-2, 5-7.
       socb %00010000,a                ; OR %00010000      ; Set bit 4.
_7c73:
       movb a,@gameoptions             ; LD ($5E00),A      ; 
       movb a,@c                       ; LD C,A            ; 
* Handle starting a new game.
gameselect_start:                      ; 7c77
       movb @e,r0                      ; BIT 0,E           ; Has key "0" been pressed? ("START GAME").
       andi r0,1*256                   ;                   
       jeq  !                          ; JP NZ,$7D9A       ; If so, jump to #R$7D9A.
       b    @startgame                 ;                   
!
       li   hl,gameselection_attributes ; LD HL,$7CEA       ; #REGhl=#R$7CEA.
       movb @bytes+3,b                 ; LD B,$03          ; #REGb=#N$03 (counter).
       movb @c,a                       ; LD A,C            ; #REGa=#REGc.
       .call @_7c90                    ; CALL $7C90        ; Call #R$7C90.
       movb @bytes+3,b                 ; LD B,$03          ; #REGb=#N$03 (counter).
       movb @c,a                       ; LD A,C            ; {#REGa=#REGc / #N$04.
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; }
       .call @_7c90                    ; CALL $7C90        ; Call #R$7C90.
       b    @gameselect_loop           ; JP $7C2F          ; Jump to #R$7C2F.
* View the equivalent code in;
* #LIST
* { #COOKIE$6298 }
* { #LUNARJETMAN$800A }
* { #PSSST$61CD }
* { #TRANZAM$5F07 }
* LIST#

* Routine at 7C90
* 
* Used by the routine at #R$7C19.
_7c90:
       ; RRCA                          ; RRCA              ; Divide by 2.
_7c91:
       ; AND %00000011                 ; AND %00000011     ; Keep only bits 0-2.
       jeq  _7c9c                      ; JR Z,$7C9C        ; If zero then jump to #R$7C9C.
       .call @_7ca4                    ; CALL $7CA4        ; Call #R$7CA4.
_7c98:
       sb   one,a                      ; DEC A             ; 
       sb   one,b                      ; DJNZ $7C91        ; 
       jne  _7c91                      ;                   
       .ret                            ; RET               ; Return.
_7c9c:
       .call @_7cab                    ; CALL $7CAB        ; Call #R$7CAB.
       jmp  _7c98                      ; JR $7C98          ; Jump to #R$7C98.
       socb @bits+7,*hl                ; SET 7,(HL)        ; 
       inc  hl                         ; INC HL            ; 
_7ca4:
       szcb @bits+7,*hl                ; RES 7,(HL)        ; 
       inc  hl                         ; INC HL            ; 
       .ret                            ; RET               ; Return.
       szcb @bits+7,*hl                ; RES 7,(HL)        ; 
       inc  hl                         ; INC HL            ; 
_7cab:
       socb @bits+7,*hl                ; SET 7,(HL)        ; 
       inc  hl                         ; INC HL            ; 
       .ret                            ; RET               ; Return.

* Game Selection Menu
* 
* Used by the routine at #R$7C19.
gamemenu:                              ; 7caf
       li   hl,mainfont                ; LD HL,$BE4C       ; #REGhl=#R$BE4C.
       mov  hl,@fontpointer            ; LD ($5E01),HL     ; Write #R$BE4C to #R$5E01.
       li   de,gameselection_attributes ; LD DE,$7CEA       ; #REGde=#R$7CEA.
       .exx                            ; EXX               ; Switch to the shadow registers.
       li   hl,gameselection_position  ; LD HL,$7CF1       ; #REGhl=#R$7CF1.
       li   de,gameselection_text      ; LD DE,$7CF8       ; #REGde=#R$7CF8.
* There are seven lines of text.
       movb @bytes+7,b                 ; LD B,$07          ; #REGb'=#N$07 (counter).
gamemenu_loop:                         ; 7cc1
       .exx                            ; EXX               ; Switch back to the normal registers.
       movb *de,a                      ; LD A,(DE)         ; {Copy a byte from #REGde to #R$5E22.
       movb a,@current_menuattr        ; LD ($5E22),A      ; }
       inc  de                         ; INC DE            ; Increment #REGde by one.
       .exx                            ; EXX               ; Switch to the shadow registers.
       .push bc                        ; PUSH BC           ; Stash #REGbc' on the stack.
       movb *hl,a                      ; LD A,(HL)         ; #REGa=#REGhl' (grab the position data).
       inc  hl                         ; INC HL            ; Increment #REGhl' (position data pointer) by one.
       .push hl                        ; PUSH HL           ; Stash #REGhl' (position data pointer) on the stack.
       movb a,h                        ; LD H,A            ; {#REGh'=#REGa #REGl'=#N$58.
       movb @bytes+88,@l               ; LD L,$58          ; }
       .call @menuwritetext            ; CALL $7D8A        ; Call #R$7D8A.
       .exx                            ; EXX               ; Switch back to the normal registers.
       .pop hl                         ; POP HL            ; {Restore #REGhl and #REGbc from the stack.
       .pop bc                         ; POP BC            ; }
       inc  de                         ; INC DE            ; Increase #REGde by one.
       sb   one,b                      ; DJNZ $7CC1        ; Decrease counter by one and loop back to #R$7CC1 until
       jne  gamemenu_loop              ;                   
                                                           ; counter is zero.
       li   hl,_b7d8+40                ; LD HL,$B800       ; #REGhl=#N($B800, $04, $04).
       li   de,message_copyright       ; LD DE,$7D51       ; #REGde=#R$7D51.
       .call @printstringcolour        ; CALL $A1F3        ; Call #R$A1F3.
       li   hl,>0020                   ; LD HL,$0020       ; #REGhl=#N($0020, $04, $04).
       li   de,gameselection_title     ; LD DE,$7D72       ; #REGde=#R$7D72.
       b    @printstringcolour         ; JP $A1F3          ; Jump to #R$A1F3.
* View the equivalent code in;
* #LIST
* { #COOKIE$6332 }
* { #JETPAC$0000 }
* { #LUNARJETMAN$80D1 }
* { #PSSST$6250 }
* { #TRANZAM$0000 }
* LIST#

* Game Select Attribute Table
gameselection_attributes:              ; 7cea
       byte >45                                                      ; {#TABLE(default,centre)
       byte >45                                                      ; { =h Byte(n) | =h Menu Item }
       byte >45                                                      ; { #N$01 | 1 Keyboard }
       byte >45                                                      ; { #N$02 | 2 Kempston Joystick }
       byte >45                                                      ; { #N$03 | 3 Cursor Joystick }
       byte >45                                                      ; { #N$04 | 4 Knight }
       byte >47                                                      ; { #N$05 | 5 Wizard }
                                                                     ; { #N$06 | 6 Serf }
                                                                     ; { #N$07 | 0 Start Game }
                                                                     ; TABLE#}
* View the equivalent code in;
* #LIST
* { #COOKIE$635E }
* { #JETPAC$628D }
* { #LUNARJETMAN$810E }
* { #PSSST$627C }
* { #TRANZAM$5FA7 }
* LIST#

* Game Select Y Position Table
gameselection_position:                ; 7cf1
       byte >10                                                      ; {#TABLE(default,centre,centre)
       byte >28                                                      ; { =h Byte(n) | =h Position | =h Menu Item }
       byte >40                                                      ; { #N$01 | #EVAL(#PEEK(#PC+$00) / $08) | 1 Keyboard }
       byte >58                                                      ; { #N$02 | #EVAL(#PEEK(#PC+$01) / $08) | 2 Kempston Joystick }
       byte >70                                                      ; { #N$03 | #EVAL(#PEEK(#PC+$02) / $08) | 3 Cursor Joystick }
       byte >88                                                      ; { #N$04 | #EVAL(#PEEK(#PC+$03) / $08) | 4 Knight }
       byte >A0                                                      ; { #N$05 | #EVAL(#PEEK(#PC+$04) / $08) | 5 Wizard }
                                                                     ; { #N$06 | #EVAL(#PEEK(#PC+$05) / $08) | 6 Serf }
                                                                     ; { #N$07 | #EVAL(#PEEK(#PC+$06) / $08) | 0 Start Game }
                                                                     ; TABLE#}
* View the equivalent code in;
* #LIST
* { #COOKIE$6365 }
* { #JETPAC$6293 }
* { #LUNARJETMAN$8115 }
* { #PSSST$6282 }
* { #TRANZAM$5FAC }
* LIST#

* Game Selection Screen Text
gameselection_text:                    ; 7cf8
       text '1  KEYBOAR','D+>8'                                      ; "1  KEYBOARD".
       text '2  KEMPSTON JOYSTIC','K+>8'                             ; "2  KEMPSTON JOYSTICK".
       text '3  CURSOR   JOYSTIC','K+>8'                             ; "3  CURSOR   JOYSTICK".
       text '4  KNIGH','T+>8'                                        ; "4  KNIGHT".
       text '5  WIZAR','D+>8'                                        ; "5  WIZARD".
       text '6  SER','F+>8'                                          ; "6  SERF".
       text '0  START GAM','E+>8'                                    ; "0  START GAME".
* View the equivalent code in;
* #LIST
* { #COOKIE$636C }
* { #JETPAC$6299 }
* { #LUNARJETMAN$811C }
* { #PSSST$6288 }
* { #TRANZAM$5FB1 }
* LIST#

* Copyright Messaging
message_copyright:                     ; 7d51
       text >47                                                      ; {Attribute:
       text '%'                                                      ; #N(#PEEK(#PC)) + "© 1983
       text '1983 A.C.G. ALL RIGHTS RESERVE','D+>8'                  ; A.C.G. ALL RIGHTS
                                                                     ; RESERVED".}

* Game Selection Title text
gameselection_title:                   ; 7d72
       text >47                                                      ; {Attribute: #N(#PEEK(#PC)) +
       text 'ATICATAC GAME SELECTIO','N+>8'                          ; "ATICATAC GAME SELECTION".}

* Write Menu Line
* 
* Used by the routine at #R$7CAF.
menuwritetext:                         ; 7d8a
       .push hl                        ; PUSH HL           ; Stash #REGhl containing the co-ordinate on the stack.
       .call @screenaddress            ; CALL $9BA2        ; Call #R$9BA2.
       movb @current_menuattr,a        ; LD A,($5E22)      ; #REGa=the menu attribute byte from #R$5E22.
       .ex_af_af'                      ; EX AF,AF'         ; Switch to the shadow #REGaf register.
       .exx                            ; EXX               ; Switch to the shadow registers.
       .pop hl                         ; POP HL            ; Restore #REGhl from the stack.
       .call @attributeaddress         ; CALL $9BD2        ; Call #R$9BD2.
       b    @printstring_loop          ; JP $A1FF          ; Jump to #R$A1FF.
* View the equivalent code in;
* #LIST
* { #COOKIE$63E0 }
* { #JETPAC$0000 }
* { #LUNARJETMAN$0000 }
* { #PSSST$62E7 }
* { #TRANZAM$0000 }
* LIST#

* Start Game
* 
* Used by the routine at #R$7C19.
startgame:                             ; 7d9a
       .call @resetplayerdata          ; CALL $80CB        ; Call #R$80CB.
       movb @bytes+3,a                 ; LD A,$03          ; {Write starting lives to #R$5E21.
       movb a,@playerlives             ; LD ($5E21),A      ; }
       li   hl,fooditems               ; LD HL,$EB58       ; {Write #R$EB58 to #R$5E55.
       mov  hl,@foodpointer            ; LD ($5E55),HL     ; }
       .call @clearscreen              ; CALL $80AA        ; Call #R$80AA.
       .call @drawsidepanel            ; CALL $A219        ; Call #R$A219.
       .call @drawlives                ; CALL $A2CE        ; Call #R$A2CE.
       .call @placekeypieces           ; CALL $94B6        ; Call #R$94B6.
       .call @setkeypositions          ; CALL $98D2        ; Call #R$98D2.
       .call @resetgamestate           ; CALL $8D61        ; Call #R$8D61.
       .call @randomisedoors           ; CALL $94F5        ; Call #R$94F5.
       .call @prepareplayer            ; CALL $9443        ; Call #R$9443.
       b    @enterroom                 ; JP $9147          ; Jump to #R$9147.
* View the equivalent code in;
* #LIST
* { #COOKIE$6428 }
* { #JETPAC$6333 }
* { #LUNARJETMAN$81BB }
* { #PSSST$631E }
* { #TRANZAM$5FEF }
* LIST#

* Main Loop
* 
* Used by the routines at #R$7E23 and #R$9147.
mainloop:                              ; 7dc3
       li   sp,gameoptions             ; LD SP,$5E00       ; Set stack pointer to #N$5E00.
       ; EI                            ; EI                ; Enable interrupts.
       sb   a,a                        ; XOR A             ; {Write #N$00 to #R$5E25.
_7dc8:
       movb a,@numcreatures            ; LD ($5E25),A      ; }
       li   ix,_eaa8                   ; LD IX,$EAA8       ; #REGix=#R$EAA8.
       movb @gameflags,a               ; LD A,($5E14)      ; {Checking bit 0 of #R$5E14; jump to #R$7DDC if the room
       movb a,r0                       ; BIT 0,A           ; content is already drawn.
       andi r0,1*256                   ;                   
       jne  _7ddc                      ; JR NZ,$7DDC       ; }
       li   ix,_eee0                   ; LD IX,$EEE0       ; #REGix=#R$EEE0.
       jmp  drawroom                   ; JR $7E23          ; Jump to #R$7E23.
_7ddc:
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; {#HTML(#REGa=<a
       movb a,@c                       ; LD C,A            ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
                                                           ; }
       movb @_5e03,a                   ; LD A,($5E03)      ; #REGa=#R$5E03.
       cb   a,@c                       ; CP C              ; 
       jeq  !                          ; CALL NZ,$7EB2     ; 
       .call @_7eb2                    ;                   
!
       movb @playerroom,a              ; LD A,($EA91)      ; #REGa=#R$EA91.
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       li   hl,_7df3                   ; LD HL,$7DF3       ; #REGhl=#R$7DF3.
       jne  !                          ; JP Z,$7E7E        ; 
       b    @processaction             ;                   
!
_7df3:
       equ  $
       li   de,>0008                   ; LD DE,$0008       ; #REGde=#N($0008, $04, $04).
       a    de,ix                      ; ADD IX,DE         ; 
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       li   de,_ee60                   ; LD DE,$EE60       ; #REGde=#R$EE60.
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       joc  _7ddc                      ; JR C,$7DDC        ; TODO: check code. 
_7e03:
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; {#HTML(#REGa=<a
       movb a,@c                       ; LD C,A            ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
                                                           ; }
       movb @_5e03,a                   ; LD A,($5E03)      ; #REGa=#R$5E03.
       cb   a,@c                       ; CP C              ; 
       jeq  !                          ; CALL NZ,$7EB2     ; 
       .call @_7eb2                    ;                   
!
       li   hl,_7e13                   ; LD HL,$7E13       ; #REGhl=#R$7E13.
       jmp  processaction              ; JR $7E7E          ; 
_7e13:
       li   de,>0010                   ; LD DE,$0010       ; #REGde=#N($0010, $04, $04).
       a    de,ix                      ; ADD IX,DE         ; 
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       li   de,_eee0                   ; LD DE,$EEE0       ; #REGde=#R$EEE0.
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       joc  _7e03                      ; JR C,$7E03        ; TODO: check code. 

* Draw Room
* 
* Used by the routine at #R$7DC3.
drawroom:                              ; 7e23
       movb @playerroom,a              ; LD A,($EA91)      ; #REGa=#R$EA91.
       movb a,@l                       ; LD L,A            ; {Create an offset in #REGhl (#REGa * #N$02).
       sb   h,h                        ; LD H,$00          ; 
       a    hl,hl                      ; ADD HL,HL         ; }
       li   bc,roomtable               ; LD BC,$757D       ; {#REGhl=#R$757D + offset.
       a    bc,hl                      ; ADD HL,BC         ; }
       movb *hl,a                      ; LD A,(HL)         ; {#REGhl=the current room data.
       inc  hl                         ; INC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; 
       movb a,@l                       ; LD L,A            ; }
       mov  hl,@currentroom            ; LD ($5E1B),HL     ; Stash the room data pointer at #R$5E1B.
decor_loop:                            ; 7e35
       mov  @currentroom,hl            ; LD HL,($5E1B)     ; #REGhl=#R$5E1B.
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       mov  hl,@currentroom            ; LD ($5E1B),HL     ; 
       dec  hl                         ; DEC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; 
       movb a,@l                       ; LD L,A            ; 
       socb h,a                        ; OR H              ; 
       jne  _7e93                      ; JR NZ,$7E93       ; 
       mov  @counterlow,hl             ; LD HL,($5E12)     ; #REGhl=#R$5E12.
       inc  hl                         ; INC HL            ; 
       mov  hl,@counterlow             ; LD ($5E12),HL     ; 
       li   hl,gameflags               ; LD HL,$5E14       ; #REGhl=#R$5E14.
       movb *hl,r0                     ; BIT 0,(HL)        ; 
       andi r0,1*256                   ;                   
       jne  _7e55                      ; JR NZ,$7E55       ; 
       .call @_9291                    ; CALL $9291        ; 
_7e55:
       li   hl,gameflags               ; LD HL,$5E14       ; #REGhl=#R$5E14.
       socb @bits+0,*hl                ; SET 0,(HL)        ; 
       mov  @_5e05,hl                  ; LD HL,($5E05)     ; 
       mov  @decryption_loop+241,de    ; LD DE,($5C78)     ; 
       a    de,hl                      ; ADD HL,DE         ; 
       movb @counterlow,a              ; LD A,($5E12)      ; #REGa=#R$5E12.
       ab   @l,a                       ; ADD A,L           ; 
       movb a,@l                       ; LD L,A            ; 
       mov  hl,@_5e05                  ; LD ($5E05),HL     ; 
       .call @_938b                    ; CALL $938B        ; 
       .call @_9489                    ; CALL $9489        ; 
       .call @_9924                    ; CALL $9924        ; 
       movb @playerroom,a              ; LD A,($EA91)      ; #REGa=#R$EA91.
       cb   a,@bytes+142               ; CP $8E            ; 
       jne  !                          ; JP Z,$96EC        ; 
       b    @gamecomplete              ;                   
!
       b    @mainloop                  ; JP $7DC3          ; Jump to #R$7DC3.

* Process Action
* 
* Used by the routine at #R$7DC3.
processaction:                         ; 7e7e
       .push hl                        ; PUSH HL           ; 
_7e7f:
       li   hl,handlertable            ; LD HL,$7EE6       ; 
_7e82:
       movb *ix,@c                     ; LD C,(IX+$00)     ; 
* This entry point is used by the routine at #R$98D2.
_7e85:
       sb   b,b                        ; LD B,$00          ; 
       ; SLA C                         ; SLA C             ; 
       ; RL B                          ; RL B              ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; 
       movb a,@l                       ; LD L,A            ; 
       b    @decryption_loop+297       ; JP $5CB0          ; 
* This entry point is used by the routine at #R$7E23.
_7e93:
       li   bc,decor_loop              ; LD BC,$7E35       ; 
       .push bc                        ; PUSH BC           ; 
       li   bc,roomtable               ; LD BC,$757D       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .push hl                        ; PUSH HL           ; 
       .pop ix                         ; POP IX            ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  _7ead                      ; JR Z,$7EAD        ; 
       li   bc,>0008                   ; LD BC,$0008       ; 
       a    bc,ix                      ; ADD IX,BC         ; 
_7ead:
       li   hl,handlertable2           ; LD HL,$802A       ; 
       jmp  _7e82                      ; JR $7E82          ; 
* This entry point is used by the routine at #R$7DC3.
_7eb2:
       limi 0                          ; DI                ; 
       .push ix                        ; PUSH IX           ; 
       movb one,a                      ; LD A,$01          ; 
       movb a,@_5e04                   ; LD ($5E04),A      ; 
       li   ix,player                  ; LD IX,$EA90       ; 
_7ebe:
       li   hl,_7ec5                   ; LD HL,$7EC5       ; 
       .push hl                        ; PUSH HL           ; 
       b    @_7e7f                     ; JP $7E7F          ; 
_7ec5:
       li   de,>0008                   ; LD DE,$0008       ; 
       a    de,ix                      ; ADD IX,DE         ; 
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       li   de,_eaa8                   ; LD DE,$EAA8       ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       joc  _7ebe                      ; JR C,$7EBE        ; TODO: check code. 
       .call @clocktick                ; CALL $95DA        ; 
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       movb a,@_5e03                   ; LD ($5E03),A      ; 
       sb   a,a                        ; XOR A             ; 
       movb a,@_5e04                   ; LD ($5E04),A      ; 
       .pop ix                         ; POP IX            ; 
       ; EI                            ; EI                ; 
       .ret                            ; RET               ; 

* Handler Table
handlertable:                          ; 7ee6
       data createdelay
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerknight
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerwizard
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerserf
       data handlerblank
       data createdelay
       data createdelay
       data handlerfireball
       data handlerfireball
       data handlerfireball
       data handlerfireball
       data handlersword
       data handlersword
       data handlersword
       data handlersword
       data handlersword
       data handlersword
       data handlersword
       data handlersword
       data handleraxe
       data handleraxe
       data handleraxe
       data handleraxe
       data handleraxe
       data handleraxe
       data handleraxe
       data handleraxe
       data createdelay
       data createdelay
       data createdelay
       data createdelay
       data _845f
       data _845f
       data _862e
       data _862e
       data handlerfooditem
       data handlerfooditem
       data handlerfooditem
       data handlerfooditem
       data handlerfooditem
       data handlerfooditem
       data handlerfooditem
       data handlerfooditem
       data _85f7
       data _85f7
       data _85f7
       data _85f7
       data _845f
       data _845f
       data _8672
       data _8672
       data _871a
       data _871a
       data _87a6
       data _87a6
       data soundeffect
       data soundeffectnext
       data _8cb7
       data _8d45
       data _8672
       data _8672
       data handlerbatlet
       data handlerbatlet
       data _8787
       data _8787
       data _8787
       data _8787
       data _8862
       data _8862
       data _8862
       data _8862
       data _8988
       data _8988
       data _8988
       data _8988
       data _89ed
       data _89ed
       data _89ed
       data _89ed
       data _8906
       data _8906
       data _8906
       data _8906
       data _92f5
       data _92f5
       data _92f5
       data _92f5
       data _92f5
       data _92f5
       data _92f5
       data _92f5
       data _92f5
       data _92f5
       data _92f5
       data _92f5
       data _92f5
       data _92f5
       data _92f5
       data _95d7
       data _8a2f
       data _8a2f
       data _8a2f
       data _8a2f
       data _8a80
       data _8a80
       data _8a80
       data _8a80
       data _8a80
       data _8a80
       data _8a80
       data _8a80
       data _8aff
       data _8aff
       data _8aff
       data _8aff
       data _a48b
       data _988b

* Handler Table 2
handlertable2:                         ; 802a
       data createdelay                                              ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerdoorexit                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerdoorexit                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerdoorbigexit                                       ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data createdelay                                              ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data createdelay                                              ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data createdelay                                              ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data createdelay                                              ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerdoorlocked                                        ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerdoorlocked                                        ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerdoorlocked                                        ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerdoorlocked                                        ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlercavedoorlocked                                    ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlercavedoorlocked                                    ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlercavedoorlocked                                    ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlercavedoorlocked                                    ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerclock                                             ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerroomitem                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerroomitem                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data createdelay                                              ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data createdelay                                              ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerroomitem                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerroomitem                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerbookcase                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlertrapclosed                                        ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlertrapopen                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerbarrel                                            ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
_8060:
       data handlerroomitem                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerroomitem                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerroomitem                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerroomitem                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data createdelay                                              ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerdoorclosed                                        ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerdooropen                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerdoorclosed                                        ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerdooropen                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerdooracgexit                                       ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerroomitem                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerroomitem                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".
       data handlerroomitem                                          ; "#D(#PEEK(#PC) + #PEEK(#PC + $01) * $100)".

* Create Delay
createdelay:                           ; 807a
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       li   de,_ee60                   ; LD DE,$EE60       ; #REGde=#R$EE60.
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       movb h,a                        ; LD A,H            ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @l,a                       ; LD A,L            ; 
       cb   a,@bytes+48                ; CP $30            ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       li   hl,>00c0                   ; LD HL,$00C0       ; #REGhl=#N($00C0, $04, $04).
createdelay_loop:                      ; 808d
       dec  hl                         ; DEC HL            ; 
       movb h,a                        ; LD A,H            ; 
       socb @l,a                       ; OR L              ; 
       jne  createdelay_loop           ; JR NZ,$808D       ; 
       .ret                            ; RET               ; Return.

* Clear Play Area
* 
* Used by the routines at #R$8C35, #R$9147 and #R$96EC.
clearplayarea:                         ; 8093
       li   hl,loading                 ; LD HL,$4000       ; 
       li   bc,>18c0                   ; LD BC,$18C0       ; 
       sb   a,a                        ; XOR A             ; 
* This entry point is used by the routines at #R$9BEA and #R$A240.
_809a:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       li   de,>0020                   ; LD DE,$0020       ; 
_809f:
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       sb   one,b                      ; DJNZ $809F        ; 
       jne  _809f                      ;                   
       .pop hl                         ; POP HL            ; 
       a    de,hl                      ; ADD HL,DE         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _809a                      ; JR NZ,$809A       ; 
       .ret                            ; RET               ; 

* Clear Screen
* 
* Used by the routines at #R$7C19 and #R$7D9A.
clearscreen:                           ; 80aa
       .call @resetattributes          ; CALL $80C2        ; Call #R$80C2.
       .call @resetscreen              ; CALL $80B4        ; Call #R$80B4.
       sb   a,a                        ; XOR A             ; {Set the border to black.
       ; OUT ($FE),A                   ; OUT ($FE),A       ; }
       .ret                            ; RET               ; Return.
* View the equivalent code in #COOKIE$5FB7.
* .
* View the equivalent code in #PSSST$5F53.

* Reset Screen Buffer
* 
* Used by the routine at #R$80AA.
resetscreen:                           ; 80b4
       li   hl,loading                 ; LD HL,$4000       ; #REGhl=#R$4000(screen buffer).
       movb @bytes+88,b                ; LD B,$58          ; #REGb=#N$58 (i.e. finish once we reach the start of
                                                           ; #R$5800(attribute buffer)).
* This entry point is used by the routine at #R$80CB.
_80b9:
       sb   @c,@c                      ; LD C,$00          ; #REGc=#N$00 (value to write).
* View the equivalent code in;
* #LIST
* { #COOKIE$74D4 }
* { #JETPAC$71B8 }
* { #LUNARJETMAN$84AD }
* { #PSSST$7439 }
* { #TRANZAM$7211 }
* LIST#
* .
* Continue on to #R$80BB to blank the screen buffer.

* Reset Routine
* 
* Used by the routine at #R$80C2.
* 
* HL Target address
* B Single byte representing the MSB of the end address (will always end on LSB
* . #N$00)
* C Value to write
resetcopier:                           ; 80bb
       movb @c,*hl                     ; LD (HL),C         ; Write #REGc to the target address.
       inc  hl                         ; INC HL            ; Increment the target address by one.
       movb h,a                        ; LD A,H            ; {Are we finished yet? Check the MSB of the target vs.
       cb   a,b                        ; CP B              ; #REGb.}
       jne  resetcopier                ; JR NZ,$80BB       ; Keep looping back to #R$80BB until the comparison is
                                                           ; zero.
       .ret                            ; RET               ; Return.
* View the equivalent code in;
* #LIST
* { #COOKIE$74DB }
* { #JETPAC$71B8 }
* { #LUNARJETMAN$84B4 }
* { #PSSST$7440 }
* { #TRANZAM$7218 }
* LIST#

* Reset Attribute Buffer
* 
* Used by the routine at #R$80AA.
resetattributes:                       ; 80c2
       li   hl,_5800                   ; LD HL,$5800       ; #REGhl=#R$5800(attribute buffer).
       movb @bytes+91,b                ; LD B,$5B          ; #REGb=#N$5B (i.e. finish once we reach the end of the
                                                           ; #R$5800(attribute buffer)).
       sb   @c,@c                      ; LD C,$00          ; #REGc=#N$00 (value to write).
       jmp  resetcopier                ; JR $80BB          ; Jump to #R$80BB.
* View the equivalent code in;
* #LIST
* { #COOKIE$74E2 }
* { #JETPAC$71C6 }
* { #LUNARJETMAN$84BB }
* { #PSSST$7447 }
* { #TRANZAM$7200 }
* LIST#

* Reset Player Data
* 
* Used by the routine at #R$7D9A.
resetplayerdata:                       ; 80cb
       li   hl,_5e10                   ; LD HL,$5E10       ; #REGhl=#R$5E10.
       movb @bytes+96,b                ; LD B,$60          ; #REGb=#N$60.
       jmp  _80b9                      ; JR $80B9          ; Jump to #R$80B9.

* Handler: Wizard
handlerwizard:                         ; 80d2
       li   bc,>2020                   ; LD BC,$2020       ; 
       li   de,>2020                   ; LD DE,$2020       ; 
       li   hl,>2020                   ; LD HL,$2020       ; 
       .call @controlplayer            ; CALL $8D77        ; 
       movb @6(ix),@e                  ; LD E,(IX+$06)     ; 
       movb @7(ix),d                   ; LD D,(IX+$07)     ; 
       movb d,a                        ; LD A,D            ; 
       socb @e,a                       ; OR E              ; 
       jeq  _811d                      ; JR Z,$811D        ; 
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       andi a,3*256                    ; AND $03           ; 
       jne  _811d                      ; JR NZ,$811D       ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,3*256                    ; AND $03           ; 
       ab   @bytes+17,a                ; ADD A,$11         ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb d,a                        ; LD A,D            ; 
       ; AND A                         ; AND A             ; 
       ; JP P,$8100                    ; JP P,$8100        ; 
       neg a                           ; NEG               ; 
_8100:
       movb a,@c                       ; LD C,A            ; 
       movb @e,a                       ; LD A,E            ; 
       ; AND A                         ; AND A             ; 
       ; JP P,$8108                    ; JP P,$8108        ; 
       neg a                           ; NEG               ; 
_8108:
       cb   a,@c                       ; CP C              ; 
       jhe  _8128                      ; JR NC,$8128       ; 
       movb d,a                        ; LD A,D            ; 
       ; AND A                         ; AND A             ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; JP M,$8115                    ; JP M,$8115        ; 
       ab   @bytes+4,a                 ; ADD A,$04         ; 
_8115:
       ab   @bytes+8,a                 ; ADD A,$08         ; 
_8117:
       movb a,*ix                      ; LD (IX+$00),A     ; 
       .call @soundswalking            ; CALL $A3C7        ; 
_811d:
       .call @_93be                    ; CALL $93BE        ; 
       andi a,16*256                   ; AND $10           ; 
       jne  !                          ; CALL Z,$814B      ; 
       .call @_814b                    ;                   
!
       b    @_8e78                     ; JP $8E78          ; 
_8128:
       movb @e,a                       ; LD A,E            ; 
       ; AND A                         ; AND A             ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; JP M,$8117                    ; JP M,$8117        ; 
       ab   @bytes+4,a                 ; ADD A,$04         ; 
       jmp  _8117                      ; JR $8117          ; 
* This entry point is used by the routine at #R$8E26.
_8134:
       movb @playerweapon,a            ; LD A,($EA98)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @_5e2d,a                   ; LD A,($5E2D)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       .call @soundsaxethrow           ; CALL $A41B        ; 
       .call @_817c                    ; CALL $817C        ; 
       li   hl,playerweapon            ; LD HL,$EA98       ; 
       movb @bytes+64,*hl              ; LD (HL),$40       ; 
       jmp  _8160                      ; JR $8160          ; 
_814b:
       movb @playerweapon,a            ; LD A,($EA98)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @_5e2d,a                   ; LD A,($5E2D)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       .call @soundsfireball           ; CALL $A438        ; 
       .call @_817c                    ; CALL $817C        ; 
       li   hl,playerweapon            ; LD HL,$EA98       ; 
       movb @bytes+52,*hl              ; LD (HL),$34       ; 
* This entry point is used by the routine at #R$8209.
_8160:
       inc  hl                         ; INC HL            ; 
       movb @1(ix),a                   ; LD A,(IX+$01)     ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       movb @3(ix),a                   ; LD A,(IX+$03)     ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       movb @4(ix),a                   ; LD A,(IX+$04)     ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .push ix                        ; PUSH IX           ; 
       li   ix,playerweapon            ; LD IX,$EA98       ; 
       .call @drawentity               ; CALL $9F4A        ; 
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$8209.
_817c:
       li   hl,playerweapon+6          ; LD HL,$EA9E       ; 
       movb @bytes+48,a                ; LD A,$30          ; 
       movb a,@_eaa0+7                 ; LD ($EAA7),A      ; 
       sb   a,a                        ; LD A,$00          ; 
       movb a,@playerweapon+2          ; LD ($EA9A),A      ; 
       movb @6(ix),a                   ; LD A,(IX+$06)     ; 
       socb @7(ix),a                   ; OR (IX+$07)       ; 
       jeq  _81b3                      ; JR Z,$81B3        ; 
       movb @6(ix),a                   ; LD A,(IX+$06)     ; 
       ; AND A                         ; AND A             ; 
       jeq  _81a0                      ; JR Z,$81A0        ; 
       ; JP M,$819E                    ; JP M,$819E        ; 
       movb @bytes+4,a                 ; LD A,$04          ; 
       jmp  _81a0                      ; JR $81A0          ; 
_819e:
       movb @bytes+252,a               ; LD A,$FC          ; 
_81a0:
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       ; AND A                         ; AND A             ; 
       jeq  _81b1                      ; JR Z,$81B1        ; 
       ; JP M,$81AF                    ; JP M,$81AF        ; 
       movb @bytes+4,a                 ; LD A,$04          ; 
       jmp  _81b1                      ; JR $81B1          ; 
_81af:
       movb @bytes+252,a               ; LD A,$FC          ; 
_81b1:
       movb a,*hl                      ; LD (HL),A         ; 
       .ret                            ; RET               ; 
_81b3:
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       sb   one,a                      ; DEC A             ; 
       andi a,12*256                   ; AND $0C           ; 
       jeq  _81c9                      ; JR Z,$81C9        ; 
       cb   a,@bytes+4                 ; CP $04            ; 
       jeq  _81cf                      ; JR Z,$81CF        ; 
       cb   a,@bytes+8                 ; CP $08            ; 
       jne  _81d5                      ; JR NZ,$81D5       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       inc  hl                         ; INC HL            ; 
       movb @bytes+252,*hl             ; LD (HL),$FC       ; 
       .ret                            ; RET               ; 
_81c9:
       movb @bytes+252,*hl             ; LD (HL),$FC       ; 
       inc  hl                         ; INC HL            ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ret                            ; RET               ; 
_81cf:
       movb @bytes+4,*hl               ; LD (HL),$04       ; 
       inc  hl                         ; INC HL            ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       .ret                            ; RET               ; 
_81d5:
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       inc  hl                         ; INC HL            ; 
       movb @bytes+4,*hl               ; LD (HL),$04       ; 
       .ret                            ; RET               ; 

* Handler: Axe
handleraxe:                            ; 81db
       .call @storeentity              ; CALL $9FFB        ; Call #R$9FFB to prepare for the mask.
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; #HTML(#REGa=<a
                                                           ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
       inv  a                          ; CPL               ; 
       ; RRA                           ; RRA               ; 
       ; AND %00000111                 ; AND %00000111     ; Keep only bits 0-2 (there are 8 animation frames).
       ab   @bytes+64,a                ; ADD A,$40         ; Add #N$40 to point to the correct frame/ sprite ID
                                                           ; (the axe base sprite ID is: #R($A4BE + $40 *
                                                           ; $02)(#N$40)).
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb @bytes+66,@5(ix)           ; LD (IX+$05),$42   ; Store the attribute byte #N$42 (BRIGHT red).
       jmp  handlerweapon              ; JR $8209          ; Jump to #R$8209.

* Handler: Fireball
handlerfireball:                       ; 81f0
       .call @storeentity              ; CALL $9FFB        ; Call #R$9FFB to prepare for the mask.
       movb *ix,a                      ; LD A,(IX+$00)     ; {Grab the current frame and increment it by one.
       ab   one,a                      ; INC A             ; }
       ; AND %00000011                 ; AND %00000011     ; Keep only bits 0-2 (there are 8 animation frames).
       ab   @bytes+52,a                ; ADD A,$34         ; Add #N$34 to point to the correct frame/ sprite ID (the
                                                           ; fireball base sprite ID is: #R($A4BE + $34 *
                                                           ; $02)(#N$34)).
       movb a,*ix                      ; LD (IX+$00),A     ; Write the new frame/ sprite ID back to the entity.
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; #HTML(#REGa=<a
                                                           ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
       ; RLA                           ; RLA               ; 
       ; AND %00000010                 ; AND %00000010     ; Keep only bit 1.
       ab   @bytes+69,a                ; ADD A,$45         ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
* Continue on to #R$8209.

* Handler: Weapon
* 
* Used by the routines at #R$81DB and #R$82F1.
handlerweapon:                         ; 8209
       mov  @currentroom_width,de      ; LD DE,($5E1D)     ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jne  _827e                      ; JR NZ,$827E       ; 
       sb   one,@15(ix)                ; DEC (IX+$0F)      ; 
       jeq  _826f                      ; JR Z,$826F        ; 
       movb @2(ix),r0                  ; BIT 0,(IX+$02)    ; 
       andi r0,1*256                   ;                   
       jne  _826f                      ; JR NZ,$826F       ; 
       movb @3(ix),a                   ; LD A,(IX+$03)     ; 
       ab   @6(ix),a                   ; ADD A,(IX+$06)    ; 
       movb a,@c                       ; LD C,A            ; 
       sb   @bytes+88,a                ; SUB $58           ; 
       ; JP P,$822E                    ; JP P,$822E        ; 
       neg a                           ; NEG               ; 
_822e:
       cb   a,@e                       ; CP E              ; 
       jhe  _825d                      ; JR NC,$825D       ; 
_8231:
       movb @4(ix),a                   ; LD A,(IX+$04)     ; 
       ab   @7(ix),a                   ; ADD A,(IX+$07)    ; 
       movb a,b                        ; LD B,A            ; 
       sb   @bytes+104,a               ; SUB $68           ; 
       ; JP P,$823F                    ; JP P,$823F        ; 
       neg a                           ; NEG               ; 
_823f:
       cb   a,d                        ; CP D              ; 
       jhe  _824b                      ; JR NC,$824B       ; 
_8242:
       movb @c,@3(ix)                  ; LD (IX+$03),C     ; 
       movb b,@4(ix)                   ; LD (IX+$04),B     ; 
       b    @_8e8e                     ; JP $8E8E          ; 
_824b:
       movb @4(ix),b                   ; LD B,(IX+$04)     ; 
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       neg a                           ; NEG               ; 
       movb a,@7(ix)                   ; LD (IX+$07),A     ; 
       .push bc                        ; PUSH BC           ; 
       .call @soundsbounce             ; CALL $A4B0        ; 
       .pop bc                         ; POP BC            ; 
       jmp  _8242                      ; JR $8242          ; 
_825d:
       movb @3(ix),@c                  ; LD C,(IX+$03)     ; 
       movb @6(ix),a                   ; LD A,(IX+$06)     ; 
       neg a                           ; NEG               ; 
       movb a,@6(ix)                   ; LD (IX+$06),A     ; 
       .push bc                        ; PUSH BC           ; 
       .call @soundsbounce             ; CALL $A4B0        ; 
       .pop bc                         ; POP BC            ; 
       jmp  _8231                      ; JR $8231          ; 
* This entry point is used by the routine at #R$8301.
_826f:
       .call @removeentity             ; CALL $9F56        ; 
       .call @soundsweaponpop          ; CALL $A445        ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       .call @_a01a                    ; CALL $A01A        ; 
* This entry point is used by the routine at #R$8301.
_827e:
       sb   *ix,*ix                    ; LD (IX+$00),$00   ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$8DC4.
_8283:
       movb @playerweapon,a            ; LD A,($EA98)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @_5e2d,a                   ; LD A,($5E2D)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       .call @soundssword              ; CALL $A427        ; 
       .call @_817c                    ; CALL $817C        ; 
       sb   @c,@c                      ; LD C,$00          ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _82b6                      ; JR Z,$82B6        ; 
       ; JP P,$829E                    ; JP P,$829E        ; 
       movb @bytes+4,@c                ; LD C,$04          ; 
_829e:
       dec  hl                         ; DEC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _82a7                      ; JR Z,$82A7        ; 
       ; JP P,$82B3                    ; JP P,$82B3        ; 
       sb   one,@c                     ; DEC C             ; 
_82a7:
       movb @c,a                       ; LD A,C            ; 
       andi a,7*256                    ; AND $07           ; 
       ab   @bytes+56,a                ; ADD A,$38         ; 
       li   hl,playerweapon            ; LD HL,$EA98       ; 
       movb a,*hl                      ; LD (HL),A         ; 
       b    @_8160                     ; JP $8160          ; 
_82b3:
       ab   one,@c                     ; INC C             ; 
       jmp  _82a7                      ; JR $82A7          ; 
_82b6:
       dec  hl                         ; DEC HL            ; 
       movb *hl,r0                     ; BIT 7,(HL)        ; 
       andi r0,128*256                 ;                   
       jeq  _82bf                      ; JR Z,$82BF        ; 
       movb @bytes+6,@c                ; LD C,$06          ; 
       jmp  _82a7                      ; JR $82A7          ; 
_82bf:
       movb @bytes+2,@c                ; LD C,$02          ; 
       jmp  _82a7                      ; JR $82A7          ; 

* Sword Direction
* 
* Used by the routine at #R$82F1.
* 
* .
* 
* Set the sword direction to match the players direction.
sworddirection:                        ; 82c3
       sb   @c,@c                      ; LD C,$00          ; #REGc=#N$00 (down).
       movb *hl,a                      ; LD A,(HL)         ; {If the byte at #REGhl is zero then jump to #R$82E4.
       ; AND A                         ; AND A             ; 
       jeq  _82e4                      ; JR Z,$82E4        ; }
       ; JP P,$82CE                    ; JP P,$82CE        ; 
       movb @bytes+4,@c                ; LD C,$04          ; #REGc=#N$04 (up).
_82ce:
       dec  hl                         ; DEC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _82d7                      ; JR Z,$82D7        ; 
       ; JP P,$82E1                    ; JP P,$82E1        ; 
       sb   one,@c                     ; DEC C             ; 
_82d7:
       movb @c,a                       ; LD A,C            ; 
       ; AND %00000111                 ; AND %00000111     ; Keep only bits 0-2 (there are 8 animation frames).
       ab   @bytes+56,a                ; ADD A,$38         ; Add #N$38 to point to the correct frame/ sprite ID (the
                                                           ; sword base sprite ID is: #R($A4BE + $38 * $02)(#N$38)).
       li   hl,playerweapon            ; LD HL,$EA98       ; {Write the new frame/ sprite ID back to #R$EA98.
       movb a,*hl                      ; LD (HL),A         ; }
       .ret                            ; RET               ; Return.
_82e1:
       ab   one,@c                     ; INC C             ; 
       jmp  _82d7                      ; JR $82D7          ; Jump to #R$82D7.
_82e4:
       dec  hl                         ; DEC HL            ; 
       movb *hl,r0                     ; BIT 7,(HL)        ; 
       andi r0,128*256                 ;                   
       jeq  _82ed                      ; JR Z,$82ED        ; 
       movb @bytes+6,@c                ; LD C,$06          ; #REGc=#N$06 (left).
       jmp  _82d7                      ; JR $82D7          ; Jump to #R$82D7.
_82ed:
       movb @bytes+2,@c                ; LD C,$02          ; #REGc=#N$02 (right).
       jmp  _82d7                      ; JR $82D7          ; Jump to #R$82D7.

* Handler: Sword
handlersword:                          ; 82f1
       .call @storeentity              ; CALL $9FFB        ; Call #R$9FFB to prepare for the mask.
       movb @bytes+70,@5(ix)           ; LD (IX+$05),$46   ; Store the attribute byte #N$46 (BRIGHT yellow).
       li   hl,playerweapon+7          ; LD HL,$EA9F       ; #REGhl=#N$EA9F.
       .call @sworddirection           ; CALL $82C3        ; Call #R$82C3.
       b    @handlerweapon             ; JP $8209          ; Jump to #R$8209.

* Handler: Batlet
handlerbatlet:                         ; 8301
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; JP NZ,$85F0       ; 
       b    @_85f0                     ;                   
!
       .call @storeentity              ; CALL $9FFB        ; 
       li   hl,numcreatures            ; LD HL,$5E25       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$85EA        ; 
       b    @_85ea                     ;                   
!
       .call @_8566                    ; CALL $8566        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$875F        ; 
       b    @_875f                     ;                   
!
       sb   @15(ix),@15(ix)            ; LD (IX+$0F),$00   ; 
       mov  @currentroom_width,de      ; LD DE,($5E1D)     ; 
       movb @9(ix),a                   ; LD A,(IX+$09)     ; 
       ab   one,a                      ; INC A             ; 
       andi a,15*256                   ; AND $0F           ; 
       movb a,@9(ix)                   ; LD (IX+$09),A     ; 
       jeq  !                          ; JP NZ,$833A       ; 
       b    @_833a                     ;                   
!
       movb r,a                        ; LD A,R            ; 
       andi a,7*256                    ; AND $07           ; 
       movb a,@8(ix)                   ; LD (IX+$08),A     ; 
_833a:
       .call @_83ba                    ; CALL $83BA        ; 
       movb @bytes+67,@5(ix)           ; LD (IX+$05),$43   ; 
       jne  _8344                      ; JR NZ,$8344       ; 
       inc  hl                         ; INC HL            ; 
_8344:
       movb *hl,a                      ; LD A,(HL)         ; 
       movb @8(ix),r0                  ; BIT 1,(IX+$08)    ; 
       andi r0,2*256                   ;                   
       jne  _834d                      ; JR NZ,$834D       ; 
       neg a                           ; NEG               ; 
_834d:
       ab   @4(ix),a                   ; ADD A,(IX+$04)    ; 
       movb a,@c                       ; LD C,A            ; 
       sb   @bytes+104,a               ; SUB $68           ; 
       joc  _835a                      ; JR C,$835A        ; TODO: check code. 
       cb   a,d                        ; CP D              ; 
       jhe  _83a2                      ; JR NC,$83A2       ; 
       jmp  _835f                      ; JR $835F          ; 
_835a:
       neg a                           ; NEG               ; 
       cb   a,d                        ; CP D              ; 
       jhe  _83a8                      ; JR NC,$83A8       ; 
_835f:
       movb @c,@4(ix)                  ; LD (IX+$04),C     ; 
_8362:
       .call @_83ba                    ; CALL $83BA        ; 
       jeq  _8368                      ; JR Z,$8368        ; 
       inc  hl                         ; INC HL            ; 
_8368:
       movb *hl,a                      ; LD A,(HL)         ; 
       movb @8(ix),r0                  ; BIT 0,(IX+$08)    ; 
       andi r0,1*256                   ;                   
       jne  _8371                      ; JR NZ,$8371       ; 
       neg a                           ; NEG               ; 
_8371:
       ab   @3(ix),a                   ; ADD A,(IX+$03)    ; 
       movb a,@c                       ; LD C,A            ; 
       sb   @bytes+88,a                ; SUB $58           ; 
       joc  _837e                      ; JR C,$837E        ; TODO: check code. 
       cb   a,@e                       ; CP E              ; 
       jhe  _83b4                      ; JR NC,$83B4       ; 
       jmp  _8383                      ; JR $8383          ; 
_837e:
       neg a                           ; NEG               ; 
       cb   a,@e                       ; CP E              ; 
       jhe  _83ae                      ; JR NC,$83AE       ; 
_8383:
       movb @c,@3(ix)                  ; LD (IX+$03),C     ; 
       movb @9(ix),a                   ; LD A,(IX+$09)     ; 
       ; RRA                           ; RRA               ; 
       ; RRA                           ; RRA               ; 
       andi a,1*256                    ; AND $01           ; 
       movb a,@c                       ; LD C,A            ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,254*256                  ; AND $FE           ; 
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb @player,a                  ; LD A,($EA90)      ; 
       cb   a,@bytes+49                ; CP $31            ; 
       jl   !                          ; JP NC,$875F       ; 
       b    @_875f                     ;                   
!
       b    @_8e8e                     ; JP $8E8E          ; 
_83a2:
       szcb @bits+1,@8(ix)             ; RES 1,(IX+$08)    ; 
       jmp  _8362                      ; JR $8362          ; 
_83a8:
       socb @bits+1,@8(ix)             ; SET 1,(IX+$08)    ; 
       jmp  _8362                      ; JR $8362          ; 
_83ae:
       socb @bits+0,@8(ix)             ; SET 0,(IX+$08)    ; 
       jmp  _8383                      ; JR $8383          ; 
_83b4:
       szcb @bits+0,@8(ix)             ; RES 0,(IX+$08)    ; 
       jmp  _8383                      ; JR $8383          ; 
_83ba:
       movb @9(ix),@c                  ; LD C,(IX+$09)     ; 
       ; SLA C                         ; SLA C             ; 
       sb   b,b                        ; LD B,$00          ; 
       li   hl,_83ca                   ; LD HL,$83CA       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb @8(ix),r0                  ; BIT 2,(IX+$08)    ; 
       andi r0,4*256                   ;                   
       .ret                            ; RET               ; 
_83ca:
       inc  bc                         ; INC BC            ; 
       nop                             ; NOP               ; 
       inc  bc                         ; INC BC            ; 
       nop                             ; NOP               ; 
       inc  bc                         ; INC BC            ; 
       li   bc,>0103                   ; LD BC,$0103       ; 
       inc  bc                         ; INC BC            ; 
       li   bc,>0202                   ; LD BC,$0202       ; 
       movb a,*bc                      ; LD (BC),A         ; 
       movb a,*bc                      ; LD (BC),A         ; 
       movb a,*bc                      ; LD (BC),A         ; 
       movb a,*bc                      ; LD (BC),A         ; 
       movb a,*bc                      ; LD (BC),A         ; 
       movb a,*bc                      ; LD (BC),A         ; 
       movb a,*bc                      ; LD (BC),A         ; 
       movb a,*bc                      ; LD (BC),A         ; 
       movb a,*bc                      ; LD (BC),A         ; 
       movb a,*bc                      ; LD (BC),A         ; 
       li   bc,>0103                   ; LD BC,$0103       ; 
       inc  bc                         ; INC BC            ; 
       li   bc,>0003                   ; LD BC,$0003       ; 
       inc  bc                         ; INC BC            ; 
       nop                             ; NOP               ; 
       inc  bc                         ; INC BC            ; 
* This entry point is used by the routine at #R$8E26.
_83ea:
       movb @_5e26,a                   ; LD A,($5E26)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@c                       ; CP C              ; 
       jne  _844f                      ; JR NZ,$844F       ; 
       li   hl,_5e27                   ; LD HL,$5E27       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _8458                      ; JR Z,$8458        ; 
       sb   one,*hl                    ; DEC (HL)          ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
_83fd:
       equ  $
       li   hl,_ee60                   ; LD HL,$EE60       ; 
       li   de,>0010                   ; LD DE,$0010       ; 
       movb @bytes+3,b                 ; LD B,$03          ; 
_8405:
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _840d                      ; JR Z,$840D        ; 
       a    de,hl                      ; ADD HL,DE         ; 
       sb   one,b                      ; DJNZ $8405        ; 
       jne  _8405                      ;                   
       .ret                            ; RET               ; 
_840d:
       .ex_de_hl                       ; EX DE,HL          ; 
       li   hl,creaturedefaults        ; LD HL,$8B6A       ; 
       li   bc,>0010                   ; LD BC,$0010       ; 
       .push de                        ; PUSH DE           ; 
       .ldir                           ; LDIR              ; 
       .pop hl                         ; POP HL            ; 
       .push hl                        ; PUSH HL           ; 
       inc  hl                         ; INC HL            ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       .push hl                        ; PUSH HL           ; 
       li   hl,creatures               ; LD HL,$8B7A       ; 
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       andi a,15*256                   ; AND $0F           ; 
       movb a,@e                       ; LD E,A            ; 
       sb   d,d                        ; LD D,$00          ; 
       a    de,hl                      ; ADD HL,DE         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       .pop hl                         ; POP HL            ; 
       movb a,*hl                      ; LD (HL),A         ; 
       mov  @currentroom_width,de      ; LD DE,($5E1D)     ; 
       movb @e,b                       ; LD B,E            ; 
       .call @_8598                    ; CALL $8598        ; 
       movb a,*hl                      ; LD (HL),A         ; 
       movb d,b                        ; LD B,D            ; 
       .call @_8598                    ; CALL $8598        ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .pop de                         ; POP DE            ; 
       .push ix                        ; PUSH IX           ; 
       li   ix,>0000                   ; LD IX,$0000       ; 
       a    de,ix                      ; ADD IX,DE         ; 
       .call @_86f2                    ; CALL $86F2        ; 
       .call @drawentity               ; CALL $9F4A        ; 
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 
_844f:
       movb a,@_5e26                   ; LD ($5E26),A      ; 
       movb @bytes+32,a                ; LD A,$20          ; 
       movb a,@_5e27                   ; LD ($5E27),A      ; 
       .ret                            ; RET               ; 
_8458:
       movb r,a                        ; LD A,R            ; 
       andi a,15*256                   ; AND $0F           ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       jmp  _83fd                      ; JR $83FD          ; 
_845f:
       .call @storeentity              ; CALL $9FFB        ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; JP NZ,$85F0       ; 
       b    @_85f0                     ;                   
!
       li   hl,numcreatures            ; LD HL,$5E25       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       .call @_8566                    ; CALL $8566        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$875F        ; 
       b    @_875f                     ;                   
!
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$85EA        ; 
       b    @_85ea                     ;                   
!
       mov  @currentroom_width,de      ; LD DE,($5E1D)     ; 
       sb   @15(ix),@15(ix)            ; LD (IX+$0F),$00   ; 
       movb @bytes+70,@5(ix)           ; LD (IX+$05),$46   ; 
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       andi a,15*256                   ; AND $0F           ; 
       jne  _8497                      ; JR NZ,$8497       ; 
       movb r,a                        ; LD A,R            ; 
       andi a,3*256                    ; AND $03           ; 
       movb a,@6(ix)                   ; LD (IX+$06),A     ; 
_8497:
       movb @7(ix),r0                  ; BIT 0,(IX+$07)    ; 
       andi r0,1*256                   ;                   
       jne  _84bf                      ; JR NZ,$84BF       ; 
       movb @6(ix),r0                  ; BIT 0,(IX+$06)    ; 
       andi r0,1*256                   ;                   
       jne  !                          ; JP Z,$854A        ; 
       b    @_854a                     ;                   
!
       movb @8(ix),a                   ; LD A,(IX+$08)     ; 
       cb   a,@bytes+2                 ; CP $02            ; 
       jeq  _84ae                      ; JR Z,$84AE        ; 
       ab   one,@8(ix)                 ; INC (IX+$08)      ; 
_84ae:
       movb @6(ix),r0                  ; BIT 1,(IX+$06)    ; 
       andi r0,2*256                   ;                   
       jne  !                          ; JP Z,$8558        ; 
       b    @_8558                     ;                   
!
       movb @9(ix),a                   ; LD A,(IX+$09)     ; 
       cb   a,@bytes+2                 ; CP $02            ; 
       jeq  _84bf                      ; JR Z,$84BF        ; 
       ab   one,@9(ix)                 ; INC (IX+$09)      ; 
_84bf:
       ab   one,@7(ix)                 ; INC (IX+$07)      ; 
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       andi a,1*256                    ; AND $01           ; 
       ; XOR (IX+$00)                  ; XOR (IX+$00)      ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
_84cd:
       movb @3(ix),a                   ; LD A,(IX+$03)     ; 
       ab   @8(ix),a                   ; ADD A,(IX+$08)    ; 
       movb a,@c                       ; LD C,A            ; 
       sb   @bytes+88,a                ; SUB $58           ; 
       joc  _84e8                      ; JR C,$84E8        ; TODO: check code. 
       cb   a,@e                       ; CP E              ; 
       jl   _84f8                      ; JR C,$84F8        ; 
       szcb @bits+0,@6(ix)             ; RES 0,(IX+$06)    ; 
       movb @b254,@8(ix)               ; LD (IX+$08),$FE   ; 
       movb @3(ix),@c                  ; LD C,(IX+$03)     ; 
       jmp  _84f8                      ; JR $84F8          ; 
_84e8:
       neg a                           ; NEG               ; 
       cb   a,@e                       ; CP E              ; 
       jl   _84f8                      ; JR C,$84F8        ; 
       socb @bits+0,@6(ix)             ; SET 0,(IX+$06)    ; 
       movb @3(ix),@c                  ; LD C,(IX+$03)     ; 
       movb @bytes+2,@8(ix)            ; LD (IX+$08),$02   ; 
_84f8:
       movb @4(ix),a                   ; LD A,(IX+$04)     ; 
       ab   @9(ix),a                   ; ADD A,(IX+$09)    ; 
       movb a,b                        ; LD B,A            ; 
       sb   @bytes+104,a               ; SUB $68           ; 
       joc  _8513                      ; JR C,$8513        ; TODO: check code. 
       cb   a,d                        ; CP D              ; 
       jl   _8523                      ; JR C,$8523        ; 
       szcb @bits+1,@6(ix)             ; RES 1,(IX+$06)    ; 
       movb @b254,@9(ix)               ; LD (IX+$09),$FE   ; 
       movb @4(ix),b                   ; LD B,(IX+$04)     ; 
       jmp  _8523                      ; JR $8523          ; 
_8513:
       neg a                           ; NEG               ; 
       cb   a,d                        ; CP D              ; 
       jl   _8523                      ; JR C,$8523        ; 
       socb @bits+1,@6(ix)             ; SET 1,(IX+$06)    ; 
       movb @4(ix),b                   ; LD B,(IX+$04)     ; 
       movb @bytes+2,@9(ix)            ; LD (IX+$09),$02   ; 
_8523:
       movb @c,@3(ix)                  ; LD (IX+$03),C     ; 
       movb b,@4(ix)                   ; LD (IX+$04),B     ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,252*256                  ; AND $FC           ; 
       cb   a,@bytes+156               ; CP $9C            ; 
       jeq  _8547                      ; JR Z,$8547        ; 
       andi a,240*256                  ; AND $F0           ; 
       cb   a,@bytes+112               ; CP $70            ; 
       jeq  _8547                      ; JR Z,$8547        ; 
       movb @player,a                  ; LD A,($EA90)      ; 
       cb   a,@bytes+49                ; CP $31            ; 
       jl   !                          ; JP NC,$875F       ; 
       b    @_875f                     ;                   
!
_8547:
       equ  $
       b    @_8e8e                     ; JP $8E8E          ; 
_854a:
       movb @8(ix),a                   ; LD A,(IX+$08)     ; 
       cb   a,@b254                    ; CP $FE            ; 
       jne  !                          ; JP Z,$84AE        ; 
       b    @_84ae                     ;                   
!
       sb   one,@8(ix)                 ; DEC (IX+$08)      ; 
       b    @_84ae                     ; JP $84AE          ; 
_8558:
       movb @9(ix),a                   ; LD A,(IX+$09)     ; 
       cb   a,@b254                    ; CP $FE            ; 
       jne  !                          ; JP Z,$84BF        ; 
       b    @_84bf                     ;                   
!
       sb   one,@9(ix)                 ; DEC (IX+$09)      ; 
       b    @_84bf                     ; JP $84BF          ; 
_8566:
       movb @playerweapon+1,a          ; LD A,($EA99)      ; 
       sb   @e,@e                      ; LD E,$00          ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @playerweapon,a            ; LD A,($EA98)      ; 
       ; AND A                         ; AND A             ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       movb @playerweapon+3,a          ; LD A,($EA9B)      ; 
       sb   @3(ix),a                   ; SUB (IX+$03)      ; 
       ; JP P,$857F                    ; JP P,$857F        ; 
       neg a                           ; NEG               ; 
_857f:
       cb   a,@bytes+12                ; CP $0C            ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       movb @playerweapon+4,a          ; LD A,($EA9C)      ; 
       sb   @4(ix),a                   ; SUB (IX+$04)      ; 
       ; JP P,$858D                    ; JP P,$858D        ; 
       neg a                           ; NEG               ; 
_858d:
       cb   a,@bytes+12                ; CP $0C            ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       movb one,a                      ; LD A,$01          ; 
       movb a,@playerweapon+2          ; LD ($EA9A),A      ; 
       movb one,@e                     ; LD E,$01          ; 
       .ret                            ; RET               ; 
_8598:
       movb b,a                        ; LD A,B            ; 
       sb   @bytes+8,a                 ; SUB $08           ; 
       movb a,b                        ; LD B,A            ; 
       movb r,a                        ; LD A,R            ; 
       inc  hl                         ; INC HL            ; 
_859f:
       cb   a,b                        ; CP B              ; 
       jl   _85a5                      ; JR C,$85A5        ; 
       sb   b,a                        ; SUB B             ; 
       jmp  _859f                      ; JR $859F          ; 
_85a5:
       movb a,@c                       ; LD C,A            ; 
       movb r,a                        ; LD A,R            ; 
       movb a,r0                       ; BIT 1,A           ; 
       andi r0,2*256                   ;                   
       movb @bytes+96,a                ; LD A,$60          ; 
       jeq  _85b0                      ; JR Z,$85B0        ; 
       ab   @c,a                       ; ADD A,C           ; 
       .ret                            ; RET               ; 
_85b0:
       sb   @c,a                       ; SUB C             ; 
       .ret                            ; RET               ; 
_85b2:
       movb @playerroom,a              ; LD A,($EA91)      ; 
       sb   @e,@e                      ; LD E,$00          ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @player,a                  ; LD A,($EA90)      ; 
       ; AND A                         ; AND A             ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       cb   a,@bytes+49                ; CP $31            ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       movb @playerroom+2,a            ; LD A,($EA93)      ; 
       sb   @3(ix),a                   ; SUB (IX+$03)      ; 
       ; JP P,$85CE                    ; JP P,$85CE        ; 
       neg a                           ; NEG               ; 
_85ce:
       cb   a,@bytes+12                ; CP $0C            ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       movb @playerroom+3,a            ; LD A,($EA94)      ; 
       sb   @4(ix),a                   ; SUB (IX+$04)      ; 
       ; JP P,$85DC                    ; JP P,$85DC        ; 
       neg a                           ; NEG               ; 
_85dc:
       cb   a,@bytes+12                ; CP $0C            ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       movb one,a                      ; LD A,$01          ; 
       movb a,@playerroom+1            ; LD ($EA92),A      ; 
       .call @soundstouching           ; CALL $A3E5        ; 
       movb one,@e                     ; LD E,$01          ; 
       .ret                            ; RET               ; 
_85ea:
       .call @_8ed7                    ; CALL $8ED7        ; 
       b    @_875f                     ; JP $875F          ; 
_85f0:
       sb   one,@15(ix)                ; DEC (IX+$0F)      ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       b    @_827e                     ; JP $827E          ; 
_85f7:
       .call @storeentity              ; CALL $9FFB        ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; JP NZ,$85F0       ; 
       b    @_85f0                     ;                   
!
       li   hl,numcreatures            ; LD HL,$5E25       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       sb   one,@14(ix)                ; DEC (IX+$0E)      ; 
       jeq  _8625                      ; JR Z,$8625        ; 
       movb @14(ix),a                  ; LD A,(IX+$0E)     ; 
       andi a,3*256                    ; AND $03           ; 
       ab   @bytes+88,a                ; ADD A,$58         ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb @bytes+128,@15(ix)         ; LD (IX+$0F),$80   ; 
       movb @player,a                  ; LD A,($EA90)      ; 
       cb   a,@bytes+49                ; CP $31            ; 
       jl   !                          ; JP NC,$875F       ; 
       b    @_875f                     ;                   
!
       b    @_8e8e                     ; JP $8E8E          ; 
_8625:
       movb @2(ix),a                   ; LD A,(IX+$02)     ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       b    @_8e8e                     ; JP $8E8E          ; 
_862e:
       .call @storeentity              ; CALL $9FFB        ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; JP NZ,$85F0       ; 
       b    @_85f0                     ;                   
!
       li   hl,numcreatures            ; LD HL,$5E25       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$85EA        ; 
       b    @_85ea                     ;                   
!
       .call @_8566                    ; CALL $8566        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$875F        ; 
       b    @_875f                     ;                   
!
       movb @bytes+69,@5(ix)           ; LD (IX+$05),$45   ; 
       ab   one,@7(ix)                 ; INC (IX+$07)      ; 
       jne  !                          ; CALL Z,$86F2      ; 
       .call @_86f2                    ;                   
!
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       ; RRA                           ; RRA               ; 
       ; RRA                           ; RRA               ; 
       andi a,1*256                    ; AND $01           ; 
       movb a,@c                       ; LD C,A            ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,254*256                  ; AND $FE           ; 
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       mov  @currentroom_width,de      ; LD DE,($5E1D)     ; 
       sb   @15(ix),@15(ix)            ; LD (IX+$0F),$00   ; 
       b    @_84cd                     ; JP $84CD          ; 
_8672:
       .call @storeentity              ; CALL $9FFB        ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; JP NZ,$85F0       ; 
       b    @_85f0                     ;                   
!
       li   hl,numcreatures            ; LD HL,$5E25       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       sb   @15(ix),@15(ix)            ; LD (IX+$0F),$00   ; 
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$85EA        ; 
       b    @_85ea                     ;                   
!
       .call @_8566                    ; CALL $8566        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$875F        ; 
       b    @_875f                     ;                   
!
       movb @10(ix),a                  ; LD A,(IX+$0A)     ; 
       ; RRA                           ; RRA               ; 
       andi a,1*256                    ; AND $01           ; 
       movb a,@c                       ; LD C,A            ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,254*256                  ; AND $FE           ; 
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       mov  @currentroom_width,de      ; LD DE,($5E1D)     ; 
       ab   one,@10(ix)                ; INC (IX+$0A)      ; 
       movb @10(ix),a                  ; LD A,(IX+$0A)     ; 
       cb   a,@bytes+7                 ; CP $07            ; 
       jne  _86b9                      ; JR NZ,$86B9       ; 
       .call @_86f2                    ; CALL $86F2        ; 
       movb @bytes+249,@10(ix)         ; LD (IX+$0A),$F9   ; 
_86b9:
       sra  a,1                        ; SRA A             ; 
       ab   @4(ix),a                   ; ADD A,(IX+$04)    ; 
       movb a,@c                       ; LD C,A            ; 
       sb   @bytes+104,a               ; SUB $68           ; 
       ; JP P,$86E1                    ; JP P,$86E1        ; 
       neg a                           ; NEG               ; 
       cb   a,d                        ; CP D              ; 
       jl   _86db                      ; JR C,$86DB        ; 
       movb @bytes+2,@9(ix)            ; LD (IX+$09),$02   ; 
       socb @bits+1,@6(ix)             ; SET 1,(IX+$06)    ; 
       movb @10(ix),r0                 ; BIT 7,(IX+$0A)    ; 
       andi r0,128*256                 ;                   
       jeq  _86db                      ; JR Z,$86DB        ; 
       sb   @10(ix),@10(ix)            ; LD (IX+$0A),$00   ; 
_86db:
       movb @c,@4(ix)                  ; LD (IX+$04),C     ; 
       b    @_84cd                     ; JP $84CD          ; 
_86e1:
       cb   a,d                        ; CP D              ; 
       jl   _86db                      ; JR C,$86DB        ; 
       szcb @bits+1,@6(ix)             ; RES 1,(IX+$06)    ; 
       movb @b254,@9(ix)               ; LD (IX+$09),$FE   ; 
       movb @bytes+249,@10(ix)         ; LD (IX+$0A),$F9   ; 
       jmp  _86db                      ; JR $86DB          ; 
_86f2:
       movb r,a                        ; LD A,R            ; 
       movb a,r0                       ; BIT 0,A           ; 
       andi r0,1*256                   ;                   
       jeq  _870e                      ; JR Z,$870E        ; 
       andi a,4*256                    ; AND $04           ; 
       sb   @bytes+2,a                 ; SUB $02           ; 
_86fc:
       movb a,@9(ix)                   ; LD (IX+$09),A     ; 
       movb r,a                        ; LD A,R            ; 
       ; RRA                           ; RRA               ; 
       movb a,r0                       ; BIT 0,A           ; 
       andi r0,1*256                   ;                   
       jeq  _8714                      ; JR Z,$8714        ; 
       andi a,4*256                    ; AND $04           ; 
       sb   @bytes+2,a                 ; SUB $02           ; 
_870a:
       movb a,@8(ix)                   ; LD (IX+$08),A     ; 
       .ret                            ; RET               ; 
_870e:
       andi a,2*256                    ; AND $02           ; 
       sb   one,a                      ; SUB $01           ; 
       jmp  _86fc                      ; JR $86FC          ; 
_8714:
       andi a,2*256                    ; AND $02           ; 
       sb   one,a                      ; SUB $01           ; 
       jmp  _870a                      ; JR $870A          ; 
_871a:
       .call @storeentity              ; CALL $9FFB        ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; JP NZ,$85F0       ; 
       b    @_85f0                     ;                   
!
       li   hl,numcreatures            ; LD HL,$5E25       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       sb   @15(ix),@15(ix)            ; LD (IX+$0F),$00   ; 
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$85EA        ; 
       b    @_85ea                     ;                   
!
       .call @_8566                    ; CALL $8566        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$875F        ; 
       b    @_875f                     ;                   
!
       mov  @currentroom_width,de      ; LD DE,($5E1D)     ; 
       sb   one,@13(ix)                ; DEC (IX+$0D)      ; 
       jne  _874c                      ; JR NZ,$874C       ; 
       movb @bytes+17,@13(ix)          ; LD (IX+$0D),$11   ; 
       .call @_86f2                    ; CALL $86F2        ; 
_874c:
       movb @13(ix),a                  ; LD A,(IX+$0D)     ; 
       ; RRA                           ; RRA               ; 
       andi a,1*256                    ; AND $01           ; 
       movb a,@c                       ; LD C,A            ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,254*256                  ; AND $FE           ; 
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       b    @_84cd                     ; JP $84CD          ; 
_875f:
       movb @5(ix),a                   ; LD A,(IX+$05)     ; 
       .push af                        ; PUSH AF           ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       .call @removeentity             ; CALL $9F56        ; 
       .call @_a01a                    ; CALL $A01A        ; 
       .pop af                         ; POP AF            ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       movb @bytes+108,*ix             ; LD (IX+$00),$6C   ; 
       movb @bytes+16,@14(ix)          ; LD (IX+$0E),$10   ; 
       li   bc,>0155                   ; LD BC,$0155       ; 
       .call @addtoscore               ; CALL $A19C        ; 
       .call @drawentity               ; CALL $9F4A        ; 
       b    @_a01a                     ; JP $A01A          ; 
_8787:
       .call @storeentity              ; CALL $9FFB        ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; JP NZ,$85F0       ; 
       b    @_85f0                     ;                   
!
       sb   one,@14(ix)                ; DEC (IX+$0E)      ; 
       jne  !                          ; JP Z,$826F        ; 
       b    @_826f                     ;                   
!
       movb @14(ix),a                  ; LD A,(IX+$0E)     ; 
       andi a,3*256                    ; AND $03           ; 
       ab   @bytes+108,a               ; ADD A,$6C         ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       b    @_8e8e                     ; JP $8E8E          ; 
_87a6:
       .call @storeentity              ; CALL $9FFB        ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; JP NZ,$85F0       ; 
       b    @_85f0                     ;                   
!
       li   hl,numcreatures            ; LD HL,$5E25       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       .call @_8566                    ; CALL $8566        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$875F        ; 
       b    @_875f                     ;                   
!
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$85EA        ; 
       b    @_85ea                     ;                   
!
       mov  @currentroom_width,de      ; LD DE,($5E1D)     ; 
       sb   @15(ix),@15(ix)            ; LD (IX+$0F),$00   ; 
       movb @bytes+70,@5(ix)           ; LD (IX+$05),$46   ; 
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       andi a,7*256                    ; AND $07           ; 
       jne  _87de                      ; JR NZ,$87DE       ; 
       movb r,a                        ; LD A,R            ; 
       andi a,3*256                    ; AND $03           ; 
       movb a,@6(ix)                   ; LD (IX+$06),A     ; 
_87de:
       movb @7(ix),r0                  ; BIT 0,(IX+$07)    ; 
       andi r0,1*256                   ;                   
       jne  _8804                      ; JR NZ,$8804       ; 
       movb @6(ix),r0                  ; BIT 0,(IX+$06)    ; 
       andi r0,1*256                   ;                   
       jeq  _8815                      ; JR Z,$8815        ; 
       movb @8(ix),a                   ; LD A,(IX+$08)     ; 
       cb   a,@bytes+2                 ; CP $02            ; 
       jeq  _87f4                      ; JR Z,$87F4        ; 
       ab   one,@8(ix)                 ; INC (IX+$08)      ; 
_87f4:
       movb @6(ix),r0                  ; BIT 1,(IX+$06)    ; 
       andi r0,2*256                   ;                   
       jeq  _8821                      ; JR Z,$8821        ; 
       movb @9(ix),a                   ; LD A,(IX+$09)     ; 
       cb   a,@bytes+2                 ; CP $02            ; 
       jeq  _8804                      ; JR Z,$8804        ; 
       ab   one,@9(ix)                 ; INC (IX+$09)      ; 
_8804:
       ab   one,@7(ix)                 ; INC (IX+$07)      ; 
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       andi a,1*256                    ; AND $01           ; 
       ; XOR (IX+$00)                  ; XOR (IX+$00)      ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       b    @_84cd                     ; JP $84CD          ; 
_8815:
       movb @8(ix),a                   ; LD A,(IX+$08)     ; 
       cb   a,@b254                    ; CP $FE            ; 
       jeq  _87f4                      ; JR Z,$87F4        ; 
       sb   one,@8(ix)                 ; DEC (IX+$08)      ; 
       jmp  _87f4                      ; JR $87F4          ; 
_8821:
       movb @9(ix),a                   ; LD A,(IX+$09)     ; 
       cb   a,@b254                    ; CP $FE            ; 
       jeq  _8804                      ; JR Z,$8804        ; 
       sb   one,@9(ix)                 ; DEC (IX+$09)      ; 
       jmp  _8804                      ; JR $8804          ; 
_882d:
       sb   @c,@c                      ; LD C,$00          ; 
       movb d,a                        ; LD A,D            ; 
       cb   a,@4(ix)                   ; CP (IX+$04)       ; 
       jeq  _8848                      ; JR Z,$8848        ; 
       jnc  _8850                      ; JR NC,$8850       ; TODO: check code. 
       movb @b255,@9(ix)               ; LD (IX+$09),$FF   ; 
_883b:
       movb @e,a                       ; LD A,E            ; 
       cb   a,@3(ix)                   ; CP (IX+$03)       ; 
       jeq  _8856                      ; JR Z,$8856        ; 
       jnc  _885d                      ; JR NC,$885D       ; TODO: check code. 
       movb @b255,@8(ix)               ; LD (IX+$08),$FF   ; 
       .ret                            ; RET               ; 
_8848:
       sb   @9(ix),@9(ix)              ; LD (IX+$09),$00   ; 
       socb @bits+0,@c                 ; SET 0,C           ; 
       jmp  _883b                      ; JR $883B          ; 
_8850:
       movb one,@9(ix)                 ; LD (IX+$09),$01   ; 
       jmp  _883b                      ; JR $883B          ; 
_8856:
       sb   @8(ix),@8(ix)              ; LD (IX+$08),$00   ; 
       socb @bits+1,@c                 ; SET 1,C           ; 
       .ret                            ; RET               ; 
_885d:
       movb one,@8(ix)                 ; LD (IX+$08),$01   ; 
       .ret                            ; RET               ; 
_8862:
       .call @storeentity              ; CALL $9FFB        ; 
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; CALL Z,$8A1E      ; 
       .call @_8a1e                    ;                   
!
       li   hl,_eae0                   ; LD HL,$EAE0       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _8881                      ; JR Z,$8881        ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jne  _8881                      ; JR NZ,$8881       ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       jmp  _88d7                      ; JR $88D7          ; 
_8881:
       movb @6(ix),r0                  ; BIT 7,(IX+$06)    ; 
       andi r0,128*256                 ;                   
       jne  _88fd                      ; JR NZ,$88FD       ; 
       li   hl,_eac8                   ; LD HL,$EAC8       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _88f9                      ; JR Z,$88F9        ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jne  _88f9                      ; JR NZ,$88F9       ; 
       movb @12(ix),d                  ; LD D,(IX+$0C)     ; 
       movb @11(ix),@e                 ; LD E,(IX+$0B)     ; 
       .call @_882d                    ; CALL $882D        ; 
       movb @c,a                       ; LD A,C            ; 
       cb   a,@bytes+3                 ; CP $03            ; 
       jeq  _88b5                      ; JR Z,$88B5        ; 
_88a3:
       movb @counterlow,a              ; LD A,($5E12)      ; 
       ; RRA                           ; RRA               ; 
       ; RRA                           ; RRA               ; 
       andi a,3*256                    ; AND $03           ; 
       ab   @bytes+112,a               ; ADD A,$70         ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       li   de,>3838                   ; LD DE,$3838       ; 
       b    @_89bb                     ; JP $89BB          ; 
_88b5:
       movb @6(ix),r0                  ; BIT 6,(IX+$06)    ; 
       andi r0,64*256                  ;                   
       jeq  _88c9                      ; JR Z,$88C9        ; 
       movb @bytes+140,@11(ix)         ; LD (IX+$0B),$8C   ; 
       movb @bytes+104,@12(ix)         ; LD (IX+$0C),$68   ; 
       szcb @bits+6,@6(ix)             ; RES 6,(IX+$06)    ; 
       jmp  _88a3                      ; JR $88A3          ; 
_88c9:
       movb @bytes+104,@11(ix)         ; LD (IX+$0B),$68   ; 
       movb @bytes+56,@12(ix)          ; LD (IX+$0C),$38   ; 
       socb @bits+6,@6(ix)             ; SET 6,(IX+$06)    ; 
       jmp  _88a3                      ; JR $88A3          ; 
_88d7:
       .call @_882d                    ; CALL $882D        ; 
       movb @c,a                       ; LD A,C            ; 
       cb   a,@bytes+3                 ; CP $03            ; 
       jne  _88a3                      ; JR NZ,$88A3       ; 
       .push ix                        ; PUSH IX           ; 
       li   ix,_eae0                   ; LD IX,$EAE0       ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jne  _88f0                      ; JR NZ,$88F0       ; 
       .call @drawentity               ; CALL $9F4A        ; 
_88f0:
       .pop ix                         ; POP IX            ; 
       movb @bytes+107,a               ; LD A,$6B          ; 
       movb a,@_eae0+1                 ; LD ($EAE1),A      ; 
       jmp  _88b5                      ; JR $88B5          ; 
_88f9:
       socb @bits+7,@6(ix)             ; SET 7,(IX+$06)    ; 
_88fd:
       mov  @playerroom+2,de           ; LD DE,($EA93)     ; 
       .call @_882d                    ; CALL $882D        ; 
       jmp  _88a3                      ; JR $88A3          ; 
_8906:
       .call @storeentity              ; CALL $9FFB        ; 
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; CALL Z,$8A1E      ; 
       .call @_8a1e                    ;                   
!
       li   de,_4080+1546              ; LD DE,$468A       ; 
       .call @_9273                    ; CALL $9273        ; 
       jne  _8931                      ; JR NZ,$8931       ; 
       mov  @playerroom+2,de           ; LD DE,($EA93)     ; 
       .call @_882d                    ; CALL $882D        ; 
       movb @8(ix),a                   ; LD A,(IX+$08)     ; 
       neg a                           ; NEG               ; 
       movb a,@8(ix)                   ; LD (IX+$08),A     ; 
       movb @9(ix),a                   ; LD A,(IX+$09)     ; 
       neg a                           ; NEG               ; 
       movb a,@9(ix)                   ; LD (IX+$09),A     ; 
       jmp  _8940                      ; JR $8940          ; 
_8931:
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jne  _8952                      ; JR NZ,$8952       ; 
       mov  @playerroom+2,de           ; LD DE,($EA93)     ; 
       .call @_882d                    ; CALL $882D        ; 
_8940:
       movb @counterlow,a              ; LD A,($5E12)      ; 
       ; RRA                           ; RRA               ; 
       ; RRA                           ; RRA               ; 
       andi a,3*256                    ; AND $03           ; 
       ab   @bytes+124,a               ; ADD A,$7C         ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       li   de,>3434                   ; LD DE,$3434       ; 
       b    @_89bb                     ; JP $89BB          ; 
_8952:
       movb @bytes+104,@11(ix)         ; LD (IX+$0B),$68   ; 
       movb @bytes+104,@12(ix)         ; LD (IX+$0C),$68   ; 
       .call @_882d                    ; CALL $882D        ; 
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; JP NZ,$8940       ; 
       b    @_8940                     ;                   
!
       movb r,a                        ; LD A,R            ; 
       andi a,127*256                  ; AND $7F           ; 
       movb a,@c                       ; LD C,A            ; 
       .call @_897d                    ; CALL $897D        ; 
       cb   a,@bytes+3                 ; CP $03            ; 
       jl   !                          ; JP NC,$8940       ; 
       b    @_8940                     ;                   
!
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@c                       ; CP C              ; 
       jne  !                          ; JP Z,$8940        ; 
       b    @_8940                     ;                   
!
       movb @c,@1(ix)                  ; LD (IX+$01),C     ; 
       jmp  _8940                      ; JR $8940          ; 
_897d:
       movb a,@l                       ; LD L,A            ; 
       sb   h,h                        ; LD H,$00          ; 
       li   de,_a854                   ; LD DE,$A854       ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    de,hl                      ; ADD HL,DE         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       .ret                            ; RET               ; 
_8988:
       .call @storeentity              ; CALL $9FFB        ; 
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  _89a5                      ; JR NZ,$89A5       ; 
       li   de,_4080+1291              ; LD DE,$458B       ; 
       .call @_9273                    ; CALL $9273        ; 
       jne  _89a2                      ; JR NZ,$89A2       ; 
       li   bc,>1000                   ; LD BC,$1000       ; 
       .call @addtoscore               ; CALL $A19C        ; 
       b    @_875f                     ; JP $875F          ; 
_89a2:
       .call @_8a1e                    ; CALL $8A1E        ; 
_89a5:
       mov  @playerroom+2,de           ; LD DE,($EA93)     ; 
       .call @_882d                    ; CALL $882D        ; 
       movb @counterlow,a              ; LD A,($5E12)      ; 
       ; RRA                           ; RRA               ; 
       ; RRA                           ; RRA               ; 
       andi a,3*256                    ; AND $03           ; 
       ab   @bytes+116,a               ; ADD A,$74         ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       li   de,>3434                   ; LD DE,$3434       ; 
_89bb:
       movb @player,a                  ; LD A,($EA90)      ; 
       cb   a,@bytes+49                ; CP $31            ; 
       jhe  !                          ; JP C,$84CD        ; 
       b    @_84cd                     ;                   
!
       mov  @playerroom+2,de           ; LD DE,($EA93)     ; 
       .call @_882d                    ; CALL $882D        ; 
       movb @8(ix),a                   ; LD A,(IX+$08)     ; 
       neg a                           ; NEG               ; 
       movb a,@8(ix)                   ; LD (IX+$08),A     ; 
       movb a,@c                       ; LD C,A            ; 
       movb @9(ix),a                   ; LD A,(IX+$09)     ; 
       neg a                           ; NEG               ; 
       movb a,@9(ix)                   ; LD (IX+$09),A     ; 
       li   de,>3434                   ; LD DE,$3434       ; 
       ; AND C                         ; AND C             ; 
       jeq  !                          ; JP NZ,$84CD       ; 
       b    @_84cd                     ;                   
!
       movb one,@8(ix)                 ; LD (IX+$08),$01   ; 
       movb one,@9(ix)                 ; LD (IX+$09),$01   ; 
       b    @_84cd                     ; JP $84CD          ; 
_89ed:
       .call @storeentity              ; CALL $9FFB        ; 
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; CALL Z,$8A1E      ; 
       .call @_8a1e                    ;                   
!
       mov  @playerroom+2,de           ; LD DE,($EA93)     ; 
       .call @_882d                    ; CALL $882D        ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,252*256                  ; AND $FC           ; 
       movb a,@c                       ; LD C,A            ; 
       movb @counterlow,a              ; LD A,($5E12)      ; 
       ; RRA                           ; RRA               ; 
       ; RRA                           ; RRA               ; 
       andi a,3*256                    ; AND $03           ; 
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       li   de,>3434                   ; LD DE,$3434       ; 
       b    @_89bb                     ; JP $89BB          ; 
_8a15:
       movb @playerenergy,a            ; LD A,($5E28)      ; 
       sb   @bytes+16,a                ; SUB $10           ; 
       joc  _8a2b                      ; JR C,$8A2B        ; TODO: check code. 
       jmp  _8a25                      ; JR $8A25          ; 
_8a1e:
       movb @playerenergy,a            ; LD A,($5E28)      ; 
       sb   @bytes+8,a                 ; SUB $08           ; 
       joc  _8a2b                      ; JR C,$8A2B        ; TODO: check code. 
_8a25:
       movb a,@playerenergy            ; LD ($5E28),A      ; 
       b    @drawchicken               ; JP $8B8A          ; 
_8a2b:
       .pop hl                         ; POP HL            ; 
       b    @_8ea0                     ; JP $8EA0          ; 
_8a2f:
       .call @storeentity              ; CALL $9FFB        ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; JP NZ,$85F0       ; 
       b    @_85f0                     ;                   
!
       li   hl,numcreatures            ; LD HL,$5E25       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$85EA        ; 
       b    @_85ea                     ;                   
!
       .call @_8566                    ; CALL $8566        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$875F        ; 
       b    @_875f                     ;                   
!
       sb   one,@13(ix)                ; DEC (IX+$0D)      ; 
       jne  _8a5d                      ; JR NZ,$8A5D       ; 
       .call @_86f2                    ; CALL $86F2        ; 
       sra  @9(ix),1                   ; SRA (IX+$09)      ; 
       movb @bytes+16,@13(ix)          ; LD (IX+$0D),$10   ; 
_8a5d:
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,252*256                  ; AND $FC           ; 
       movb @8(ix),r0                  ; BIT 7,(IX+$08)    ; 
       andi r0,128*256                 ;                   
       jne  _8a6a                      ; JR NZ,$8A6A       ; 
       ab   @bytes+2,a                 ; ADD A,$02         ; 
_8a6a:
       movb a,@c                       ; LD C,A            ; 
       movb @13(ix),a                  ; LD A,(IX+$0D)     ; 
       ; RRA                           ; RRA               ; 
       andi a,1*256                    ; AND $01           ; 
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       mov  @currentroom_width,de      ; LD DE,($5E1D)     ; 
       movb @bytes+67,@5(ix)           ; LD (IX+$05),$43   ; 
       b    @_84cd                     ; JP $84CD          ; 
_8a80:
       .call @storeentity              ; CALL $9FFB        ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  !                          ; JP NZ,$85F0       ; 
       b    @_85f0                     ;                   
!
       li   hl,numcreatures            ; LD HL,$5E25       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$85EA        ; 
       b    @_85ea                     ;                   
!
       .call @_8566                    ; CALL $8566        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; JP Z,$875F        ; 
       b    @_875f                     ;                   
!
       sb   one,@13(ix)                ; DEC (IX+$0D)      ; 
       jne  _8ab8                      ; JR NZ,$8AB8       ; 
       .call @_86f2                    ; CALL $86F2        ; 
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       andi a,4*256                    ; AND $04           ; 
       sb   @bytes+2,a                 ; SUB $02           ; 
       movb a,@8(ix)                   ; LD (IX+$08),A     ; 
       sra  @9(ix),1                   ; SRA (IX+$09)      ; 
       movb @bytes+32,@13(ix)          ; LD (IX+$0D),$20   ; 
_8ab8:
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,252*256                  ; AND $FC           ; 
       movb @8(ix),r0                  ; BIT 7,(IX+$08)    ; 
       andi r0,128*256                 ;                   
       jne  _8ac5                      ; JR NZ,$8AC5       ; 
       ab   @bytes+2,a                 ; ADD A,$02         ; 
_8ac5:
       movb a,@c                       ; LD C,A            ; 
       movb @13(ix),a                  ; LD A,(IX+$0D)     ; 
       ; RRA                           ; RRA               ; 
       andi a,1*256                    ; AND $01           ; 
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       mov  @currentroom_width,de      ; LD DE,($5E1D)     ; 
       movb @bytes+66,@5(ix)           ; LD (IX+$05),$42   ; 
       b    @_84cd                     ; JP $84CD          ; 
_8adb:
       li   hl,_eb18                   ; LD HL,$EB18       ; 
       li   de,>0008                   ; LD DE,$0008       ; 
       movb @bytes+8,b                 ; LD B,$08          ; 
_8ae3:
       .push hl                        ; PUSH HL           ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _8af8                      ; JR Z,$8AF8        ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jne  _8af8                      ; JR NZ,$8AF8       ; 
       .pop de                         ; POP DE            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       movb one,@c                     ; LD C,$01          ; 
       .ret                            ; RET               ; 
_8af8:
       .pop hl                         ; POP HL            ; 
       a    de,hl                      ; ADD HL,DE         ; 
       sb   one,b                      ; DJNZ $8AE3        ; 
       jne  _8ae3                      ;                   
       sb   @c,@c                      ; LD C,$00          ; 
       .ret                            ; RET               ; 
_8aff:
       .call @storeentity              ; CALL $9FFB        ; 
       .call @_85b2                    ; CALL $85B2        ; 
       sb   one,@e                     ; DEC E             ; 
       jne  !                          ; CALL Z,$8A15      ; 
       .call @_8a15                    ;                   
!
       sb   a,a                        ; XOR A             ; 
       movb a,@9(ix)                   ; LD (IX+$09),A     ; 
       movb a,@8(ix)                   ; LD (IX+$08),A     ; 
       .call @_8adb                    ; CALL $8ADB        ; 
       sb   one,@c                     ; DEC C             ; 
       jeq  !                          ; JP NZ,$8B59       ; 
       b    @_8b59                     ;                   
!
       .call @_882d                    ; CALL $882D        ; 
       movb @c,a                       ; LD A,C            ; 
       cb   a,@bytes+3                 ; CP $03            ; 
       jne  _8b45                      ; JR NZ,$8B45       ; 
       .call @_8adb                    ; CALL $8ADB        ; 
       li   de,>0004                   ; LD DE,$0004       ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       .push ix                        ; PUSH IX           ; 
       li   ix,>0000                   ; LD IX,$0000       ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       a    de,ix                      ; ADD IX,DE         ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jne  _8b3c                      ; JR NZ,$8B3C       ; 
       .call @drawentity               ; CALL $9F4A        ; 
_8b3c:
       sb   *ix,*ix                    ; LD (IX+$00),$00   ; 
       .pop ix                         ; POP IX            ; 
       b    @_8b59                     ; JP $8B59          ; 
_8b45:
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,252*256                  ; AND $FC           ; 
       movb a,@c                       ; LD C,A            ; 
       movb @counterlow,a              ; LD A,($5E12)      ; 
       ; RRA                           ; RRA               ; 
       ; RRA                           ; RRA               ; 
       andi a,3*256                    ; AND $03           ; 
       ab   @c,a                       ; ADD A,C           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       li   de,>3c3c                   ; LD DE,$3C3C       ; 
_8b59:
       movb @player,a                  ; LD A,($EA90)      ; 
       cb   a,@bytes+49                ; CP $31            ; 
       jhe  !                          ; JP C,$84CD        ; 
       b    @_84cd                     ;                   
!
       li   de,>3a58                   ; LD DE,$3A58       ; 
       .call @_882d                    ; CALL $882D        ; 
       b    @_84cd                     ; JP $84CD          ; 

* Creature Defaults
creaturedefaults:                      ; 8b6a
       byte >58,>00,>5C,>68,>68,>44,>00,>00
       byte >02,>02,>00,>00,>00,>10,>20,>00

* Creatures
creatures:                             ; 8b7a
       byte >5C                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >5E                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >98                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >98                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >90                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >90                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >94                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >94                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >5C                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >5E                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >60                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >62                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >4C                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >4E                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >68                                                      ; #SPRITENAME(#PEEK(#PC))
       byte >6A                                                      ; #SPRITENAME(#PEEK(#PC))

* Draw Chicken
* 
* Used by the routines at #R$8301, #R$8C63, #R$8E26, #R$9443 and #R$96EC.
drawchicken:                           ; 8b8a
       movb @playerenergy,a            ; LD A,($5E28)      ; #REGa=#R$5E28.
       srl  a,1                        ; SRL A             ; 
       srl  a,1                        ; SRL A             ; 
       srl  a,1                        ; SRL A             ; 
       movb a,@c                       ; LD C,A            ; 
       movb @chickenlevel,a            ; LD A,($5E29)      ; #REGa=#R$5E29.
       srl  a,1                        ; SRL A             ; 
       srl  a,1                        ; SRL A             ; 
       srl  a,1                        ; SRL A             ; 
       movb a,b                        ; LD B,A            ; 
       cb   a,@c                       ; CP C              ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       movb @_c543,a                   ; LD A,($C543)      ; 
       movb a,@e                       ; LD E,A            ; 
       movb @_c48d,a                   ; LD A,($C48D)      ; 
       movb a,d                        ; LD D,A            ; 
       .push ix                        ; PUSH IX           ; 
       li   ix,entity_chicken          ; LD IX,$8C2D       ; #REGix=#R$8C2D.
       .push de                        ; PUSH DE           ; 
       joc  _8c12                      ; JR C,$8C12        ; TODO: check code. 
       movb @_c48c,a                   ; LD A,($C48C)      ; 
       movb a,@e                       ; LD E,A            ; 
       sb   d,d                        ; LD D,$00          ; 
       movb @c,a                       ; LD A,C            ; 
       .push bc                        ; PUSH BC           ; 
       .call @_9aad                    ; CALL $9AAD        ; 
       .pop bc                         ; POP BC            ; 
       mov  @_a626,de                  ; LD DE,($A626)     ; 
       .push de                        ; PUSH DE           ; 
       a    de,hl                      ; ADD HL,DE         ; 
       mov  hl,@_a626                  ; LD ($A626),HL     ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       movb @_c48d,a                   ; LD A,($C48D)      ; 
       sb   @c,a                       ; SUB C             ; 
       jeq  _8bfc                      ; JR Z,$8BFC        ; 
       .push de                        ; PUSH DE           ; 
       movb a,*hl                      ; LD (HL),A         ; 
       movb @_c48c,a                   ; LD A,($C48C)      ; 
       dec  hl                         ; DEC HL            ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .push hl                        ; PUSH HL           ; 
       movb @bytes+20,a                ; LD A,$14          ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       li   hl,room_17+9               ; LD HL,$77C8       ; 
       movb h,a                        ; LD A,H            ; 
       sb   @c,a                       ; SUB C             ; 
       movb a,h                        ; LD H,A            ; 
       mov  hl,@entity_chicken+3       ; LD ($8C30),HL     ; 
       .call @_9213                    ; CALL $9213        ; 
       mov  @entity_chicken+3,hl       ; LD HL,($8C30)     ; 
       .call @screenaddress            ; CALL $9BA2        ; 
       movb @_c48c,a                   ; LD A,($C48C)      ; 
       movb a,b                        ; LD B,A            ; 
_8bf2:
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $8BF2        ; 
       jne  _8bf2                      ;                   
       .pop hl                         ; POP HL            ; 
       .pop de                         ; POP DE            ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       inc  hl                         ; INC HL            ; 
       movb d,*hl                      ; LD (HL),D         ; 
_8bfc:
       .pop hl                         ; POP HL            ; 
       mov  hl,@_a626                  ; LD ($A626),HL     ; 
_8c00:
       .pop de                         ; POP DE            ; 
       movb @e,a                       ; LD A,E            ; 
       movb a,@_c543                   ; LD ($C543),A      ; 
       movb d,a                        ; LD A,D            ; 
       movb a,@_c48d                   ; LD ($C48D),A      ; 
       .pop ix                         ; POP IX            ; 
       movb @playerenergy,a            ; LD A,($5E28)      ; 
       movb a,@chickenlevel            ; LD ($5E29),A      ; 
       .ret                            ; RET               ; Return.
_8c12:
       movb @c,a                       ; LD A,C            ; {Write #REGc to #R$C543.
       movb a,@_c543                   ; LD ($C543),A      ; }
       movb @bytes+19,a                ; LD A,$13          ; {Write #N$13 to .
       movb a,*ix                      ; LD (IX+$00),A     ; }
       li   hl,room_17+9               ; LD HL,$77C8       ; {Write #N$77C8 to
       mov  hl,@entity_chicken+3       ; LD ($8C30),HL     ; #R$8C2D(#N$8C30).}
       .call @_9213                    ; CALL $9213        ; Call #R$9213.
       movb @bytes+6,b                 ; LD B,$06          ; #REGb=#N$06 (counter).
_8c26:
       sb   *hl,*hl                    ; LD (HL),$00       ; Write #N$00 to #REGhl.
       ab   one,@l                     ; INC L             ; Increment #REGl by one.
       sb   one,b                      ; DJNZ $8C26        ; Decrease counter by one and loop
       jne  _8c26                      ;                   
                                                           ; back to #R$8C26 until counter is
                                                           ; zero.
       jmp  _8c00                      ; JR $8C00          ; Jump to #R$8C00.
* Chicken Entity
entity_chicken:                        ; 8c2d
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 

* Game Over
* 
* Used by the routine at #R$8E26.
gameover:                              ; 8c35
       .call @clearplayarea            ; CALL $8093        ; Call #R$8093.
       li   hl,mainfont                ; LD HL,$BE4C       ; {Write #R$BE4C to #R$5E01.
       mov  hl,@fontpointer            ; LD ($5E01),HL     ; }
* Handle printing "Game Over" messaging.
       li   hl,>3040                   ; LD HL,$3040       ; #REGhl=#N$3040 (screen buffer location).
       li   de,stringgameover          ; LD DE,$8C59       ; #REGde=#R$8C59.
       .call @printstringcolour        ; CALL $A1F3        ; Call #R$A1F3.
* Handle printing the game statistics.
       .call @gamestats                ; CALL $9641        ; Call #R$9641.
* Provide a pause for us to reflect that the game has now ended.
gameoverdelay:                         ; 8c4a
       movb @bytes+20,b                ; LD B,$14          ; #REGb=#N$14.
       li   hl,>0000                   ; LD HL,$0000       ; #REGhl=#N($0000, $04, $04).
* From #REGhl being set above (and for each loop), decrementing #N($0000, $04,
* $04) by one gives #N$FFFF.
gameoverdelay_loop:                    ; 8c4f
       dec  hl                         ; DEC HL            ; Decrease #REGhl by one.
       movb h,a                        ; LD A,H            ; {Loop back to #R$8C4F until #REGhl is zero.
       socb @l,a                       ; OR L              ; 
       jne  gameoverdelay_loop         ; JR NZ,$8C4F       ; }
       sb   one,b                      ; DJNZ $8C4F        ; Decrease counter by one and loop back to
       jne  gameoverdelay_loop         ;                   
                                                           ; #R$8C4F until counter is zero.
       b    @game_restart              ; JP $7C29          ; Jump to #R$7C29.
* "Game Over" messaging.
stringgameover:                        ; 8c59
       text >47                                                      ; {Attribute: #N(#PEEK(#PC)) + "GAME OVER".
       text 'GAME OVE','R+>8'                                        ; }

* Handler: Food Item
handlerfooditem:                       ; 8c63
       .call @storeentity              ; CALL $9FFB        ; 
       .call @_90fb                    ; CALL $90FB        ; 
       joc  _8c6e                      ; JR C,$8C6E        ; TODO: check code. 
       b    @_92e0                     ; JP $92E0          ; 
_8c6e:
       .call @removeentity             ; CALL $9F56        ; 
       sb   *ix,*ix                    ; LD (IX+$00),$00   ; 
       .call @soundseating             ; CALL $A485        ; 
       movb @bytes+64,@c               ; LD C,$40          ; 
       movb @playerenergy,a            ; LD A,($5E28)      ; 
       ab   @c,a                       ; ADD A,C           ; 
       joc  _8c84                      ; JR C,$8C84        ; TODO: check code. 
       cb   a,@bytes+240               ; CP $F0            ; 
       jl   _8c86                      ; JR C,$8C86        ; 
_8c84:
       movb @bytes+240,a               ; LD A,$F0          ; 
_8c86:
       movb a,@playerenergy            ; LD ($5E28),A      ; 
       b    @drawchicken               ; JP $8B8A          ; 
_8c8c:
       sb   one,a                      ; DEC A             ; 
       movb a,@_5e3c                   ; LD ($5E3C),A      ; 
       jeq  _8ca7                      ; JR Z,$8CA7        ; 
       andi a,15*256                   ; AND $0F           ; 
       jne  !                          ; CALL Z,$A3E0      ; 
       .call @soundsstart              ;                   
!
       li   hl,_5080+72                ; LD HL,$50C8       ; 
       .call @attributeaddress         ; CALL $9BD2        ; 
       movb @bytes+6,b                 ; LD B,$06          ; 
_8c9f:
       movb *hl,a                      ; LD A,(HL)         ; 
       socb @bytes+128,a               ; OR $80            ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       sb   one,b                      ; DJNZ $8C9F        ; 
       jne  _8c9f                      ;                   
       .ret                            ; RET               ; 
_8ca7:
       li   hl,_5080+72                ; LD HL,$50C8       ; 
       .call @attributeaddress         ; CALL $9BD2        ; 
       movb @bytes+6,b                 ; LD B,$06          ; 
_8caf:
       movb *hl,a                      ; LD A,(HL)         ; 
       andi a,127*256                  ; AND $7F           ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       sb   one,b                      ; DJNZ $8CAF        ; 
       jne  _8caf                      ;                   
       .ret                            ; RET               ; 
_8cb7:
       movb @_5e3c,a                   ; LD A,($5E3C)      ; 
       ; AND A                         ; AND A             ; 
       jne  _8c8c                      ; JR NZ,$8C8C       ; 
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       andi a,3*256                    ; AND $03           ; 
       jeq  !                          ; JP NZ,$8D12       ; 
       b    @_8d12                     ;                   
!
       ab   one,@6(ix)                 ; INC (IX+$06)      ; 
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       .call @getspriteaddress         ; CALL $9E89        ; 
       movb *de,a                      ; LD A,(DE)         ; 
       cb   a,@6(ix)                   ; CP (IX+$06)       ; 
       jeq  _8d32                      ; JR Z,$8D32        ; 
_8cd4:
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
       movb h,b                        ; LD B,H            ; 
       movb @l,@c                      ; LD C,L            ; 
       movb @4(ix),a                   ; LD A,(IX+$04)     ; 
       movb a,@2(ix)                   ; LD (IX+$02),A     ; 
       sb   @6(ix),a                   ; SUB (IX+$06)      ; 
       movb a,@4(ix)                   ; LD (IX+$04),A     ; 
       movb @6(ix),@l                  ; LD L,(IX+$06)     ; 
       sb   h,h                        ; LD H,$00          ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    de,hl                      ; ADD HL,DE         ; 
       movb h,a                        ; LD A,H            ; 
       movb a,*bc                      ; LD (BC),A         ; 
       dec  bc                         ; DEC BC            ; 
       movb @l,a                       ; LD A,L            ; 
       movb a,*bc                      ; LD (BC),A         ; 
       .push hl                        ; PUSH HL           ; 
       movb *hl,@c                     ; LD C,(HL)         ; 
       movb *ix,b                      ; LD B,(IX+$00)     ; 
       .push bc                        ; PUSH BC           ; 
       movb one,*hl                    ; LD (HL),$01       ; 
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       .call @drawentity               ; CALL $9F4A        ; 
       .pop bc                         ; POP BC            ; 
       .pop hl                         ; POP HL            ; 
       movb @c,*hl                     ; LD (HL),C         ; 
       movb b,*ix                      ; LD (IX+$00),B     ; 
       movb @2(ix),a                   ; LD A,(IX+$02)     ; 
       movb a,@4(ix)                   ; LD (IX+$04),A     ; 
       .pop hl                         ; POP HL            ; 
       .pop de                         ; POP DE            ; 
       movb d,*hl                      ; LD (HL),D         ; 
       dec  hl                         ; DEC HL            ; 
       movb @e,*hl                     ; LD (HL),E         ; 
_8d12:
       movb @5(ix),a                   ; LD A,(IX+$05)     ; 
       .push af                        ; PUSH AF           ; 
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       andi a,7*256                    ; AND $07           ; 
       jne  _8d20                      ; JR NZ,$8D20       ; 
       ab   one,a                      ; INC A             ; 
_8d20:
       socb @bytes+64,a                ; OR $40            ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       movb @6(ix),a                   ; LD A,(IX+$06)     ; 
       .call @_92e2                    ; CALL $92E2        ; 
       .pop af                         ; POP AF            ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       b    @soundsappear              ; JP $A45F          ; 
_8d32:
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       sb   @6(ix),@6(ix)              ; LD (IX+$06),$00   ; 
       sb   @7(ix),@7(ix)              ; LD (IX+$07),$00   ; 
       sb   @2(ix),@2(ix)              ; LD (IX+$02),$00   ; 
       .ret                            ; RET               ; 
_8d45:
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       andi a,3*256                    ; AND $03           ; 
       jeq  _8d12                      ; JR Z,$8D12        ; 
       sb   one,@6(ix)                 ; DEC (IX+$06)      ; 
       ; JP M,$8D5B                    ; JP M,$8D5B        ; 
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       .call @getspriteaddress         ; CALL $9E89        ; 
       b    @_8cd4                     ; JP $8CD4          ; 
_8d5b:
       .call @_95a9                    ; CALL $95A9        ; 
       b    @prepareplayer             ; JP $9443          ; 

* Reset Game State
* 
* Used by the routine at #R$7D9A.
resetgamestate:                        ; 8d61
       li   hl,initialisation_player   ; LD HL,$600D       ; {Copy #N$1570 bytes from #R$600D to #R$EA90.
       li   de,player                  ; LD DE,$EA90       ; 
       li   bc,>1570                   ; LD BC,$1570       ; 
       .ldir                           ; LDIR              ; }
       .ret                            ; RET               ; Return.

* Auto Walk Step
* 
* Used by the routine at #R$8D77.
autowalkstep:                          ; 8d6d
       movb @2(ix),a                   ; LD A,(IX+$02)     ; 
       ; AND %00001111                 ; AND %00001111     ; Keep only bits 0-3.
       jne  !                          ; RET Z             ; Return if the result is zero.
       .ret                            ;                   
!
       sb   one,@2(ix)                 ; DEC (IX+$02)      ; 
       .ret                            ; RET               ; Return.

* Control Player
* 
* Used by the routines at #R$80D2, #R$8DC4 and #R$8E26.
controlplayer:                         ; 8d77
       movb @playerroom,a              ; LD A,($EA91)      ; #REGa=#R$EA91.
       movb a,@_edd8+129               ; LD ($EE59),A      ; 
       .push bc                        ; PUSH BC           ; {Stash #REGbc, #REGde and #REGhl on the stack.
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; }
       .call @autowalkstep             ; CALL $8D6D        ; Call #R$8D6D.
       movb @2(ix),a                   ; LD A,(IX+$02)     ; 
       socb %00110000,a                ; OR %00110000      ; Set bits 4-5.
       movb a,@2(ix)                   ; LD (IX+$02),A     ; 
       .call @storeentity              ; CALL $9FFB        ; Call #R$9FFB.
       .call @_93be                    ; CALL $93BE        ; Call #R$93BE.
       movb a,@c                       ; LD C,A            ; 
       .pop hl                         ; POP HL            ; Restore #REGhl from the stack.
       li   de,>0000                   ; LD DE,$0000       ; #REGde=#N($0000, $04, $04).
       movb @c,r0                      ; BIT 1,C           ; 
       andi r0,2*256                   ;                   
       jne  _8d9e                      ; JR NZ,$8D9E       ; 
       movb b,a                        ; LD A,B            ; 
       neg a                           ; NEG               ; 
       movb a,@e                       ; LD E,A            ; 
_8d9e:
       movb @c,r0                      ; BIT 0,C           ; 
       andi r0,1*256                   ;                   
       jne  _8da3                      ; JR NZ,$8DA3       ; 
       movb b,@e                       ; LD E,B            ; 
_8da3:
       movb @c,r0                      ; BIT 2,C           ; 
       andi r0,4*256                   ;                   
       jne  _8da8                      ; JR NZ,$8DA8       ; 
       movb b,d                        ; LD D,B            ; 
_8da8:
       movb @c,r0                      ; BIT 3,C           ; 
       andi r0,8*256                   ;                   
       jne  _8db0                      ; JR NZ,$8DB0       ; 
       movb b,a                        ; LD A,B            ; 
       neg a                           ; NEG               ; 
       movb a,d                        ; LD D,A            ; 
_8db0:
       .pop hl                         ; POP HL            ; Restore #REGhl from the stack.
       .call @_8f96                    ; CALL $8F96        ; Call #R$8F96.
       .pop hl                         ; POP HL            ; Restore #REGhl from the stack.
       .call @_8eef                    ; CALL $8EEF        ; Call #R$8EEF.
       .call @_8fca                    ; CALL $8FCA        ; Call #R$8FCA.
       .call @checkdoorway             ; CALL $957D        ; Call #R$957D.
       .call @_900a                    ; CALL $900A        ; Call #R$900A.
       b    @applymovement             ; JP $8F66          ; Jump to #R$8F66.

* Handler: Serf
handlerserf:                           ; 8dc4
       li   bc,>2020                   ; LD BC,$2020       ; 
       li   de,>0101                   ; LD DE,$0101       ; 
       li   hl,>0707                   ; LD HL,$0707       ; 
       .call @controlplayer            ; CALL $8D77        ; 
       movb @6(ix),@e                  ; LD E,(IX+$06)     ; 
       movb @7(ix),d                   ; LD D,(IX+$07)     ; 
       movb d,a                        ; LD A,D            ; 
       socb @e,a                       ; OR E              ; 
       jeq  _8e0f                      ; JR Z,$8E0F        ; 
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       andi a,3*256                    ; AND $03           ; 
       jne  _8e0f                      ; JR NZ,$8E0F       ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,3*256                    ; AND $03           ; 
       ab   @bytes+33,a                ; ADD A,$21         ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb d,a                        ; LD A,D            ; 
       ; AND A                         ; AND A             ; 
       ; JP P,$8DF2                    ; JP P,$8DF2        ; 
       neg a                           ; NEG               ; 
_8df2:
       movb a,@c                       ; LD C,A            ; 
       movb @e,a                       ; LD A,E            ; 
       ; AND A                         ; AND A             ; 
       ; JP P,$8DFA                    ; JP P,$8DFA        ; 
       neg a                           ; NEG               ; 
_8dfa:
       cb   a,@c                       ; CP C              ; 
       jhe  _8e1a                      ; JR NC,$8E1A       ; 
       movb d,a                        ; LD A,D            ; 
       ; AND A                         ; AND A             ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; JP M,$8E07                    ; JP M,$8E07        ; 
       ab   @bytes+4,a                 ; ADD A,$04         ; 
_8e07:
       ab   @bytes+8,a                 ; ADD A,$08         ; 
_8e09:
       movb a,*ix                      ; LD (IX+$00),A     ; 
       .call @soundswalking            ; CALL $A3C7        ; 
_8e0f:
       .call @_93be                    ; CALL $93BE        ; 
       andi a,16*256                   ; AND $10           ; 
       jne  !                          ; CALL Z,$8283      ; 
       .call @_8283                    ;                   
!
       b    @_8e78                     ; JP $8E78          ; 
_8e1a:
       movb @e,a                       ; LD A,E            ; 
       ; AND A                         ; AND A             ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; JP M,$8E09                    ; JP M,$8E09        ; 
       ab   @bytes+4,a                 ; ADD A,$04         ; 
       jmp  _8e09                      ; JR $8E09          ; 

* Handler: Knight
handlerknight:                         ; 8e26
       li   bc,>2020                   ; LD BC,$2020       ; 
       li   de,>0303                   ; LD DE,$0303       ; 
       li   hl,>0707                   ; LD HL,$0707       ; 
       .call @controlplayer            ; CALL $8D77        ; 
       movb @6(ix),@e                  ; LD E,(IX+$06)     ; 
       movb @7(ix),d                   ; LD D,(IX+$07)     ; 
       movb d,a                        ; LD A,D            ; 
       socb @e,a                       ; OR E              ; 
       jeq  _8e70                      ; JR Z,$8E70        ; 
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       andi a,3*256                    ; AND $03           ; 
       jne  _8e70                      ; JR NZ,$8E70       ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,3*256                    ; AND $03           ; 
       ab   one,a                      ; INC A             ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb d,a                        ; LD A,D            ; 
       ; AND A                         ; AND A             ; 
       ; JP P,$8E53                    ; JP P,$8E53        ; 
       neg a                           ; NEG               ; 
_8e53:
       movb a,@c                       ; LD C,A            ; 
       movb @e,a                       ; LD A,E            ; 
       ; AND A                         ; AND A             ; 
       ; JP P,$8E5B                    ; JP P,$8E5B        ; 
       neg a                           ; NEG               ; 
_8e5b:
       cb   a,@c                       ; CP C              ; 
       jhe  _8e94                      ; JR NC,$8E94       ; 
       movb d,a                        ; LD A,D            ; 
       ; AND A                         ; AND A             ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; JP M,$8E68                    ; JP M,$8E68        ; 
       ab   @bytes+4,a                 ; ADD A,$04         ; 
_8e68:
       ab   @bytes+8,a                 ; ADD A,$08         ; 
_8e6a:
       movb a,*ix                      ; LD (IX+$00),A     ; 
       .call @soundswalking            ; CALL $A3C7        ; 
_8e70:
       .call @_93be                    ; CALL $93BE        ; 
       andi a,16*256                   ; AND $10           ; 
       jne  !                          ; CALL Z,$8134      ; 
       .call @_8134                    ;                   
!
* This entry point is used by the routines at #R$80D2 and #R$8DC4.
_8e78:
       equ  $
       .call @_83ea                    ; CALL $83EA        ; 
       movb @counterlow,a              ; LD A,($5E12)      ; 
       andi a,15*256                   ; AND $0F           ; 
       jne  _8e8e                      ; JR NZ,$8E8E       ; 
       movb @playerenergy,a            ; LD A,($5E28)      ; 
       sb   one,a                      ; DEC A             ; 
       jeq  _8ea0                      ; JR Z,$8EA0        ; 
       movb a,@playerenergy            ; LD ($5E28),A      ; 
       .call @drawchicken              ; CALL $8B8A        ; 
* This entry point is used by the routines at #R$8209 and #R$8301.
_8e8e:
       .call @displayentity            ; CALL $9FCA        ; 
       b    @_a01a                     ; JP $A01A          ; 
_8e94:
       movb @e,a                       ; LD A,E            ; 
       ; AND A                         ; AND A             ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; JP M,$8E6A                    ; JP M,$8E6A        ; 
       ab   @bytes+4,a                 ; ADD A,$04         ; 
       jmp  _8e6a                      ; JR $8E6A          ; 
* This entry point is used by the routines at #R$8301 and #R$96EC.
_8ea0:
       movb @playerlives,a             ; LD A,($5E21)      ; 
       ; AND A                         ; AND A             ; 
       jne  !                          ; JP Z,$8C35        ; 
       b    @gameover                  ;                   
!
       sb   one,a                      ; DEC A             ; 
       movb a,@playerlives             ; LD ($5E21),A      ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       sb   one,a                      ; DEC A             ; 
       cb   a,@bytes+48                ; CP $30            ; 
       jl   _8ec6                      ; JR C,$8EC6        ; 
       movb @player,a                  ; LD A,($EA90)      ; 
_8eb6:
       movb a,@playerroom+6            ; LD ($EA97),A      ; 
       .call @getspriteaddress         ; CALL $9E89        ; 
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,@playerroom+5            ; LD ($EA96),A      ; 
       movb @bytes+103,a               ; LD A,$67          ; 
       movb a,@player                  ; LD ($EA90),A      ; 
       .ret                            ; RET               ; 
_8ec6:
       movb @saved_x,a                 ; LD A,($5E16)      ; 
       movb a,@playerroom+2            ; LD ($EA93),A      ; 
       movb @saved_y,a                 ; LD A,($5E17)      ; 
       movb a,@playerroom+3            ; LD ($EA94),A      ; 
       movb @_5e15,a                   ; LD A,($5E15)      ; 
       jmp  _8eb6                      ; JR $8EB6          ; 
* This entry point is used by the routine at #R$8301.
_8ed7:
       movb @playerenergy,a            ; LD A,($5E28)      ; 
       sb   @bytes+32,a                ; SUB $20           ; 
       jeq  _8ee1                      ; JR Z,$8EE1        ; 
       jnc  _8ee9                      ; JR NC,$8EE9       ; TODO: check code. 
       sb   a,a                        ; XOR A             ; 
_8ee1:
       movb a,@playerenergy            ; LD ($5E28),A      ; 
       .call @drawchicken              ; CALL $8B8A        ; 
       jmp  _8ea0                      ; JR $8EA0          ; 
_8ee9:
       movb a,@playerenergy            ; LD ($5E28),A      ; 
       b    @drawchicken               ; JP $8B8A          ; 
* This entry point is used by the routine at #R$8D77.
_8eef:
       movb @2(ix),a                   ; LD A,(IX+$02)     ; 
       andi a,15*256                   ; AND $0F           ; 
       jne  _8f35                      ; JR NZ,$8F35       ; 
       movb @e,a                       ; LD A,E            ; 
       ab   @6(ix),a                   ; ADD A,(IX+$06)    ; 
       ; JP M,$8F21                    ; JP M,$8F21        ; 
       cb   a,@l                       ; CP L              ; 
       jl   _8f01                      ; JR C,$8F01        ; 
       movb @l,a                       ; LD A,L            ; 
_8f01:
       movb a,@6(ix)                   ; LD (IX+$06),A     ; 
       movb d,a                        ; LD A,D            ; 
       ab   @7(ix),a                   ; ADD A,(IX+$07)    ; 
       ; JP M,$8F2B                    ; JP M,$8F2B        ; 
       cb   a,h                        ; CP H              ; 
       jl   _8f0f                      ; JR C,$8F0F        ; 
       movb h,a                        ; LD A,H            ; 
_8f0f:
       movb a,@7(ix)                   ; LD (IX+$07),A     ; 
       movb @6(ix),a                   ; LD A,(IX+$06)     ; 
       .call @_8f80                    ; CALL $8F80        ; 
       movb a,@e                       ; LD E,A            ; 
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       .call @_8f80                    ; CALL $8F80        ; 
       movb a,d                        ; LD D,A            ; 
       .ret                            ; RET               ; 
_8f21:
       neg a                           ; NEG               ; 
       cb   a,@l                       ; CP L              ; 
       jl   _8f27                      ; JR C,$8F27        ; 
       movb @l,a                       ; LD A,L            ; 
_8f27:
       neg a                           ; NEG               ; 
       jmp  _8f01                      ; JR $8F01          ; 
_8f2b:
       neg a                           ; NEG               ; 
       cb   a,h                        ; CP H              ; 
       jl   _8f31                      ; JR C,$8F31        ; 
       movb h,a                        ; LD A,H            ; 
_8f31:
       neg a                           ; NEG               ; 
       jmp  _8f0f                      ; JR $8F0F          ; 
_8f35:
       movb @6(ix),a                   ; LD A,(IX+$06)     ; 
       ; AND A                         ; AND A             ; 
       ; JP M,$8F52                    ; JP M,$8F52        ; 
       andi a,240*256                  ; AND $F0           ; 
       jeq  _8f42                      ; JR Z,$8F42        ; 
       movb @bytes+2,a                 ; LD A,$02          ; 
_8f42:
       movb a,@e                       ; LD E,A            ; 
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       ; AND A                         ; AND A             ; 
       ; JP M,$8F5C                    ; JP M,$8F5C        ; 
       andi a,240*256                  ; AND $F0           ; 
       jeq  _8f50                      ; JR Z,$8F50        ; 
       movb @bytes+2,a                 ; LD A,$02          ; 
_8f50:
       movb a,d                        ; LD D,A            ; 
       .ret                            ; RET               ; 
_8f52:
       neg a                           ; NEG               ; 
       andi a,240*256                  ; AND $F0           ; 
       jeq  _8f42                      ; JR Z,$8F42        ; 
       movb @b254,a                    ; LD A,$FE          ; 
       jmp  _8f42                      ; JR $8F42          ; 
_8f5c:
       neg a                           ; NEG               ; 
       andi a,240*256                  ; AND $F0           ; 
       jeq  _8f50                      ; JR Z,$8F50        ; 
       movb @b254,a                    ; LD A,$FE          ; 
       jmp  _8f50                      ; JR $8F50          ; 

* Apply Movement
* 
* Used by the routine at #R$8D77.
applymovement:                         ; 8f66
       movb @2(ix),r0                  ; BIT 4,(IX+$02)    ; 
       andi r0,16*256                  ;                   
       jne  _8f73                      ; JR NZ,$8F73       ; 
       movb @e,a                       ; LD A,E            ; 
       ab   @3(ix),a                   ; ADD A,(IX+$03)    ; 
       movb a,@3(ix)                   ; LD (IX+$03),A     ; 
_8f73:
       movb @2(ix),r0                  ; BIT 5,(IX+$02)    ; 
       andi r0,32*256                  ;                   
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb d,a                        ; LD A,D            ; 
       ab   @4(ix),a                   ; ADD A,(IX+$04)    ; 
       movb a,@4(ix)                   ; LD (IX+$04),A     ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$8E26.
_8f80:
       ; AND A                         ; AND A             ; 
       ; JP P,$8F8F                    ; JP P,$8F8F        ; 
       neg a                           ; NEG               ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       andi a,15*256                   ; AND $0F           ; 
       neg a                           ; NEG               ; 
       .ret                            ; RET               ; 
_8f8f:
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       andi a,15*256                   ; AND $0F           ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$8D77.
_8f96:
       movb @2(ix),a                   ; LD A,(IX+$02)     ; 
       andi a,15*256                   ; AND $0F           ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @6(ix),a                   ; LD A,(IX+$06)     ; 
       ; AND A                         ; AND A             ; 
       jeq  _8fad                      ; JR Z,$8FAD        ; 
       ; JP M,$8FBE                    ; JP M,$8FBE        ; 
       sb   @l,a                       ; SUB L             ; 
       ; JP P,$8FAA                    ; JP P,$8FAA        ; 
_8fa9:
       sb   a,a                        ; XOR A             ; 
_8faa:
       movb a,@6(ix)                   ; LD (IX+$06),A     ; 
_8fad:
       movb @7(ix),a                   ; LD A,(IX+$07)     ; 
       ; AND A                         ; AND A             ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       ; JP M,$8FC4                    ; JP M,$8FC4        ; 
       sb   h,a                        ; SUB H             ; 
       ; JP P,$8FBA                    ; JP P,$8FBA        ; 
_8fb9:
       sb   a,a                        ; XOR A             ; 
_8fba:
       movb a,@7(ix)                   ; LD (IX+$07),A     ; 
       .ret                            ; RET               ; 
_8fbe:
       ab   @l,a                       ; ADD A,L           ; 
       ; JP M,$8FAA                    ; JP M,$8FAA        ; 
       jmp  _8fa9                      ; JR $8FA9          ; 
_8fc4:
       ab   h,a                        ; ADD A,H           ; 
       ; JP M,$8FBA                    ; JP M,$8FBA        ; 
       jmp  _8fb9                      ; JR $8FB9          ; 
* This entry point is used by the routine at #R$8D77.
_8fca:
       .push de                        ; PUSH DE           ; 
       movb @e,a                       ; LD A,E            ; 
       ab   @3(ix),a                   ; ADD A,(IX+$03)    ; 
       movb a,@e                       ; LD E,A            ; 
       movb @4(ix),d                   ; LD D,(IX+$04)     ; 
       movb @bytes+16,b                ; LD B,$10          ; 
       .call @_8fe9                    ; CALL $8FE9        ; 
       .pop de                         ; POP DE            ; 
       .push de                        ; PUSH DE           ; 
       movb @3(ix),@e                  ; LD E,(IX+$03)     ; 
       movb d,a                        ; LD A,D            ; 
       ab   @4(ix),a                   ; ADD A,(IX+$04)    ; 
       movb a,d                        ; LD D,A            ; 
       movb @bytes+32,b                ; LD B,$20          ; 
       .call @_8fe9                    ; CALL $8FE9        ; 
       .pop de                         ; POP DE            ; 
       .ret                            ; RET               ; 
_8fe9:
       li   hl,currentroom_width       ; LD HL,$5E1D       ; 
       movb @e,a                       ; LD A,E            ; 
       sb   @bytes+88,a                ; SUB $58           ; 
       ; JP P,$8FF4                    ; JP P,$8FF4        ; 
       neg a                           ; NEG               ; 
_8ff4:
       cb   a,*hl                      ; CP (HL)           ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       inc  hl                         ; INC HL            ; 
       movb d,a                        ; LD A,D            ; 
       sb   @bytes+104,a               ; SUB $68           ; 
       ; JP P,$8FFF                    ; JP P,$8FFF        ; 
       neg a                           ; NEG               ; 
_8fff:
       cb   a,*hl                      ; CP (HL)           ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       movb b,a                        ; LD A,B            ; 
       inv  a                          ; CPL               ; 
       ; AND (IX+$02)                  ; AND (IX+$02)      ; 
       movb a,@2(ix)                   ; LD (IX+$02),A     ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$8D77.
_900a:
       .push de                        ; PUSH DE           ; 
       movb @e,a                       ; LD A,E            ; 
       ab   @3(ix),a                   ; ADD A,(IX+$03)    ; 
       movb a,@e                       ; LD E,A            ; 
       movb @4(ix),d                   ; LD D,(IX+$04)     ; 
       movb @bytes+16,a                ; LD A,$10          ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       .call @_902b                    ; CALL $902B        ; 
       .pop de                         ; POP DE            ; 
       .push de                        ; PUSH DE           ; 
       movb @3(ix),@e                  ; LD E,(IX+$03)     ; 
       movb d,a                        ; LD A,D            ; 
       ab   @4(ix),a                   ; ADD A,(IX+$04)    ; 
       movb a,d                        ; LD D,A            ; 
       movb @bytes+32,a                ; LD A,$20          ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       .call @_902b                    ; CALL $902B        ; 
       .pop de                         ; POP DE            ; 
       .ret                            ; RET               ; 
_902b:
       movb @1(ix),@c                  ; LD C,(IX+$01)     ; 
       sb   b,b                        ; LD B,$00          ; 
       li   hl,roomtable               ; LD HL,$757D       ; 
       ; SLA C                         ; SLA C             ; 
       ; RL B                          ; RL B              ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,@c                     ; LD C,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,b                      ; LD B,(HL)         ; 
_903b:
       movb *bc,a                      ; LD A,(BC)         ; 
       inc  bc                         ; INC BC            ; 
       movb a,@l                       ; LD L,A            ; 
       movb *bc,a                      ; LD A,(BC)         ; 
       inc  bc                         ; INC BC            ; 
       movb a,h                        ; LD H,A            ; 
       socb @l,a                       ; OR L              ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       .push bc                        ; PUSH BC           ; 
       li   bc,roomtable               ; LD BC,$757D       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jeq  _9055                      ; JR Z,$9055        ; 
       li   bc,>0008                   ; LD BC,$0008       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
_9055:
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,@c                     ; LD C,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,b                      ; LD B,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb a,r0                       ; BIT 2,A           ; 
       andi r0,4*256                   ;                   
       jne  _909b                      ; JR NZ,$909B       ; 
       movb a,r0                       ; BIT 3,A           ; 
       andi r0,8*256                   ;                   
       jne  _9098                      ; JR NZ,$9098       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       sra  a,1                        ; SRA A             ; 
       sra  a,1                        ; SRA A             ; 
       andi a,252*256                  ; AND $FC           ; 
       ab   @c,a                       ; ADD A,C           ; 
       sb   @e,a                       ; SUB E             ; 
       neg a                           ; NEG               ; 
       movb a,@c                       ; LD C,A            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       andi a,60*256                   ; AND $3C           ; 
       inc  hl                         ; INC HL            ; 
       cb   a,@c                       ; CP C              ; 
       jl   _9098                      ; JR C,$9098        ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       sra  a,1                        ; SRA A             ; 
       sra  a,1                        ; SRA A             ; 
       andi a,252*256                  ; AND $FC           ; 
       ab   b,a                        ; ADD A,B           ; 
       sb   d,a                        ; SUB D             ; 
       movb a,b                        ; LD B,A            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       andi a,60*256                   ; AND $3C           ; 
       cb   a,b                        ; CP B              ; 
       jl   _9098                      ; JR C,$9098        ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       movb a,@c                       ; LD C,A            ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       movb @c,a                       ; LD A,C            ; 
       inv  a                          ; CPL               ; 
       ; AND (IX+$02)                  ; AND (IX+$02)      ; 
_9095:
       movb a,@2(ix)                   ; LD (IX+$02),A     ; 
_9098:
       .pop bc                         ; POP BC            ; 
       jmp  _903b                      ; JR $903B          ; 
_909b:
       movb *hl,a                      ; LD A,(HL)         ; 
       sra  a,1                        ; SRA A             ; 
       sra  a,1                        ; SRA A             ; 
       andi a,252*256                  ; AND $FC           ; 
       ab   @c,a                       ; ADD A,C           ; 
       sb   @e,a                       ; SUB E             ; 
       neg a                           ; NEG               ; 
       movb a,@c                       ; LD C,A            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       andi a,60*256                   ; AND $3C           ; 
       inc  hl                         ; INC HL            ; 
       cb   a,@c                       ; CP C              ; 
       jl   _9098                      ; JR C,$9098        ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       sra  a,1                        ; SRA A             ; 
       sra  a,1                        ; SRA A             ; 
       andi a,252*256                  ; AND $FC           ; 
       ab   b,a                        ; ADD A,B           ; 
       sb   d,a                        ; SUB D             ; 
       movb a,b                        ; LD B,A            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       andi a,60*256                   ; AND $3C           ; 
       cb   a,b                        ; CP B              ; 
       jl   _9098                      ; JR C,$9098        ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       movb a,@c                       ; LD C,A            ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       movb @c,a                       ; LD A,C            ; 
       socb @2(ix),a                   ; OR (IX+$02)       ; 
       jmp  _9095                      ; JR $9095          ; 
* This entry point is used by the routines at #R$91F2, #R$91FE and #R$96EC.
_90cc:
       movb @playerroom+1,a            ; LD A,($EA92)      ; 
       andi a,15*256                   ; AND $0F           ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @player,a                  ; LD A,($EA90)      ; 
       sb   one,a                      ; DEC A             ; 
       cb   a,@bytes+48                ; CP $30            ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       movb @5(ix),r0                  ; BIT 6,(IX+$05)    ; 
       andi r0,64*256                  ;                   
       jeq  _90e1                      ; JR Z,$90E1        ; 
       ; SRL C                         ; SRL C             ; 
_90e1:
       movb @playerroom+2,a            ; LD A,($EA93)      ; 
       sb   @3(ix),a                   ; SUB (IX+$03)      ; 
       cb   a,@c                       ; CP C              ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       movb @5(ix),r0                  ; BIT 6,(IX+$05)    ; 
       andi r0,64*256                  ;                   
       jne  _90f1                      ; JR NZ,$90F1       ; 
       srl  b,1                        ; SRL B             ; 
_90f1:
       movb @playerroom+3,a            ; LD A,($EA94)      ; 
       sb   @4(ix),a                   ; SUB (IX+$04)      ; 
       neg a                           ; NEG               ; 
       cb   a,b                        ; CP B              ; 
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$8C63, #R$9252 and #R$96EC.
_90fb:
       movb @playerroom+2,a            ; LD A,($EA93)      ; 
       sb   @3(ix),a                   ; SUB (IX+$03)      ; 
       ; JP P,$9106                    ; JP P,$9106        ; 
       neg a                           ; NEG               ; 
_9106:
       cb   a,@bytes+12                ; CP $0C            ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       movb @playerroom+3,a            ; LD A,($EA94)      ; 
       sb   @4(ix),a                   ; SUB (IX+$04)      ; 
       ; JP P,$9114                    ; JP P,$9114        ; 
       neg a                           ; NEG               ; 
_9114:
       cb   a,@bytes+12                ; CP $0C            ; 
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$91F2, #R$9244 and #R$96EC.
_9117:
       .call @_9286                    ; CALL $9286        ; 
       movb @1(ix),a                   ; LD A,(IX+$01)     ; 
       movb a,@playerroom              ; LD ($EA91),A      ; 
       movb @2(ix),a                   ; LD A,(IX+$02)     ; 
       ; RLCA                          ; RLCA              ; 
       andi a,30*256                   ; AND $1E           ; 
       ab   @3(ix),a                   ; ADD A,(IX+$03)    ; 
       movb a,@playerroom+2            ; LD ($EA93),A      ; 
       movb @2(ix),a                   ; LD A,(IX+$02)     ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       andi a,30*256                   ; AND $1E           ; 
       neg a                           ; NEG               ; 
       ab   @4(ix),a                   ; ADD A,(IX+$04)    ; 
       movb a,@playerroom+3            ; LD ($EA94),A      ; 
       .call @_986a                    ; CALL $986A        ; 
       movb @playerroom+1,a            ; LD A,($EA92)      ; 
       socb @bytes+15,a                ; OR $0F            ; 
       movb a,@playerroom+1            ; LD ($EA92),A      ; 

* Enter Room
* 
* Used by the routine at #R$7D9A.
enterroom:                             ; 9147
       movb @playerroom,a              ; LD A,($EA91)      ; #REGa=#R$EA91.
       .call @visitroom                ; CALL $96AF        ; Call #R$96AF.
       .call @clearplayarea            ; CALL $8093        ; Call #R$8093.
       .call @drawroomframe            ; CALL $9BEA        ; Call #R$9BEA.
       .call @drawsidepanelattrs       ; CALL $A240        ; Call #R$A240.
       .call @drawinventory            ; CALL $A13B        ; Call #R$A13B.
       .call @soundsentry              ; CALL $A403        ; Call #R$A403.
       b    @mainloop                  ; JP $7DC3          ; Jump to #R$7DC3.

* Handler: Door Open
handlerdooropen:                       ; 915f
       movb @counterlow,a              ; LD A,($5E12)      ; 
       andi a,1*256                    ; AND $01           ; 
       jeq  !                          ; JP NZ,$91F2       ; 
       b    @handlerdoorexit           ;                   
!
       movb @_5e2e,a                   ; LD A,($5E2E)      ; 
       ; AND A                         ; AND A             ; 
       jeq  _9174                      ; JR Z,$9174        ; 
       sb   one,a                      ; DEC A             ; 
       movb a,@_5e2e                   ; LD ($5E2E),A      ; 
       b    @handlerdoorexit           ; JP $91F2          ; 
_9174:
       movb @_5e2d,a                   ; LD A,($5E2D)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; JP NZ,$91F2       ; 
       b    @handlerdoorexit           ;                   
!
       jmp  _9193                      ; JR $9193          ; 

* Handler: Door Closed
handlerdoorclosed:                     ; 917d
       movb @counterlow,a              ; LD A,($5E12)      ; 
       andi a,1*256                    ; AND $01           ; 
       jeq  !                          ; JP NZ,$91FE       ; 
       b    @handlerroomitem           ;                   
!
       movb @_5e2e,a                   ; LD A,($5E2E)      ; 
       ; AND A                         ; AND A             ; 
       jne  !                          ; JP Z,$9193        ; 
       b    @_9193                     ;                   
!
       sb   one,a                      ; DEC A             ; 
       movb a,@_5e2e                   ; LD ($5E2E),A      ; 
       b    @handlerroomitem           ; JP $91FE          ; 
* This entry point is used by the routine at #R$915F.
_9193:
       movb @bytes+94,a                ; LD A,$5E          ; 
       movb a,@_5e2e                   ; LD ($5E2E),A      ; 
       movb @5(ix),a                   ; LD A,(IX+$05)     ; 
       .push af                        ; PUSH AF           ; 
       socb @bytes+3,a                 ; OR $03            ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       .call @_9213                    ; CALL $9213        ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       xor  one,a                      ; XOR $01           ; 
       .call @_9260                    ; CALL $9260        ; 
       .call @_9213                    ; CALL $9213        ; 
       .pop af                         ; POP AF            ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       .call @_9546                    ; CALL $9546        ; 
       .call @handlerroomitem          ; CALL $91FE        ; 
       b    @soundsdoor                ; JP $A46E          ; 

* Handler: Trap Closed
handlertrapclosed:                     ; 91bc
       movb @counterlow,a              ; LD A,($5E12)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; JP NZ,$91FE       ; 
       b    @handlerroomitem           ;                   
!
       jmp  _91cc                      ; JR $91CC          ; 

* Handler: Trap Open
handlertrapopen:                       ; 91c5
       movb @_5e05,a                   ; LD A,($5E05)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; JP NZ,$9731       ; 
       b    @_9731                     ;                   
!
* This entry point is used by the routine at #R$91BC.
_91cc:
       equ  $
       movb @5(ix),a                   ; LD A,(IX+$05)     ; 
       .push af                        ; PUSH AF           ; 
       socb @bytes+3,a                 ; OR $03            ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       .call @_9213                    ; CALL $9213        ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       xor  one,a                      ; XOR $01           ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       .call @_9213                    ; CALL $9213        ; 
       .pop af                         ; POP AF            ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       .call @handlerroomitem          ; CALL $91FE        ; 
       b    @soundsdoor                ; JP $A46E          ; 

* Handler: Big Door Exit
handlerdoorbigexit:                    ; 91ed
       li   bc,>2020                   ; LD BC,$2020       ; 
       jmp  _91f5                      ; JR $91F5          ; 

* Handler: Door Exit
* 
* Used by the routines at #R$915F and #R$942F.
handlerdoorexit:                       ; 91f2
       li   bc,>1111                   ; LD BC,$1111       ; 
* This entry point is used by the routines at #R$91ED and #R$961B.
_91f5:
       .call @_90cc                    ; CALL $90CC        ; 
       ; CALL C,$9117                  ; CALL C,$9117      ; 
       b    @handlerroomitem           ; JP $91FE          ; 

* Handler: Room Item
* 
* Used by the routines at #R$917D, #R$91BC, #R$91C5, #R$91F2, #R$9244, #R$9252,
* #R$942F, #R$961B and #R$96EC.
handlerroomitem:                       ; 91fe
       movb @3(ix),@e                  ; LD E,(IX+$03)     ; 
       movb @4(ix),d                   ; LD D,(IX+$04)     ; 
       sb   one,d                      ; DEC D             ; 
       movb *ix,@c                     ; LD C,(IX+$00)     ; 
       movb @5(ix),b                   ; LD B,(IX+$05)     ; 
       .call @_9980                    ; CALL $9980        ; 
       movb @gameflags,a               ; LD A,($5E14)      ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
* This entry point is used by the routines at #R$8B8A, #R$917D and #R$91C5.
_9213:
       equ  $
       movb @3(ix),@e                  ; LD E,(IX+$03)     ; 
       movb @4(ix),d                   ; LD D,(IX+$04)     ; 
       movb *ix,@c                     ; LD C,(IX+$00)     ; 
       movb @5(ix),b                   ; LD B,(IX+$05)     ; 
       b    @_9962                     ; JP $9962          ; 
* This entry point is used by the routines at #R$9244 and #R$9252.
_9222:
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,3*256                    ; AND $03           ; 
       li   hl,_925c                   ; LD HL,$925C       ; 
       .call @_926c                    ; CALL $926C        ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       movb @bytes+129,@e              ; LD E,$81          ; 
       .call @_9273                    ; CALL $9273        ; 
       jeq  !                          ; JP NZ,$923F       ; 
       b    @_923f                     ;                   
!
       .call @_954d                    ; CALL $954D        ; 
       li   bc,>1111                   ; LD BC,$1111       ; 
       b    @_90cc                     ; JP $90CC          ; 
_923f:
       .call @_9565                    ; CALL $9565        ; 
       ; AND A                         ; AND A             ; 
       .ret                            ; RET               ; 

* Handler: Door Locked
handlerdoorlocked:                     ; 9244
       .call @_9222                    ; CALL $9222        ; 
       joc  !                          ; JP NC,$91FE       ; TODO: check code. 
       b    @handlerroomitem           ;                   
!
       movb @bytes+2,a                 ; LD A,$02          ; 
* This entry point is used by the routine at #R$9252.
_924c:
       .call @_9260                    ; CALL $9260        ; 
       b    @_9117                     ; JP $9117          ; 

* Handler: Cave Door Locked
handlercavedoorlocked:                 ; 9252
       .call @_9222                    ; CALL $9222        ; 
       joc  !                          ; JP NC,$91FE       ; TODO: check code. 
       b    @handlerroomitem           ;                   
!
       movb one,a                      ; LD A,$01          ; 
       jmp  _924c                      ; JR $924C          ; 
_925c:
       movb d,b                        ; LD B,D            ; 
       movb h,b                        ; LD B,H            ; 
       movb @l,b                       ; LD B,L            ; 
       movb *hl,b                      ; LD B,(HL)         ; 
* This entry point is used by the routines at #R$917D and #R$9244.
_9260:
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       movb @l,a                       ; LD A,L            ; 
       li   r0,8*256                   ; XOR $08           ; 
       xor  r0,a                       ;                   
       movb a,@l                       ; LD L,A            ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$91FE and #R$A00E.
_926c:
       ab   @l,a                       ; ADD A,L           ; 
       movb a,@l                       ; LD L,A            ; 
       movb h,a                        ; LD A,H            ; 
       ab   @zero,a                    ; ADC A,$00         ; 
       movb a,h                        ; LD H,A            ; 
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$8301 and #R$91FE.
_9273:
       movb @bytes+3,b                 ; LD B,$03          ; 
       li   hl,_5e32                   ; LD HL,$5E32       ; 
_9278:
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@e                       ; CP E              ; 
       inc  hl                         ; INC HL            ; 
       jne  _9280                      ; JR NZ,$9280       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,d                        ; CP D              ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
_9280:
       equ  $
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       sb   one,b                      ; DJNZ $9278        ; 
       jne  _9278                      ;                   
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$8F66 and #R$94F5.
_9286:
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       movb @l,a                       ; LD A,L            ; 
       li   r0,8*256                   ; XOR $08           ; 
       xor  r0,a                       ;                   
       movb a,@l                       ; LD L,A            ; 
       .push hl                        ; PUSH HL           ; 
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$7E23.
_9291:
       li   ix,player                  ; LD IX,$EA90       ; 
_9295:
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; AND A                         ; AND A             ; 
       jeq  _92a6                      ; JR Z,$92A6        ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jne  _92a6                      ; JR NZ,$92A6       ; 
       .call @drawentity               ; CALL $9F4A        ; 
_92a6:
       li   de,>0008                   ; LD DE,$0008       ; 
       a    de,ix                      ; ADD IX,DE         ; 
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       li   de,_ee60                   ; LD DE,$EE60       ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       joc  _9295                      ; JR C,$9295        ; TODO: check code. 
_92b6:
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; AND A                         ; AND A             ; 
       jeq  _92c7                      ; JR Z,$92C7        ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jne  _92c7                      ; JR NZ,$92C7       ; 
       .call @drawentity               ; CALL $9F4A        ; 
_92c7:
       li   de,>0010                   ; LD DE,$0010       ; 
       a    de,ix                      ; ADD IX,DE         ; 
       .push ix                        ; PUSH IX           ; 
       .pop hl                         ; POP HL            ; 
       li   de,_eee0                   ; LD DE,$EEE0       ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       joc  _92b6                      ; JR C,$92B6        ; TODO: check code. 
       .ret                            ; RET               ; 
_92d8:
       movb @_5e1f,a                   ; LD A,($5E1F)      ; 
       andi a,253*256                  ; AND $FD           ; 
       movb a,@_5e1f                   ; LD ($5E1F),A      ; 
* This entry point is used by the routines at #R$8C63, #R$95A9 and #R$96EC.
_92e0:
       movb @bytes+16,a                ; LD A,$10          ; 
* This entry point is used by the routine at #R$8C63.
_92e2:
       movb a,@_5e11                   ; LD ($5E11),A      ; 
       movb @3(ix),a                   ; LD A,(IX+$03)     ; 
       andi a,7*256                    ; AND $07           ; 
       movb @bytes+2,a                 ; LD A,$02          ; 
       jeq  _92ef                      ; JR Z,$92EF        ; 
       ab   one,a                      ; INC A             ; 
_92ef:
       movb a,@_5e10                   ; LD ($5E10),A      ; 
       b    @_a01a                     ; JP $A01A          ; 
_92f5:
       .call @storeentity              ; CALL $9FFB        ; 
       movb @_5e20,a                   ; LD A,($5E20)      ; 
       ; AND A                         ; AND A             ; 
       jeq  _92d8                      ; JR Z,$92D8        ; 
       movb @_5e1f,a                   ; LD A,($5E1F)      ; 
       andi a,3*256                    ; AND $03           ; 
       jne  _92e0                      ; JR NZ,$92E0       ; 
       movb @player,a                  ; LD A,($EA90)      ; 
       sb   one,a                      ; DEC A             ; 
       cb   a,@bytes+48                ; CP $30            ; 
       jhe  _92e0                      ; JR NC,$92E0       ; 
       .call @_90fb                    ; CALL $90FB        ; 
       jnc  _92e0                      ; JR NC,$92E0       ; TODO: check code. 
       movb @_5e1f,a                   ; LD A,($5E1F)      ; 
       socb @bytes+3,a                 ; OR $03            ; 
       movb a,@_5e1f                   ; LD ($5E1F),A      ; 
       .call @_9358                    ; CALL $9358        ; 
       .call @_934c                    ; CALL $934C        ; 
       .call @_9326                    ; CALL $9326        ; 
       b    @drawinventory             ; JP $A13B          ; 
_9326:
       li   hl,_5e30                   ; LD HL,$5E30       ; 
       .push ix                        ; PUSH IX           ; 
       .pop de                         ; POP DE            ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       inc  hl                         ; INC HL            ; 
       movb d,*hl                      ; LD (HL),D         ; 
       inc  hl                         ; INC HL            ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  hl                         ; INC HL            ; 
       movb @5(ix),a                   ; LD A,(IX+$05)     ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .call @removeentity             ; CALL $9F56        ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       .call @_a01a                    ; CALL $A01A        ; 
       sb   *ix,*ix                    ; LD (IX+$00),$00   ; 
       b    @soundsinventory           ; JP $A3BD          ; 
* This entry point is used by the routine at #R$93E3.
_934c:
       li   hl,_5e37                   ; LD HL,$5E37       ; 
       li   de,_5e38+3                 ; LD DE,$5E3B       ; 
       li   bc,>0008                   ; LD BC,$0008       ; 
       .lddr                           ; LDDR              ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$93E3.
_9358:
       li   hl,_5e38                   ; LD HL,$5E38       ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb d,a                        ; LD A,D            ; 
       socb @e,a                       ; OR E              ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       .push de                        ; PUSH DE           ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb a,*de                      ; LD (DE),A         ; 
       inc  de                         ; INC DE            ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       movb a,*de                      ; LD (DE),A         ; 
       inc  de                         ; INC DE            ; 
       movb @bytes+128,a               ; LD A,$80          ; 
       movb a,*de                      ; LD (DE),A         ; 
       inc  de                         ; INC DE            ; 
       movb @playerroom+2,a            ; LD A,($EA93)      ; 
       movb a,*de                      ; LD (DE),A         ; 
       inc  de                         ; INC DE            ; 
       movb @playerroom+3,a            ; LD A,($EA94)      ; 
       movb a,*de                      ; LD (DE),A         ; 
       inc  de                         ; INC DE            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       movb a,*de                      ; LD (DE),A         ; 
       .pop de                         ; POP DE            ; 
       .call @soundsdrop               ; CALL $A3C2        ; 
       .push ix                        ; PUSH IX           ; 
       .push de                        ; PUSH DE           ; 
       .pop ix                         ; POP IX            ; 
       .call @drawentity               ; CALL $9F4A        ; 
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$7E23.
_938b:
       movb @bytes+126,a               ; LD A,$7E          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       inv  a                          ; CPL               ; 
       andi a,2*256                    ; AND $02           ; 
       movb a,@_5e20                   ; LD ($5E20),A      ; 
       .ret                            ; RET               ; 
_9398:
       movb @bytes+239,a               ; LD A,$EF          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       movb a,@c                       ; LD C,A            ; 
       andi a,8*256                    ; AND $08           ; 
       movb a,@e                       ; LD E,A            ; 
       movb @c,a                       ; LD A,C            ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       andi a,69*256                   ; AND $45           ; 
       socb @e,a                       ; OR E              ; 
       movb a,@e                       ; LD E,A            ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       andi a,16*256                   ; AND $10           ; 
       socb @e,a                       ; OR E              ; 
       andi a,31*256                   ; AND $1F           ; 
       movb a,@e                       ; LD E,A            ; 
       movb @bytes+247,a               ; LD A,$F7          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       ; RRA                           ; RRA               ; 
       ; RRA                           ; RRA               ; 
       ; RRA                           ; RRA               ; 
       andi a,2*256                    ; AND $02           ; 
       socb @e,a                       ; OR E              ; 
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$80D2, #R$8D77, #R$8DC4 and
* #R$8E26.
_93be:
       movb @gameoptions,a             ; LD A,($5E00)      ; 
       andi a,6*256                    ; AND $06           ; 
       jeq  _93cd                      ; JR Z,$93CD        ; 
       cb   a,@bytes+4                 ; CP $04            ; 
       jeq  _9398                      ; JR Z,$9398        ; 
       ; IN A,($1F)                    ; IN A,($1F)        ; 
       inv  a                          ; CPL               ; 
       .ret                            ; RET               ; 
_93cd:
       movb @bytes+251,a               ; LD A,$FB          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       movb a,@c                       ; LD C,A            ; 
       ; RRA                           ; RRA               ; 
       andi a,1*256                    ; AND $01           ; 
       movb a,@e                       ; LD E,A            ; 
       movb @c,a                       ; LD A,C            ; 
       ; RLA                           ; RLA               ; 
       andi a,2*256                    ; AND $02           ; 
       socb @e,a                       ; OR E              ; 
       movb a,@e                       ; LD E,A            ; 
       movb @c,a                       ; LD A,C            ; 
       andi a,28*256                   ; AND $1C           ; 
       socb @e,a                       ; OR E              ; 
       .ret                            ; RET               ; 

* Handler: Blank
handlerblank:                          ; 93e3
       movb @player,a                  ; LD A,($EA90)      ; 
       sb   one,a                      ; DEC A             ; 
       cb   a,@bytes+48                ; CP $30            ; 
       jl   !                          ; RET NC            ; 
       .ret                            ;                   
!
       movb @_5e20,a                   ; LD A,($5E20)      ; 
       ; AND A                         ; AND A             ; 
       jeq  _9417                      ; JR Z,$9417        ; 
       movb @_5e1f,a                   ; LD A,($5E1F)      ; 
       andi a,3*256                    ; AND $03           ; 
       jne  _940e                      ; JR NZ,$940E       ; 
       socb @bytes+2,a                 ; OR $02            ; 
       movb a,@_5e1f                   ; LD ($5E1F),A      ; 
       .call @_9358                    ; CALL $9358        ; 
       .call @_934c                    ; CALL $934C        ; 
       li   hl,>0000                   ; LD HL,$0000       ; 
       mov  hl,@_5e30                  ; LD ($5E30),HL     ; 
       mov  hl,@_5e32                  ; LD ($5E32),HL     ; 
       .call @drawinventory            ; CALL $A13B        ; 
_940e:
       movb @_5e1f,a                   ; LD A,($5E1F)      ; 
       andi a,254*256                  ; AND $FE           ; 
       movb a,@_5e1f                   ; LD ($5E1F),A      ; 
       .ret                            ; RET               ; 
_9417:
       movb @_5e1f,a                   ; LD A,($5E1F)      ; 
       andi a,253*256                  ; AND $FD           ; 
       movb a,@_5e1f                   ; LD ($5E1F),A      ; 
       jmp  _940e                      ; JR $940E          ; 

* Handler: Barrel
handlerbarrel:                         ; 9421
       movb @player,a                  ; LD A,($EA90)      ; 
       sb   @bytes+33,a                ; SUB $21           ; 
       jmp  _9433                      ; JR $9433          ; 

* Handler: Bookcase
handlerbookcase:                       ; 9428
       movb @player,a                  ; LD A,($EA90)      ; 
       sb   @bytes+17,a                ; SUB $11           ; 
       jmp  _9433                      ; JR $9433          ; 

* Handler: Clock
handlerclock:                          ; 942f
       movb @player,a                  ; LD A,($EA90)      ; 
       sb   one,a                      ; DEC A             ; 
* This entry point is used by the routines at #R$9421 and #R$9428.
_9433:
       cb   a,@bytes+16                ; CP $10            ; 
       jhe  _943d                      ; JR NC,$943D       ; 
       .call @_954d                    ; CALL $954D        ; 
       b    @handlerdoorexit           ; JP $91F2          ; 
_943d:
       .call @_9565                    ; CALL $9565        ; 
       b    @handlerroomitem           ; JP $91FE          ; 

* Prepare Player
* 
* Used by the routines at #R$7D9A and #R$8C63.
* 
* .
* 
* Work out the sprite ID to use.
* #TABLE(default,centre,centre,centre,centre,centre)
* { =h Byte | =h Character | =h * #N$02 | =h Only Bits 4-5 | =h + #N$08 }
* #LET(char=$00) #LET(id=#EVAL((({char} * $02) & $30) + $08)) { #N({char}) | Knight (+ Keyboard) | #N(#EVAL({char} * $02)) | #N(#EVAL(({char} * $02) & $30)) | Sprite ID: #R($A4BE + {id} * $02)(#N({id})) }
* #LET(char=$08) #LET(id=#EVAL((({char} * $02) & $30) + $08)) { #N({char}) | Wizard (+ Kempston Joystick) | #N(#EVAL({char} * $02)) | #N(#EVAL(({char} * $02) & $30)) | Sprite ID: #R($A4BE + {id} * $02)(#N({id})) }
* #LET(char=$14) #LET(id=#EVAL((({char} * $02) & $30) + $08)) { #N({char}) | Serf (+ Cursor Joystick) | #N(#EVAL({char} * $02)) | #N(#EVAL(({char} * $02) & $30)) | Sprite ID: #R($A4BE + {id} * $02)(#N({id})) }
* TABLE#
prepareplayer:                         ; 9443
       movb @gameoptions,a             ; LD A,($5E00)      ; {#REGa=#R$5E00 * #N$02.
       ; RLCA                          ; RLCA              ; }
       ; AND %00110000                 ; AND %00110000     ; {Keep only bits 4-5 (the base
       ab   @bytes+8,a                 ; ADD A,$08         ; character address) + #N$08 frames
                                                           ; (for the character direction).}
       movb a,@_9481+7                 ; LD ($9488),A      ; Write #REGa to #R$9481(#N$9488).
* Update the current room.
       movb @playerroom,a              ; LD A,($EA91)      ; {Write #R$EA91 to
       movb a,@_9481+1                 ; LD ($9482),A      ; #R$9481(#N$9482).}
       li   hl,_9481                   ; LD HL,$9481       ; {Copy #N$08 bytes of data from
       li   de,player                  ; LD DE,$EA90       ; #R$9481 to #R$EA90.
       li   bc,>0008                   ; LD BC,$0008       ; 
       .ldir                           ; LDIR              ; }
       movb @bytes+104,a               ; LD A,$68          ; 
       movb a,@_5e3c                   ; LD ($5E3C),A      ; 
       movb @playerlives,a             ; LD A,($5E21)      ; 
       cb   a,@bytes+3                 ; CP $03            ; 
       jeq  _9476                      ; JR Z,$9476        ; 
       .push ix                        ; PUSH IX           ; 
       li   ix,player                  ; LD IX,$EA90       ; 
       .call @drawentity               ; CALL $9F4A        ; Call #R$9F4A.
       .pop ix                         ; POP IX            ; 
* Set starting energy.
_9476:
       movb @bytes+240,a               ; LD A,$F0          ; {Write #N$F0 to #R$5E28.
       movb a,@playerenergy            ; LD ($5E28),A      ; }
       .call @drawchicken              ; CALL $8B8A        ; Call #R$8B8A.
       b    @drawlives                 ; JP $A2CE          ; Jump to #R$A2CE.
_9481:
       byte >66,>00,>00,>60,>68,>47,>FF,>00                          ; 

* Routine at 9489
* 
* Used by the routine at #R$7E23.
_9489:
       limi 0                          ; DI                ; 
       movb @bytes+126,a               ; LD A,$7E          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       movb a,r0                       ; BIT 0,A           ; 
       andi r0,1*256                   ;                   
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       inv  a                          ; CPL               ; 
       andi a,30*256                   ; AND $1E           ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
_9497:
       equ  $
       movb @bytes+126,a               ; LD A,$7E          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       movb a,r0                       ; BIT 0,A           ; 
       andi r0,1*256                   ;                   
       jeq  _9497                      ; JR Z,$9497        ; 
_94a1:
       movb @bytes+126,a               ; LD A,$7E          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       movb a,r0                       ; BIT 0,A           ; 
       andi r0,1*256                   ;                   
       jne  _94a1                      ; JR NZ,$94A1       ; 
_94ab:
       movb @bytes+126,a               ; LD A,$7E          ; 
       ; OUT ($FD),A                   ; OUT ($FD),A       ; 
       ; IN A,($FE)                    ; IN A,($FE)        ; 
       movb a,r0                       ; BIT 0,A           ; 
       andi r0,1*256                   ;                   
       jeq  _94ab                      ; JR Z,$94AB        ; 
       .ret                            ; RET               ; 

* Place Key Pieces
* 
* Used by the routine at #R$7D9A.
placekeypieces:                        ; 94b6
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @counterlow,a              ; LD A,($5E12)      ; 
       ab   @c,a                       ; ADD A,C           ; 
       andi a,7*256                    ; AND $07           ; 
       movb a,@c                       ; LD C,A            ; 
       ab   a,a                        ; ADD A,A           ; 
       ab   @c,a                       ; ADD A,C           ; 
       movb a,@l                       ; LD L,A            ; 
       sb   h,h                        ; LD H,$00          ; 
       li   bc,_94dd                   ; LD BC,$94DD       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       li   hl,initialisation_key_acg+1 ; LD HL,$6026       ; 
       li   bc,>0008                   ; LD BC,$0008       ; 
       movb @bytes+3,a                 ; LD A,$03          ; 
_94d3:
       .ex_af_af'                      ; EX AF,AF'         ; 
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,*hl                      ; LD (HL),A         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       inc  de                         ; INC DE            ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       sb   one,a                      ; DEC A             ; 
       jne  _94d3                      ; JR NZ,$94D3       ; 
       .ret                            ; RET               ; 
_94dd:
       ab   @c,a                       ; ADD A,C           ; 
       movb @l,b                       ; LD B,L            ; 
       movb h,a                        ; LD A,H            ; 
       ab   @l,a                       ; ADD A,L           ; 
       movb @c,@c                      ; LD C,C            ; 
       dec  hl                         ; DEC HL            ; 
       movb d,@l                       ; LD L,D            ; 
       dec  sp                         ; DEC SP            ; 
       movb h,a                        ; LD A,H            ; 
       movb @c,@l                      ; LD L,C            ; 
       movb @c,*hl                     ; LD (HL),C         ; 
       dec  hl                         ; DEC HL            ; 
       movb a,h                        ; LD H,A            ; 
       ab   @l,a                       ; ADD A,L           ; 
       movb h,a                        ; LD A,H            ; 
       movb b,@l                       ; LD L,B            ; 
       movb a,a                        ; LD A,A            ; 
       dec  hl                         ; DEC HL            ; 
       movb @l,@c                      ; LD C,L            ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       movb h,a                        ; LD A,H            ; 
       ; RLA                           ; RLA               ; 
       sb   one,b                      ; DJNZ $9520        ; 
       jne  _9520                      ;                   

* Randomise Doors
* 
* Used by the routine at #R$7D9A.
randomisedoors:                        ; 94f5
       movb @counterlow,a              ; LD A,($5E12)      ; 
       movb a,@l                       ; LD L,A            ; 
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       andi a,15*256                   ; AND $0F           ; 
       socb @bytes+16,a                ; OR $10            ; 
       movb a,h                        ; LD H,A            ; 
       .exx                            ; EXX               ; 
       li   hl,_eee0                   ; LD HL,$EEE0       ; 
       li   de,_eee8                   ; LD DE,$EEE8       ; 
       li   bc,>0010                   ; LD BC,$0010       ; 
_950b:
       .exx                            ; EXX               ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       .exx                            ; EXX               ; 
       cb   a,@bytes+112               ; CP $70            ; 
       jhe  _951f                      ; JR NC,$951F       ; 
       movb *de,a                      ; LD A,(DE)         ; 
       cb   a,*hl                      ; CP (HL)           ; 
       jne  _951f                      ; JR NZ,$951F       ; 
       cb   a,one                      ; CP $01            ; 
       jeq  _9526                      ; JR Z,$9526        ; 
       cb   a,@bytes+2                 ; CP $02            ; 
       jeq  _9542                      ; JR Z,$9542        ; 
_951f:
       a    bc,hl                      ; ADD HL,BC         ; 
* This entry point is used by the routine at #R$94B6.
_9520:
       .ex_de_hl                       ; EX DE,HL          ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       .ex_de_hl                       ; EX DE,HL          ; 
       jmp  _950b                      ; JR $950B          ; 
_9526:
       movb @bytes+34,a                ; LD A,$22          ; 
_9528:
       movb a,*de                      ; LD (DE),A         ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .push de                        ; PUSH DE           ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       inc  de                         ; INC DE            ; 
       movb *de,a                      ; LD A,(DE)         ; 
       socb @bytes+8,a                 ; OR $08            ; 
       movb a,*de                      ; LD (DE),A         ; 
       .pop de                         ; POP DE            ; 
       .push hl                        ; PUSH HL           ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       socb @bytes+8,a                 ; OR $08            ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .pop hl                         ; POP HL            ; 
       jmp  _951f                      ; JR $951F          ; 
_9542:
       movb @bytes+32,a                ; LD A,$20          ; 
       jmp  _9528                      ; JR $9528          ; 
* This entry point is used by the routine at #R$917D.
_9546:
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       andi a,1*256                    ; AND $01           ; 
       jeq  _9565                      ; JR Z,$9565        ; 
* This entry point is used by the routines at #R$91FE, #R$942F and #R$961B.
_954d:
       movb @5(ix),a                   ; LD A,(IX+$05)     ; 
       andi a,247*256                  ; AND $F7           ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       .push ix                        ; PUSH IX           ; 
       .call @_9286                    ; CALL $9286        ; 
       movb @5(ix),a                   ; LD A,(IX+$05)     ; 
       andi a,247*256                  ; AND $F7           ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$91FE, #R$942F and #R$961B.
_9565:
       movb @5(ix),a                   ; LD A,(IX+$05)     ; 
       socb @bytes+8,a                 ; OR $08            ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       .push ix                        ; PUSH IX           ; 
       .call @_9286                    ; CALL $9286        ; 
       movb @5(ix),a                   ; LD A,(IX+$05)     ; 
       socb @bytes+8,a                 ; OR $08            ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 

* Check Doorway
* 
* Used by the routine at #R$8D77.
checkdoorway:                          ; 957d
       .push de                        ; PUSH DE           ; Stash #REGde on the stack.
       sb   b,b                        ; LD B,$00          ; 
       mov  @currentroom_width,hl      ; LD HL,($5E1D)     ; #REGhl=#R$5E1D.
       ab   one,@l                     ; INC L             ; 
       ab   one,h                      ; INC H             ; 
       movb @3(ix),@e                  ; LD E,(IX+$03)     ; 
       movb @4(ix),d                   ; LD D,(IX+$04)     ; 
       movb @e,a                       ; LD A,E            ; 
       sb   @bytes+88,a                ; SUB $58           ; 
       ; JP P,$9593                    ; JP P,$9593        ; 
       neg a                           ; NEG               ; 
_9593:
       cb   a,@l                       ; CP L              ; 
       jl   _9597                      ; JR C,$9597        ; 
       ab   one,b                      ; INC B             ; 
_9597:
       movb d,a                        ; LD A,D            ; 
       sb   @bytes+104,a               ; SUB $68           ; 
       ; JP P,$959F                    ; JP P,$959F        ; 
       neg a                           ; NEG               ; 
_959f:
       cb   a,h                        ; CP H              ; 
       jl   _95a3                      ; JR C,$95A3        ; 
       ab   one,b                      ; INC B             ; 
_95a3:
       movb b,a                        ; LD A,B            ; 
       movb a,@_5e2d                   ; LD ($5E2D),A      ; 
       .pop de                         ; POP DE            ; Restore #REGde from the stack.
       .ret                            ; RET               ; Return.

* Routine at 95A9
* 
* Used by the routine at #R$8C63.
_95a9:
       li   hl,_eae8                   ; LD HL,$EAE8       ; #REGhl=#R$EAE8.
       li   de,>0008                   ; LD DE,$0008       ; #REGde=#N($0008, $04, $04).
       movb @bytes+4,b                 ; LD B,$04          ; #REGb=#N$04.
_95b1:
       movb *hl,a                      ; LD A,(HL)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _95b9                      ; JR Z,$95B9        ; 
       a    de,hl                      ; ADD HL,DE         ; 
       sb   one,b                      ; DJNZ $95B1        ; 
       jne  _95b1                      ;                   
       .ret                            ; RET               ; Return.
_95b9:
       movb @bytes+69,a                ; LD A,$45          ; #REGa=#N$45.
       movb a,@playerroom+4            ; LD ($EA95),A      ; 
       .push hl                        ; PUSH HL           ; 
       movb @bytes+143,*hl             ; LD (HL),$8F       ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       inc  de                         ; INC DE            ; 
       li   hl,playerroom              ; LD HL,$EA91       ; #REGhl=#R$EA91.
       li   bc,>0007                   ; LD BC,$0007       ; 
       .ldir                           ; LDIR              ; 
       .pop hl                         ; POP HL            ; 
* This entry point is used by the routine at #R$96EC.
_95cc:
       .push ix                        ; PUSH IX           ; 
       .push hl                        ; PUSH HL           ; 
       .pop ix                         ; POP IX            ; 
       .call @drawentity               ; CALL $9F4A        ; 
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; Return.
_95d7:
       b    @_92e0                     ; JP $92E0          ; 

* Clock Tick
* 
* Used by the routine at #R$7E7E.
clocktick:                             ; 95da
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; #HTML(#REGa=<a
                                                           ; href="https://skoolkid.github.io/rom/asm/5C78.html">FRAMES</a>.)
       cb   a,@bytes+50                ; CP $32            ; 
       jhe  !                          ; RET C             ; 
       .ret                            ;                   
!
       sb   @bytes+50,a                ; SUB $32           ; 
       movb a,@decryption_loop+241     ; LD ($5C78),A      ; 
       li   hl,clockseconds            ; LD HL,$5E3F       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   one,a                      ; INC A             ; 
       ; DAA                           ; DAA               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       cb   a,@bytes+96                ; CP $60            ; 
       jne  _9604                      ; JR NZ,$9604       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       dec  hl                         ; DEC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   one,a                      ; INC A             ; 
       ; DAA                           ; DAA               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       cb   a,@bytes+96                ; CP $60            ; 
       jne  _9604                      ; JR NZ,$9604       ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       dec  hl                         ; DEC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   one,a                      ; INC A             ; 
       ; DAA                           ; DAA               ; 
       andi a,15*256                   ; AND $0F           ; 
       movb a,*hl                      ; LD (HL),A         ; 
_9604:
       li   hl,_4080+72                ; LD HL,$40C8       ; 
* This entry point is used by the routine at #R$9641.
printclock:                            ; 9607
       .call @screenaddress            ; CALL $9BA2        ; 
       li   de,clockhours              ; LD DE,$5E3D       ; 
       movb @bytes+2,b                 ; LD B,$02          ; 
       .call @_a1c9                    ; CALL $A1C9        ; 
       li   de,clockseconds            ; LD DE,$5E3F       ; 
       inc  hl                         ; INC HL            ; 
       movb one,b                      ; LD B,$01          ; 
       b    @_a1bf                     ; JP $A1BF          ; 

* Handler: A.C.G. Door Exit
handlerdooracgexit:                    ; 961b
       li   hl,_5e32                   ; LD HL,$5E32       ; 
       li   de,>0004                   ; LD DE,$0004       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@bytes+140               ; CP $8C            ; 
       jne  _963b                      ; JR NZ,$963B       ; 
       a    de,hl                      ; ADD HL,DE         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@bytes+141               ; CP $8D            ; 
       jne  _963b                      ; JR NZ,$963B       ; 
       a    de,hl                      ; ADD HL,DE         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       cb   a,@bytes+142               ; CP $8E            ; 
       jne  _963b                      ; JR NZ,$963B       ; 
       .call @_954d                    ; CALL $954D        ; 
       li   bc,>3020                   ; LD BC,$3020       ; 
       b    @_91f5                     ; JP $91F5          ; 
_963b:
       .call @_9565                    ; CALL $9565        ; 
       b    @handlerroomitem           ; JP $91FE          ; 

* Show Game Statistics
* 
* Used by the routines at #R$8C35 and #R$96EC.
gamestats:                             ; 9641
       .call @calcroomsvisited         ; CALL $96C9        ; Call #R$96C9.
* Handle printing the time.
       li   hl,_4040                   ; LD HL,$4040       ; #REGhl=#N$4040 (screen buffer location).
       li   de,stringtime              ; LD DE,$967F       ; #REGde=#R$967F.
       .call @printstringcolour        ; CALL $A1F3        ; Call #R$A1F3.
* Handle printing the score.
       li   hl,_5040                   ; LD HL,$5040       ; #REGhl=#N$5040 (screen buffer location).
       li   de,stringscore             ; LD DE,$968F       ; #REGde=#R$968F.
       .call @printstringcolour        ; CALL $A1F3        ; Call #R$A1F3.
* Handle printing the money total.
       li   hl,initialisation_key_green+3 ; LD HL,$6040       ; #REGhl=#N$6040 (screen buffer location).
       li   de,stringmoney             ; LD DE,$969F       ; #REGde=#R$969F.
       .call @printstringcolour        ; CALL $A1F3        ; Call #R$A1F3.
* Handle printing the clock.
       li   hl,_bfcc                   ; LD HL,$BFCC       ; {Write #R$BFCC(main font "0") to
       mov  hl,@fontpointer            ; LD ($5E01),HL     ; #R$5E01.}
       li   hl,_4080                   ; LD HL,$4080       ; #REGhl=#N$4080 (screen buffer location).
       .call @printclock               ; CALL $9607        ; Call #R$9607.
* Handle printing the "visited percentage".
       li   hl,_5080                   ; LD HL,$5080       ; #REGhl=#N$5080 (screen buffer location).
       .call @printscore               ; CALL $A1B7        ; Call #R$A1B7.
       li   hl,initialisation_tombstone_4+3 ; LD HL,$6080       ; #REGhl=#N$6080 (screen buffer location).
       .call @screenaddress            ; CALL $9BA2        ; Call #R$9BA2.
       li   de,visitedpercentage       ; LD DE,$5E54       ; #REGde=#R$5E54.
       movb one,b                      ; LD B,$01          ; #REGb=#N$01.
       b    @_a1bf                     ; JP $A1BF          ; Jump to #R$A1BF.
stringtime:                            ; 967f
       text >45                                                      ; {Attribute: #N(#PEEK(#PC)) + "TIME".
       text 'TIME       #  ',' +>8'                                  ; }
stringscore:                           ; 968f
       text >45                                                      ; {Attribute: #N(#PEEK(#PC)) + "SCORE".
       text 'SCORE         ',' +>8'                                  ; }
stringmoney:                           ; 969f
       text >45                                                      ; {Attribute: #N(#PEEK(#PC)) + "".
       text '>             ',' +>8'                                  ; }

* Visit Room
* 
* Used by the routine at #R$9147.
* 
* A The room ID
* 
* Create an offset in #REGbc.
visitroom:                             ; 96af
       movb a,@c                       ; LD C,A            ; #REGc=#REGa.
       ; SRL C                         ; SRL C             ; {Divide by #N$08.
       ; SRL C                         ; SRL C             ; 
       ; SRL C                         ; SRL C             ; }
       sb   b,b                        ; LD B,$00          ; #REGb=#N$00.
       li   hl,visitedrooms            ; LD HL,$5E40       ; {#REGhl=#R$5E40 + #REGbc.
       a    bc,hl                      ; ADD HL,BC         ; }
       ; RLCA                          ; RLCA              ; {Multiply by #N$08.
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; }
       ; AND %00111000                 ; AND %00111000     ; Keep only bits 3-5.
       socb %11000110,a                ; OR %11000110      ; Set bits 1-2, 6-7.
       movb a,@visitroom+24            ; LD ($96C7),A      ; Write this value to #R$96C6(#N$96C7) which updates the
                                                           ; bit to set.
       socb @bits+0,*hl                ; SET 0,(HL)        ; With above, set the bit to mark the room as having been
                                                           ; visited.
       .ret                            ; RET               ; Return.

* Calculate Rooms Visited
* 
* Used by the routine at #R$9641.
calcroomsvisited:                      ; 96c9
       li   hl,visitedrooms            ; LD HL,$5E40       ; 
       li   bc,>0813                   ; LD BC,$0813       ; 
       movb @bytes+3,d                 ; LD D,$03          ; 
       sb   a,a                        ; XOR A             ; 
_96d2:
       .push bc                        ; PUSH BC           ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
_96d5:
       ; RR E                          ; RR E              ; 
       jnc  _96e1                      ; JR NC,$96E1       ; TODO: check code. 
       sb   one,d                      ; DEC D             ; 
       jne  _96e1                      ; JR NZ,$96E1       ; 
       movb @bytes+3,d                 ; LD D,$03          ; 
       ab   @bytes+2,a                 ; ADD A,$02         ; 
       ; DAA                           ; DAA               ; 
_96e1:
       sb   one,b                      ; DJNZ $96D5        ; 
       jne  _96d5                      ;                   
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _96d2                      ; JR NZ,$96D2       ; 
       ab   one,a                      ; INC A             ; 
       movb a,@visitedpercentage       ; LD ($5E54),A      ; 
       .ret                            ; RET               ; 

* Game Complete
* 
* Used by the routine at #R$7E23.
gamecomplete:                          ; 96ec
       li   hl,player                  ; LD HL,$EA90       ; #REGhl=#R$EA90.
       .call @_95cc                    ; CALL $95CC        ; 
       li   hl,mainfont                ; LD HL,$BE4C       ; {Write #R$BE4C to #R$5E01.
       mov  hl,@fontpointer            ; LD ($5E01),HL     ; }
* Handle printing "CONGRATULATIONS".
       li   hl,>2040                   ; LD HL,$2040       ; #REGhl=#N$2040 (screen buffer
                                                           ; location).
       li   de,_9710                   ; LD DE,$9710       ; #REGde=#R$9710.
       .call @printstringcolour        ; CALL $A1F3        ; Call #R$A1F3.
* Handle printing "YOU HAVE ESCAPED".
       li   hl,>3040                   ; LD HL,$3040       ; #REGhl=#N$3040 (screen buffer
                                                           ; location).
       li   de,_9720                   ; LD DE,$9720       ; #REGde=#R$9720.
       .call @printstringcolour        ; CALL $A1F3        ; Call #R$A1F3.
* Show the game statistics.
       .call @gamestats                ; CALL $9641        ; Call #R$9641.
* Disappointingly cut into the "normal" game over routine.
       b    @gameoverdelay             ; JP $8C4A          ; Jump to #R$8C4A.
* Congratulations messaging.
_9710:
       text >47                                                      ; {Attribute: #N(#PEEK(#PC)) +
       text 'CONGRATULATION','S+>8'                                  ; "CONGRATULATIONS".}
_9720:
       text >47                                                      ; {Attribute: #N(#PEEK(#PC)) + "YOU HAVE
       text 'YOU HAVE ESCAPE','D+>8'                                 ; ESCAPED".}
* This entry point is used by the routine at #R$91C5.
_9731:
       li   bc,>1818                   ; LD BC,$1818       ; 
       .call @_90cc                    ; CALL $90CC        ; 
       joc  !                          ; JP NC,$91FE       ; TODO: check code. 
       b    @handlerroomitem           ;                   
!
       .call @clearplayarea            ; CALL $8093        ; 
       movb @bytes+150,a               ; LD A,$96          ; 
       .push ix                        ; PUSH IX           ; 
       .call @_9bf1                    ; CALL $9BF1        ; 
       .pop ix                         ; POP IX            ; 
       movb @bytes+128,b               ; LD B,$80          ; 
_9748:
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       movb a,@c                       ; LD C,A            ; 
_974c:
       .push bc                        ; PUSH BC           ; 
       movb b,a                        ; LD A,B            ; 
       inv  a                          ; CPL               ; 
       movb a,b                        ; LD B,A            ; 
       .call @soundsclick              ; CALL $A3A8        ; 
       .pop bc                         ; POP BC            ; 
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       cb   a,@c                       ; CP C              ; 
       jeq  _974c                      ; JR Z,$974C        ; 
       andi a,7*256                    ; AND $07           ; 
       sb   a,a                        ; LD A,$00          ; 
       jne  _9762                      ; JR NZ,$9762       ; 
       movb @bytes+71,a                ; LD A,$47          ; 
_9762:
       movb a,@l                       ; LD L,A            ; 
       movb a,h                        ; LD H,A            ; 
       mov  hl,@_5800+363              ; LD ($596B),HL     ; 
       mov  hl,@_5800+395              ; LD ($598B),HL     ; 
       .push bc                        ; PUSH BC           ; 
       .call @_9774                    ; CALL $9774        ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DJNZ $9748        ; 
       jne  _9748                      ;                   
       b    @_9117                     ; JP $9117          ; 
_9774:
       li   bc,>170b                   ; LD BC,$170B       ; 
       li   hl,_5ae0                   ; LD HL,$5AE0       ; 
       li   de,>0020                   ; LD DE,$0020       ; 
_977d:
       .push hl                        ; PUSH HL           ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       ab   one,@l                     ; INC L             ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       .pop hl                         ; POP HL            ; 
       .push bc                        ; PUSH BC           ; 
_9785:
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9785        ; 
       jne  _9785                      ;                   
       .pop bc                         ; POP BC            ; 
       .push bc                        ; PUSH BC           ; 
_978b:
       movb a,*hl                      ; LD (HL),A         ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       sb   one,b                      ; DJNZ $978B        ; 
       jne  _978b                      ;                   
       .pop bc                         ; POP BC            ; 
       .push bc                        ; PUSH BC           ; 
_9793:
       movb a,*hl                      ; LD (HL),A         ; 
       sb   one,@l                     ; DEC L             ; 
       sb   one,b                      ; DJNZ $9793        ; 
       jne  _9793                      ;                   
       .pop bc                         ; POP BC            ; 
       .push bc                        ; PUSH BC           ; 
_9799:
       movb a,*hl                      ; LD (HL),A         ; 
       a    de,hl                      ; ADD HL,DE         ; 
       sb   one,b                      ; DJNZ $9799        ; 
       jne  _9799                      ;                   
       movb a,*hl                      ; LD (HL),A         ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       ab   one,@l                     ; INC L             ; 
       .pop bc                         ; POP BC            ; 
       sb   one,b                      ; DEC B             ; 
       sb   one,b                      ; DEC B             ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _977d                      ; JR NZ,$977D       ; 
       .ret                            ; RET               ; 
       movb h,@e                       ; LD E,H            ; 
       movb @e,h                       ; LD H,E            ; 
       movb @e,h                       ; LD H,E            ; 
       movb @e,h                       ; LD H,E            ; 
       movb @e,h                       ; LD H,E            ; 
       movb h,@e                       ; LD E,H            ; 
       movb h,@e                       ; LD E,H            ; 
       movb h,@e                       ; LD E,H            ; 
       movb h,d                        ; LD D,H            ; 
       movb @e,@l                      ; LD L,E            ; 
       movb @e,@l                      ; LD L,E            ; 
       movb @e,@l                      ; LD L,E            ; 
       movb @e,@l                      ; LD L,E            ; 
       movb h,d                        ; LD D,H            ; 
       movb h,d                        ; LD D,H            ; 
       movb h,d                        ; LD D,H            ; 
       movb h,@c                       ; LD C,H            ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       movb h,@c                       ; LD C,H            ; 
       movb h,@c                       ; LD C,H            ; 
       movb h,@c                       ; LD C,H            ; 
       movb h,b                        ; LD B,H            ; 
       movb @e,a                       ; LD A,E            ; 
       movb @e,a                       ; LD A,E            ; 
       movb @e,a                       ; LD A,E            ; 
       movb @e,a                       ; LD A,E            ; 
       movb h,b                        ; LD B,H            ; 
       movb h,b                        ; LD B,H            ; 
       movb h,b                        ; LD B,H            ; 
       ab   one,a                      ; INC A             ; 
       ab   @e,a                       ; ADD A,E           ; 
       ab   @e,a                       ; ADD A,E           ; 
       ab   @e,a                       ; ADD A,E           ; 
       ab   @e,a                       ; ADD A,E           ; 
       ab   one,a                      ; INC A             ; 
       ab   one,a                      ; INC A             ; 
       ab   one,a                      ; INC A             ; 
       ab   one,*hl                    ; INC (HL)          ; 
       ab   @e,a                       ; ADC A,E           ; 
       ab   @e,a                       ; ADC A,E           ; 
       ab   @e,a                       ; ADC A,E           ; 
       ab   @e,a                       ; ADC A,E           ; 
       ab   one,*hl                    ; INC (HL)          ; 
       ab   one,*hl                    ; INC (HL)          ; 
       ab   one,*hl                    ; INC (HL)          ; 
       ab   one,@l                     ; INC L             ; 
       sb   @e,a                       ; SUB E             ; 
       sb   @e,a                       ; SUB E             ; 
       sb   @e,a                       ; SUB E             ; 
       sb   @e,a                       ; SUB E             ; 
       ab   one,@l                     ; INC L             ; 
       ab   one,@l                     ; INC L             ; 
       ab   one,@l                     ; INC L             ; 
       ab   one,h                      ; INC H             ; 
       sb   @e,a                       ; SBC A,E           ; 
       sb   @e,a                       ; SBC A,E           ; 
       sb   @e,a                       ; SBC A,E           ; 
       sb   @e,a                       ; SBC A,E           ; 
       ab   one,h                      ; INC H             ; 
       ab   one,h                      ; INC H             ; 
       ab   one,h                      ; INC H             ; 
       ab   one,@e                     ; INC E             ; 
       ; AND E                         ; AND E             ; 
       ; AND E                         ; AND E             ; 
       ; AND E                         ; AND E             ; 
       ; AND E                         ; AND E             ; 
       ab   one,@e                     ; INC E             ; 
       ab   one,@e                     ; INC E             ; 
       ab   one,@e                     ; INC E             ; 
       ab   one,d                      ; INC D             ; 
       ; XOR E                         ; XOR E             ; 
       ; XOR E                         ; XOR E             ; 
       ; XOR E                         ; XOR E             ; 
       ; XOR E                         ; XOR E             ; 
       ab   one,d                      ; INC D             ; 
       ab   one,d                      ; INC D             ; 
       ab   one,d                      ; INC D             ; 
       ab   one,@c                     ; INC C             ; 
       socb @e,a                       ; OR E              ; 
       socb @e,a                       ; OR E              ; 
       socb @e,a                       ; OR E              ; 
       socb @e,a                       ; OR E              ; 
       ab   one,@c                     ; INC C             ; 
       ab   one,@c                     ; INC C             ; 
       ab   one,@c                     ; INC C             ; 
       ab   one,b                      ; INC B             ; 
       cb   a,@e                       ; CP E              ; 
       cb   a,@e                       ; CP E              ; 
       cb   a,@e                       ; CP E              ; 
       cb   a,@e                       ; CP E              ; 
       ab   one,b                      ; INC B             ; 
       ab   one,b                      ; INC B             ; 
       ab   one,b                      ; INC B             ; 
       nop                             ; NOP               ; 
       li   bc,65283                   ; LD BC,$FF03       ; 
       movb a,*bc                      ; LD (BC),A         ; 
       li   bc,65283                   ; LD BC,$FF03       ; 
       ab   one,b                      ; INC B             ; 
       sb   one,b                      ; DEC B             ; 
       ; RLCA                          ; RLCA              ; 
       ; RST $38                       ; RST $38           ; 
       movb @bytes+5,b                 ; LD B,$05          ; 
       ; RLCA                          ; RLCA              ; 
       ; RST $38                       ; RST $38           ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       dec  bc                         ; DEC BC            ; 
       ; RST $38                       ; RST $38           ; 
       movb *bc,a                      ; LD A,(BC)         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       dec  bc                         ; DEC BC            ; 
       ; RST $38                       ; RST $38           ; 
       ab   one,@c                     ; INC C             ; 
       sb   one,@c                     ; DEC C             ; 
       ; RRCA                          ; RRCA              ; 
       ; RST $38                       ; RST $38           ; 
       movb @bytes+13,@c               ; LD C,$0D          ; 
       ; RRCA                          ; RRCA              ; 
       ; RST $38                       ; RST $38           ; 
       sb   one,b                      ; DJNZ $983C        ; 
       jne  _983c                      ;                   
       inc  de                         ; INC DE            ; 
       ; RST $38                       ; RST $38           ; 
       movb a,*de                      ; LD (DE),A         ; 
       li   de,65299                   ; LD DE,$FF13       ; 
       ab   one,d                      ; INC D             ; 
       sb   one,d                      ; DEC D             ; 
       ; RLA                           ; RLA               ; 
       ; RST $38                       ; RST $38           ; 
       movb @bytes+21,d                ; LD D,$15          ; 
       ; RLA                           ; RLA               ; 
       ; RST $38                       ; RST $38           ; 
       jmp  _9854                      ; JR $9854          ; 
       dec  de                         ; DEC DE            ; 
_983c:
       ; RST $38                       ; RST $38           ; 
       movb *de,a                      ; LD A,(DE)         ; 
       a    de,hl                      ; ADD HL,DE         ; 
       dec  de                         ; DEC DE            ; 
       ; RST $38                       ; RST $38           ; 
       ab   one,@e                     ; INC E             ; 
       sb   one,@e                     ; DEC E             ; 
       ; RRA                           ; RRA               ; 
       ; RST $38                       ; RST $38           ; 
       movb @bytes+29,@e               ; LD E,$1D          ; 
       ; RRA                           ; RRA               ; 
       ; RST $38                       ; RST $38           ; 
       jne  _986a+2                    ; JR NZ,$986C       ; 
       inc  hl                         ; INC HL            ; 
       ; RST $38                       ; RST $38           ; 
       mov  hl,@8993                   ; LD ($2321),HL     ; 
       ; RST $38                       ; RST $38           ; 
       ab   one,h                      ; INC H             ; 
       sb   one,h                      ; DEC H             ; 
       ; DAA                           ; DAA               ; 
_9854:
       ; RST $38                       ; RST $38           ; 
       movb @bytes+37,h                ; LD H,$25          ; 
       ; DAA                           ; DAA               ; 
       ; RST $38                       ; RST $38           ; 
       jeq  _9884                      ; JR Z,$9884        ; 
       dec  hl                         ; DEC HL            ; 
       ; RST $38                       ; RST $38           ; 
       mov  @11049,hl                  ; LD HL,($2B29)     ; 
       ; RST $38                       ; RST $38           ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,@l                     ; DEC L             ; 
       inv  a                          ; CPL               ; 
       ; RST $38                       ; RST $38           ; 
       movb @bytes+45,@l               ; LD L,$2D          ; 
       inv  a                          ; CPL               ; 
       ; RST $38                       ; RST $38           ; 
       ; RST $38                       ; RST $38           ; 
* This entry point is used by the routine at #R$8F66.
_986a:
       movb @5(ix),a                   ; LD A,(IX+$05)     ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       andi a,6*256                    ; AND $06           ; 
       movb a,@c                       ; LD C,A            ; 
       sb   b,b                        ; LD B,$00          ; 
       li   hl,_9883                   ; LD HL,$9883       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb a,@playerroom+5            ; LD ($EA96),A      ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       movb a,@playerroom+6            ; LD ($EA97),A      ; 
       .ret                            ; RET               ; 
_9883:
       nop                             ; NOP               ; 
_9884:
       jne  _9854+18                   ; JR NZ,$9866       ; 
       nop                             ; NOP               ; 
       nop                             ; NOP               ; 
       ; RET PO                        ; RET PO            ; 
       jne  _988b                      ; JR NZ,$988B       ; 
_988b:
       .call @storeentity              ; CALL $9FFB        ; 
       .call @_90fb                    ; CALL $90FB        ; 
       joc  _98b1                      ; JR C,$98B1        ; TODO: check code. 
_9893:
       movb @counterlow,a              ; LD A,($5E12)      ; 
       inv  a                          ; CPL               ; 
       andi a,3*256                    ; AND $03           ; 
       jne  _989e                      ; JR NZ,$989E       ; 
       ab   one,@6(ix)                 ; INC (IX+$06)      ; 
_989e:
       movb @6(ix),a                   ; LD A,(IX+$06)     ; 
       andi a,3*256                    ; AND $03           ; 
       movb a,@c                       ; LD C,A            ; 
       sb   b,b                        ; LD B,$00          ; 
       li   hl,_98c4                   ; LD HL,$98C4       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       b    @_92e0                     ; JP $92E0          ; 
_98b1:
       movb @playerenergy,a            ; LD A,($5E28)      ; 
       sb   one,a                      ; DEC A             ; 
       movb a,@playerenergy            ; LD ($5E28),A      ; 
       jne  !                          ; JP Z,$98C8        ; 
       b    @_98c8                     ;                   
!
       .call @drawchicken              ; CALL $8B8A        ; 
       .call @soundstouching           ; CALL $A3E5        ; 
       b    @_9893                     ; JP $9893          ; 
_98c4:
       movb d,b                        ; LD B,D            ; 
       movb @e,b                       ; LD B,E            ; 
       movb *hl,b                      ; LD B,(HL)         ; 
       movb @e,b                       ; LD B,E            ; 
_98c8:
       .call @removeentity             ; CALL $9F56        ; 
       sb   *ix,*ix                    ; LD (IX+$00),$00   ; 
       b    @_8ea0                     ; JP $8EA0          ; 

* Set Key Positions
* 
* Used by the routine at #R$7D9A.
setkeypositions:                       ; 98d2
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       li   hl,_990c                   ; LD HL,$990C       ; 
       .call @_9904                    ; CALL $9904        ; 
       movb a,@initialisation_key_green+1 ; LD ($603E),A      ; 
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @counterlow,a              ; LD A,($5E12)      ; 
       ab   @c,a                       ; ADD A,C           ; 
       li   hl,_990c+8                 ; LD HL,$9914       ; 
       .call @_9904                    ; CALL $9904        ; 
       movb a,@initialisation_key_red+1 ; LD ($6046),A      ; 
       movb a,@initialisation_mummy+1  ; LD ($640E),A      ; 
       movb @decryption_loop+242,a     ; LD A,($5C79)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @counterhigh,a             ; LD A,($5E13)      ; 
       ab   @c,a                       ; ADD A,C           ; 
       li   hl,_991c                   ; LD HL,$991C       ; 
       .call @_9904                    ; CALL $9904        ; 
       movb a,@initialisation_key_cyan+1 ; LD ($604E),A      ; 
       .ret                            ; RET               ; 
_9904:
       andi a,7*256                    ; AND $07           ; 
       movb a,@c                       ; LD C,A            ; 
       sb   b,b                        ; LD B,$00          ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       .ret                            ; RET               ; 
_990c:
       sb   one,b                      ; DEC B             ; 
       movb @bytes+7,b                 ; LD B,$07          ; 
       movb @l,@l                      ; LD L,L            ; 
       sb   one,h                      ; DEC H             ; 
       ab   one,h                      ; INC H             ; 
       inc  hl                         ; INC HL            ; 
       mov  hl,@4887                   ; LD ($1317),HL     ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       sb   one,@c                     ; DEC C             ; 
       ab   @c,a                       ; ADC A,C           ; 
       ab   a,a                        ; ADD A,A           ; 
       ab   b,a                        ; ADD A,B           ; 
       ab   @l,a                       ; ADD A,L           ; 
_991c:
       movb @e,d                       ; LD D,E            ; 
       ab   a,a                        ; ADC A,A           ; 
       movb @c,b                       ; LD B,C            ; 
       sb   h,a                        ; SUB H             ; 
       inc  sp                         ; INC SP            ; 
       sb   @c,a                       ; SUB C             ; 
       a    sp,hl                      ; ADD HL,SP         ; 
       movb h,@c                       ; LD C,H            ; 
* This entry point is used by the routine at #R$7E23.
_9924:
       movb @counterlow,a              ; LD A,($5E12)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @counterhigh,a             ; LD A,($5E13)      ; 
       andi a,1*256                    ; AND $01           ; 
       socb @c,a                       ; OR C              ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       mov  @foodpointer,hl            ; LD HL,($5E55)     ; 
       li   de,>0008                   ; LD DE,$0008       ; 
       a    de,hl                      ; ADD HL,DE         ; 
       mov  hl,@foodpointer            ; LD ($5E55),HL     ; 
       .push hl                        ; PUSH HL           ; 
       .pop ix                         ; POP IX            ; 
       li   de,_edd8                   ; LD DE,$EDD8       ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       jnc  _995b                      ; JR NC,$995B       ; TODO: check code. 
       movb @playerroom,a              ; LD A,($EA91)      ; 
       cb   a,@1(ix)                   ; CP (IX+$01)       ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       ; AND A                         ; AND A             ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @decryption_loop+241,a     ; LD A,($5C78)      ; 
       andi a,7*256                    ; AND $07           ; 
       ab   @bytes+80,a                ; ADD A,$50         ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       .ret                            ; RET               ; 
_995b:
       li   hl,fooditems               ; LD HL,$EB58       ; 
       mov  hl,@foodpointer            ; LD ($5E55),HL     ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$91FE.
_9962:
       li   hl,_9970                   ; LD HL,$9970       ; 
_9965:
       .push bc                        ; PUSH BC           ; 
       movb b,a                        ; LD A,B            ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       andi a,7*256                    ; AND $07           ; 
       movb a,@c                       ; LD C,A            ; 
       b    @_7e85                     ; JP $7E85          ; 
_9970:
       .ret                            ; RET               ; 
       sb   @c,a                       ; SBC A,C           ; 
       .push hl                        ; PUSH HL           ; 
       sb   @c,a                       ; SBC A,C           ; 
       movb *bc,a                      ; LD A,(BC)         ; 
       sb   d,a                        ; SBC A,D           ; 
       movb b,d                        ; LD D,B            ; 
       sb   d,a                        ; SBC A,D           ; 
       szcb @bits+3,d                  ; RES 3,D           ; 
       ; RST $28                       ; RST $28           ; 
       sb   d,a                        ; SBC A,D           ; 
       ab   one,d                      ; INC D             ; 
       sb   @e,a                       ; SBC A,E           ; 
       movb @l,@e                      ; LD E,L            ; 
       sb   @e,a                       ; SBC A,E           ; 
* This entry point is used by the routine at #R$91FE.
_9980:
       li   hl,_9985                   ; LD HL,$9985       ; 
       jmp  _9965                      ; JR $9965          ; 
_9985:
       sb   one,h                      ; DEC H             ; 
       sb   @l,a                       ; SBC A,L           ; 
       movb a,b                        ; LD B,A            ; 
       sb   @l,a                       ; SBC A,L           ; 
       movb a,@l                       ; LD L,A            ; 
       sb   @l,a                       ; SBC A,L           ; 
       ; AND B                         ; AND B             ; 
       sb   @l,a                       ; SBC A,L           ; 
       ab   @bytes+157,a               ; ADC A,$9D         ; 
       ; RET M                         ; RET M             ; 
       sb   @l,a                       ; SBC A,L           ; 
       li   hl,_5080+1310              ; LD HL,$559E       ; 
       sb   *hl,a                      ; SBC A,(HL)        ; 
_9995:
       li   hl,graphicstable           ; LD HL,$A600       ; 
       sb   one,@c                     ; DEC C             ; 
       sb   b,b                        ; LD B,$00          ; 
       ; SLA C                         ; SLA C             ; 
       ; RL B                          ; RL B              ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; 
       movb a,@l                       ; LD L,A            ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .call @screenaddress            ; CALL $9BA2        ; 
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,b                        ; LD B,A            ; 
       inc  de                         ; INC DE            ; 
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,@c                       ; LD C,A            ; 
       inc  de                         ; INC DE            ; 
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$9D25, #R$9D47, #R$9D6F,
* #R$9DA0, #R$9DCE, #R$9DF8, #R$9E21 and #R$9E55.
_99af:
       li   hl,graphicsattributestable ; LD HL,$A64E       ; 
       sb   one,@c                     ; DEC C             ; 
       sb   b,b                        ; LD B,$00          ; 
       ; SLA C                         ; SLA C             ; 
       ; RL B                          ; RL B              ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; 
       movb a,@l                       ; LD L,A            ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .call @attributeaddress         ; CALL $9BD2        ; 
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,b                        ; LD B,A            ; 
       inc  de                         ; INC DE            ; 
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,@c                       ; LD C,A            ; 
       inc  de                         ; INC DE            ; 
       .ret                            ; RET               ; 
       .pop bc                         ; POP BC            ; 
       .call @getblendinstruction      ; CALL $9D19        ; 
       movb a,@_99d7                   ; LD ($99D7),A      ; 
       .call @_9995                    ; CALL $9995        ; 
_99d3:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
_99d5:
       movb *de,a                      ; LD A,(DE)         ; 
       inc  de                         ; INC DE            ; 
_99d7:
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $99D5        ; 
       jne  _99d5                      ;                   
       .pop hl                         ; POP HL            ; 
       .call @_9f03                    ; CALL $9F03        ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _99d3                      ; JR NZ,$99D3       ; 
       .ret                            ; RET               ; 
       .pop bc                         ; POP BC            ; 
       .call @getblendinstruction      ; CALL $9D19        ; 
       movb a,@_99f9                   ; LD ($99F9),A      ; 
       .call @_9995                    ; CALL $9995        ; 
_99ef:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       .call @_9a9d                    ; CALL $9A9D        ; 
_99f4:
       dec  de                         ; DEC DE            ; 
       movb *de,a                      ; LD A,(DE)         ; 
       .call @_9a92                    ; CALL $9A92        ; 
_99f9:
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $99F4        ; 
       jne  _99f4                      ;                   
       .pop hl                         ; POP HL            ; 
       .call @_9f03                    ; CALL $9F03        ; 
       .pop bc                         ; POP BC            ; 
       .call @_9a9d                    ; CALL $9A9D        ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _99ef                      ; JR NZ,$99EF       ; 
       .ret                            ; RET               ; 
       .pop bc                         ; POP BC            ; 
       .call @getblendinstruction      ; CALL $9D19        ; 
       movb a,@_9a36                   ; LD ($9A36),A      ; 
       .call @_9995                    ; CALL $9995        ; 
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb one,@l                     ; LD L,$01          ; 
       movb a,b                        ; LD B,A            ; 
       .exx                            ; EXX               ; 
       .call @_9a9d                    ; CALL $9A9D        ; 
       dec  de                         ; DEC DE            ; 
_9a1e:
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
_9a21:
       movb *de,a                      ; LD A,(DE)         ; 
       .exx                            ; EXX               ; 
       ; AND L                         ; AND L             ; 
       jeq  _9a27                      ; JR Z,$9A27        ; 
       ; SCF                           ; SCF               ; 
_9a27:
       ; RL H                          ; RL H              ; 
       .exx                            ; EXX               ; 
       .call @_9a9d                    ; CALL $9A9D        ; 
       sb   one,@c                     ; DEC C             ; 
       movb @c,a                       ; LD A,C            ; 
       andi a,7*256                    ; AND $07           ; 
       jne  _9a21                      ; JR NZ,$9A21       ; 
       .exx                            ; EXX               ; 
       movb h,a                        ; LD A,H            ; 
       .exx                            ; EXX               ; 
_9a36:
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jne  _9a21                      ; JR NZ,$9A21       ; 
       .pop hl                         ; POP HL            ; 
       .call @_9f03                    ; CALL $9F03        ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .exx                            ; EXX               ; 
       sra  @l,1                       ; RLC L             ; 
       .exx                            ; EXX               ; 
       jnc  _9a1e                      ; JR NC,$9A1E       ; TODO: check code. 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       dec  de                         ; DEC DE            ; 
       jmp  _9a1e                      ; JR $9A1E          ; 
       .pop bc                         ; POP BC            ; 
       .call @getblendinstruction      ; CALL $9D19        ; 
       movb a,@_9a78                   ; LD ($9A78),A      ; 
       .call @_9995                    ; CALL $9995        ; 
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       movb @bytes+128,@l              ; LD L,$80          ; 
       .exx                            ; EXX               ; 
_9a60:
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
_9a63:
       movb *de,a                      ; LD A,(DE)         ; 
       .exx                            ; EXX               ; 
       ; AND L                         ; AND L             ; 
       jeq  _9a69                      ; JR Z,$9A69        ; 
       ; SCF                           ; SCF               ; 
_9a69:
       ; RL H                          ; RL H              ; 
       .exx                            ; EXX               ; 
       .call @_9a9d                    ; CALL $9A9D        ; 
       sb   one,@c                     ; DEC C             ; 
       movb @c,a                       ; LD A,C            ; 
       andi a,7*256                    ; AND $07           ; 
       jne  _9a63                      ; JR NZ,$9A63       ; 
       .exx                            ; EXX               ; 
       movb h,a                        ; LD A,H            ; 
       .exx                            ; EXX               ; 
_9a78:
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jne  _9a63                      ; JR NZ,$9A63       ; 
       .pop hl                         ; POP HL            ; 
       .call @_9f03                    ; CALL $9F03        ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .exx                            ; EXX               ; 
       ; RRC L                         ; RRC L             ; 
       .exx                            ; EXX               ; 
       jnc  _9a60                      ; JR NC,$9A60       ; TODO: check code. 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       inc  de                         ; INC DE            ; 
       jmp  _9a60                      ; JR $9A60          ; 
_9a92:
       .push bc                        ; PUSH BC           ; 
       movb @bytes+8,b                 ; LD B,$08          ; 
_9a95:
       ; RLA                           ; RLA               ; 
       ; RR C                          ; RR C              ; 
       sb   one,b                      ; DJNZ $9A95        ; 
       jne  _9a95                      ;                   
       movb @c,a                       ; LD A,C            ; 
       .pop bc                         ; POP BC            ; 
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$9D47, #R$9D6F, #R$9DA0,
* #R$9DF8 and #R$9E21.
_9a9d:
       movb b,a                        ; LD A,B            ; 
       ab   @e,a                       ; ADD A,E           ; 
       movb a,@e                       ; LD E,A            ; 
       movb d,a                        ; LD A,D            ; 
       ab   @zero,a                    ; ADC A,$00         ; 
       movb a,d                        ; LD D,A            ; 
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$9DCE, #R$9E21 and #R$9E55.
_9aa5:
       movb @e,a                       ; LD A,E            ; 
       sb   b,a                        ; SUB B             ; 
       movb a,@e                       ; LD E,A            ; 
       movb d,a                        ; LD A,D            ; 
       sb   @zero,a                    ; SBC A,$00         ; 
       movb a,d                        ; LD D,A            ; 
       .ret                            ; RET               ; 
* This entry point is used by the routine at #R$8B8A.
_9aad:
       li   hl,>0000                   ; LD HL,$0000       ; 
       movb @bytes+8,b                 ; LD B,$08          ; 
_9ab2:
       a    hl,hl                      ; ADD HL,HL         ; 
       ; RLCA                          ; RLCA              ; 
       jnc  _9ab7                      ; JR NC,$9AB7       ; TODO: check code. 
       a    de,hl                      ; ADD HL,DE         ; 
_9ab7:
       sb   one,b                      ; DJNZ $9AB2        ; 
       jne  _9ab2                      ;                   
       .ret                            ; RET               ; 
* This entry point is used by the routines at #R$9DCE, #R$9DF8, #R$9E21 and
* #R$9E55.
_9aba:
       .push hl                        ; PUSH HL           ; 
       .push de                        ; PUSH DE           ; 
       movb b,a                        ; LD A,B            ; 
       movb @c,@e                      ; LD E,C            ; 
       sb   one,@e                     ; DEC E             ; 
       sb   d,d                        ; LD D,$00          ; 
       .push bc                        ; PUSH BC           ; 
       .call @_9aad                    ; CALL $9AAD        ; 
       .pop bc                         ; POP BC            ; 
       .pop de                         ; POP DE            ; 
       a    de,hl                      ; ADD HL,DE         ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .pop hl                         ; POP HL            ; 
       .ret                            ; RET               ; 
       .pop bc                         ; POP BC            ; 
       .call @getblendinstruction      ; CALL $9D19        ; 
       movb a,@_9add                   ; LD ($9ADD),A      ; 
       .call @_9995                    ; CALL $9995        ; 
       .call @_9aba                    ; CALL $9ABA        ; 
_9ad8:
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
_9adb:
       movb *de,a                      ; LD A,(DE)         ; 
       inc  de                         ; INC DE            ; 
_9add:
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9ADB        ; 
       jne  _9adb                      ;                   
       .pop hl                         ; POP HL            ; 
       .call @_9f03                    ; CALL $9F03        ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .call @_9aa5                    ; CALL $9AA5        ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _9ad8                      ; JR NZ,$9AD8       ; 
       .ret                            ; RET               ; 
       .pop bc                         ; POP BC            ; 
       .call @getblendinstruction      ; CALL $9D19        ; 
       movb a,@_9b06                   ; LD ($9B06),A      ; 
       .call @_9995                    ; CALL $9995        ; 
       .call @_9aba                    ; CALL $9ABA        ; 
       .call @_9a9d                    ; CALL $9A9D        ; 
_9aff:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
_9b01:
       dec  de                         ; DEC DE            ; 
       movb *de,a                      ; LD A,(DE)         ; 
       .call @_9a92                    ; CALL $9A92        ; 
_9b06:
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9B01        ; 
       jne  _9b01                      ;                   
       .pop hl                         ; POP HL            ; 
       .call @_9f03                    ; CALL $9F03        ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _9aff                      ; JR NZ,$9AFF       ; 
       .ret                            ; RET               ; 
       .pop bc                         ; POP BC            ; 
       .call @getblendinstruction      ; CALL $9D19        ; 
       movb a,@_9b43                   ; LD ($9B43),A      ; 
       .call @_9995                    ; CALL $9995        ; 
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       movb one,@l                     ; LD L,$01          ; 
       .exx                            ; EXX               ; 
       .call @_9a9d                    ; CALL $9A9D        ; 
       dec  de                         ; DEC DE            ; 
       .call @_9aba                    ; CALL $9ABA        ; 
_9b2b:
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
_9b2e:
       movb *de,a                      ; LD A,(DE)         ; 
       .exx                            ; EXX               ; 
       ; AND L                         ; AND L             ; 
       jeq  _9b34                      ; JR Z,$9B34        ; 
       ; SCF                           ; SCF               ; 
_9b34:
       ; RL H                          ; RL H              ; 
       .exx                            ; EXX               ; 
       .call @_9aa5                    ; CALL $9AA5        ; 
       sb   one,@c                     ; DEC C             ; 
       movb @c,a                       ; LD A,C            ; 
       andi a,7*256                    ; AND $07           ; 
       jne  _9b2e                      ; JR NZ,$9B2E       ; 
       .exx                            ; EXX               ; 
       movb h,a                        ; LD A,H            ; 
       .exx                            ; EXX               ; 
_9b43:
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jne  _9b2e                      ; JR NZ,$9B2E       ; 
       .pop hl                         ; POP HL            ; 
       .call @_9f03                    ; CALL $9F03        ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .exx                            ; EXX               ; 
       sra  @l,1                       ; RLC L             ; 
       .exx                            ; EXX               ; 
       jnc  _9b2b                      ; JR NC,$9B2B       ; TODO: check code. 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       dec  de                         ; DEC DE            ; 
       jmp  _9b2b                      ; JR $9B2B          ; 
       .pop bc                         ; POP BC            ; 
       .call @getblendinstruction      ; CALL $9D19        ; 
       movb a,@_9b88                   ; LD ($9B88),A      ; 
       .call @_9995                    ; CALL $9995        ; 
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       movb @bytes+128,@l              ; LD L,$80          ; 
       .exx                            ; EXX               ; 
       .call @_9aba                    ; CALL $9ABA        ; 
_9b70:
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
_9b73:
       movb *de,a                      ; LD A,(DE)         ; 
       .exx                            ; EXX               ; 
       ; AND L                         ; AND L             ; 
       jeq  _9b79                      ; JR Z,$9B79        ; 
       ; SCF                           ; SCF               ; 
_9b79:
       ; RL H                          ; RL H              ; 
       .exx                            ; EXX               ; 
       .call @_9aa5                    ; CALL $9AA5        ; 
       sb   one,@c                     ; DEC C             ; 
       movb @c,a                       ; LD A,C            ; 
       andi a,7*256                    ; AND $07           ; 
       jne  _9b73                      ; JR NZ,$9B73       ; 
       .exx                            ; EXX               ; 
       movb h,a                        ; LD A,H            ; 
       .exx                            ; EXX               ; 
_9b88:
       nop                             ; NOP               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jne  _9b73                      ; JR NZ,$9B73       ; 
       .pop hl                         ; POP HL            ; 
       .call @_9f03                    ; CALL $9F03        ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .exx                            ; EXX               ; 
       ; RRC L                         ; RRC L             ; 
       .exx                            ; EXX               ; 
       jnc  _9b70                      ; JR NC,$9B70       ; TODO: check code. 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       inc  de                         ; INC DE            ; 
       jmp  _9b70                      ; JR $9B70          ; 

* Calculate Screen Address
* 
* Used by the routines at #R$7D8A, #R$8B8A, #R$95DA, #R$9641, #R$98D2, #R$9BEA,
* #R$9F80, #R$9F9F, #R$A185, #R$A19C, #R$A1F3 and #R$A219.
screenaddress:                         ; 9ba2
       movb @l,a                       ; LD A,L            ; #REGa=#REGl.
       ; RRCA                          ; RRCA              ; {#REGa=#REGa / #N$08.
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; }
       ; AND %00011111                 ; AND %00011111     ; Keep only bits 0-4.
       movb a,@l                       ; LD L,A            ; #REGl=#REGa.
       movb h,a                        ; LD A,H            ; #REGa=#REGh.
       ; RLCA                          ; RLCA              ; {#REGa=#REGa * #N$04.
       ; RLCA                          ; RLCA              ; }
       ; AND %11100000                 ; AND %11100000     ; Keep only bits 5-7.
       socb @l,a                       ; OR L              ; 
       movb a,@l                       ; LD L,A            ; #REGl=#REGa.
       movb h,a                        ; LD A,H            ; #REGa=#REGh.
       ; AND %00000111                 ; AND %00000111     ; Keep only bits 0-2.
       .ex_af_af'                      ; EX AF,AF'         ; Switch to the shadow #REGaf register.
       movb h,a                        ; LD A,H            ; #REGa=#REGh.
       ; RRCA                          ; RRCA              ; {#REGa=#REGa / #N$08.
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; }
       ; AND %00011000                 ; AND %00011000     ; Keep only bits 3-4.
       socb %01000000,a                ; OR %01000000      ; Set bit 6.
       movb a,h                        ; LD H,A            ; #REGh=#REGa.
       .ex_af_af'                      ; EX AF,AF'         ; Switch to the shadow #REGaf register.
       socb h,a                        ; OR H              ; 
       movb a,h                        ; LD H,A            ; #REGh=#REGa.
       .ret                            ; RET               ; Return.
* View the equivalent code in;
* #LIST
* { #COOKIE$76E3 }
* { #JETPAC$7308 }
* { #LUNARJETMAN$851E }
* { #PSSST$759A }
* { #TRANZAM$6F10 }
* LIST#

* Routine at 9BC1
       ab   one,h                      ; INC H             ; 
       movb h,a                        ; LD A,H            ; 
       andi a,7*256                    ; AND $07           ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @l,a                       ; LD A,L            ; 
       ab   @bytes+32,a                ; ADD A,$20         ; 
       movb a,@l                       ; LD L,A            ; 
       andi a,224*256                  ; AND $E0           ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       movb h,a                        ; LD A,H            ; 
       sb   @bytes+8,a                 ; SUB $08           ; 
       movb a,h                        ; LD H,A            ; 
       .ret                            ; RET               ; 

* Calculate Attribute Address
* 
* Used by the routines at #R$7D8A, #R$8C63, #R$98D2, #R$A00E, #R$A1F3 and
* #R$A240.
* 
* HL Pixel address co-ordinates
* O:HL Attribute buffer address
* 
* Converts a given pixel address to the associated attribute buffer address.
attributeaddress:                      ; 9bd2
       .push bc                        ; PUSH BC           ; Stash #REGbc on the stack.
       movb @l,a                       ; LD A,L            ; Horizontal co-ordinate.
       ; RRCA                          ; RRCA              ; {Divide by #N08.
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; }
       ; AND %00011111                 ; AND %00011111     ; Keep only bits 0-4 (#N$00-#N$1F / minimum-maximum
                                                           ; horizontal screen values).
       movb a,@l                       ; LD L,A            ; Store this back in #REGl.
       movb h,a                        ; LD A,H            ; Vertical co-ordinate.
       ; RLCA                          ; RLCA              ; {Multiply by #N$04.
       ; RLCA                          ; RLCA              ; }
       movb a,@c                       ; LD C,A            ; Store this in #REGc temporarily.
       ; AND %11100000                 ; AND %11100000     ; Keep only bits 5-7.
       socb @l,a                       ; OR L              ; Set the bits from #REGl.
       movb a,@l                       ; LD L,A            ; #REGl=#REGa.
       movb @c,a                       ; LD A,C            ; Fetch the stored value from #REGc.
       ; AND %00000011                 ; AND %00000011     ; Keep only bits 0-1.
       socb %01011000,a                ; OR %01011000      ; Set MSB of the attribute buffer #N$58. This ensures our
                                                           ; value is >= #R$5800.
       movb a,h                        ; LD H,A            ; Store this back in #REGh.
       .pop bc                         ; POP BC            ; Restore #REGbc from the stack.
       .ret                            ; RET               ; Return.
* View the equivalent code in;
* #LIST
* { #COOKIE$7534 }
* { #JETPAC$720E }
* { #LUNARJETMAN$8506 }
* { #PSSST$748F }
* { #TRANZAM$7097 }
* LIST#

* Draw Room Frame
* 
* Used by the routine at #R$9147.
drawroomframe:                         ; 9bea
       sb   a,a                        ; XOR A             ; 
       movb a,@gameflags               ; LD ($5E14),A      ; 
       movb @playerroom,a              ; LD A,($EA91)      ; 
* This entry point is used by the routine at #R$96EC.
_9bf1:
       li   bc,_a854                   ; LD BC,$A854       ; 
       movb a,@l                       ; LD L,A            ; 
       sb   h,h                        ; LD H,$00          ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb a,@currentroom_attribute   ; LD ($5E1A),A      ; 
       .exx                            ; EXX               ; 
       li   hl,_5800                   ; LD HL,$5800       ; 
       li   bc,>1818                   ; LD BC,$1818       ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
       .call @_809a                    ; CALL $809A        ; 
       .exx                            ; EXX               ; 
       movb *hl,@l                     ; LD L,(HL)         ; 
       sb   h,h                        ; LD H,$00          ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       movb @l,@c                      ; LD C,L            ; 
       movb h,b                        ; LD B,H            ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       li   bc,_a854+302               ; LD BC,$A982       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb a,@currentroom_width       ; LD ($5E1D),A      ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb a,@currentroom_height      ; LD ($5E1E),A      ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; 
       movb a,@l                       ; LD L,A            ; 
       .push de                        ; PUSH DE           ; 
       .pop ix                         ; POP IX            ; 
       .push bc                        ; PUSH BC           ; 
_9c2e:
       .pop bc                         ; POP BC            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       cb   a,@b255                    ; CP $FF            ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       ; SLA A                         ; SLA A             ; 
       movb a,@_9c2e+17                ; LD ($9C3F),A      ; 
       ab   one,a                      ; INC A             ; 
       movb a,@_9c2e+20                ; LD ($9C42),A      ; 
       movb *ix,@c                     ; LD C,(IX+$00)     ; 
       movb *ix,b                      ; LD B,(IX+$00)     ; 
_9c43:
       .push bc                        ; PUSH BC           ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       cb   a,@b255                    ; CP $FF            ; 
       jeq  _9c2e                      ; JR Z,$9C2E        ; 
       ; SLA A                         ; SLA A             ; 
       movb a,@_9c43+18                ; LD ($9C55),A      ; 
       ab   one,a                      ; INC A             ; 
       movb a,@_9c43+21                ; LD ($9C58),A      ; 
       movb *ix,@e                     ; LD E,(IX+$00)     ; 
       movb *ix,d                      ; LD D,(IX+$00)     ; 
       .push hl                        ; PUSH HL           ; 
       .call @_9c79                    ; CALL $9C79        ; 
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; 
       jmp  _9c43                      ; JR $9C43          ; 
_9c61:
       movb @l,a                       ; LD A,L            ; 
       andi a,7*256                    ; AND $07           ; 
       ab   one,a                      ; INC A             ; 
       movb a,b                        ; LD B,A            ; 
       sb   a,a                        ; XOR A             ; 
       ; SCF                           ; SCF               ; 
_9c68:
       ; RRA                           ; RRA               ; 
       sb   one,b                      ; DJNZ $9C68        ; 
       jne  _9c68                      ;                   
       .push hl                        ; PUSH HL           ; 
       .push af                        ; PUSH AF           ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       .push af                        ; PUSH AF           ; 
       .call @screenaddress            ; CALL $9BA2        ; 
       .pop af                         ; POP AF            ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       .pop af                         ; POP AF            ; 
       socb *hl,a                      ; OR (HL)           ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .pop hl                         ; POP HL            ; 
       .ret                            ; RET               ; 
_9c79:
       movb b,h                        ; LD H,B            ; 
       movb @c,@l                      ; LD L,C            ; 
       sb   @c,@c                      ; LD C,$00          ; 
       movb h,a                        ; LD A,H            ; 
       sb   d,a                        ; SUB D             ; 
       jnc  _9c85                      ; JR NC,$9C85       ; TODO: check code. 
       neg a                           ; NEG               ; 
       socb @bits+0,@c                 ; SET 0,C           ; 
_9c85:
       movb a,b                        ; LD B,A            ; 
       movb @l,a                       ; LD A,L            ; 
       sb   @e,a                       ; SUB E             ; 
       jnc  _9c8e                      ; JR NC,$9C8E       ; TODO: check code. 
       neg a                           ; NEG               ; 
       socb @bits+1,@c                 ; SET 1,C           ; 
_9c8e:
       cb   a,b                        ; CP B              ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       movb @c,a                       ; LD A,C            ; 
       movb a,@_5e24                   ; LD ($5E24),A      ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       jnc  !                          ; JP C,$9CD6        ; TODO: check code. 
       b    @_9cd6                     ;                   
!
       movb a,@_5e23                   ; LD ($5E23),A      ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
       movb a,@e                       ; LD E,A            ; 
       sb   d,d                        ; LD D,$00          ; 
       movb d,@l                       ; LD L,D            ; 
       movb b,h                        ; LD H,B            ; 
       .call @_a379                    ; CALL $A379        ; 
       movb @_5e24,a                   ; LD A,($5E24)      ; 
       movb a,r0                       ; BIT 0,A           ; 
       andi r0,1*256                   ;                   
       jne  _9caf                      ; JR NZ,$9CAF       ; 
       .call @_a39e                    ; CALL $A39E        ; 
_9caf:
       movb @_5e24,a                   ; LD A,($5E24)      ; 
       movb a,r0                       ; BIT 1,A           ; 
       andi r0,2*256                   ;                   
       movb one,@c                     ; LD C,$01          ; 
       jne  _9cba                      ; JR NZ,$9CBA       ; 
       movb @b255,@c                   ; LD C,$FF          ; 
_9cba:
       .ex_de_hl                       ; EX DE,HL          ; 
       .pop hl                         ; POP HL            ; 
       movb @_5e23,a                   ; LD A,($5E23)      ; 
       ab   one,a                      ; INC A             ; 
       movb a,b                        ; LD B,A            ; 
       movb @e,a                       ; LD A,E            ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
_9cc3:
       .push bc                        ; PUSH BC           ; 
       .call @_9c61                    ; CALL $9C61        ; 
       movb @l,a                       ; LD A,L            ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       movb a,@l                       ; LD L,A            ; 
       a    de,hl                      ; ADD HL,DE         ; 
       movb @l,a                       ; LD A,L            ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       .pop bc                         ; POP BC            ; 
       ab   @c,a                       ; ADD A,C           ; 
       movb a,@l                       ; LD L,A            ; 
       sb   one,b                      ; DJNZ $9CC3        ; 
       jne  _9cc3                      ;                   
       .pop hl                         ; POP HL            ; 
       b    @_9c61                     ; JP $9C61          ; 
_9cd6:
       .ex_af_af'                      ; EX AF,AF'         ; 
       movb b,a                        ; LD A,B            ; 
       movb a,@_5e23                   ; LD ($5E23),A      ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
       movb b,@e                       ; LD E,B            ; 
       sb   d,d                        ; LD D,$00          ; 
       movb d,@l                       ; LD L,D            ; 
       movb a,h                        ; LD H,A            ; 
       .call @_a379                    ; CALL $A379        ; 
       movb @_5e24,a                   ; LD A,($5E24)      ; 
       movb a,r0                       ; BIT 1,A           ; 
       andi r0,2*256                   ;                   
       jne  _9cf0                      ; JR NZ,$9CF0       ; 
       .call @_a39e                    ; CALL $A39E        ; 
_9cf0:
       movb @_5e24,a                   ; LD A,($5E24)      ; 
       movb a,r0                       ; BIT 0,A           ; 
       andi r0,1*256                   ;                   
       movb one,@c                     ; LD C,$01          ; 
       jne  _9cfb                      ; JR NZ,$9CFB       ; 
       movb @b255,@c                   ; LD C,$FF          ; 
_9cfb:
       .ex_de_hl                       ; EX DE,HL          ; 
       .pop hl                         ; POP HL            ; 
       movb @_5e23,a                   ; LD A,($5E23)      ; 
       ab   one,a                      ; INC A             ; 
       movb a,b                        ; LD B,A            ; 
       movb @e,a                       ; LD A,E            ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
_9d04:
       .push bc                        ; PUSH BC           ; 
       .call @_9c61                    ; CALL $9C61        ; 
       movb h,a                        ; LD A,H            ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       movb @l,h                       ; LD H,L            ; 
       movb a,@l                       ; LD L,A            ; 
       a    de,hl                      ; ADD HL,DE         ; 
       movb @l,a                       ; LD A,L            ; 
       movb h,@l                       ; LD L,H            ; 
       .ex_af_af'                      ; EX AF,AF'         ; 
       .pop bc                         ; POP BC            ; 
       ab   @c,a                       ; ADD A,C           ; 
       movb a,h                        ; LD H,A            ; 
       sb   one,b                      ; DJNZ $9D04        ; 
       jne  _9d04                      ;                   
       .pop hl                         ; POP HL            ; 
       b    @_9c61                     ; JP $9C61          ; 

* Get Blend Instruction
* 
* Used by the routine at #R$98D2.
getblendinstruction:                   ; 9d19
       movb b,a                        ; LD A,B            ; #REGa=#REGb.
       ; AND %00000011                 ; AND %00000011     ; Keep only bits 0-1.
       jne  !                          ; RET Z             ; Return if #N$00 (no blending).
       .ret                            ;                   
!
       cb   a,one                      ; CP $01            ; Compare #REGa with #N$01...
       movb @bytes+174,a               ; LD A,$AE          ; #REGa=#N$AE.
       jeq  !                          ; RET NZ            ; Return if the comparison was not zero (XOR blending).
       .ret                            ;                   
!
       ab   @bytes+8,a                 ; ADD A,$08         ; #REGa+=#N$08.
       .ret                            ; RET               ; Return (OR blending).

* Draw Attr 0
_9d25:
       .pop bc                         ; POP BC            ; 
       .call @_99af                    ; CALL $99AF        ; 
_9d29:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
_9d2b:
       movb *de,a                      ; LD A,(DE)         ; 
       inc  de                         ; INC DE            ; 
       ; AND A                         ; AND A             ; 
       jeq  _9d38                      ; JR Z,$9D38        ; 
       cb   a,@b255                    ; CP $FF            ; 
       jne  _9d37                      ; JR NZ,$9D37       ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
_9d37:
       movb a,*hl                      ; LD (HL),A         ; 
_9d38:
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9D2B        ; 
       jne  _9d2b                      ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _9d29                      ; JR NZ,$9D29       ; 
       .ret                            ; RET               ; 

* Draw Attr 1
_9d47:
       .pop bc                         ; POP BC            ; 
       .call @_99af                    ; CALL $99AF        ; 
       dec  de                         ; DEC DE            ; 
_9d4c:
       .call @_9a9d                    ; CALL $9A9D        ; 
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
_9d52:
       movb *de,a                      ; LD A,(DE)         ; 
       dec  de                         ; DEC DE            ; 
       ; AND A                         ; AND A             ; 
       jeq  _9d5f                      ; JR Z,$9D5F        ; 
       cb   a,@b255                    ; CP $FF            ; 
       jne  _9d5e                      ; JR NZ,$9D5E       ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
_9d5e:
       movb a,*hl                      ; LD (HL),A         ; 
_9d5f:
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9D52        ; 
       jne  _9d52                      ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _9d4c                      ; JR NZ,$9D4C       ; 
       .ret                            ; RET               ; 

* Draw Attr 2
_9d6f:
       .pop bc                         ; POP BC            ; 
       .call @_99af                    ; CALL $99AF        ; 
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       .exx                            ; EXX               ; 
       .call @_9a9d                    ; CALL $9A9D        ; 
_9d7a:
       dec  de                         ; DEC DE            ; 
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
_9d7e:
       movb *de,a                      ; LD A,(DE)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _9d8a                      ; JR Z,$9D8A        ; 
       cb   a,@b255                    ; CP $FF            ; 
       jne  _9d89                      ; JR NZ,$9D89       ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
_9d89:
       movb a,*hl                      ; LD (HL),A         ; 
_9d8a:
       .call @_9a9d                    ; CALL $9A9D        ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _9d7e                      ; JR NZ,$9D7E       ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  _9d7a                      ; JR NZ,$9D7A       ; 
       .ret                            ; RET               ; 

* Draw Attr 3
_9da0:
       .pop bc                         ; POP BC            ; 
       .call @_99af                    ; CALL $99AF        ; 
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       .exx                            ; EXX               ; 
_9da8:
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
_9dab:
       movb *de,a                      ; LD A,(DE)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _9db7                      ; JR Z,$9DB7        ; 
       cb   a,@b255                    ; CP $FF            ; 
       jne  _9db6                      ; JR NZ,$9DB6       ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
_9db6:
       movb a,*hl                      ; LD (HL),A         ; 
_9db7:
       .call @_9a9d                    ; CALL $9A9D        ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _9dab                      ; JR NZ,$9DAB       ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       inc  de                         ; INC DE            ; 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  _9da8                      ; JR NZ,$9DA8       ; 
       .ret                            ; RET               ; 

* Draw Attr 4
_9dce:
       .pop bc                         ; POP BC            ; 
       .call @_99af                    ; CALL $99AF        ; 
       .call @_9aba                    ; CALL $9ABA        ; 
_9dd5:
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
_9dd8:
       movb *de,a                      ; LD A,(DE)         ; 
       inc  de                         ; INC DE            ; 
       ; AND A                         ; AND A             ; 
       jeq  _9de5                      ; JR Z,$9DE5        ; 
       cb   a,@b255                    ; CP $FF            ; 
       jne  _9de4                      ; JR NZ,$9DE4       ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
_9de4:
       movb a,*hl                      ; LD (HL),A         ; 
_9de5:
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9DD8        ; 
       jne  _9dd8                      ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .call @_9aa5                    ; CALL $9AA5        ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _9dd5                      ; JR NZ,$9DD5       ; 
       .ret                            ; RET               ; 

* Draw Attr 5
_9df8:
       .pop bc                         ; POP BC            ; 
       .call @_99af                    ; CALL $99AF        ; 
       .call @_9aba                    ; CALL $9ABA        ; 
       .call @_9a9d                    ; CALL $9A9D        ; 
       dec  de                         ; DEC DE            ; 
_9e03:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
_9e05:
       movb *de,a                      ; LD A,(DE)         ; 
       dec  de                         ; DEC DE            ; 
       ; AND A                         ; AND A             ; 
       jeq  _9e12                      ; JR Z,$9E12        ; 
       cb   a,@b255                    ; CP $FF            ; 
       jne  _9e11                      ; JR NZ,$9E11       ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
_9e11:
       movb a,*hl                      ; LD (HL),A         ; 
_9e12:
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $9E05        ; 
       jne  _9e05                      ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _9e03                      ; JR NZ,$9E03       ; 
       .ret                            ; RET               ; 

* Draw Attr 6
_9e21:
       .pop bc                         ; POP BC            ; 
       .call @_99af                    ; CALL $99AF        ; 
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       .exx                            ; EXX               ; 
       .call @_9aba                    ; CALL $9ABA        ; 
       .call @_9a9d                    ; CALL $9A9D        ; 
_9e2f:
       dec  de                         ; DEC DE            ; 
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
_9e33:
       movb *de,a                      ; LD A,(DE)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _9e3f                      ; JR Z,$9E3F        ; 
       cb   a,@b255                    ; CP $FF            ; 
       jne  _9e3e                      ; JR NZ,$9E3E       ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
_9e3e:
       movb a,*hl                      ; LD (HL),A         ; 
_9e3f:
       .call @_9aa5                    ; CALL $9AA5        ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _9e33                      ; JR NZ,$9E33       ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  _9e2f                      ; JR NZ,$9E2F       ; 
       .ret                            ; RET               ; 

* Draw Attr 7
_9e55:
       .pop bc                         ; POP BC            ; 
       .call @_99af                    ; CALL $99AF        ; 
       movb b,a                        ; LD A,B            ; 
       .exx                            ; EXX               ; 
       movb a,b                        ; LD B,A            ; 
       .exx                            ; EXX               ; 
       .call @_9aba                    ; CALL $9ABA        ; 
_9e60:
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
_9e63:
       movb *de,a                      ; LD A,(DE)         ; 
       ; AND A                         ; AND A             ; 
       jeq  _9e6f                      ; JR Z,$9E6F        ; 
       cb   a,@b255                    ; CP $FF            ; 
       jne  _9e6e                      ; JR NZ,$9E6E       ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
_9e6e:
       movb a,*hl                      ; LD (HL),A         ; 
_9e6f:
       .call @_9aa5                    ; CALL $9AA5        ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _9e63                      ; JR NZ,$9E63       ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       inc  de                         ; INC DE            ; 
       .exx                            ; EXX               ; 
       sb   one,b                      ; DEC B             ; 
       .exx                            ; EXX               ; 
       jne  _9e60                      ; JR NZ,$9E60       ; 
       .ret                            ; RET               ; 

* Get Sprite "A"
* 
* Used by the routine at #R$9F80.
* 
* A The Sprite ID
* O:DE The sprite address
getspritea:                            ; 9e86
       movb @_5e15,a                   ; LD A,($5E15)      ; #REGa=#R$5E15.
* This entry point is used by the routines at #R$8C63, #R$8E26 and #R$9E96.
getspriteaddress:                      ; 9e89
       sb   one,a                      ; DEC A             ; Decrease #REGa by one.
       movb a,@l                       ; LD L,A            ; {Create an offset in #REGhl.
       sb   h,h                        ; LD H,$00          ; }
       a    hl,hl                      ; ADD HL,HL         ; #REGhl=#REGhl * 2.
       li   bc,spritestable            ; LD BC,$A4BE       ; {#REGhl=#R$A4BE + offset.
       a    bc,hl                      ; ADD HL,BC         ; }
       movb *hl,@e                     ; LD E,(HL)         ; {#REGde=the sprite address.
       inc  hl                         ; INC HL            ; 
       movb *hl,d                      ; LD D,(HL)         ; }
       .ret                            ; RET               ; Return.

* Get Entity Sprite
* 
* Used by the routine at #R$9F9F.
getentitysprite:                       ; 9e96
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       jmp  getspriteaddress           ; JR $9E89          ; 
* This entry point is used by the routines at #R$9F4A, #R$9F56 and #R$9FCA.
_9e9b:
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jeq  _9eaf                      ; JR Z,$9EAF        ; 
       sb   one,@c                     ; DEC C             ; 
       .call @_9edc                    ; CALL $9EDC        ; 
       .exx                            ; EXX               ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jeq  _9eac                      ; JR Z,$9EAC        ; 
_9ea8:
       sb   one,@c                     ; DEC C             ; 
       .call @_9f21                    ; CALL $9F21        ; 
_9eac:
       .exx                            ; EXX               ; 
       jmp  _9e9b                      ; JR $9E9B          ; 
_9eaf:
       .exx                            ; EXX               ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jne  _9ea8                      ; JR NZ,$9EA8       ; 
* This entry point is used by the routine at #R$9FCA.
_9eb4:
       .exx                            ; EXX               ; 
* This entry point is used by the routine at #R$9FCA.
_9eb5:
       movb @_5e18,a                   ; LD A,($5E18)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @_5e19,a                   ; LD A,($5E19)      ; 
       socb @c,a                       ; OR C              ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       sb   a,a                        ; XOR A             ; 
       movb a,@_5e18                   ; LD ($5E18),A      ; 
       .exx                            ; EXX               ; 
       movb @_5e19,a                   ; LD A,($5E19)      ; 
       movb a,@c                       ; LD C,A            ; 
       sb   a,a                        ; XOR A             ; 
* This entry point is used by the routine at #R$9FCA.
_9ec8:
       movb a,@_5e19                   ; LD ($5E19),A      ; 
       .exx                            ; EXX               ; 
       jmp  _9e9b                      ; JR $9E9B          ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .ex_*sp_hl                      ; EX (SP),HL        ; 
       movb d,a                        ; LD A,D            ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @e,a                       ; LD A,E            ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .pop de                         ; POP DE            ; 
       sb   one,@l                     ; DEC L             ; 
       b    @_9f03                     ; JP $9F03          ; 
_9edc:
       .ex_de_hl                       ; EX DE,HL          ; 
       .push de                        ; PUSH DE           ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       sb   a,a                        ; XOR A             ; 
_9ee4:
       jmp  _9ee4                      ; JR $9EE4          ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .ex_*sp_hl                      ; EX (SP),HL        ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
_9ef9:
       movb d,a                        ; LD A,D            ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @e,a                       ; LD A,E            ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .pop de                         ; POP DE            ; 
       sb   one,@l                     ; DEC L             ; 
       sb   one,@l                     ; DEC L             ; 
* This entry point is used by the routines at #R$98D2 and #R$A185.
_9f03:
       sb   one,h                      ; DEC H             ; 
       movb h,a                        ; LD A,H            ; 
       inv  a                          ; CPL               ; 
       andi a,7*256                    ; AND $07           ; 
       jeq  !                          ; RET NZ            ; 
       .ret                            ;                   
!
       movb @l,a                       ; LD A,L            ; 
       sb   @bytes+32,a                ; SUB $20           ; 
       movb a,@l                       ; LD L,A            ; 
       jnc  !                          ; RET C             ; TODO: check code. 
       .ret                            ;                   
!
       movb h,a                        ; LD A,H            ; 
       ab   @bytes+8,a                 ; ADD A,$08         ; 
       movb a,h                        ; LD H,A            ; 
       .ret                            ; RET               ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .ex_*sp_hl                      ; EX (SP),HL        ; 
       movb d,a                        ; LD A,D            ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       movb @e,a                       ; LD A,E            ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       .pop de                         ; POP DE            ; 
       sb   one,@l                     ; DEC L             ; 
       b    @_9f03                     ; JP $9F03          ; 
_9f21:
       .ex_de_hl                       ; EX DE,HL          ; 
       .push de                        ; PUSH DE           ; 
       movb *hl,d                      ; LD D,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       sb   a,a                        ; XOR A             ; 
_9f29:
       jmp  _9f29                      ; JR $9F29          ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       ab   a,a                        ; ADC A,A           ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .ex_*sp_hl                      ; EX (SP),HL        ; 
       ; XOR (HL)                      ; XOR (HL)          ; 
       movb a,*hl                      ; LD (HL),A         ; 
       ab   one,@l                     ; INC L             ; 
       jmp  _9ef9                      ; JR $9EF9          ; 
       .call @_9fa2                    ; CALL $9FA2        ; 
       jmp  _9f4d                      ; JR $9F4D          ; 
       .call @_9f83                    ; CALL $9F83        ; 
       jmp  _9f59                      ; JR $9F59          ; 

* Draw Entity
* 
* Used by the routines at #R$80D2, #R$8301, #R$8C63, #R$9252, #R$9443, #R$95A9,
* #R$A13B, #R$A2CE and #R$A311.
drawentity:                            ; 9f4a
       .call @prepdraw2                ; CALL $9F9F        ; Call #R$9F9F.
* This entry point is used by the routine at #R$9E96.
_9f4d:
       .exx                            ; EXX               ; Switch to the shadow registers.
       sb   a,a                        ; XOR A             ; {Write #N$00 to #R$5E18.
       movb a,@_5e18                   ; LD ($5E18),A      ; }
       movb a,@c                       ; LD C,A            ; #REGc=#N$00.
       b    @_9e9b                     ; JP $9E9B          ; Jump to #R$9E9B.

* Remove Entity
* 
* Used by the routines at #R$8209, #R$8301, #R$8C63, #R$9252 and #R$96EC.
removeentity:                          ; 9f56
       .call @prepdraw23               ; CALL $9F80        ; 
* This entry point is used by the routine at #R$9E96.
_9f59:
       .exx                            ; EXX               ; 
       sb   a,a                        ; XOR A             ; 
       movb a,@c                       ; LD C,A            ; 
       movb a,@_5e19                   ; LD ($5E19),A      ; 
       movb @_5e18,a                   ; LD A,($5E18)      ; 
       movb a,@_5e11                   ; LD ($5E11),A      ; 
       movb @l,a                       ; LD A,L            ; 
       andi a,7*256                    ; AND $07           ; 
       movb @bytes+2,a                 ; LD A,$02          ; 
       jeq  _9f6d                      ; JR Z,$9F6D        ; 
       ab   one,a                      ; INC A             ; 
_9f6d:
       movb a,@_5e10                   ; LD ($5E10),A      ; 
       .exx                            ; EXX               ; 
       b    @_9e9b                     ; JP $9E9B          ; 
       .push de                        ; PUSH DE           ; 
       .call @_9f83                    ; CALL $9F83        ; 
       .exx                            ; EXX               ; 
       .pop de                         ; POP DE            ; 
       .call @_9fa2                    ; CALL $9FA2        ; 
       .exx                            ; EXX               ; 
       jmp  _9fd1                      ; JR $9FD1          ; 

* Prepare Draw 2/ 3 Byte Sprite
* 
* Used by the routines at #R$9F56 and #R$9FCA.
prepdraw23:                            ; 9f80
       .call @getspritea               ; CALL $9E86        ; Call #R$9E86.
* This entry point is used by the routines at #R$9E96 and #R$9F56.
_9f83:
       mov  @saved_x,hl                ; LD HL,($5E16)     ; #REGhl=#R$5E16 (saved X position).
       movb @l,a                       ; LD A,L            ; 
       sb   one,a                      ; DEC A             ; 
       ; RLCA                          ; RLCA              ; 
       ; AND %00001110                 ; AND %00001110     ; Keep only bits 1-3.
       cb   a,@bytes+14                ; CP $0E            ; 
       jne  _9f91                      ; JR NZ,$9F91       ; 
       movb @bytes+232,a               ; LD A,$E8          ; 
_9f91:
       movb a,@_9ee4+1                 ; LD ($9EE5),A      ; 
       .call @screenaddress            ; CALL $9BA2        ; 
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,@_5e18                   ; LD ($5E18),A      ; 
* This entry point is used by the routine at #R$9F9F.
_9f9b:
       sb   @c,@c                      ; LD C,$00          ; 
       inc  de                         ; INC DE            ; 
       .ret                            ; RET               ; Return.

* Prepare Draw 2 Byte Sprite
* 
* Used by the routines at #R$9F4A and #R$9FCA.
prepdraw2:                             ; 9f9f
       .call @getentitysprite          ; CALL $9E96        ; Call #R$9E96.
* This entry point is used by the routines at #R$9E96 and #R$9F56.
_9fa2:
       movb @3(ix),@l                  ; LD L,(IX+$03)     ; 
       movb @4(ix),h                   ; LD H,(IX+$04)     ; 
       movb @l,a                       ; LD A,L            ; 
       sb   one,a                      ; DEC A             ; 
       ; RLCA                          ; RLCA              ; 
       andi a,14*256                   ; AND $0E           ; 
       cb   a,@bytes+14                ; CP $0E            ; 
       jne  _9fb3                      ; JR NZ,$9FB3       ; 
       movb @bytes+232,a               ; LD A,$E8          ; 
_9fb3:
       movb a,@_9f29+1                 ; LD ($9F2A),A      ; 
       movb @bytes+2,a                 ; LD A,$02          ; 
       jeq  _9fbb                      ; JR Z,$9FBB        ; 
       ab   one,a                      ; INC A             ; 
_9fbb:
       movb a,@_5e10                   ; LD ($5E10),A      ; 
       .call @screenaddress            ; CALL $9BA2        ; 
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,@_5e19                   ; LD ($5E19),A      ; 
       movb a,@_5e11                   ; LD ($5E11),A      ; 
       jmp  _9f9b                      ; JR $9F9B          ; 

* Display Entity
* 
* Used by the routine at #R$8E26.
displayentity:                         ; 9fca
       .call @prepdraw2                ; CALL $9F9F        ; 
       .exx                            ; EXX               ; 
       .call @prepdraw23               ; CALL $9F80        ; 
* This entry point is used by the routine at #R$9F56.
_9fd1:
       movb @saved_y,a                 ; LD A,($5E17)      ; 
       sb   @4(ix),a                   ; SUB (IX+$04)      ; 
       jne  !                          ; JP Z,$9EB5        ; 
       b    @_9eb5                     ;                   
!
       ; JP M,$9FEC                    ; JP M,$9FEC        ; 
       movb a,@c                       ; LD C,A            ; 
       movb @_5e18,a                   ; LD A,($5E18)      ; 
       cb   a,@c                       ; CP C              ; 
       jhe  !                          ; JP C,$9EB5        ; 
       b    @_9eb5                     ;                   
!
       sb   @c,a                       ; SUB C             ; 
       movb a,@_5e18                   ; LD ($5E18),A      ; 
       b    @_9e9b                     ; JP $9E9B          ; 
_9fec:
       .exx                            ; EXX               ; 
       neg a                           ; NEG               ; 
       movb a,@c                       ; LD C,A            ; 
       movb @_5e19,a                   ; LD A,($5E19)      ; 
       cb   a,@c                       ; CP C              ; 
       jhe  !                          ; JP C,$9EB4        ; 
       b    @_9eb4                     ;                   
!
       sb   @c,a                       ; SUB C             ; 
       b    @_9ec8                     ; JP $9EC8          ; 

* Store Entity
* 
* Used by the routines at #R$81DB, #R$81F0, #R$82F1, #R$8301, #R$8C63, #R$8D77,
* #R$9252 and #R$96EC.
storeentity:                           ; 9ffb
       movb @3(ix),a                   ; LD A,(IX+$03)     ; 
       movb a,@saved_x                 ; LD ($5E16),A      ; 
       movb @4(ix),a                   ; LD A,(IX+$04)     ; 
       movb a,@saved_y                 ; LD ($5E17),A      ; 
       movb *ix,a                      ; LD A,(IX+$00)     ; 
       movb a,@_5e15                   ; LD ($5E15),A      ; 
       .ret                            ; RET               ; Return.

* Set Entity Attributes
* 
* Used by the routines at #R$A13B and #R$A311.
* 
* IX The entity to colour
setentityattributes:                   ; a00e
       movb @3(ix),a                   ; LD A,(IX+$03)     ; {Write the entity X position to #R$5E16.
       movb a,@saved_x                 ; LD ($5E16),A      ; }
       movb @4(ix),a                   ; LD A,(IX+$04)     ; {Write the entity X position to #R$5E17.
       movb a,@saved_y                 ; LD ($5E17),A      ; }
* This entry point is used by the routines at #R$8209, #R$8301, #R$8E26 and
* #R$9252.
_a01a:
       movb @3(ix),@l                  ; LD L,(IX+$03)     ; {#REGhl=Entity screen position.
       movb @4(ix),h                   ; LD H,(IX+$04)     ; }
       movb @5(ix),d                   ; LD D,(IX+$05)     ; #REGd=Entity attribute.
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; {#REGe=Room attribute.
       movb a,@e                       ; LD E,A            ; }
       movb @_5e10,a                   ; LD A,($5E10)      ; {#REGb=Entity width in bytes.
       movb a,b                        ; LD B,A            ; }
       movb @_5e11,a                   ; LD A,($5E11)      ; #REGa=Entity height in pixels.
       ; RRCA                          ; RRCA              ; {Divide by #N$04.
       ; RRCA                          ; RRCA              ; }
       ab   one,a                      ; INC A             ; Increment #REGa by one.
       ; RRCA                          ; RRCA              ; Divide by #N$02.
       ; AND %00011111                 ; AND %00011111     ; Keep only bits 0-4.
       ab   one,a                      ; INC A             ; Increment #REGa by one.
       movb a,@c                       ; LD C,A            ; Store the result in #REGc.
       .push bc                        ; PUSH BC           ; Stash #REGbc on the stack.
       sb   b,b                        ; LD B,$00          ; #REGb=#N$00.
       movb @saved_x,a                 ; LD A,($5E16)      ; {Compare #R$5E16 against #REGl to see if the X position
       cb   a,@l                       ; CP L              ; is unchanged.}
       jeq  _a043                      ; JR Z,$A043        ; If it hasn't changed then jump to #R$A043.
       joc  _a042                      ; JR C,$A042        ; TODO: check code. If the entity has moved left then jump to #R$A042.
       ab   one,b                      ; INC B             ; #REGb=#REGb + #N$01.
_a042:
       ab   one,b                      ; INC B             ; #REGb=#REGb + #N$01.
_a043:
       movb @saved_y,a                 ; LD A,($5E17)      ; {Compare #R$5E17 against #REGh to see if the Y position
       cb   a,h                        ; CP H              ; is unchanged.}
       movb b,a                        ; LD A,B            ; #REGa=#REGb.
       jeq  _a050                      ; JR Z,$A050        ; If it hasn't changed then jump to #R$A050.
       joc  _a04e                      ; JR C,$A04E        ; TODO: check code. If the entity has moved up then jump to #R$A04E.
       ab   @bytes+4,a                 ; ADD A,$04         ; #REGa=#REGa + #N$04.
_a04e:
       ab   @bytes+4,a                 ; ADD A,$04         ; #REGa=#REGa + #N$04.
_a050:
       movb a,b                        ; LD B,A            ; Stash the result in #REGb.
       .call @attributeaddress         ; CALL $9BD2        ; Call #R$9BD2.
       movb b,a                        ; LD A,B            ; Restore the result back into #REGa.
       .pop bc                         ; POP BC            ; 
       .push hl                        ; PUSH HL           ; 
       li   hl,attributejumptable      ; LD HL,$A064       ; #REGhl=#R$A064.
       ; SLA A                         ; SLA A             ; #REGa=#REGa * #N$02.
       .call @_926c                    ; CALL $926C        ; Call #R$926C.
       movb *hl,a                      ; LD A,(HL)         ; {#REGhl=attribute routine selected from #R$A064.
       inc  hl                         ; INC HL            ; 
       movb *hl,h                      ; LD H,(HL)         ; 
       movb a,@l                       ; LD L,A            ; }
       b    *hl                        ; JP (HL)           ; TODO. 

* Attribute Jump Table
attributejumptable:                    ; a064
       data attrdrawunchanged
       data attrdrawmovingright
       data attrdrawmovingleft
       data createdelay
       data attrdrawmovingdown
       data attrdrawmovingdownright
       data attrdrawmovingdownleft
       data createdelay
       data attrdrawmovingup
       data attrdrawmovingupright
       data attrdrawmovingupleft

* Attribute: Draw Unchanged Position
attrdrawunchanged:                     ; a07a
       .pop hl                         ; POP HL            ; 
* This entry point is used by the routine at #R$A0EC.
_a07b:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
_a07d:
       movb d,*hl                      ; LD (HL),D         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A07D        ; 
       jne  _a07d                      ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _a07b                      ; JR NZ,$A07B       ; 
       .ret                            ; RET               ; 

* Attribute: Draw Moving Right
attrdrawmovingright:                   ; a08d
       .pop hl                         ; POP HL            ; 
* This entry point is used by the routine at #R$A127.
_a08e:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       sb   one,@l                     ; DEC L             ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       ab   one,@l                     ; INC L             ; 
_a093:
       movb d,*hl                      ; LD (HL),D         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A093        ; 
       jne  _a093                      ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _a08e                      ; JR NZ,$A08E       ; 
       .ret                            ; RET               ; 

* Attribute: Draw Moving Left
attrdrawmovingleft:                    ; a0a3
       .pop hl                         ; POP HL            ; 
* This entry point is used by the routine at #R$A0FE.
_a0a4:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
_a0a6:
       movb d,*hl                      ; LD (HL),D         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A0A6        ; 
       jne  _a0a6                      ;                   
       movb @e,*hl                     ; LD (HL),E         ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _a0a4                      ; JR NZ,$A0A4       ; 
       .ret                            ; RET               ; 

* Attribute: Draw Moving Down
attrdrawmovingdown:                    ; a0b7
       .pop hl                         ; POP HL            ; 
_a0b8:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
_a0ba:
       movb d,*hl                      ; LD (HL),D         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A0BA        ; 
       jne  _a0ba                      ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _a0b8                      ; JR NZ,$A0B8       ; 
* This entry point is used by the routines at #R$A0D2 and #R$A110.
_a0c9:
       movb h,a                        ; LD A,H            ; 
       cb   a,@bytes+88                ; CP $58            ; 
       jhe  !                          ; RET C             ; 
       .ret                            ;                   
!
_a0cd:
       equ  $
       movb @e,*hl                     ; LD (HL),E         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A0CD        ; 
       jne  _a0cd                      ;                   
       .ret                            ; RET               ; 

* Attribute: Draw Moving Down-Right
attrdrawmovingdownright:               ; a0d2
       .pop hl                         ; POP HL            ; 
_a0d3:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       sb   one,@l                     ; DEC L             ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       ab   one,@l                     ; INC L             ; 
_a0d8:
       movb d,*hl                      ; LD (HL),D         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A0D8        ; 
       jne  _a0d8                      ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _a0d3                      ; JR NZ,$A0D3       ; 
       sb   one,@l                     ; DEC L             ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       ab   one,@l                     ; INC L             ; 
       jmp  _a0c9                      ; JR $A0C9          ; 

* Attribute: Draw Moving Up
attrdrawmovingup:                      ; a0ec
       .pop hl                         ; POP HL            ; 
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       .push bc                        ; PUSH BC           ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       .pop bc                         ; POP BC            ; 
_a0f5:
       movb @e,*hl                     ; LD (HL),E         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A0F5        ; 
       jne  _a0f5                      ;                   
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; 
       b    @_a07b                     ; JP $A07B          ; 

* Attribute: Draw Moving Up-Left
attrdrawmovingupleft:                  ; a0fe
       .pop hl                         ; POP HL            ; 
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       .push bc                        ; PUSH BC           ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       .pop bc                         ; POP BC            ; 
       ab   one,b                      ; INC B             ; 
_a108:
       movb @e,*hl                     ; LD (HL),E         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A108        ; 
       jne  _a108                      ;                   
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; 
       jmp  _a0a4                      ; JR $A0A4          ; 

* Attribute: Draw Moving Down-Left
attrdrawmovingdownleft:                ; a110
       .pop hl                         ; POP HL            ; 
_a111:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
_a113:
       movb d,*hl                      ; LD (HL),D         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A113        ; 
       jne  _a113                      ;                   
       movb @e,*hl                     ; LD (HL),E         ; 
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       ; AND A                         ; AND A             ; 
       s    bc,hl                      ; SBC HL,BC         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _a111                      ; JR NZ,$A111       ; 
       ab   one,b                      ; INC B             ; 
       b    @_a0c9                     ; JP $A0C9          ; 

* Attribute: Draw Moving Up-Right
attrdrawmovingupright:                 ; a127
       .pop hl                         ; POP HL            ; 
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
       .push bc                        ; PUSH BC           ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@l                     ; DEC L             ; 
       ab   one,b                      ; INC B             ; 
_a132:
       movb @e,*hl                     ; LD (HL),E         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A132        ; 
       jne  _a132                      ;                   
       .pop hl                         ; POP HL            ; 
       .pop bc                         ; POP BC            ; 
       b    @_a08e                     ; JP $A08E          ; 

* Draw Inventory
* 
* Used by the routines at #R$9147, #R$9252 and #R$93E3.
drawinventory:                         ; a13b
       li   de,>2cc8                   ; LD DE,$2CC8       ; 
       li   hl,_5e30                   ; LD HL,$5E30       ; 
       movb @bytes+3,b                 ; LD B,$03          ; 
_a143:
       .call @drawinventoryitem        ; CALL $A14D        ; 
       movb @e,a                       ; LD A,E            ; 
       ab   @bytes+16,a                ; ADD A,$10         ; 
       movb a,@e                       ; LD E,A            ; 
       sb   one,b                      ; DJNZ $A143        ; 
       jne  _a143                      ;                   
       .ret                            ; RET               ; 
drawinventoryitem:                     ; a14d
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push ix                        ; PUSH IX           ; 
       li   ix,entitytodraw            ; LD IX,$A17D       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       socb *hl,a                      ; OR (HL)           ; 
       inc  hl                         ; INC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       jne  _a15e                      ; JR NZ,$A15E       ; 
       movb @bytes+49,a                ; LD A,$31          ; 
_a15e:
       inc  hl                         ; INC HL            ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb @e,@3(ix)                  ; LD (IX+$03),E     ; 
       movb d,@4(ix)                   ; LD (IX+$04),D     ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       movb a,@5(ix)                   ; LD (IX+$05),A     ; 
       .push hl                        ; PUSH HL           ; 
       .call @clearsprite              ; CALL $A185        ; 
       .call @drawentity               ; CALL $9F4A        ; 
       .call @setentityattributes      ; CALL $A00E        ; 
       .pop hl                         ; POP HL            ; 
       .pop ix                         ; POP IX            ; 
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       .ret                            ; RET               ; 
entitytodraw:                          ; a17d
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 

* Clear Sprite
* 
* Used by the routines at #R$A13B and #R$A2CE.
clearsprite:                           ; a185
       movb @3(ix),@l                  ; LD L,(IX+$03)     ; 
       movb @4(ix),h                   ; LD H,(IX+$04)     ; 
       .call @screenaddress            ; CALL $9BA2        ; 
       movb @bytes+20,b                ; LD B,$14          ; 
_a190:
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       ab   one,@l                     ; INC L             ; 
       sb   *hl,*hl                    ; LD (HL),$00       ; 
       sb   one,@l                     ; DEC L             ; 
       .call @_9f03                    ; CALL $9F03        ; 
       sb   one,b                      ; DJNZ $A190        ; 
       jne  _a190                      ;                   
       .ret                            ; RET               ; 

* Add To Score
* 
* Used by the routine at #R$8301.
addtoscore:                            ; a19c
       li   hl,_5e2a+2                 ; LD HL,$5E2C       ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   @c,a                       ; ADD A,C           ; 
       ; DAA                           ; DAA               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       dec  hl                         ; DEC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   b,a                        ; ADC A,B           ; 
       ; DAA                           ; DAA               ; 
       movb a,*hl                      ; LD (HL),A         ; 
       dec  hl                         ; DEC HL            ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       ab   @zero,a                    ; ADC A,$00         ; 
       ; DAA                           ; DAA               ; 
       movb a,*hl                      ; LD (HL),A         ; 
* This entry point is used by the routine at #R$A219.
_a1ae:
       li   hl,_bfcc                   ; LD HL,$BFCC       ; {Write #R$BFCC to #R$5E01.
       mov  hl,@fontpointer            ; LD ($5E01),HL     ; }
       li   hl,_5080+72                ; LD HL,$50C8       ; 
* This entry point is used by the routine at #R$9641.
printscore:                            ; a1b7
       .call @screenaddress            ; CALL $9BA2        ; 
       li   de,_5e2a                   ; LD DE,$5E2A       ; 
       movb @bytes+3,b                 ; LD B,$03          ; 
* This entry point is used by the routines at #R$95DA and #R$9641.
_a1bf:
       movb *de,a                      ; LD A,(DE)         ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       andi a,15*256                   ; AND $0F           ; 
       .call @printcharacter           ; CALL $A1D3        ; 
* This entry point is used by the routine at #R$95DA.
_a1c9:
       movb *de,a                      ; LD A,(DE)         ; 
       andi a,15*256                   ; AND $0F           ; 
       .call @printcharacter           ; CALL $A1D3        ; 
       inc  de                         ; INC DE            ; 
       sb   one,b                      ; DJNZ $A1BF        ; 
       jne  _a1bf                      ;                   
       .ret                            ; RET               ; 

* Print Character
* 
* Used by the routines at #R$A19C, #R$A1F3 and #R$A219.
printcharacter:                        ; a1d3
       .push bc                        ; PUSH BC           ; 
       .push de                        ; PUSH DE           ; 
       .push hl                        ; PUSH HL           ; 
       movb a,@l                       ; LD L,A            ; 
       sb   h,h                        ; LD H,$00          ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       mov  @fontpointer,de            ; LD DE,($5E01)     ; 
       a    de,hl                      ; ADD HL,DE         ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       .pop hl                         ; POP HL            ; 
       movb @bytes+8,b                 ; LD B,$08          ; 
_a1e5:
       movb *de,a                      ; LD A,(DE)         ; 
       movb a,*hl                      ; LD (HL),A         ; 
       inc  de                         ; INC DE            ; 
       ab   one,h                      ; INC H             ; 
       sb   one,b                      ; DJNZ $A1E5        ; 
       jne  _a1e5                      ;                   
       .pop de                         ; POP DE            ; 
       .pop bc                         ; POP BC            ; 
       movb h,a                        ; LD A,H            ; 
       sb   @bytes+8,a                 ; SUB $08           ; 
       movb a,h                        ; LD H,A            ; 
       ab   one,@l                     ; INC L             ; 
       .ret                            ; RET               ; 
* View the equivalent code in;
* #LIST
* { #COOKIE$7468 }
* { #JETPAC$714C }
* { #LUNARJETMAN$89EF }
* { #PSSST$73CD }
* { #TRANZAM$6C96 }
* LIST#

* Print Colour String
* 
* Used by the routines at #R$7CAF, #R$8C35, #R$9641 and #R$96EC.
* 
* DE Pointer to string data
printstringcolour:                     ; a1f3
       .push hl                        ; PUSH HL           ; Stash #REGhl on the stack.
       .call @screenaddress            ; CALL $9BA2        ; Call #R$9BA2.
       movb *de,a                      ; LD A,(DE)         ; Fetch the attribute byte.
       .ex_af_af'                      ; EX AF,AF'         ; Switch to the shadow #REGaf register.
       inc  de                         ; INC DE            ; Increment #REGde by one to point to the text of the
                                                           ; string.
       .exx                            ; EXX               ; Switch to the shadow registers.
       .pop hl                         ; POP HL            ; Restore #REGhl from the stack.
       .call @attributeaddress         ; CALL $9BD2        ; Call #R$9BD2.
* This entry point is used by the routine at #R$7D8A.
printstring_loop:                      ; a1ff
       .exx                            ; EXX               ; Switch back to the normal registers.
       movb *de,a                      ; LD A,(DE)         ; Fetch the character to print.
       movb a,r0                       ; BIT 7,A           ; {If bit 7 is set (which signifies the end of the
       andi r0,128*256                 ;                   
       jne  printstring_lastcharacter  ; JR NZ,$A210       ; string), jump to #R$A210.}
       .call @printcharacter           ; CALL $A1D3        ; Call #R$A1D3.
       inc  de                         ; INC DE            ; Increment #REGde by one.
       .exx                            ; EXX               ; Switch to the shadow registers.
       .ex_af_af'                      ; EX AF,AF'         ; Switch to the shadow #REGaf register.
       movb a,*hl                      ; LD (HL),A         ; Copy the attribute byte to the screen.
       ab   one,@l                     ; INC L             ; Increment #REGl by one.
       .ex_af_af'                      ; EX AF,AF'         ; Switch to the shadow #REGaf register.
       jmp  printstring_loop           ; JR $A1FF          ; Jump to #R$A1FF.
* Because the last character contains the terminator, it needs to be handled
* separately.
printstring_lastcharacter:             ; a210
       ; AND %01111111                 ; AND %01111111     ; Keep only bits 0-6 (i.e. strip the bit 7 terminator).
       .call @printcharacter           ; CALL $A1D3        ; Call #R$A1D3.
       .exx                            ; EXX               ; Switch to the shadow registers.
       .ex_af_af'                      ; EX AF,AF'         ; Switch to the shadow #REGaf register.
       movb a,*hl                      ; LD (HL),A         ; Copy the attribute byte to the screen.
       .ret                            ; RET               ; Return.
* View the equivalent code in;
* #LIST
* { #COOKIE$7488 }
* { #JETPAC$716C }
* { #LUNARJETMAN$0000 }
* { #PSSST$73ED }
* { #TRANZAM$0000 }
* LIST#

* Draw Side Panel
* 
* Used by the routine at #R$7D9A.
drawsidepanel:                         ; a219
       li   hl,sidepaneludg            ; LD HL,$B03A       ; {Write #R$B03A to #R$5E01.
       mov  hl,@fontpointer            ; LD ($5E01),HL     ; }
       li   hl,>00c0                   ; LD HL,$00C0       ; #REGhl=#N($00C0, $04, $04) (screen buffer location).
       li   de,sidepaneldata           ; LD DE,$B32A       ; #REGde=#R$B32A.
       li   bc,>0818                   ; LD BC,$0818       ; #REGbc=#N$08 (width), #N$18 (height).
sidepanel_loop_y:                      ; a228
       .push bc                        ; PUSH BC           ; {Stash #REGbc and #REGhl on the stack.
       .push hl                        ; PUSH HL           ; }
       .call @screenaddress            ; CALL $9BA2        ; Call #R$9BA2.
sidepanel_loop_x:                      ; a22d
       movb *de,a                      ; LD A,(DE)         ; #REGa=character data byte.
       inc  de                         ; INC DE            ; Increment the character data pointer by one.
       .call @printcharacter           ; CALL $A1D3        ; Call #R$A1D3.
       sb   one,b                      ; DJNZ $A22D        ; Decrease width counter by one and loop back to #R$A22D
       jne  sidepanel_loop_x           ;                   
                                                           ; until counter is zero.
       .pop hl                         ; POP HL            ; Restore #REGhl from the stack.
       movb h,a                        ; LD A,H            ; {#REGh=#REGh + #N$08.
       ab   @bytes+8,a                 ; ADD A,$08         ; 
       movb a,h                        ; LD H,A            ; }
       .pop bc                         ; POP BC            ; Restore #REGbc from the stack.
       sb   one,@c                     ; DEC C             ; {Decrease height counter by one and loop back to #R$A228
       jne  sidepanel_loop_y           ; JR NZ,$A228       ; until counter is zero.}
       b    @_a1ae                     ; JP $A1AE          ; Jump to #R$A1AE.

* Draw Side Panel Attributes
* 
* Used by the routine at #R$9147.
drawsidepanelattrs:                    ; a240
       li   hl,>00c0                   ; LD HL,$00C0       ; 
       .call @attributeaddress         ; CALL $9BD2        ; 
       li   bc,>0818                   ; LD BC,$0818       ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
       inv  a                          ; CPL               ; 
       andi a,7*256                    ; AND $07           ; 
       cb   a,@bytes+2                 ; CP $02            ; 
       jhe  _a255                      ; JR NC,$A255       ; 
       movb @bytes+68,a                ; LD A,$44          ; 
_a255:
       movb a,@e                       ; LD E,A            ; 
       .push de                        ; PUSH DE           ; 
_a257:
       .push bc                        ; PUSH BC           ; 
       .push hl                        ; PUSH HL           ; 
_a259:
       movb @e,*hl                     ; LD (HL),E         ; 
       ab   one,@l                     ; INC L             ; 
       sb   one,b                      ; DJNZ $A259        ; 
       jne  _a259                      ;                   
       .pop hl                         ; POP HL            ; 
       li   bc,>0020                   ; LD BC,$0020       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _a257                      ; JR NZ,$A257       ; 
       li   hl,_909b+45                ; LD HL,$90C8       ; 
       .call @attributeaddress         ; CALL $9BD2        ; 
       movb @currentroom_attribute,a   ; LD A,($5E1A)      ; 
       li   bc,>0303                   ; LD BC,$0303       ; 
       .call @_809a                    ; CALL $809A        ; 
       ab   one,@l                     ; INC L             ; 
       movb a,*hl                      ; LD (HL),A         ; 
       a    de,hl                      ; ADD HL,DE         ; 
       li   bc,>0202                   ; LD BC,$0202       ; 
       .call @_809a                    ; CALL $809A        ; 
       li   hl,_98c8+8                 ; LD HL,$98D0       ; 
       .call @attributeaddress         ; CALL $9BD2        ; 
       .pop de                         ; POP DE            ; 
       movb @e,*hl                     ; LD (HL),E         ; 
       li   hl,_7dc8                   ; LD HL,$7DC8       ; 
       .call @attributeaddress         ; CALL $9BD2        ; 
       li   bc,>0603                   ; LD BC,$0603       ; 
       movb @bytes+71,a                ; LD A,$47          ; 
       .call @_809a                    ; CALL $809A        ; 
       li   hl,_5fc8                   ; LD HL,$5FC8       ; 
       .call @attributeaddress         ; CALL $9BD2        ; 
       li   bc,>0604                   ; LD BC,$0604       ; 
       movb @bytes+70,a                ; LD A,$46          ; 
       .call @_809a                    ; CALL $809A        ; 
       li   hl,_4080+2120              ; LD HL,$48C8       ; 
       .call @attributeaddress         ; CALL $9BD2        ; 
       li   bc,>0601                   ; LD BC,$0601       ; 
       movb @bytes+69,a                ; LD A,$45          ; 
       .call @_809a                    ; CALL $809A        ; 
       li   bc,>0601                   ; LD BC,$0601       ; 
       movb @bytes+71,a                ; LD A,$47          ; 
       .call @_809a                    ; CALL $809A        ; 
       li   hl,>38c8                   ; LD HL,$38C8       ; 
       .call @attributeaddress         ; CALL $9BD2        ; 
       li   bc,>0601                   ; LD BC,$0601       ; 
       movb @bytes+67,a                ; LD A,$43          ; 
       .call @_809a                    ; CALL $809A        ; 
       li   bc,>0601                   ; LD BC,$0601       ; 
       movb @bytes+71,a                ; LD A,$47          ; 
       b    @_809a                     ; JP $809A          ; 

* Draw Lives
* 
* Used by the routines at #R$7D9A and #R$9443.
drawlives:                             ; a2ce
       .push ix                        ; PUSH IX           ; 
       li   ix,entitytodraw            ; LD IX,$A17D       ; 
       movb @gameoptions,a             ; LD A,($5E00)      ; 
       ; RLCA                          ; RLCA              ; 
       andi a,48*256                   ; AND $30           ; 
       socb one,a                      ; OR $01            ; 
       movb a,*ix                      ; LD (IX+$00),A     ; 
       movb @bytes+71,@5(ix)           ; LD (IX+$05),$47   ; 
       li   hl,handlerserf+4           ; LD HL,$8DC8       ; 
       movb @l,@3(ix)                  ; LD (IX+$03),L     ; 
       movb h,@4(ix)                   ; LD (IX+$04),H     ; 
       movb @playerlives,a             ; LD A,($5E21)      ; 
       movb a,@c                       ; LD C,A            ; 
       movb @bytes+3,b                 ; LD B,$03          ; 
_a2f2:
       .push bc                        ; PUSH BC           ; 
       .call @clearsprite              ; CALL $A185        ; 
       movb @c,a                       ; LD A,C            ; 
       ; AND A                         ; AND A             ; 
       jeq  _a2fd                      ; JR Z,$A2FD        ; 
       .call @drawentity               ; CALL $9F4A        ; 
_a2fd:
       movb @3(ix),a                   ; LD A,(IX+$03)     ; 
       ab   @bytes+16,a                ; ADD A,$10         ; 
       movb a,@3(ix)                   ; LD (IX+$03),A     ; 
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       ; JP P,$A30C                    ; JP P,$A30C        ; 
       sb   @c,@c                      ; LD C,$00          ; 
_a30c:
       sb   one,b                      ; DJNZ $A2F2        ; 
       jne  _a2f2                      ;                   
       .pop ix                         ; POP IX            ; 
       .ret                            ; RET               ; 

* Menu Icons
* 
* Used by the routine at #R$7C19.
menuicons:                             ; a311
       li   ix,entitytodraw            ; LD IX,$A17D       ; #REGix=#R$A17D.
       li   hl,menuentities            ; LD HL,$A331       ; #REGhl=#R$A331.
       movb @bytes+9,b                 ; LD B,$09          ; #REGb=#N$09 (counter).
menuicons_loop:                        ; a31a
       .push bc                        ; PUSH BC           ; Stash the counter on the stack.
       li   de,entitytodraw            ; LD DE,$A17D       ; {Copy #N$08 bytes of data from
       li   bc,>0008                   ; LD BC,$0008       ; #REGhl to #R$A17D.
       .ldir                           ; LDIR              ; }
       .push hl                        ; PUSH HL           ; {Stash #REGhl and #REGde on the
       .push de                        ; PUSH DE           ; stack.}
       .call @drawentity               ; CALL $9F4A        ; Call #R$9F4A.
       .call @setentityattributes      ; CALL $A00E        ; Call #R$A00E.
       .pop de                         ; POP DE            ; {Restore #REGde and #REGhl from
       .pop hl                         ; POP HL            ; the stack.}
       .pop bc                         ; POP BC            ; Restore the counter from the
                                                           ; stack.
       sb   one,b                      ; DJNZ $A31A        ; Decrease counter by one and loop
       jne  menuicons_loop             ;                   
                                                           ; back to #R$A31A until counter is
                                                           ; zero.
       .ret                            ; RET               ; Return.
* The sprite IDs are stored +#N$01 higher than their actual value.
menuentities:                          ; a331
       byte >32,>00,>00,>20,>4F,>46,>00,>00                          ; {#TABLE(default,centre,centre,centre,centre)
       byte >33,>00,>00,>30,>4F,>46,>00,>00                          ; { =h Address | =h Sprite | =h Attribute | =h Screen Buffer Location }
       byte >4A,>00,>00,>20,>37,>44,>00,>00                          ; { #N$A331 | #SPRITENAME(#PEEK($A331) - $01) | #N(#PEEK($A334)) | #N(#PEEK($A335) + #PEEK($A336) * $100) }
       byte >4B,>00,>00,>30,>37,>44,>00,>00                          ; { #N$A339 | #SPRITENAME(#PEEK($A339) - $01) | #N(#PEEK($A33C)) | #N(#PEEK($A33D) + #PEEK($A33E) * $100) }
       byte >48,>00,>00,>20,>1C,>43,>00,>00                          ; { #N$A341 | #SPRITENAME(#PEEK($A341) - $01) | #N(#PEEK($A344)) | #N(#PEEK($A335) + #PEEK($A346) * $100) }
       byte >49,>00,>00,>30,>1C,>43,>00,>00                          ; { #N$A349 | #SPRITENAME(#PEEK($A349) - $01) | #N(#PEEK($A34C)) | #N(#PEEK($A335) + #PEEK($A34E) * $100) }
       byte >01,>00,>00,>28,>67,>47,>00,>00                          ; { #N$A351 | #SPRITENAME(#PEEK($A351) - $01) | #N(#PEEK($A354)) | #N(#PEEK($A335) + #PEEK($A356) * $100) }
       byte >11,>00,>00,>28,>7F,>47,>00,>00                          ; { #N$A359 | #SPRITENAME(#PEEK($A359) - $01) | #N(#PEEK($A35C)) | #N(#PEEK($A335) + #PEEK($A35E) * $100) }
       byte >21,>00,>00,>28,>97,>47,>00,>00                          ; { #N$A361 | #SPRITENAME(#PEEK($A361) - $01) | #N(#PEEK($A364)) | #N(#PEEK($A335) + #PEEK($A366) * $100) }
                                                                     ; { #N$A369 | #SPRITENAME(#PEEK($A369) - $01) | #N(#PEEK($A36C)) | #N(#PEEK($A335) + #PEEK($A36E) * $100) }
                                                                     ; { #N$A371 | #SPRITENAME(#PEEK($A371) - $01) | #N(#PEEK($A374)) | #N(#PEEK($A375) + #PEEK($A376) * $100) }
                                                                     ; TABLE#}

* Determine Line Slope
* 
* Used by the routine at #R$9BEA.
_a379:
       movb h,@l                       ; LD L,H            ; 
       sb   h,h                        ; LD H,$00          ; 
       .exx                            ; EXX               ; 
       li   hl,>0000                   ; LD HL,$0000       ; 
       movb @bytes+8,b                 ; LD B,$08          ; 
_a382:
       .exx                            ; EXX               ; 
       ; SLA L                         ; SLA L             ; 
       ; RL H                          ; RL H              ; 
       .push hl                        ; PUSH HL           ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       joc  _a399                      ; JR C,$A399        ; TODO: check code. 
       .pop af                         ; POP AF            ; 
       .exx                            ; EXX               ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       inc  hl                         ; INC HL            ; 
_a391:
       sb   one,b                      ; DJNZ $A382        ; 
       jne  _a382                      ;                   
       .push hl                        ; PUSH HL           ; 
       .exx                            ; EXX               ; 
       movb @l,@e                      ; LD E,L            ; 
       movb h,d                        ; LD D,H            ; 
       .pop hl                         ; POP HL            ; 
       .ret                            ; RET               ; 
_a399:
       .pop hl                         ; POP HL            ; 
       .exx                            ; EXX               ; 
       a    hl,hl                      ; ADD HL,HL         ; 
       jmp  _a391                      ; JR $A391          ; 
* This entry point is used by the routine at #R$9BEA.
_a39e:
       .push de                        ; PUSH DE           ; 
       .ex_de_hl                       ; EX DE,HL          ; 
       li   hl,>0000                   ; LD HL,$0000       ; 
       ; AND A                         ; AND A             ; 
       s    de,hl                      ; SBC HL,DE         ; 
       .pop de                         ; POP DE            ; 
       .ret                            ; RET               ; 

* Sounds: Click
* 
* Used by the routines at #R$96EC, #R$A41B, #R$A427, #R$A438 and #R$A445.
soundsclick:                           ; a3a8
       movb one,@c                     ; LD C,$01          ; 
* This entry point is used by the routines at #R$A3BD, #R$A3C2, #R$A3C7,
* #R$A3D8, #R$A3E0, #R$A3EF, #R$A408, #R$A45F, #R$A485 and #R$A4B0.
soundsbeep:                            ; a3aa
       movb @bytes+16,a                ; LD A,$10          ; 
       ; OUT ($FE),A                   ; OUT ($FE),A       ; 
       .push bc                        ; PUSH BC           ; 
_a3af:
       sb   one,b                      ; DJNZ $A3AF        ; 
       jne  _a3af                      ;                   
       .pop bc                         ; POP BC            ; 
       .push bc                        ; PUSH BC           ; 
       sb   a,a                        ; XOR A             ; 
       ; OUT ($FE),A                   ; OUT ($FE),A       ; 
_a3b6:
       sb   one,b                      ; DJNZ $A3B6        ; 
       jne  _a3b6                      ;                   
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  soundsbeep                 ; JR NZ,$A3AA       ; 
       .ret                            ; RET               ; 

* Sounds: Inventory
* 
* Used by the routine at #R$9252.
soundsinventory:                       ; a3bd
       li   bc,_4040                   ; LD BC,$4040       ; 
       jmp  soundsbeep                 ; JR $A3AA          ; 

* Sounds: Drop Item
* 
* Used by the routine at #R$9252.
soundsdrop:                            ; a3c2
       li   bc,>2080                   ; LD BC,$2080       ; 
       jmp  soundsbeep                 ; JR $A3AA          ; 

* Sounds: Walking
* 
* Used by the routines at #R$80D2, #R$8DC4 and #R$8E26.
soundswalking:                         ; a3c7
       li   hl,_5e2f                   ; LD HL,$5E2F       ; 
       ab   one,*hl                    ; INC (HL)          ; 
       movb *hl,a                      ; LD A,(HL)         ; 
       movb a,r0                       ; BIT 1,A           ; 
       andi r0,2*256                   ;                   
       jeq  soundswalklow              ; JR Z,$A3D8        ; 
       andi a,1*256                    ; AND $01           ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       li   bc,loading+4               ; LD BC,$4004       ; 
       jmp  soundsbeep                 ; JR $A3AA          ; 

* Sounds: Walk Low
* 
* Used by the routine at #R$A3C7.
soundswalklow:                         ; a3d8
       andi a,1*256                    ; AND $01           ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       li   bc,_6004                   ; LD BC,$6004       ; 
       jmp  soundsbeep                 ; JR $A3AA          ; 

* Sounds: Start Beep
* 
* Used by the routine at #R$8C63.
soundsstart:                           ; a3e0
       li   bc,_8060                   ; LD BC,$8060       ; 
       jmp  soundsbeep                 ; JR $A3AA          ; 

* Sounds: Touching
* 
* Used by the routines at #R$8301 and #R$96EC.
soundstouching:                        ; a3e5
       li   bc,initialisation_mummy+3  ; LD BC,$6410       ; 

* Queue Sound
* 
* Used by the routines at #R$A403 and #R$A485.
queuesound:                            ; a3e8
       li   hl,_eaa0                   ; LD HL,$EAA0       ; 
       movb b,*hl                      ; LD (HL),B         ; 
       inc  hl                         ; INC HL            ; 
       movb @c,*hl                     ; LD (HL),C         ; 
       .ret                            ; RET               ; 

* Sound Effect
soundeffect:                           ; a3ef
       sb   one,@1(ix)                 ; DEC (IX+$01)      ; 
       jeq  clearsound                 ; JR Z,$A3FE        ; 
       movb @1(ix),a                   ; LD A,(IX+$01)     ; 
       movb a,@c                       ; LD C,A            ; 
       li   r0,67*256                  ; XOR $43           ; 
       xor  r0,a                       ;                   
       movb a,b                        ; LD B,A            ; 
       b    @soundsbeep                ; JP $A3AA          ; 

* Clear Sound
* 
* Used by the routines at #R$A3EF, #R$A408 and #R$A485.
clearsound:                            ; a3fe
       sb   *ix,*ix                    ; LD (IX+$00),$00   ; 
       .ret                            ; RET               ; 

* Sounds: Entry
* 
* Used by the routine at #R$9147.
soundsentry:                           ; a403
       li   bc,door_08_06+13           ; LD BC,$650A       ; 
       jmp  queuesound                 ; JR $A3E8          ; 

* Sound Effect Next Note
soundeffectnext:                       ; a408
       sb   one,@1(ix)                 ; DEC (IX+$01)      ; 
       jeq  clearsound                 ; JR Z,$A3FE        ; 
       movb @1(ix),a                   ; LD A,(IX+$01)     ; 
       movb a,@c                       ; LD C,A            ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       inv  a                          ; CPL               ; 
       li   r0,64*256                  ; XOR $40           ; 
       xor  r0,a                       ;                   
       movb a,b                        ; LD B,A            ; 
       b    @soundsbeep                ; JP $A3AA          ; 

* Sounds: Axe Throw
* 
* Used by the routine at #R$80D2.
soundsaxethrow:                        ; a41b
       movb @bytes+12,d                ; LD D,$0C          ; 
_a41d:
       movb d,a                        ; LD A,D            ; 
       ; RRCA                          ; RRCA              ; 
       movb a,b                        ; LD B,A            ; 
       .call @soundsclick              ; CALL $A3A8        ; 
       sb   one,d                      ; DEC D             ; 
       jne  _a41d                      ; JR NZ,$A41D       ; 
       .ret                            ; RET               ; 

* Sounds: Sword
* 
* Used by the routine at #R$8209.
soundssword:                           ; a427
       movb @bytes+16,d                ; LD D,$10          ; 
_a429:
       movb d,a                        ; LD A,D            ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       li   r0,7*256                   ; XOR $07           ; 
       xor  r0,a                       ;                   
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       movb a,b                        ; LD B,A            ; 
       .call @soundsclick              ; CALL $A3A8        ; 
       sb   one,d                      ; DEC D             ; 
       jne  _a429                      ; JR NZ,$A429       ; 
       .ret                            ; RET               ; 

* Sounds: Fireball
* 
* Used by the routine at #R$80D2.
soundsfireball:                        ; a438
       movb @bytes+8,d                 ; LD D,$08          ; 
_a43a:
       movb d,a                        ; LD A,D            ; 
       inv  a                          ; CPL               ; 
       ; RLCA                          ; RLCA              ; 
       movb a,b                        ; LD B,A            ; 
       .call @soundsclick              ; CALL $A3A8        ; 
       sb   one,d                      ; DEC D             ; 
       jne  _a43a                      ; JR NZ,$A43A       ; 
       .ret                            ; RET               ; 

* Sounds: Weapon Pop
* 
* Used by the routine at #R$8209.
soundsweaponpop:                       ; a445
       movb @numcreatures,a            ; LD A,($5E25)      ; 
       ab   one,a                      ; INC A             ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       ; RLCA                          ; RLCA              ; 
       socb @bytes+15,a                ; OR $0F            ; 
       andi a,127*256                  ; AND $7F           ; 
       movb a,d                        ; LD D,A            ; 
_a452:
       movb d,a                        ; LD A,D            ; 
       li   r0,32*256                  ; XOR $20           ; 
       xor  r0,a                       ;                   
       movb a,b                        ; LD B,A            ; 
       .call @soundsclick              ; CALL $A3A8        ; 
       sb   one,d                      ; DEC D             ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       sb   one,d                      ; DEC D             ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       jmp  _a452                      ; JR $A452          ; 

* Sounds: Appear
* 
* Used by the routine at #R$8C63.
soundsappear:                          ; a45f
       movb @6(ix),a                   ; LD A,(IX+$06)     ; 
       inv  a                          ; CPL               ; 
       ; RLCA                          ; RLCA              ; 
       andi a,63*256                   ; AND $3F           ; 
       socb @bytes+64,a                ; OR $40            ; 
       movb a,b                        ; LD B,A            ; 
       movb @bytes+16,@c               ; LD C,$10          ; 
       b    @soundsbeep                ; JP $A3AA          ; 

* Sounds: Door
* 
* Used by the routines at #R$917D and #R$91C5.
soundsdoor:                            ; a46e
       li   bc,>0830                   ; LD BC,$0830       ; 
       li   hl,>0000                   ; LD HL,$0000       ; 
_a474:
       movb *hl,@e                     ; LD E,(HL)         ; 
       inc  hl                         ; INC HL            ; 
       .push bc                        ; PUSH BC           ; 
_a477:
       ; RRC E                         ; RRC E             ; 
       movb @e,a                       ; LD A,E            ; 
       andi a,16*256                   ; AND $10           ; 
       ; OUT ($FE),A                   ; OUT ($FE),A       ; 
       sb   one,b                      ; DJNZ $A477        ; 
       jne  _a477                      ;                   
       .pop bc                         ; POP BC            ; 
       sb   one,@c                     ; DEC C             ; 
       jne  _a474                      ; JR NZ,$A474       ; 
       .ret                            ; RET               ; 

* Sounds: Eating
* 
* Used by the routine at #R$8C63.
soundseating:                          ; a485
       li   bc,setentityattributes+2   ; LD BC,$A010       ; 
       b    @queuesound                ; JP $A3E8          ; 
_a48b:
       sb   one,@1(ix)                 ; DEC (IX+$01)      ; 
       ; JP M,$A3FE                    ; JP M,$A3FE        ; 
       movb @1(ix),@c                  ; LD C,(IX+$01)     ; 
       sb   b,b                        ; LD B,$00          ; 
       li   hl,tabletoneseating        ; LD HL,$A4A0       ; 
       a    bc,hl                      ; ADD HL,BC         ; 
       movb *hl,b                      ; LD B,(HL)         ; 
       movb @bytes+8,@c                ; LD C,$08          ; 
       b    @soundsbeep                ; JP $A3AA          ; 
tabletoneseating:                      ; a4a0
       byte >80,>90,>80,>90,>80,>90,>80,>90                          ; 
       byte >80,>70,>60,>50,>40,>30,>20,>10                          ; 

* Sounds: Bounce
* 
* Used by the routine at #R$8209.
soundsbounce:                          ; a4b0
       movb @bytes+64,d                ; LD D,$40          ; 
       sb   one,d                      ; DEC D             ; 
       jne  !                          ; RET Z             ; 
       .ret                            ;                   
!
       movb d,a                        ; LD A,D            ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       ; RRCA                          ; RRCA              ; 
       movb a,b                        ; LD B,A            ; 
       movb @bytes+4,@c                ; LD C,$04          ; 
       b    @soundsbeep                ; JP $A3AA          ; 

* Sprites Table
spritestable:                          ; a4be
       data _ae0c                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ae31                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ae56                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ae31                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ae7b                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _aea0                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _aec5                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _aea0                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ad9d                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _adc2                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ade7                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _adc2                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ad2e                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ad53                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ad78                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ad53                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b87c                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b8a5                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b8ce                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b8a5                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b8f7                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b920                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b949                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b920                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b801                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b82a                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b853                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b82a                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b786                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b7af                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b7d8                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b7af                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b614                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b639                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b65e                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b639                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b683                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b6a8                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b6cd                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b6a8                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b5a5                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b5ca                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b5ef                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b5ca                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b536                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b55b                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b580                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b55b                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _aeec                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bbdc                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bc05                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bb60                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bb7f                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bb9e                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bbbd                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ba16                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b9fb                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b9e2                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b98b                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b9a6                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b9c7                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b972                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ba37                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ba58                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ba79                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ba9a                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _babb                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _badc                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bafd                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bb1e                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bb3f                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bc2e                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bc4f                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bc70                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bc9f                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bd30                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _bd57                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _d2c0                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _d2d7                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c124                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c1aa                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c1cb                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c1f4                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c219                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _aff8                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _b019                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _af6c                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c23a                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c253                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c26e                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c28d                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c310                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c32d                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c34a                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c36b                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c38c                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c3a3                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c3b6                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c3df                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _aeea                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _aeea                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _aeea                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _aeea                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c408                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c429                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c44a                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c46f                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c5f8                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c60f                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c62a                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c649                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cb46                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cb77                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cba8                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cb77                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cbd9                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cc0a                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cc3b                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cc0a                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cc6c                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cc9d                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ccce                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cc9d                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ccff                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cd30                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cd61                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cd30                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _af0d                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _af2e                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _af43                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c16e                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _af95                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _afb6                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _afd7                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c18f                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _c14d                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cde2                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cdbd                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _d29f                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _d1d5                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _d1ec                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _d20b                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cd92                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ce01                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ce2e                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ce5b                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ce88                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _ceb5                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cedc                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cf03                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cf2a                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cf51                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cf78                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cf93                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _cfae                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _d3d3                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _d404                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _d435                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _d404                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _aeea                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
       data _d232                                                    ; Sprite ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A4BE) / 2)) #SPRITENAME((#PC - $A4BE) /
                                                                     ; 2).
* View the equivalent code in;
* #LIST
* { #COOKIE$7702 }
* { #JETPAC$0000 }
* { #LUNARJETMAN$0000 }
* { #PSSST$761A }
* { #TRANZAM$0000 }
* LIST#

* Graphics Table
graphicstable:                         ; a600
       data _bcce                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _a76e                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _b3ea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _aeea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _aeea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _aeea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _aeea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _a69c                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _a69c                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _a69c                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _a69c                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c2ae                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c2ae                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c2ae                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c2ae                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _b6f2                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _b4c6                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _a7ec                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c542                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
_a626:
       data _c48c                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c66a                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c6ac                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c6ce                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c7f2                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c770                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _cfd5                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c874                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c9ca                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _c9ec                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _ca0e                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _aeea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _ca82                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _a76e                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _cae4                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _bcce                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _d069                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _d253                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _d2ee                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).
       data _d466                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A600) / 2)) #GRAPHICNAME((#PC - $A600)
                                                                     ; / 2).

* Graphics Attributes Table
graphicsattributestable:               ; a64e
       data _a7de                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _a7d0                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _b4ac                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _aeea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _aeea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _aeea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _aeea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _a6fe                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _a70c                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _a71a                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _a728                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _a736                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _a744                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _a752                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _a760                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _b774                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _b528                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _a846                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _aeea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _aeea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _c960                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _c96a                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _c970                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _c998                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _c986                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _d057                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _c9aa                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _ca50                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _ca56                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _ca5c                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _aeea                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _ca74                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _a7d0                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _ca66                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _a7de                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _d1ab                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _d295                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _d3b8                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).
       data _d4ef                                                    ; Graphic ID: #R(#PEEK(#PC) + #PEEK(#PC + 1) *
                                                                     ; $100)(#N((#PC - $A64E) / 2)) #GRAPHICNAME((#PC - $A64E)
                                                                     ; / 2).

* Graphic: Door Locked
_a69c:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >FF,>1B,>30,>FF                                          ; {#GRAPHIC$07(door-locked)
       byte >1F,>1B,>30,>F8                                          ; 
       byte >02,>1B,>30,>40                                          ; 
       byte >3E,>1B,>30,>7C                                          ; 
       byte >7F,>33,>18,>3E                                          ; 
       byte >07,>33,>18,>20                                          ; 
       byte >F8,>33,>18,>1F                                          ; 
       byte >F8,>33,>00,>1F                                          ; 
       byte >08,>63,>07,>08                                          ; 
       byte >F0,>63,>17,>0F                                          ; 
       byte >F0,>63,>19,>0F                                          ; 
       byte >1E,>63,>0E,>08                                          ; 
       byte >FE,>C3,>00,>1F                                          ; 
       byte >F8,>C3,>06,>1F                                          ; 
       byte >CC,>C3,>06,>33                                          ; 
       byte >3E,>C3,>06,>7C                                          ; 
       byte >7D,>80,>01,>BE                                          ; 
       byte >3B,>F0,>0F,>DC                                          ; 
       byte >17,>BF,>FD,>E8                                          ; 
       byte >07,>7B,>DE,>E0                                          ; 
       byte >03,>7B,>DE,>C0                                          ; 
       byte >00,>77,>EE,>00                                          ; 
       byte >00,>07,>E0,>00                                          ; 
       byte >00,>00,>00,>00                                          ; }

* Graphic Attributes: Door Locked
* 
* .
* 
* .
* 
* Red.
_a6fe:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >43,>42,>42,>43                                          ; {#GRAPHIC$07,1(door-locked-red)
       byte >43,>42,>46,>43                                          ; 
       byte >43,>43,>43,>43                                          ; }
* Green.
_a70c:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >43,>44,>44,>43                                          ; {#GRAPHIC$08,1(door-locked-green)
       byte >43,>44,>46,>43                                          ; 
       byte >43,>43,>43,>43                                          ; }
* Cyan.
_a71a:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >43,>45,>45,>43                                          ; {#GRAPHIC$09,1(door-locked-cyan)
       byte >43,>45,>46,>43                                          ; 
       byte >43,>43,>43,>43                                          ; }
* Yellow.
_a728:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >43,>46,>46,>43                                          ; {#GRAPHIC$0A,1(door-locked-yellow)
       byte >43,>46,>43,>43                                          ; 
       byte >43,>43,>43,>43                                          ; }

* Graphic Attributes: Cave Door Locked
* 
* .
* 
* .
* 
* Red.
_a736:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >FF,>42,>42,>FF                                          ; {#GRAPHIC$0B,1(cave-door-locked-red)
       byte >FF,>42,>46,>FF                                          ; 
       byte >FF,>FF,>FF,>FF                                          ; }
* Green.
_a744:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >FF,>44,>44,>FF                                          ; {#GRAPHIC$0C,1(cave-door-locked-green)
       byte >FF,>44,>46,>FF                                          ; 
       byte >FF,>FF,>FF,>FF                                          ; }
* Cyan.
_a752:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >FF,>45,>45,>FF                                          ; {#GRAPHIC$0D,1(cave-door-locked-cyan)
       byte >FF,>45,>46,>FF                                          ; 
       byte >FF,>FF,>FF,>FF                                          ; }
* Yellow.
_a760:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >FF,>46,>46,>FF                                          ; {#GRAPHIC$0E,1(cave-door-locked-yellow)
       byte >FF,>46,>43,>FF                                          ; 
       byte >FF,>FF,>FF,>FF                                          ; }

* Graphic: Door Frame
_a76e:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >FF,>00,>00,>FF                                          ; {#GRAPHIC$01(door)
       byte >1F,>00,>00,>F8                                          ; 
       byte >02,>00,>00,>40                                          ; 
       byte >3E,>00,>00,>7C                                          ; 
       byte >7C,>00,>00,>3E                                          ; 
       byte >04,>00,>00,>20                                          ; 
       byte >F8,>00,>00,>1F                                          ; 
       byte >F8,>00,>00,>1F                                          ; 
       byte >08,>00,>00,>08                                          ; 
       byte >F0,>00,>00,>0F                                          ; 
       byte >F0,>00,>00,>0F                                          ; 
       byte >10,>00,>00,>08                                          ; 
       byte >F0,>00,>00,>1F                                          ; 
       byte >F8,>00,>00,>1F                                          ; 
       byte >CC,>00,>00,>33                                          ; 
       byte >3E,>00,>00,>7C                                          ; 
       byte >7D,>80,>01,>BE                                          ; 
       byte >3B,>F0,>0F,>DC                                          ; 
       byte >17,>BF,>FD,>E8                                          ; 
       byte >07,>7B,>DE,>E0                                          ; 
       byte >03,>7B,>DE,>C0                                          ; 
       byte >00,>77,>EE,>00                                          ; 
       byte >00,>07,>E0,>00                                          ; 
       byte >00,>00,>00,>00                                          ; }

* Graphic Attributes: Door Frame
_a7d0:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >43,>00,>00,>43                                          ; {#GRAPHIC$01,1(door-colour)
       byte >43,>00,>00,>43                                          ; 
       byte >43,>43,>43,>43                                          ; }

* Graphic Attributes: Cave Door Frame
_a7de:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >FF,>FF,>FF,>FF                                          ; {#GRAPHIC$00,1(cave-door-colour)
       byte >FF,>FF,>FF,>FF                                          ; 
       byte >FF,>FF,>FF,>FF                                          ; }

* Graphic: Table
_a7ec:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >16                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >60,>00,>00,>06                                          ; {#GRAPHIC$11(table)
       byte >70,>00,>00,>0E                                          ; 
       byte >30,>00,>00,>0C                                          ; 
       byte >30,>00,>00,>0C                                          ; 
       byte >70,>00,>00,>0E                                          ; 
       byte >70,>00,>00,>0E                                          ; 
       byte >78,>00,>00,>1E                                          ; 
       byte >3F,>FF,>FF,>FC                                          ; 
       byte >7F,>FF,>FF,>FE                                          ; 
       byte >80,>00,>00,>01                                          ; 
       byte >7F,>FF,>FF,>FE                                          ; 
       byte >FF,>FF,>FF,>FF                                          ; 
       byte >FF,>FF,>FF,>FF                                          ; 
       byte >FF,>FF,>FF,>FF                                          ; 
       byte >7F,>FF,>FF,>FE                                          ; 
       byte >7F,>FF,>FF,>FE                                          ; 
       byte >7F,>FF,>FF,>FE                                          ; 
       byte >3F,>FF,>FF,>FC                                          ; 
       byte >3F,>FF,>FF,>FC                                          ; 
       byte >1F,>FF,>FF,>F8                                          ; 
       byte >1F,>FF,>FF,>F8                                          ; 
       byte >0F,>FF,>FF,>F0                                          ; }

* Graphic Attributes: Table
_a846:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >45,>45,>45,>45                                          ; {#GRAPHIC$11,1(table-colour)
       byte >42,>42,>42,>42                                          ; 
       byte >42,>42,>42,>42                                          ; }

* Data block at A854
_a854:
       byte >42,>00,>43,>02,>44,>03,>45,>02
       byte >46,>04,>47,>02,>46,>03,>45,>02
       byte >44,>04,>43,>00,>42,>03,>43,>03
       byte >44,>03,>45,>00,>46,>04,>47,>04
       byte >46,>04,>45,>04,>44,>04,>43,>00
       byte >42,>03,>43,>03,>44,>03,>45,>00
       byte >46,>04,>47,>03,>46,>05,>45,>00
       byte >44,>08,>43,>01,>42,>04,>43,>02
       byte >44,>03,>45,>02,>46,>04,>47,>02
       byte >46,>03,>45,>02,>44,>05,>43,>00
       byte >42,>04,>43,>00,>44,>03,>45,>00
       byte >46,>04,>47,>00,>46,>03,>45,>05
       byte >44,>01,>43,>0A,>42,>0A,>43,>01
       byte >44,>0A,>45,>01,>46,>09,>47,>09
       byte >46,>01,>45,>01,>44,>01,>43,>01
       byte >42,>01,>43,>01,>44,>01,>45,>09
       byte >46,>01,>47,>01,>46,>0A,>45,>01
       byte >44,>09,>43,>01,>42,>01,>43,>09
       byte >45,>01,>45,>0A,>46,>09,>47,>01
       byte >46,>01,>45,>0A,>44,>01,>43,>09
       byte >42,>01,>43,>0A,>44,>09,>45,>01
       byte >46,>01,>47,>01,>46,>00,>45,>00
       byte >44,>00,>43,>00,>42,>00,>47,>00
       byte >43,>00,>44,>00,>45,>00,>46,>00
       byte >47,>00,>46,>00,>45,>00,>44,>00
       byte >43,>00,>42,>00,>43,>00,>44,>00
       byte >45,>00,>46,>00,>47,>00,>46,>00
       byte >45,>00,>44,>00,>43,>00,>42,>04
       byte >43,>00,>44,>05,>45,>05,>46,>03
       byte >47,>01,>46,>00,>45,>00,>44,>03
       byte >43,>00,>42,>04,>43,>00,>44,>03
       byte >45,>00,>46,>04,>47,>00,>46,>00
       byte >45,>00,>44,>00,>43,>00,>42,>00
       byte >43,>00,>44,>00,>45,>00,>46,>00
       byte >47,>00,>46,>00,>45,>00,>44,>04
       byte >43,>04,>42,>04,>47,>0B,>43,>01
       byte >44,>01,>45,>01,>46,>01,>47,>01
       byte >46,>01,>00,>00,>00,>0C,>38,>38
       byte >DF,>A9,>EF,>A9,>28,>28,>04,>AA
       byte >78,>AA,>38,>38,>34,>AB,>54,>AB
       byte >38,>18,>7D,>AB,>EF,>A9,>18,>38
       byte >8D,>AB,>EF,>A9,>10,>30,>4A,>AC
       byte >E9,>AB,>10,>30,>9D,>AB,>E9,>AB
       byte >30,>10,>96,>AC,>E9,>AB,>30,>10
       byte >E2,>AC,>E9,>AB,>30,>18,>D0,>BE
       byte >7E,>BD,>18,>30,>54,>BE,>7E,>BD
       byte >38,>38,>D0,>A9,>D8,>A9,>38,>38
       byte >A9,>97,>09,>98,>04,>BF,>04,>00
       byte >1F,>BF,>1F,>00,>00,>01,>FF,>02
       byte >03,>FF,>FF,>04,>BB,>04,>04,>BB
       byte >04,>BB,>BB,>1F,>A0,>1F,>1F,>A0
       byte >1F,>A0,>A0,>00,>01,>03,>04,>FF
       byte >02,>01,>03,>06,>FF,>05,>01,>04
       byte >06,>FF,>07,>03,>04,>06,>FF,>FF
       byte >93,>05,>24,>7D,>25,>7D,>02,>8E
       byte >11,>AD,>26,>B7,>46,>AD,>4F,>90
       byte >3B,>96,>2E,>90,>79,>AD,>70,>90
       byte >8C,>B9,>97,>B4,>7A,>96,>81,>93
       byte >8A,>99,>82,>94,>97,>85,>A2,>BF
       byte >B9,>9C,>B8,>9B,>AD,>79,>AE,>79
       byte >91,>71,>90,>70,>90,>4F,>AD,>46
       byte >28,>72,>2F,>70,>12,>79,>11,>78
       byte >0A,>74,>12,>46,>2F,>4F,>26,>3C
       byte >2F,>3C,>05,>2C,>17,>2C,>2F,>2B
       byte >17,>13,>37,>24,>38,>25,>24,>02
       byte >23,>01,>46,>12,>4F,>2F,>79,>12
       byte >70,>2F,>83,>26,>83,>2F,>94,>2F
       byte >9C,>37,>9B,>38,>BE,>23,>BF,>24
       byte >AC,>17,>93,>17,>00,>2F,>31,>39
       byte >FF,>01,>FF,>02,>FF,>03,>01,>04
       byte >20,>FF,>04,>FF,>05,>06,>08,>04
       byte >FF,>06,>FF,>07,>06,>08,>0B,>FF
       byte >08,>FF,>09,>08,>04,>02,>FF,>0A
       byte >0C,>0B,>06,>FF,>0B,>FF,>0C,>FF
       byte >0D,>13,>0C,>11,>FF,>0E,>0F,>0C
       byte >0B,>FF,>0F,>FF,>10,>FF,>11,>10
       byte >FF,>12,>15,>18,>10,>FF,>13,>10
       byte >FF,>14,>17,>13,>FF,>15,>FF,>16
       byte >19,>FF,>17,>FF,>18,>FF,>19,>FF
       byte >1A,>19,>35,>FF,>1B,>1A,>36,>16
       byte >FF,>1C,>02,>1D,>1E,>FF,>1D,>FF
       byte >1E,>FF,>1F,>FF,>20,>1F,>FF,>21
       byte >1E,>22,>25,>FF,>22,>1D,>FF,>23
       byte >22,>24,>25,>FF,>24,>FF,>25,>FF
       byte >26,>24,>25,>28,>FF,>27,>24,>29
       byte >28,>FF,>28,>FF,>29,>FF,>2A,>FF
       byte >2B,>29,>FF,>2C,>28,>2D,>FF,>2D
       byte >FF,>2E,>2A,>2D,>FF,>2F,>2D,>30
       byte >FF,>30,>31,>2E,>FF,>31,>FF,>32
       byte >31,>33,>39,>FF,>33,>FF,>34,>33
       byte >36,>FF,>35,>FF,>36,>FF,>37,>FF
       byte >38,>33,>37,>39,>FF,>39,>FF,>FF
       byte >02,>A3,>02,>1C,>1C,>02,>A3,>02
       byte >BD,>1C,>BD,>A3,>A3,>BD,>1C,>BD
       byte >30,>A0,>1F,>8F,>1F,>30,>30,>1F
       byte >8F,>1F,>A0,>30,>A0,>8F,>8F,>A0
       byte >00,>09,>07,>01,>FF,>02,>01,>03
       byte >0B,>FF,>04,>03,>05,>0D,>FF,>06
       byte >05,>0F,>07,>FF,>08,>07,>09,>0F
       byte >FF,>0A,>01,>09,>0B,>FF,>0C,>03
       byte >0B,>0D,>FF,>0E,>05,>0D,>0F,>FF
       byte >FF,>03,>9C,>03,>23,>BC,>23,>BC
       byte >9C,>1F,>80,>1F,>3F,>A0,>3F,>A0
       byte >80,>23,>03,>9C,>03,>9C,>BC,>23
       byte >BC,>3F,>1F,>80,>1F,>80,>A0,>3F
       byte >A0,>8A,>BA,>08,>04,>35,>BB,>8A
       byte >BB,>B7,>04,>38,>28,>38,>3D,>3D
       byte >3D,>3D,>51,>41,>51,>41,>63,>45
       byte >63,>45,>73,>48,>73,>48,>81,>4B
       byte >81,>4B,>8D,>4E,>8D,>4E,>97,>50
       byte >97,>50,>9F,>6F,>9F,>6F,>97,>71
       byte >97,>71,>8D,>74,>8D,>74,>81,>77
       byte >81,>77,>73,>7A,>73,>7A,>63,>7E
       byte >63,>7E,>51,>82,>51,>82,>3D,>87
       byte >3D,>87,>28,>35,>BA,>01,>FF,>02
       byte >03,>01,>FF,>03,>FF,>04,>01,>03
       byte >FF,>05,>01,>FF,>06,>23,>05,>FF
       byte >07,>FF,>08,>21,>07,>FF,>09,>FF
       byte >0A,>1F,>09,>FF,>0B,>FF,>0C,>1D
       byte >0B,>FF,>0D,>FF,>0E,>1B,>0D,>FF
       byte >0F,>FF,>10,>19,>0F,>FF,>11,>FF
       byte >12,>17,>11,>02,>FF,>17,>03,>FF
       byte >18,>17,>FF,>19,>FF,>1A,>19,>FF
       byte >1B,>FF,>1C,>1B,>FF,>1D,>FF,>1E
       byte >1D,>FF,>1F,>FF,>20,>1F,>FF,>21
       byte >FF,>22,>21,>FF,>23,>FF,>24,>04
       byte >05,>23,>FF,>25,>FF,>FF,>8A,>05
       byte >08,>BB,>38,>04,>8A,>04,>B7,>BB
       byte >38,>97,>38,>82,>3D,>82,>3D,>6E
       byte >41,>6E,>41,>5C,>45,>5C,>45,>4C
       byte >48,>4C,>48,>3E,>4B,>3E,>4B,>32
       byte >4E,>32,>4E,>28,>50,>28,>50,>20
       byte >6F,>20,>6F,>28,>71,>28,>71,>32
       byte >74,>32,>74,>3E,>77,>3E,>77,>4C
       byte >7A,>4C,>7A,>5C,>7E,>5C,>7E,>6E
       byte >82,>6E,>82,>82,>87,>82,>87,>97
       byte >35,>05,>05,>8A,>BB,>08,>04,>38
       byte >04,>8A,>BB,>B7,>97,>38,>82,>38
       byte >82,>3D,>64,>3D,>6E,>41,>5C,>41
       byte >5C,>45,>4C,>45,>4C,>48,>3E,>48
       byte >3E,>4B,>32,>4B,>32,>4E,>28,>4E
       byte >28,>50,>20,>50,>20,>6F,>28,>6F
       byte >28,>71,>32,>71,>32,>74,>3E,>74
       byte >3E,>77,>4C,>77,>4C,>7A,>5C,>7A
       byte >5C,>7E,>6E,>7E,>6E,>82,>82,>82
       byte >82,>87,>97,>87,>05,>35,>BA,>8A
       byte >04,>08,>BB,>35,>BB,>8A,>04,>B7
       byte >28,>38,>3D,>38,>3D,>3D,>51,>3D
       byte >51,>41,>63,>41,>63,>45,>73,>45
       byte >73,>48,>81,>48,>81,>4B,>8D,>4B
       byte >8D,>4E,>97,>4E,>97,>50,>9F,>50
       byte >9F,>6F,>97,>6F,>97,>71,>8D,>71
       byte >8D,>74,>81,>74,>81,>77,>73,>77
       byte >73,>7A,>63,>7A,>63,>7E,>51,>7E
       byte >51,>82,>3D,>82,>3D,>87,>28,>87
       byte >BA,>35

* Sprite: Knight
* 
* .
* 
* .
* 
* Down Frame 1.
_ad2e:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >3C,>00                                                  ; {#SPRITE$0C(knight-down-01*)
       byte >3C,>F0                                                  ; 
       byte >1F,>78                                                  ; 
       byte >1B,>94                                                  ; 
       byte >05,>4E                                                  ; 
       byte >6B,>6E                                                  ; 
       byte >E9,>2C                                                  ; 
       byte >EF,>E8                                                  ; 
       byte >44,>40                                                  ; 
       byte >26,>C8                                                  ; 
       byte >20,>08                                                  ; 
       byte >30,>18                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >13,>F0                                                  ; 
       byte >13,>F0                                                  ; 
       byte >09,>E0                                                  ; 
       byte >05,>C0                                                  ; 
       byte >02,>80                                                  ; }
* Down Frame 2.
_ad53:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1E,>F0                                                  ; {#SPRITE$0D(knight-down-02*)
       byte >0E,>E0                                                  ; 
       byte >05,>40                                                  ; 
       byte >03,>F0                                                  ; 
       byte >65,>4C                                                  ; 
       byte >EB,>6E                                                  ; 
       byte >E9,>2E                                                  ; 
       byte >6F,>EC                                                  ; 
       byte >04,>40                                                  ; 
       byte >26,>C8                                                  ; 
       byte >20,>08                                                  ; 
       byte >30,>18                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >13,>F0                                                  ; 
       byte >13,>F0                                                  ; 
       byte >09,>E0                                                  ; 
       byte >05,>C0                                                  ; 
       byte >02,>80                                                  ; }
* Down Frame 3.
_ad78:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>78                                                  ; {#SPRITE$0E(knight-down-03*)
       byte >1E,>78                                                  ; 
       byte >3D,>F0                                                  ; 
       byte >53,>B0                                                  ; 
       byte >E5,>40                                                  ; 
       byte >EB,>6C                                                  ; 
       byte >69,>2E                                                  ; 
       byte >2F,>EE                                                  ; 
       byte >04,>44                                                  ; 
       byte >26,>C8                                                  ; 
       byte >20,>08                                                  ; 
       byte >30,>18                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >13,>F0                                                  ; 
       byte >13,>F0                                                  ; 
       byte >09,>E0                                                  ; 
       byte >05,>C0                                                  ; 
       byte >02,>80                                                  ; }
* Up Frame 1.
_ad9d:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >3C,>00                                                  ; {#SPRITE$08(knight-up-01*)
       byte >3C,>F0                                                  ; 
       byte >1F,>78                                                  ; 
       byte >1B,>94                                                  ; 
       byte >07,>CE                                                  ; 
       byte >6F,>EE                                                  ; 
       byte >EF,>EC                                                  ; 
       byte >EF,>E8                                                  ; 
       byte >40,>00                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >27,>F8                                                  ; 
       byte >27,>F8                                                  ; 
       byte >30,>38                                                  ; 
       byte >13,>F0                                                  ; 
       byte >13,>F0                                                  ; 
       byte >09,>E0                                                  ; 
       byte >05,>C0                                                  ; 
       byte >02,>80                                                  ; }
* Up Frame 2.
_adc2:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1E,>F0                                                  ; {#SPRITE$09(knight-up-02*)
       byte >0E,>E0                                                  ; 
       byte >05,>40                                                  ; 
       byte >03,>80                                                  ; 
       byte >67,>CC                                                  ; 
       byte >EF,>EE                                                  ; 
       byte >EF,>EE                                                  ; 
       byte >6F,>EC                                                  ; 
       byte >00,>00                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >27,>F8                                                  ; 
       byte >27,>F8                                                  ; 
       byte >30,>38                                                  ; 
       byte >13,>F0                                                  ; 
       byte >13,>F0                                                  ; 
       byte >09,>E0                                                  ; 
       byte >05,>C0                                                  ; 
       byte >02,>80                                                  ; }
* Up Frame 3.
_ade7:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>78                                                  ; {#SPRITE$0A(knight-up-03*)
       byte >1E,>78                                                  ; 
       byte >3D,>F0                                                  ; 
       byte >53,>B0                                                  ; 
       byte >E7,>C0                                                  ; 
       byte >EF,>EC                                                  ; 
       byte >6F,>EE                                                  ; 
       byte >2F,>EE                                                  ; 
       byte >00,>04                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >27,>F8                                                  ; 
       byte >27,>F8                                                  ; 
       byte >30,>38                                                  ; 
       byte >13,>F0                                                  ; 
       byte >13,>F0                                                  ; 
       byte >09,>E0                                                  ; 
       byte >05,>C0                                                  ; 
       byte >02,>80                                                  ; }
* Left Frame 1.
_ae0c:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0C,>70                                                  ; {#SPRITE$00(knight-left-01*)
       byte >1C,>38                                                  ; 
       byte >3B,>98                                                  ; 
       byte >37,>60                                                  ; 
       byte >06,>10                                                  ; 
       byte >37,>08                                                  ; 
       byte >27,>98                                                  ; 
       byte >1F,>F0                                                  ; 
       byte >67,>80                                                  ; 
       byte >6B,>7C                                                  ; 
       byte >1A,>FC                                                  ; 
       byte >01,>FC                                                  ; 
       byte >1F,>FC                                                  ; 
       byte >08,>08                                                  ; 
       byte >09,>F8                                                  ; 
       byte >04,>F0                                                  ; 
       byte >02,>E0                                                  ; 
       byte >01,>40                                                  ; }
* Left Frame 2.
_ae31:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >07,>C0                                                  ; {#SPRITE$01(knight-left-02*)
       byte >03,>C0                                                  ; 
       byte >00,>00                                                  ; 
       byte >03,>F0                                                  ; 
       byte >06,>38                                                  ; 
       byte >04,>18                                                  ; 
       byte >0F,>98                                                  ; 
       byte >1F,>F0                                                  ; 
       byte >67,>80                                                  ; 
       byte >6B,>7C                                                  ; 
       byte >1A,>FC                                                  ; 
       byte >01,>FC                                                  ; 
       byte >1F,>FC                                                  ; 
       byte >08,>08                                                  ; 
       byte >09,>F8                                                  ; 
       byte >04,>F0                                                  ; 
       byte >02,>E0                                                  ; 
       byte >01,>40                                                  ; }
* Left Frame 3.
_ae56:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0C,>70                                                  ; {#SPRITE$02(knight-left-03*)
       byte >1C,>38                                                  ; 
       byte >3B,>D8                                                  ; 
       byte >37,>E0                                                  ; 
       byte >04,>74                                                  ; 
       byte >08,>3A                                                  ; 
       byte >07,>1E                                                  ; 
       byte >1F,>F8                                                  ; 
       byte >67,>80                                                  ; 
       byte >6B,>7C                                                  ; 
       byte >1A,>FC                                                  ; 
       byte >01,>FC                                                  ; 
       byte >1F,>FC                                                  ; 
       byte >08,>08                                                  ; 
       byte >09,>F8                                                  ; 
       byte >04,>F0                                                  ; 
       byte >02,>E0                                                  ; 
       byte >01,>40                                                  ; }
* Right Frame 1.
_ae7b:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0E,>30                                                  ; {#SPRITE$04(knight-right-01*)
       byte >1C,>38                                                  ; 
       byte >1B,>DC                                                  ; 
       byte >07,>EC                                                  ; 
       byte >2E,>20                                                  ; 
       byte >5C,>10                                                  ; 
       byte >78,>E0                                                  ; 
       byte >1F,>F8                                                  ; 
       byte >01,>E6                                                  ; 
       byte >3E,>D6                                                  ; 
       byte >27,>58                                                  ; 
       byte >27,>80                                                  ; 
       byte >27,>F8                                                  ; 
       byte >10,>30                                                  ; 
       byte >13,>F0                                                  ; 
       byte >09,>E0                                                  ; 
       byte >05,>C0                                                  ; 
       byte >02,>80                                                  ; }
* Right Frame 2.
_aea0:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >03,>E0                                                  ; {#SPRITE$05(knight-right-02*)
       byte >03,>C0                                                  ; 
       byte >00,>00                                                  ; 
       byte >0F,>C0                                                  ; 
       byte >1C,>60                                                  ; 
       byte >18,>20                                                  ; 
       byte >19,>F0                                                  ; 
       byte >0F,>F8                                                  ; 
       byte >01,>E6                                                  ; 
       byte >3E,>D6                                                  ; 
       byte >27,>58                                                  ; 
       byte >27,>80                                                  ; 
       byte >27,>F8                                                  ; 
       byte >10,>30                                                  ; 
       byte >13,>F0                                                  ; 
       byte >09,>E0                                                  ; 
       byte >05,>C0                                                  ; 
       byte >02,>80                                                  ; }
* Right Frame 3.
_aec5:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0E,>30                                                  ; {#SPRITE$06(knight-right-03*)
       byte >1C,>38                                                  ; 
       byte >18,>DC                                                  ; 
       byte >06,>EC                                                  ; 
       byte >08,>60                                                  ; 
       byte >10,>EC                                                  ; 
       byte >19,>E4                                                  ; 
       byte >0F,>F8                                                  ; 
       byte >01,>E6                                                  ; 
       byte >3E,>D6                                                  ; 
       byte >27,>58                                                  ; 
       byte >27,>80                                                  ; 
       byte >27,>F8                                                  ; 
       byte >10,>30                                                  ; 
       byte >13,>F0                                                  ; 
       byte >09,>E0                                                  ; 
       byte >05,>C0                                                  ; 
       byte >02,>80                                                  ; }
* #UDGTABLE(default,centre)
* { =h Down | =h Up | =h Left | =h Right }{
* #UDGARRAY*knight-down-01,25;knight-down-02;knight-down-03;knight-down-02(knight-down) |
* #UDGARRAY*knight-up-01,25;knight-up-02;knight-up-03;knight-up-02(knight-up) |
* #UDGARRAY*knight-left-01,25;knight-left-02;knight-left-03;knight-left-02(knight-left) |
* #UDGARRAY*knight-right-01,25;knight-right-02;knight-right-03;knight-right-02(knight-right)
* }
* UDGTABLE#

* Sprite: None
_aeea:
       byte >00                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00

* Sprite: Blank
_aeec:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$30(blank)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; }

* Sprite: Leaf
_af0d:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>03                                                  ; {#SPRITE$7F(leaf)
       byte >00,>3F                                                  ; 
       byte >00,>FA                                                  ; 
       byte >03,>F2                                                  ; 
       byte >06,>0A                                                  ; 
       byte >0F,>DA                                                  ; 
       byte >1F,>BC                                                  ; 
       byte >3F,>3C                                                  ; 
       byte >20,>B8                                                  ; 
       byte >7D,>B8                                                  ; 
       byte >7B,>B0                                                  ; 
       byte >F3,>A0                                                  ; 
       byte >9B,>C0                                                  ; 
       byte >DB,>80                                                  ; 
       byte >DE,>00                                                  ; 
       byte >F8,>00                                                  ; }

* Sprite: Key
_af2e:
       byte >0A                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0C,>00                                                  ; {#SPRITE$80(key)
       byte >1E,>17                                                  ; 
       byte >12,>12                                                  ; 
       byte >7B,>1A                                                  ; 
       byte >CF,>FF                                                  ; 
       byte >CF,>FF                                                  ; 
       byte >7B,>00                                                  ; 
       byte >12,>00                                                  ; 
       byte >1E,>00                                                  ; 
       byte >0C,>00                                                  ; }

* Sprite: Wine
_af43:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >19,>FC                                                  ; {#SPRITE$81(wine)
       byte >19,>FC                                                  ; 
       byte >19,>C0                                                  ; 
       byte >19,>DC                                                  ; 
       byte >19,>DC                                                  ; 
       byte >19,>DC                                                  ; 
       byte >19,>DC                                                  ; 
       byte >19,>DC                                                  ; 
       byte >19,>DC                                                  ; 
       byte >19,>DC                                                  ; 
       byte >19,>C0                                                  ; 
       byte >19,>FC                                                  ; 
       byte >1C,>FC                                                  ; 
       byte >0E,>F8                                                  ; 
       byte >03,>60                                                  ; 
       byte >01,>40                                                  ; 
       byte >01,>40                                                  ; 
       byte >01,>40                                                  ; 
       byte >02,>E0                                                  ; 
       byte >01,>C0                                                  ; }

* Sprite: Bottle
_af6c:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >19,>F0                                                  ; {#SPRITE$56(bottle)
       byte >19,>F0                                                  ; 
       byte >19,>F0                                                  ; 
       byte >19,>F0                                                  ; 
       byte >19,>F0                                                  ; 
       byte >19,>F0                                                  ; 
       byte >19,>F0                                                  ; 
       byte >19,>F0                                                  ; 
       byte >19,>F0                                                  ; 
       byte >09,>E0                                                  ; 
       byte >0D,>E0                                                  ; 
       byte >0D,>E0                                                  ; 
       byte >05,>C0                                                  ; 
       byte >05,>C0                                                  ; 
       byte >06,>C0                                                  ; 
       byte >02,>80                                                  ; 
       byte >02,>80                                                  ; 
       byte >02,>80                                                  ; 
       byte >05,>C0                                                  ; 
       byte >03,>80                                                  ; }

* Sprite: Wing
_af95:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >A0,>00                                                  ; {#SPRITE$83(wing)
       byte >B0,>00                                                  ; 
       byte >98,>00                                                  ; 
       byte >AF,>80                                                  ; 
       byte >D0,>00                                                  ; 
       byte >DF,>C0                                                  ; 
       byte >6F,>E0                                                  ; 
       byte >73,>F0                                                  ; 
       byte >3C,>74                                                  ; 
       byte >3F,>88                                                  ; 
       byte >1F,>F8                                                  ; 
       byte >0F,>F8                                                  ; 
       byte >07,>F8                                                  ; 
       byte >03,>FC                                                  ; 
       byte >00,>FE                                                  ; 
       byte >00,>1F                                                  ; }

* Sprite: Whip
_afb6:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >C0,>00                                                  ; {#SPRITE$84(whip)
       byte >E0,>02                                                  ; 
       byte >E0,>0C                                                  ; 
       byte >00,>30                                                  ; 
       byte >C0,>30                                                  ; 
       byte >E0,>40                                                  ; 
       byte >E0,>C0                                                  ; 
       byte >40,>80                                                  ; 
       byte >00,>30                                                  ; 
       byte >E0,>36                                                  ; 
       byte >70,>06                                                  ; 
       byte >70,>03                                                  ; 
       byte >2C,>1E                                                  ; 
       byte >1E,>EC                                                  ; 
       byte >0E,>E0                                                  ; 
       byte >04,>60                                                  ; }

* Sprite: Frog Leg
_afd7:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >90,>08                                                  ; {#SPRITE$85(frogleg)
       byte >B1,>0E                                                  ; 
       byte >F6,>1E                                                  ; 
       byte >7C,>37                                                  ; 
       byte >78,>67                                                  ; 
       byte >30,>CF                                                  ; 
       byte >31,>9E                                                  ; 
       byte >33,>3C                                                  ; 
       byte >32,>78                                                  ; 
       byte >76,>F0                                                  ; 
       byte >76,>F0                                                  ; 
       byte >75,>E0                                                  ; 
       byte >E7,>C0                                                  ; 
       byte >3F,>00                                                  ; 
       byte >3E,>00                                                  ; 
       byte >18,>00                                                  ; }

* Sprite: Dessert
_aff8:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >05,>E0                                                  ; {#SPRITE$54(dessert)
       byte >00,>00                                                  ; 
       byte >33,>FC                                                  ; 
       byte >67,>FE                                                  ; 
       byte >00,>00                                                  ; 
       byte >C7,>FF                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >00,>00                                                  ; 
       byte >6F,>FE                                                  ; 
       byte >67,>3E                                                  ; 
       byte >7B,>DE                                                  ; 
       byte >3F,>EC                                                  ; 
       byte >0B,>E8                                                  ; 
       byte >0C,>F0                                                  ; 
       byte >0F,>80                                                  ; 
       byte >07,>00                                                  ; }

* Sprite: Apple
_b019:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >03,>E0                                                  ; {#SPRITE$55(apple)
       byte >0F,>F8                                                  ; 
       byte >1F,>FC                                                  ; 
       byte >3F,>FE                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >7F,>FF                                                  ; 
       byte >7F,>FF                                                  ; 
       byte >67,>FF                                                  ; 
       byte >63,>FF                                                  ; 
       byte >33,>FF                                                  ; 
       byte >3B,>06                                                  ; 
       byte >1F,>F8                                                  ; 
       byte >0E,>DC                                                  ; 
       byte >01,>86                                                  ; 
       byte >07,>7B                                                  ; 
       byte >06,>3C                                                  ; }

* Side Panel UDGs
* 
* The image is assembled by #R$A219 using the data held at #R$B32A.
sidepaneludg:                          ; b03a
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >00,>00,>03,>0F,>1F,>3D,>7E,>79                          ; #UDG(#PC)
       byte >00,>00,>FF,>FF,>FF,>B4,>4A,>00                          ; #UDG(#PC)
       byte >00,>00,>80,>FE,>FF,>D5,>AD,>42                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>F0,>7F,>56,>50                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>03,>FF,>B5,>44                          ; #UDG(#PC)
       byte >00,>00,>01,>1F,>FF,>DA,>25,>41                          ; #UDG(#PC)
       byte >00,>07,>FF,>FE,>FC,>FC,>D8,>3F                          ; #UDG(#PC)
       byte >00,>F0,>08,>04,>02,>02,>02,>F1                          ; #UDG(#PC)
       byte >D0,>CA,>E0,>C0,>C0,>C0,>60,>60                          ; #UDG(#PC)
       byte >3B,>1B,>1B,>1B,>1B,>19,>0C,>0C                          ; #UDG(#PC)
       byte >89,>89,>85,>85,>FD,>81,>81,>81                          ; #UDG(#PC)
       byte >0C,>06,>03,>03,>03,>01,>01,>01                          ; #UDG(#PC)
       byte >41,>42,>FC,>00,>00,>80,>80,>80                          ; #UDG(#PC)
       byte >60,>30,>1C,>06,>3E,>1C,>0C,>06                          ; #UDG(#PC)
       byte >0C,>18,>18,>18,>0C,>0C,>0C,>0C                          ; #UDG(#PC)
       byte >06,>06,>06,>06,>06,>06,>06,>06                          ; #UDG(#PC)
       byte >06,>06,>06,>06,>06,>06,>0C,>0C                          ; #UDG(#PC)
       byte >0C,>0C,>0C,>18,>18,>18,>18,>18                          ; #UDG(#PC)
       byte >18,>30,>30,>30,>30,>30,>30,>30                          ; #UDG(#PC)
       byte >30,>60,>60,>60,>60,>60,>60,>60                          ; #UDG(#PC)
       byte >60,>60,>60,>60,>30,>30,>30,>18                          ; #UDG(#PC)
       byte >0C,>18,>18,>18,>30,>30,>18,>30                          ; #UDG(#PC)
       byte >30,>38,>0C,>06,>0C,>18,>18,>18                          ; #UDG(#PC)
       byte >0C,>0C,>0C,>0C,>0C,>06,>06,>06                          ; #UDG(#PC)
       byte >06,>06,>06,>06,>03,>03,>03,>03                          ; #UDG(#PC)
       byte >03,>03,>03,>03,>03,>03,>03,>03                          ; #UDG(#PC)
       byte >03,>03,>03,>03,>03,>06,>06,>06                          ; #UDG(#PC)
       byte >06,>06,>06,>06,>0C,>0C,>0C,>0C                          ; #UDG(#PC)
       byte >0C,>18,>18,>18,>18,>30,>30,>30                          ; #UDG(#PC)
       byte >30,>60,>60,>60,>7F,>7E,>0C,>18                          ; #UDG(#PC)
       byte >00,>00,>0C,>1E,>1D,>0B,>07,>37                          ; #UDG(#PC)
       byte >7F,>FF,>80,>7F,>FF,>C1,>80,>00                          ; #UDG(#PC)
       byte >00,>80,>98,>3C,>DC,>E8,>F0,>76                          ; #UDG(#PC)
       byte >01,>03,>03,>03,>06,>06,>0C,>7F                          ; #UDG(#PC)
       byte >80,>00,>00,>00,>00,>00,>00,>FC                          ; #UDG(#PC)
       byte >70,>F0,>18,>FC,>F8,>C0,>C0,>C0                          ; #UDG(#PC)
       byte >6E,>EC,>EC,>EC,>EC,>EC,>6E,>37                          ; #UDG(#PC)
       byte >3E,>49,>49,>49,>49,>2A,>1C,>08                          ; #UDG(#PC)
       byte >3B,>1B,>1B,>1B,>1B,>1B,>3B,>76                          ; #UDG(#PC)
       byte >00,>80,>80,>80,>80,>80,>00,>00                          ; #UDG(#PC)
       byte >00,>03,>07,>0E,>07,>01,>00,>00                          ; #UDG(#PC)
       byte >FD,>C3,>DF,>2F,>97,>EB,>77,>31                          ; #UDG(#PC)
       byte >C2,>C1,>81,>81,>01,>FD,>05,>05                          ; #UDG(#PC)
       byte >C0,>60,>60,>60,>30,>18,>0F,>07                          ; #UDG(#PC)
       byte >07,>0B,>1D,>1E,>0C,>00,>00,>FF                          ; #UDG(#PC)
       byte >80,>C1,>FF,>7F,>80,>FF,>7F,>3E                          ; #UDG(#PC)
       byte >F0,>E8,>DC,>3C,>9B,>9F,>7C,>E0                          ; #UDG(#PC)
       byte >00,>00,>00,>3F,>FF,>C0,>00,>00                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>F0,>FF,>0F,>00                          ; #UDG(#PC)
       byte >30,>3F,>30,>18,>18,>0C,>FE,>FF                          ; #UDG(#PC)
       byte >89,>F1,>01,>01,>02,>04,>08,>F0                          ; #UDG(#PC)
       byte >FF,>00,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF                          ; #UDG(#PC)
       byte >FF,>FF,>7F,>7B,>7B,>39,>39,>38                          ; #UDG(#PC)
       byte >00,>00,>80,>80,>80,>80,>C0,>C0                          ; #UDG(#PC)
       byte >10,>10,>10,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >60,>20,>10,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >C0,>C0,>C0,>60,>60,>60,>30,>30                          ; #UDG(#PC)
       byte >30,>18,>18,>18,>18,>30,>30,>30                          ; #UDG(#PC)
       byte >18,>0C,>0C,>0C,>0C,>0C,>0C,>0C                          ; #UDG(#PC)
       byte >0C,>0C,>0C,>0C,>0C,>0C,>0C,>0C                          ; #UDG(#PC)
       byte >0C,>0C,>0C,>0C,>18,>18,>18,>18                          ; #UDG(#PC)
       byte >18,>30,>30,>30,>30,>60,>60,>60                          ; #UDG(#PC)
       byte >60,>60,>60,>C0,>C0,>C0,>C0,>C0                          ; #UDG(#PC)
       byte >C0,>C0,>C0,>C0,>C0,>C0,>C0,>C0                          ; #UDG(#PC)
       byte >60,>60,>60,>60,>60,>30,>30,>30                          ; #UDG(#PC)
       byte >18,>18,>18,>0C,>0C,>0C,>0C,>06                          ; #UDG(#PC)
       byte >06,>06,>06,>06,>03,>03,>03,>03                          ; #UDG(#PC)
       byte >03,>03,>03,>03,>03,>03,>03,>03                          ; #UDG(#PC)
       byte >06,>06,>06,>06,>06,>0C,>0C,>0C                          ; #UDG(#PC)
       byte >0C,>18,>18,>18,>18,>30,>30,>30                          ; #UDG(#PC)
       byte >60,>60,>60,>C0,>C0,>C0,>80,>80                          ; #UDG(#PC)
       byte >07,>0F,>0F,>07,>01,>0F,>07,>00                          ; #UDG(#PC)
       byte >C3,>E7,>0F,>CE,>EF,>E7,>C3,>00                          ; #UDG(#PC)
       byte >C3,>E7,>8F,>0E,>1F,>E7,>C3,>00                          ; #UDG(#PC)
       byte >8F,>CF,>EE,>EF,>EF,>CE,>8E,>00                          ; #UDG(#PC)
       byte >CF,>EF,>6E,>EF,>CE,>CF,>EF,>00                          ; #UDG(#PC)
       byte >80,>80,>00,>C0,>00,>E0,>E0,>00                          ; #UDG(#PC)
       byte >00,>00,>08,>1E,>27,>23,>71,>5F                          ; #UDG(#PC)
       byte >00,>00,>40,>40,>80,>80,>00,>C3                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>00,>00,>00,>16                          ; #UDG(#PC)
       byte >00,>00,>00,>05,>03,>03,>03,>33                          ; #UDG(#PC)
       byte >00,>00,>00,>AC,>18,>18,>18,>18                          ; #UDG(#PC)
       byte >4F,>22,>1F,>05,>7F,>47,>3B,>00                          ; #UDG(#PC)
       byte >EF,>6C,>2C,>AC,>4C,>CE,>87,>00                          ; #UDG(#PC)
       byte >BE,>18,>18,>18,>18,>9C,>0C,>00                          ; #UDG(#PC)
       byte >FB,>DB,>DB,>DB,>DB,>FB,>61,>00                          ; #UDG(#PC)
       byte >18,>18,>18,>18,>18,>DE,>8C,>00                          ; #UDG(#PC)
       byte >FE,>FE,>FE,>38,>38,>38,>38,>00                          ; #UDG(#PC)
       byte >7C,>7C,>38,>38,>38,>7C,>7C,>00                          ; #UDG(#PC)
       byte >82,>EE,>FE,>FE,>D6,>D6,>D6,>00                          ; #UDG(#PC)
       byte >F8,>F8,>E0,>FC,>E0,>FE,>FE,>00                          ; #UDG(#PC)
       byte >00,>18,>18,>00,>00,>18,>18,>00                          ; #UDG(#PC)

* Side Panel Data
* 
* Uses the UDG data at #R$B03A. The image is assembled by #R$A219.
sidepaneldata:                         ; b32a
       byte >01,>02,>03,>04,>05,>06,>07,>08                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >09,>4F,>50,>51,>52,>53,>0A,>0B                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >0E,>54,>55,>56,>57,>58,>0C,>0D                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >0F,>00,>00,>00,>00,>00,>00,>3A                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >10,>00,>00,>00,>00,>00,>00,>3B                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >11,>00,>00,>00,>00,>00,>00,>3C                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >12,>00,>00,>00,>00,>00,>00,>3D                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >13,>00,>59,>5A,>5B,>5C,>00,>3E                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >14,>00,>00,>00,>5D,>00,>00,>3F                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >15,>49,>4A,>4B,>4C,>4D,>4E,>40                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >16,>00,>00,>00,>00,>00,>00,>41                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >17,>00,>00,>00,>00,>00,>00,>42                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >18,>00,>00,>00,>00,>00,>00,>43                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >19,>00,>00,>00,>00,>00,>00,>44                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >1A,>00,>00,>00,>00,>00,>00,>45                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >1B,>00,>00,>00,>00,>00,>00,>46                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >1C,>00,>00,>00,>00,>00,>00,>47                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >1D,>00,>00,>00,>00,>00,>00,>48                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >1E,>1F,>20,>21,>00,>00,>22,>23                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >24,>25,>26,>27,>28,>29,>2A,>2B                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >2C,>2D,>2E,>2F,>30,>31,>32,>33                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >00,>34,>35,>00,>00,>00,>00,>00                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >00,>00,>36,>37,>00,>00,>00,>00                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||
       byte >00,>00,>38,>39,>00,>00,>00,>00                          ; #FOR($00,$07)||x|#UDG($B03A +
                                                                     ; (#PEEK(#PC + x) * $08))||

* Graphic: Big Door Frame
_b3ea:
       byte >06                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >20                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >FF,>FE,>00,>00                                          ; {#GRAPHIC$02(big-door)
       byte >3F,>FF,>00,>FE                                          ; 
       byte >00,>00,>7F,>00                                          ; 
       byte >01,>FC,>00,>00                                          ; 
       byte >3F,>80,>00,>00                                          ; 
       byte >00,>00,>00,>00                                          ; 
       byte >01,>F8,>00,>00                                          ; 
       byte >1F,>80,>03,>F8                                          ; 
       byte >00,>00,>1F,>C0                                          ; 
       byte >03,>F0,>00,>00                                          ; 
       byte >0F,>C0,>00,>00                                          ; 
       byte >00,>00,>00,>00                                          ; 
       byte >07,>E0,>00,>00                                          ; 
       byte >07,>E0,>0F,>E0                                          ; 
       byte >00,>00,>07,>F0                                          ; 
       byte >0F,>C0,>00,>00                                          ; 
       byte >03,>F0,>00,>00                                          ; 
       byte >00,>00,>00,>00                                          ; 
       byte >1F,>80,>00,>00                                          ; 
       byte >01,>F8,>1F,>80                                          ; 
       byte >00,>00,>01,>F8                                          ; 
       byte >1F,>80,>00,>00                                          ; 
       byte >01,>F8,>10,>00                                          ; 
       byte >00,>00,>00,>08                                          ; 
       byte >07,>80,>00,>00                                          ; 
       byte >01,>E0,>1F,>80                                          ; 
       byte >00,>00,>01,>F8                                          ; 
       byte >1F,>00,>00,>00                                          ; 
       byte >00,>F8,>0E,>40                                          ; 
       byte >00,>00,>02,>70                                          ; 
       byte >08,>E0,>00,>00                                          ; 
       byte >07,>10,>03,>F4                                          ; 
       byte >00,>00,>2F,>C0                                          ; 
       byte >07,>EF,>00,>00                                          ; 
       byte >F7,>E0,>03,>CE                                          ; 
       byte >77,>EE,>73,>C0                                          ; 
       byte >01,>DE,>F6,>6F                                          ; 
       byte >7B,>80,>00,>9E                                          ; 
       byte >F6,>6F,>79,>00                                          ; 
       byte >00,>3C,>E6,>67                                          ; 
       byte >3C,>00,>00,>1D                                          ; 
       byte >EE,>EE,>B8,>00                                          ; 
       byte >00,>01,>EE,>77                                          ; 
       byte >80,>00,>00,>00                                          ; 
       byte >08,>10,>00,>00                                          ; 
       byte >00,>00,>0F,>F0                                          ; 
       byte >00,>00,>00,>00                                          ; 
       byte >00,>00,>00,>00                                          ; }

* Graphic Attributes: Big Door Frame
_b4ac:
       byte >06                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >04                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >43,>43,>00,>00                                          ; {#GRAPHIC$02,1(big-door-colour)
       byte >43,>43,>43,>43                                          ; 
       byte >00,>00,>43,>43                                          ; 
       byte >43,>43,>43,>43                                          ; 
       byte >43,>43,>43,>43                                          ; 
       byte >43,>43,>43,>43                                          ; }

* Graphic: Ghost Picture
_b4c6:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00,>00,>00                                          ; {#GRAPHIC$10(ghost-pic)
       byte >00,>00,>00,>00                                          ; 
       byte >03,>80,>01,>C0                                          ; 
       byte >07,>C6,>63,>E0                                          ; 
       byte >06,>7F,>FE,>60                                          ; 
       byte >03,>FF,>FF,>C0                                          ; 
       byte >01,>80,>01,>80                                          ; 
       byte >01,>80,>01,>80                                          ; 
       byte >03,>8C,>31,>C0                                          ; 
       byte >07,>8F,>F1,>E0                                          ; 
       byte >03,>0C,>30,>C0                                          ; 
       byte >0B,>0F,>F0,>D0                                          ; 
       byte >0F,>0C,>90,>F0                                          ; 
       byte >07,>0D,>B0,>E0                                          ; 
       byte >06,>07,>E0,>60                                          ; 
       byte >0E,>03,>C0,>70                                          ; 
       byte >1E,>00,>00,>78                                          ; 
       byte >37,>FF,>FF,>EC                                          ; 
       byte >1F,>FF,>FF,>F4                                          ; 
       byte >35,>FF,>FF,>AC                                          ; 
       byte >1B,>1C,>31,>D8                                          ; 
       byte >0E,>06,>60,>70                                          ; 
       byte >00,>00,>00,>00                                          ; 
       byte >00,>00,>00,>00                                          ; }

* Graphic Attributes: Ghost Picture
_b528:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >FF,>FF,>FF,>FF                                          ; {#GRAPHIC$10,1(ghost-pic-colour)
       byte >FF,>FF,>FF,>FF                                          ; 
       byte >FF,>FF,>FF,>FF                                          ; }

* Sprite: Serf
* 
* .
* 
* .
* 
* Down Frame 1.
_b536:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1F,>38,>17,>38,>0E,>3C,>01,>5E                          ; {#SPRITE$2C(serf-down-01*)
       byte >03,>DE,>27,>EE,>77,>70,>77,>F4                          ; 
       byte >77,>74,>45,>D0,>00,>80,>0A,>28                          ; 
       byte >1B,>6C,>08,>0C,>1C,>14,>17,>FC                          ; 
       byte >0D,>E8,>07,>50                                          ; }
* Down Frame 2.
_b55b:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0F,>F8,>0D,>68,>06,>30,>01,>40                          ; {#SPRITE$2D(serf-down-02*)
       byte >23,>E2,>37,>F6,>37,>76,>17,>F4                          ; 
       byte >17,>74,>05,>D0,>00,>80,>0A,>28                          ; 
       byte >1B,>6C,>08,>0C,>1C,>14,>17,>FC                          ; 
       byte >0D,>E8,>07,>50                                          ; }
* Down Frame 3.
_b580:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >07,>7C,>07,>74,>1F,>58,>3D,>60                          ; {#SPRITE$2E(serf-down-03*)
       byte >3D,>E0,>3B,>F2,>07,>77,>17,>F7                          ; 
       byte >17,>77,>05,>D2,>00,>80,>0A,>28                          ; 
       byte >1B,>6C,>08,>0C,>1C,>14,>17,>FC                          ; 
       byte >0D,>E8,>07,>A0                                          ; }
* Up Frame 1.
_b5a5:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1E,>40,>1E,>70,>0A,>B0,>07,>D8                          ; {#SPRITE$28(serf-up-01*)
       byte >0F,>D8,>4F,>E8,>EF,>E0,>EC,>6C                          ; 
       byte >E2,>4C,>8D,>A8,>15,>70,>1B,>D0                          ; 
       byte >3A,>98,>2B,>68,>15,>D0,>2F,>B8                          ; 
       byte >13,>50,>0A,>A0                                          ; }
* Up Frame 2.
_b5ca:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0E,>E0,>0E,>E0,>02,>80,>07,>C0                          ; {#SPRITE$29(serf-up-02*)
       byte >47,>C4,>6F,>EC,>6F,>EC,>2C,>68                          ; 
       byte >23,>88,>0D,>A0,>15,>70,>1B,>D0                          ; 
       byte >3A,>98,>2B,>68,>15,>D0,>2F,>B8                          ; 
       byte >13,>50,>0A,>A0                                          ; }
* Up Frame 3.
_b5ef:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >04,>F0,>1C,>F0,>1A,>A0,>37,>C0                          ; {#SPRITE$2A(serf-up-03*)
       byte >37,>E0,>2F,>E4,>0F,>EE,>6C,>3E                          ; 
       byte >63,>8E,>2D,>A2,>15,>70,>1B,>D0                          ; 
       byte >3A,>98,>2B,>68,>15,>D0,>2F,>B8                          ; 
       byte >13,>50,>0A,>A0                                          ; }
* Left Frame 1.
_b614:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >03,>70,>0F,>78,>3F,>1C,>FB,>EC                          ; {#SPRITE$20(serf-left-01*)
       byte >CB,>10,>77,>88,>07,>C8,>37,>88                          ; 
       byte >77,>30,>0F,>C0,>11,>50,>60,>B8                          ; 
       byte >68,>68,>19,>D0,>07,>A8,>19,>58                          ; 
       byte >16,>F0,>0A,>A0                                          ; }
* Left Frame 2.
_b639:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >3F,>E0,>2F,>E0,>24,>C0,>19,>E0                          ; {#SPRITE$21(serf-left-02*)
       byte >03,>F0,>06,>38,>06,>18,>07,>18                          ; 
       byte >07,>30,>0F,>C0,>11,>50,>60,>B8                          ; 
       byte >68,>68,>19,>D0,>07,>A8,>19,>58                          ; 
       byte >16,>F0,>0A,>A0                                          ; }
* Left Frame 3.
_b65e:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >03,>F0,>3A,>F8,>5A,>5C,>4D,>9C                          ; {#SPRITE$22(serf-left-03*)
       byte >30,>30,>07,>F8,>08,>7A,>18,>1A                          ; 
       byte >07,>3C,>0F,>C0,>11,>50,>60,>B8                          ; 
       byte >68,>68,>19,>D0,>07,>A8,>19,>58                          ; 
       byte >16,>F0,>0A,>A0                                          ; }
* Right Frame 1.
_b683:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0F,>C0,>1F,>5C,>3A,>5A,>39,>B2                          ; {#SPRITE$24(serf-right-01*)
       byte >0C,>0C,>1F,>E0,>5E,>10,>58,>18                          ; 
       byte >3C,>E0,>03,>F0,>05,>88,>1D,>06                          ; 
       byte >16,>16,>0B,>98,>15,>E0,>1A,>98                          ; 
       byte >0F,>E8,>05,>50                                          ; }
* Right Frame 2.
_b6a8:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >07,>FC,>07,>F4,>03,>24,>07,>98                          ; {#SPRITE$25(serf-right-02*)
       byte >0F,>C0,>1C,>60,>18,>60,>18,>E0                          ; 
       byte >0C,>E0,>03,>F0,>05,>88,>1D,>06                          ; 
       byte >16,>16,>0B,>98,>15,>E0,>1A,>98                          ; 
       byte >0F,>E8,>05,>50                                          ; }
* Right Frame 3.
_b6cd:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0E,>C0,>1E,>F0,>31,>FC,>37,>DF                          ; {#SPRITE$26(serf-right-03*)
       byte >08,>D3,>11,>EE,>13,>E0,>11,>EC                          ; 
       byte >0C,>EE,>03,>F0,>05,>88,>1D,>06                          ; 
       byte >16,>16,>0B,>98,>15,>E0,>1A,>98                          ; 
       byte >0F,>E8,>05,>50                                          ; }
* #UDGTABLE(default,centre)
* { =h Down | =h Up | =h Left | =h Right }{
* #UDGARRAY*serf-down-01,25;serf-down-02;serf-down-03;serf-down-02(serf-down) |
* #UDGARRAY*serf-up-01,25;serf-up-02;serf-up-03;serf-up-02(serf-up) |
* #UDGARRAY*serf-left-01,25;serf-left-02;serf-left-03;serf-left-02(serf-left) |
* #UDGARRAY*serf-right-01,25;serf-right-02;serf-right-03;serf-right-02(serf-right)
* }
* UDGTABLE#

* Graphic: Clock
_b6f2:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >20                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>3F,>FC,>00                                          ; {#GRAPHIC$0F(clock)
       byte >00,>70,>0E,>00                                          ; 
       byte >00,>77,>EE,>00                                          ; 
       byte >00,>67,>E6,>00                                          ; 
       byte >00,>67,>E6,>00                                          ; 
       byte >00,>6B,>F6,>00                                          ; 
       byte >00,>E8,>F7,>00                                          ; 
       byte >00,>CF,>F3,>00                                          ; 
       byte >00,>DF,>FB,>00                                          ; 
       byte >00,>DF,>FB,>00                                          ; 
       byte >00,>C0,>03,>00                                          ; 
       byte >00,>FF,>FF,>00                                          ; 
       byte >00,>FF,>FF,>00                                          ; 
       byte >01,>F9,>9F,>80                                          ; 
       byte >01,>E0,>07,>80                                          ; 
       byte >01,>C0,>03,>80                                          ; 
       byte >01,>F7,>8F,>80                                          ; 
       byte >01,>C0,>43,>80                                          ; 
       byte >01,>E0,>27,>80                                          ; 
       byte >06,>79,>9E,>60                                          ; 
       byte >06,>9F,>F9,>60                                          ; 
       byte >06,>E7,>E7,>60                                          ; 
       byte >07,>69,>96,>E0                                          ; 
       byte >06,>EE,>77,>60                                          ; 
       byte >06,>F7,>6F,>60                                          ; 
       byte >07,>6E,>F6,>E0                                          ; 
       byte >06,>EF,>77,>60                                          ; 
       byte >06,>F6,>EF,>60                                          ; 
       byte >01,>6F,>76,>00                                          ; 
       byte >00,>6E,>F6,>00                                          ; 
       byte >00,>1F,>68,>00                                          ; 
       byte >00,>03,>E0,>00                                          ; }

* Graphic Attributes: Clock
_b774:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >04                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >45,>45,>45,>45                                          ; {#GRAPHIC$0F,1(clock-colour)
       byte >45,>45,>45,>45                                          ; 
       byte >45,>45,>45,>45                                          ; 
       byte >45,>45,>45,>45                                          ; }

* Sprite: Wizard
* 
* .
* 
* .
* 
* Down Frame 1.
_b786:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >3C,>00                                                  ; {#SPRITE$1C(wizard-down-01*)
       byte >4C,>F0                                                  ; 
       byte >1F,>68                                                  ; 
       byte >1B,>84                                                  ; 
       byte >06,>6E                                                  ; 
       byte >6C,>6E                                                  ; 
       byte >EE,>EC                                                  ; 
       byte >EF,>E8                                                  ; 
       byte >44,>40                                                  ; 
       byte >16,>D0                                                  ; 
       byte >18,>30                                                  ; 
       byte >1F,>F0                                                  ; 
       byte >1E,>70                                                  ; 
       byte >0C,>E0                                                  ; 
       byte >0C,>E0                                                  ; 
       byte >04,>C0                                                  ; 
       byte >06,>40                                                  ; 
       byte >03,>80                                                  ; 
       byte >03,>80                                                  ; 
       byte >01,>00                                                  ; }
* Down Frame 2.
_b7af:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1E,>F0                                                  ; {#SPRITE$1D(wizard-down-02*)
       byte >26,>C8                                                  ; 
       byte >05,>40                                                  ; 
       byte >03,>80                                                  ; 
       byte >66,>CC                                                  ; 
       byte >EC,>6E                                                  ; 
       byte >EE,>EE                                                  ; 
       byte >6F,>EC                                                  ; 
       byte >04,>40                                                  ; 
       byte >16,>D0                                                  ; 
       byte >18,>30                                                  ; 
       byte >1F,>F0                                                  ; 
       byte >1E,>70                                                  ; 
       byte >0C,>E0                                                  ; 
       byte >0C,>E0                                                  ; 
       byte >04,>C0                                                  ; 
       byte >06,>40                                                  ; 
       byte >03,>80                                                  ; 
       byte >03,>80                                                  ; 
       byte >01,>00                                                  ; }
* Down Frame 3.
_b7d8:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>78                                                  ; {#SPRITE$1E(wizard-down-03*)
       byte >1E,>64                                                  ; 
       byte >2D,>F0                                                  ; 
       byte >43,>B0                                                  ; 
       byte >E6,>C0                                                  ; 
       byte >EC,>6C                                                  ; 
       byte >6E,>EE                                                  ; 
       byte >2F,>EE                                                  ; 
       byte >04,>44                                                  ; 
       byte >16,>D0                                                  ; 
       byte >18,>30                                                  ; 
       byte >1F,>F0                                                  ; 
       byte >1E,>70                                                  ; 
       byte >0C,>E0                                                  ; 
       byte >0C,>E0                                                  ; 
       byte >04,>C0                                                  ; 
       byte >06,>40                                                  ; 
       byte >03,>80                                                  ; 
       byte >03,>80                                                  ; 
       byte >01,>00                                                  ; }
* Up Frame 1.
_b801:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1E,>00                                                  ; {#SPRITE$18(wizard-up-01*)
       byte >26,>78                                                  ; 
       byte >0F,>D4                                                  ; 
       byte >0D,>C2                                                  ; 
       byte >03,>E7                                                  ; 
       byte >3E,>F7                                                  ; 
       byte >FF,>F6                                                  ; 
       byte >77,>F4                                                  ; 
       byte >20,>00                                                  ; 
       byte >0F,>F8                                                  ; 
       byte >0D,>F8                                                  ; 
       byte >08,>F8                                                  ; 
       byte >0D,>F8                                                  ; 
       byte >07,>F0                                                  ; 
       byte >07,>70                                                  ; 
       byte >02,>20                                                  ; 
       byte >03,>60                                                  ; 
       byte >01,>C0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >00,>80                                                  ; }
* Up Frame 2.
_b82a:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0F,>78                                                  ; {#SPRITE$19(wizard-up-02*)
       byte >13,>64                                                  ; 
       byte >02,>A0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >33,>E6                                                  ; 
       byte >77,>F7                                                  ; 
       byte >77,>F7                                                  ; 
       byte >37,>F6                                                  ; 
       byte >00,>00                                                  ; 
       byte >0F,>F8                                                  ; 
       byte >0D,>F8                                                  ; 
       byte >08,>F8                                                  ; 
       byte >0D,>F8                                                  ; 
       byte >07,>F0                                                  ; 
       byte >07,>70                                                  ; 
       byte >02,>20                                                  ; 
       byte >03,>60                                                  ; 
       byte >01,>C0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >00,>80                                                  ; }
* Up Frame 3.
_b853:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>3C                                                  ; {#SPRITE$1A(wizard-up-03*)
       byte >0F,>32                                                  ; 
       byte >16,>F8                                                  ; 
       byte >21,>D8                                                  ; 
       byte >73,>E0                                                  ; 
       byte >77,>F6                                                  ; 
       byte >37,>F7                                                  ; 
       byte >17,>F7                                                  ; 
       byte >00,>02                                                  ; 
       byte >0F,>F8                                                  ; 
       byte >0D,>F8                                                  ; 
       byte >08,>F8                                                  ; 
       byte >0D,>F8                                                  ; 
       byte >07,>F0                                                  ; 
       byte >07,>70                                                  ; 
       byte >02,>20                                                  ; 
       byte >03,>60                                                  ; 
       byte >01,>C0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >00,>80                                                  ; }
* Left Frame 1.
_b87c:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0C,>F0                                                  ; {#SPRITE$10(wizard-left-01*)
       byte >1C,>38                                                  ; 
       byte >33,>98                                                  ; 
       byte >47,>60                                                  ; 
       byte >06,>10                                                  ; 
       byte >37,>08                                                  ; 
       byte >07,>98                                                  ; 
       byte >31,>F0                                                  ; 
       byte >35,>80                                                  ; 
       byte >0D,>78                                                  ; 
       byte >00,>D8                                                  ; 
       byte >1F,>88                                                  ; 
       byte >0F,>D8                                                  ; 
       byte >05,>F0                                                  ; 
       byte >05,>F0                                                  ; 
       byte >02,>E0                                                  ; 
       byte >02,>E0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >00,>80                                                  ; }
* Left Frame 2.
_b8a5:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >07,>C0                                                  ; {#SPRITE$11(wizard-left-02*)
       byte >09,>C0                                                  ; 
       byte >00,>00                                                  ; 
       byte >03,>F0                                                  ; 
       byte >06,>38                                                  ; 
       byte >04,>18                                                  ; 
       byte >07,>98                                                  ; 
       byte >31,>F0                                                  ; 
       byte >35,>80                                                  ; 
       byte >0D,>78                                                  ; 
       byte >00,>D8                                                  ; 
       byte >1F,>88                                                  ; 
       byte >0F,>D8                                                  ; 
       byte >05,>F0                                                  ; 
       byte >05,>F0                                                  ; 
       byte >02,>E0                                                  ; 
       byte >02,>E0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >00,>80                                                  ; }
* Left Frame 3.
_b8ce:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >03,>F0                                                  ; {#SPRITE$12(wizard-left-03*)
       byte >1C,>38                                                  ; 
       byte >33,>D8                                                  ; 
       byte >47,>E0                                                  ; 
       byte >04,>74                                                  ; 
       byte >08,>3A                                                  ; 
       byte >07,>1E                                                  ; 
       byte >31,>F8                                                  ; 
       byte >35,>80                                                  ; 
       byte >0D,>78                                                  ; 
       byte >00,>D8                                                  ; 
       byte >1F,>88                                                  ; 
       byte >0F,>D8                                                  ; 
       byte >05,>F0                                                  ; 
       byte >05,>F0                                                  ; 
       byte >02,>E0                                                  ; 
       byte >02,>E0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >00,>80                                                  ; }
* Right Frame 1.
_b8f7:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0F,>30                                                  ; {#SPRITE$14(wizard-right-01*)
       byte >1C,>38                                                  ; 
       byte >1B,>CC                                                  ; 
       byte >07,>E2                                                  ; 
       byte >2E,>20                                                  ; 
       byte >5C,>10                                                  ; 
       byte >78,>E0                                                  ; 
       byte >1F,>8C                                                  ; 
       byte >01,>AC                                                  ; 
       byte >1E,>B0                                                  ; 
       byte >1B,>00                                                  ; 
       byte >11,>F8                                                  ; 
       byte >1B,>F0                                                  ; 
       byte >0F,>A0                                                  ; 
       byte >0F,>A0                                                  ; 
       byte >07,>40                                                  ; 
       byte >07,>40                                                  ; 
       byte >03,>80                                                  ; 
       byte >03,>80                                                  ; 
       byte >01,>00                                                  ; }
* Right Frame 2.
_b920:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >03,>E0                                                  ; {#SPRITE$15(wizard-right-02*)
       byte >03,>90                                                  ; 
       byte >00,>00                                                  ; 
       byte >0F,>C0                                                  ; 
       byte >1C,>60                                                  ; 
       byte >18,>20                                                  ; 
       byte >19,>E0                                                  ; 
       byte >0F,>8C                                                  ; 
       byte >01,>AC                                                  ; 
       byte >1E,>B0                                                  ; 
       byte >1B,>00                                                  ; 
       byte >11,>F8                                                  ; 
       byte >1B,>F0                                                  ; 
       byte >0F,>A0                                                  ; 
       byte >0F,>A0                                                  ; 
       byte >07,>40                                                  ; 
       byte >07,>40                                                  ; 
       byte >03,>80                                                  ; 
       byte >03,>80                                                  ; 
       byte >01,>00                                                  ; }
* Right Frame 3.
_b949:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0F,>30                                                  ; {#SPRITE$16(wizard-right-03*)
       byte >1C,>38                                                  ; 
       byte >19,>CC                                                  ; 
       byte >06,>E2                                                  ; 
       byte >08,>60                                                  ; 
       byte >10,>EC                                                  ; 
       byte >19,>E0                                                  ; 
       byte >0F,>8C                                                  ; 
       byte >01,>AC                                                  ; 
       byte >1E,>B0                                                  ; 
       byte >1B,>00                                                  ; 
       byte >11,>F8                                                  ; 
       byte >1B,>F0                                                  ; 
       byte >0F,>A0                                                  ; 
       byte >0F,>A0                                                  ; 
       byte >07,>40                                                  ; 
       byte >07,>40                                                  ; 
       byte >03,>80                                                  ; 
       byte >03,>80                                                  ; 
       byte >01,>00                                                  ; }
* #UDGTABLE(default,centre)
* { =h Down | =h Up | =h Left | =h Right }{
* #UDGARRAY*wizard-down-01,25;wizard-down-02;wizard-down-03;wizard-down-02(wizard-down) |
* #UDGARRAY*wizard-up-01,25;wizard-up-02;wizard-up-03;wizard-up-02(wizard-up) |
* #UDGARRAY*wizard-left-01,25;wizard-left-02;wizard-left-03;wizard-left-02(wizard-left) |
* #UDGARRAY*wizard-right-01,25;wizard-right-02;wizard-right-03;wizard-right-02(wizard-right)
* }
* UDGTABLE#

* Sprite: Sword
* 
* .
* 
* .
* 
* Frame 7.
_b972:
       byte >0C                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$3D(sword-07)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>20                                                  ; 
       byte >00,>10                                                  ; 
       byte >00,>12                                                  ; 
       byte >7F,>DF                                                  ; 
       byte >FF,>DF                                                  ; 
       byte >00,>12                                                  ; 
       byte >00,>10                                                  ; 
       byte >00,>20                                                  ; }
* Frame 4.
_b98b:
       byte >0D                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$3A(sword-04)
       byte >00,>1C                                                  ; 
       byte >01,>DC                                                  ; 
       byte >00,>7C                                                  ; 
       byte >00,>30                                                  ; 
       byte >00,>D8                                                  ; 
       byte >01,>C8                                                  ; 
       byte >03,>88                                                  ; 
       byte >07,>00                                                  ; 
       byte >0E,>00                                                  ; 
       byte >1C,>00                                                  ; 
       byte >18,>00                                                  ; 
       byte >10,>00                                                  ; }
* Frame 5.
_b9a6:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >01,>80                                                  ; {#SPRITE$3B(sword-05)
       byte >03,>C0                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >07,>E0                                                  ; 
       byte >08,>10                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >00,>80                                                  ; }
* Frame 6.
_b9c7:
       byte >0D                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$3C(sword-06)
       byte >00,>00                                                  ; 
       byte >38,>00                                                  ; 
       byte >3B,>80                                                  ; 
       byte >3E,>00                                                  ; 
       byte >0C,>00                                                  ; 
       byte >1B,>00                                                  ; 
       byte >13,>80                                                  ; 
       byte >11,>C0                                                  ; 
       byte >00,>E0                                                  ; 
       byte >00,>70                                                  ; 
       byte >00,>38                                                  ; 
       byte >00,>1C                                                  ; }
* Frame 3.
_b9e2:
       byte >0C                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$39(sword-03)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >04,>00                                                  ; 
       byte >08,>00                                                  ; 
       byte >48,>00                                                  ; 
       byte >FD,>FF                                                  ; 
       byte >FD,>FE                                                  ; 
       byte >48,>00                                                  ; 
       byte >08,>00                                                  ; 
       byte >04,>00                                                  ; }
* Frame 2.
_b9fb:
       byte >0C                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$38(sword-02)
       byte >00,>08                                                  ; 
       byte >00,>18                                                  ; 
       byte >00,>38                                                  ; 
       byte >00,>70                                                  ; 
       byte >00,>E0                                                  ; 
       byte >11,>C0                                                  ; 
       byte >13,>80                                                  ; 
       byte >1D,>00                                                  ; 
       byte >0C,>00                                                  ; 
       byte >3E,>00                                                  ; 
       byte >3B,>80                                                  ; }
       byte >38,>00
* Frame 1.
_ba16:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >01,>00                                                  ; {#SPRITE$37(sword-01)
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >08,>10                                                  ; 
       byte >07,>E0                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >03,>C0                                                  ; 
       byte >01,>80                                                  ; }
* Frame 8.
_ba37:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$3E(sword-08)
       byte >00,>00                                                  ; 
       byte >10,>00                                                  ; 
       byte >18,>00                                                  ; 
       byte >1C,>00                                                  ; 
       byte >0E,>00                                                  ; 
       byte >07,>00                                                  ; 
       byte >03,>88                                                  ; 
       byte >01,>C8                                                  ; 
       byte >00,>D8                                                  ; 
       byte >00,>30                                                  ; 
       byte >00,>7C                                                  ; 
       byte >01,>DC                                                  ; 
       byte >00,>1C                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; }

* Sprite: Axe
* 
* .
* 
* .
* 
* Frame 1.
_ba58:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$3F(axe-01*)
       byte >00,>00                                                  ; 
       byte >3C,>00                                                  ; 
       byte >7E,>00                                                  ; 
       byte >C3,>00                                                  ; 
       byte >3C,>00                                                  ; 
       byte >18,>00                                                  ; 
       byte >3D,>FF                                                  ; 
       byte >3D,>FF                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; }
* Frame 2.
_ba79:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$40(axe-02*)
       byte >00,>04                                                  ; 
       byte >00,>0E                                                  ; 
       byte >00,>1C                                                  ; 
       byte >00,>38                                                  ; 
       byte >3C,>70                                                  ; 
       byte >60,>E0                                                  ; 
       byte >D9,>C0                                                  ; 
       byte >BA,>80                                                  ; 
       byte >BF,>00                                                  ; 
       byte >8E,>00                                                  ; 
       byte >1C,>00                                                  ; 
       byte >08,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; }
* Frame 3.
_ba9a:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >01,>80                                                  ; {#SPRITE$41(axe-03*)
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >09,>80                                                  ; 
       byte >18,>00                                                  ; 
       byte >35,>80                                                  ; 
       byte >37,>80                                                  ; 
       byte >37,>80                                                  ; 
       byte >35,>80                                                  ; 
       byte >18,>00                                                  ; 
       byte >08,>00                                                  ; }
* Frame 4.
_babb:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$42(axe-04*)
       byte >20,>00                                                  ; 
       byte >70,>00                                                  ; 
       byte >38,>00                                                  ; 
       byte >1C,>00                                                  ; 
       byte >0E,>00                                                  ; 
       byte >07,>00                                                  ; 
       byte >03,>80                                                  ; 
       byte >01,>40                                                  ; 
       byte >00,>E0                                                  ; 
       byte >04,>70                                                  ; 
       byte >05,>F8                                                  ; 
       byte >05,>D0                                                  ; 
       byte >06,>C0                                                  ; 
       byte >03,>00                                                  ; 
       byte >01,>E0                                                  ; }
* Frame 5.
_badc:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$43(axe-05*)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >FF,>BC                                                  ; 
       byte >FF,>BC                                                  ; 
       byte >00,>18                                                  ; 
       byte >00,>3C                                                  ; 
       byte >00,>C3                                                  ; 
       byte >00,>7E                                                  ; 
       byte >00,>3C                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; }
* Frame 6.
_bafd:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$44(axe-06*)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>10                                                  ; 
       byte >00,>38                                                  ; 
       byte >00,>71                                                  ; 
       byte >00,>FD                                                  ; 
       byte >01,>5D                                                  ; 
       byte >03,>9B                                                  ; 
       byte >07,>06                                                  ; 
       byte >0E,>3C                                                  ; 
       byte >1C,>00                                                  ; 
       byte >38,>00                                                  ; 
       byte >70,>00                                                  ; 
       byte >20,>00                                                  ; 
       byte >00,>00                                                  ; }
* Frame 7.
_bb1e:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>10                                                  ; {#SPRITE$45(axe-07*)
       byte >00,>18                                                  ; 
       byte >01,>AC                                                  ; 
       byte >01,>EC                                                  ; 
       byte >01,>EC                                                  ; 
       byte >01,>AC                                                  ; 
       byte >00,>18                                                  ; 
       byte >01,>90                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; }
* Frame 8.
_bb3f:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >07,>80                                                  ; {#SPRITE$46(axe-08*)
       byte >00,>C0                                                  ; 
       byte >03,>60                                                  ; 
       byte >0B,>A0                                                  ; 
       byte >1F,>A0                                                  ; 
       byte >0E,>20                                                  ; 
       byte >07,>00                                                  ; 
       byte >02,>80                                                  ; 
       byte >01,>C0                                                  ; 
       byte >00,>E0                                                  ; 
       byte >00,>70                                                  ; 
       byte >00,>38                                                  ; 
       byte >00,>1C                                                  ; 
       byte >00,>0E                                                  ; 
       byte >00,>04                                                  ; 
       byte >00,>00                                                  ; }
* #UDGARRAY*axe-01,25;axe-02;axe-03;axe-04;axe-05;axe-06;axe-07;axe-08(axe)

* Sprite: Fireball
* 
* .
* 
* .
* 
* Frame 1.
_bb60:
       byte >0F                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$33(fireball-01*)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>24                                                  ; 
       byte >00,>80                                                  ; 
       byte >09,>80                                                  ; 
       byte >02,>D0                                                  ; 
       byte >0D,>60                                                  ; 
       byte >06,>F0                                                  ; 
       byte >43,>42                                                  ; 
       byte >05,>A0                                                  ; 
       byte >12,>A0                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >01,>00                                                  ; }
* Frame 2.
_bb7f:
       byte >0F                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$34(fireball-02*)
       byte >00,>08                                                  ; 
       byte >00,>00                                                  ; 
       byte >20,>80                                                  ; 
       byte >01,>00                                                  ; 
       byte >03,>A0                                                  ; 
       byte >02,>08                                                  ; 
       byte >15,>F0                                                  ; 
       byte >05,>A8                                                  ; 
       byte >06,>60                                                  ; 
       byte >01,>80                                                  ; 
       byte >08,>20                                                  ; 
       byte >04,>80                                                  ; 
       byte >00,>10                                                  ; 
       byte >00,>00                                                  ; }
* Frame 3.
_bb9e:
       byte >0F                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$35(fireball-03*)
       byte >00,>80                                                  ; 
       byte >00,>00                                                  ; 
       byte >01,>00                                                  ; 
       byte >04,>10                                                  ; 
       byte >01,>82                                                  ; 
       byte >03,>60                                                  ; 
       byte >45,>68                                                  ; 
       byte >0E,>B0                                                  ; 
       byte >07,>42                                                  ; 
       byte >09,>90                                                  ; 
       byte >01,>00                                                  ; 
       byte >20,>00                                                  ; 
       byte >00,>08                                                  ; 
       byte >10,>80                                                  ; }
* Frame 4.
_bbbd:
       byte >0F                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$36(fireball-04*)
       byte >01,>00                                                  ; 
       byte >10,>04                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>40                                                  ; 
       byte >01,>90                                                  ; 
       byte >07,>40                                                  ; 
       byte >05,>E2                                                  ; 
       byte >17,>68                                                  ; 
       byte >03,>C0                                                  ; 
       byte >09,>C0                                                  ; 
       byte >00,>02                                                  ; 
       byte >01,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; }
* #UDGARRAY*fireball-01,25;fireball-02;fireball-03;fireball-04(fireball)

* Sprite: Cursor
* 
* .
* 
* .
* 
* Left.
_bbdc:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>01                                                  ; {#SPRITE$31(cursor-left)
       byte >00,>03                                                  ; 
       byte >00,>07                                                  ; 
       byte >00,>0F                                                  ; 
       byte >00,>1F                                                  ; 
       byte >00,>43                                                  ; 
       byte >00,>C3                                                  ; 
       byte >01,>C3                                                  ; 
       byte >03,>F8                                                  ; 
       byte >07,>F8                                                  ; 
       byte >07,>F8                                                  ; 
       byte >03,>F8                                                  ; 
       byte >01,>C3                                                  ; 
       byte >00,>C3                                                  ; 
       byte >00,>43                                                  ; 
       byte >00,>1F                                                  ; 
       byte >00,>0F                                                  ; 
       byte >00,>07                                                  ; 
       byte >00,>03                                                  ; 
       byte >00,>01                                                  ; }
* Right.
_bc05:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >80,>00                                                  ; {#SPRITE$32(cursor-right)
       byte >C0,>00                                                  ; 
       byte >E0,>00                                                  ; 
       byte >F0,>00                                                  ; 
       byte >F8,>00                                                  ; 
       byte >C2,>00                                                  ; 
       byte >C3,>00                                                  ; 
       byte >C3,>80                                                  ; 
       byte >1F,>C0                                                  ; 
       byte >1F,>E0                                                  ; 
       byte >1F,>E0                                                  ; 
       byte >1F,>C0                                                  ; 
       byte >C3,>80                                                  ; 
       byte >C3,>00                                                  ; 
       byte >C2,>00                                                  ; 
       byte >F8,>00                                                  ; 
       byte >F0,>00                                                  ; 
       byte >E0,>00                                                  ; 
       byte >C0,>00                                                  ; 
       byte >80,>00                                                  ; }
* #UDGTABLE(default)
* { =h Output: }
* { #SPRITE$31(cursor-left)#SPRITE$32(cursor-right) }
* UDGTABLE#

* Sprite: Keyboard
* 
* .
* 
* .
* 
* Left.
_bc2e:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0F,>FF                                                  ; {#SPRITE$47(keyboard-left)
       byte >0F,>FF                                                  ; 
       byte >09,>24                                                  ; 
       byte >09,>24                                                  ; 
       byte >0F,>FF                                                  ; 
       byte >09,>24                                                  ; 
       byte >09,>24                                                  ; 
       byte >0F,>FF                                                  ; 
       byte >0C,>92                                                  ; 
       byte >0C,>92                                                  ; 
       byte >07,>FF                                                  ; 
       byte >08,>00                                                  ; 
       byte >0F,>FF                                                  ; 
       byte >08,>45                                                  ; 
       byte >0D,>11                                                  ; 
       byte >07,>FF                                                  ; }
* Right.
_bc4f:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >FF,>F8                                                  ; {#SPRITE$48(keyboard-right)
       byte >FF,>F8                                                  ; 
       byte >92,>48                                                  ; 
       byte >92,>48                                                  ; 
       byte >FF,>F8                                                  ; 
       byte >92,>48                                                  ; 
       byte >92,>48                                                  ; 
       byte >FF,>F8                                                  ; 
       byte >49,>38                                                  ; 
       byte >49,>38                                                  ; 
       byte >FF,>F0                                                  ; 
       byte >00,>08                                                  ; 
       byte >FF,>F8                                                  ; 
       byte >FF,>F8                                                  ; 
       byte >FF,>F8                                                  ; 
       byte >FF,>F0                                                  ; }
* #UDGTABLE(default)
* { =h Output: }
* { #SPRITE$47(keyboard-left)#SPRITE$48(keyboard-right) }
* UDGTABLE#

* Sprite: Kempston
* 
* .
* 
* .
* 
* Left.
_bc70:
       byte >17                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>C7                                                  ; {#SPRITE$49(kempston-left)
       byte >01,>8F                                                  ; 
       byte >03,>1F                                                  ; 
       byte >00,>00                                                  ; 
       byte >03,>1F                                                  ; 
       byte >01,>8F                                                  ; 
       byte >00,>C7                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>33                                                  ; 
       byte >00,>0B                                                  ; 
       byte >00,>0B                                                  ; 
       byte >00,>0B                                                  ; 
       byte >00,>01                                                  ; 
       byte >00,>01                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>03                                                  ; 
       byte >00,>07                                                  ; 
       byte >00,>0F                                                  ; 
       byte >00,>09                                                  ; 
       byte >00,>09                                                  ; 
       byte >00,>0C                                                  ; 
       byte >00,>06                                                  ; 
       byte >00,>03                                                  ; }
* Right.
_bc9f:
       byte >17                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >FF,>00                                                  ; {#SPRITE$4A(kempston-right)
       byte >FF,>80                                                  ; 
       byte >FF,>C0                                                  ; 
       byte >00,>00                                                  ; 
       byte >FF,>C0                                                  ; 
       byte >FF,>80                                                  ; 
       byte >FF,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >FC,>00                                                  ; 
       byte >F0,>00                                                  ; 
       byte >F0,>00                                                  ; 
       byte >F0,>00                                                  ; 
       byte >80,>00                                                  ; 
       byte >80,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >C0,>00                                                  ; 
       byte >E0,>00                                                  ; 
       byte >F0,>00                                                  ; 
       byte >F0,>00                                                  ; 
       byte >F0,>00                                                  ; 
       byte >70,>00                                                  ; 
       byte >60,>00                                                  ; 
       byte >C0,>00                                                  ; }
* #UDGTABLE(default)
* { =h Output: }
* { #SPRITE$49(kempston-left)#SPRITE$4A(kempston-right) }
* UDGTABLE#

* Graphic: Cave Door Frame
_bcce:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >FF,>00,>00,>FF                                          ; {#GRAPHIC$00(cave-door)
       byte >03,>00,>00,>B0                                          ; 
       byte >03,>00,>00,>B0                                          ; 
       byte >07,>00,>00,>98                                          ; 
       byte >0D,>00,>00,>98                                          ; 
       byte >18,>80,>01,>0E                                          ; 
       byte >38,>80,>01,>0C                                          ; 
       byte >78,>80,>01,>18                                          ; 
       byte >58,>80,>01,>30                                          ; 
       byte >CC,>80,>01,>38                                          ; 
       byte >8C,>40,>02,>2C                                          ; 
       byte >0C,>40,>02,>26                                          ; 
       byte >0C,>40,>02,>3B                                          ; 
       byte >1C,>40,>02,>E1                                          ; 
       byte >34,>40,>02,>83                                          ; 
       byte >62,>20,>04,>86                                          ; 
       byte >F2,>20,>04,>86                                          ; 
       byte >7F,>2C,>05,>4C                                          ; 
       byte >0F,>62,>25,>4C                                          ; 
       byte >03,>C1,>7D,>58                                          ; 
       byte >00,>F0,>DF,>78                                          ; 
       byte >00,>3D,>87,>F0                                          ; 
       byte >00,>0F,>00,>C0                                          ; 
       byte >00,>02,>00,>00                                          ; }

* Sprite: Pumpkin
* 
* .
* 
* .
* 
* Frame 1.
_bd30:
       byte >13                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >07,>E0                                                  ; {#SPRITE$4B(pumpkin-01)
       byte >1F,>F8                                                  ; 
       byte >3F,>FC                                                  ; 
       byte >7D,>BE                                                  ; 
       byte >7B,>9E                                                  ; 
       byte >F5,>0F                                                  ; 
       byte >EF,>67                                                  ; 
       byte >F6,>67                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >FF,>7F                                                  ; 
       byte >EA,>47                                                  ; 
       byte >F7,>CF                                                  ; 
       byte >7B,>CE                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >3F,>FC                                                  ; 
       byte >0D,>B0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >00,>E0                                                  ; 
       byte >00,>60                                                  ; }
* Frame 2.
_bd57:
       byte >13                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >07,>E0                                                  ; {#SPRITE$4C(pumpkin-02)
       byte >1F,>F8                                                  ; 
       byte >3F,>FC                                                  ; 
       byte >7D,>FE                                                  ; 
       byte >79,>BE                                                  ; 
       byte >F0,>5F                                                  ; 
       byte >E6,>EF                                                  ; 
       byte >E6,>77                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >FE,>FF                                                  ; 
       byte >E2,>6F                                                  ; 
       byte >F3,>DF                                                  ; 
       byte >73,>FF                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >3F,>FC                                                  ; 
       byte >0D,>B0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >00,>E0                                                  ; 
       byte >00,>60                                                  ; }

* Data block at BD7E
       byte >00,>17,>01,>04,>FF,>01,>FF,>02
       byte >03,>19,>01,>FF,>03,>FF,>04,>FF
       byte >05,>06
       byte >1B,>03,>FF,>06,>FF,>07,>08,>06
       byte >1D,>FF,>08,>FF,>09,>04,>33,>0A
       byte >FF,>0A,>FF,>0B,>0D,>1F,>08,>FF
       byte >0C,>FF,>0D,>FF,>0E,>0F,>0D,>0C
       byte >FF,>0F,>FF,>10,>31,>0A,>35,>FF
       byte >11,>12,>23,>0F,>FF,>12,>FF,>13
       byte >36,>35,>FF,>14,>25,>15,>12,>FF
       byte >15,>FF,>16,>17,>04,>33,>FF,>17
       byte >FF,>18,>19,>17,>01,>FF,>19,>FF
       byte >1A,>1B,>19,>03,>FF,>1B,>FF,>1C
       byte >1D,>1B,>06,>FF,>1D,>FF,>1E,>1F
       byte >1D,>08,>FF,>1F,>FF,>20,>0D,>1F
       byte >FF,>21,>FF,>22,>23,>21,>0F,>FF
       byte >23,>FF,>24,>25,>23,>12,>FF,>25
       byte >FF,>26,>25,>27,>15,>FF,>27,>FF
       byte >28,>27,>29,>3C,>FF,>29,>FF,>2A
       byte >2B,>3A,>29,>FF,>2B,>FF,>2C,>2D
       byte >2B,>38,>FF,>2D,>FF,>2E,>2F,>2D
       byte >36,>FF,>2F,>FF,>30,>13,>31,>2F
       byte >FF,>31,>FF,>32,>33,>31,>0A,>FF
       byte >33,>FF,>34,>FF,>35,>34,>FF,>36
       byte >FF,>37,>2D,>38,>36,>FF,>38,>FF
       byte >39,>2B,>38,>3A,>FF,>3A,>FF,>3B
       byte >3A,>29,>3C,>FF

* Main Font
mainfont:                              ; be4c
       byte >3C,>FF,>3D,>15,>3C,>27,>FF,>FF                          ; #UDG(#PC)
       byte >79,>0A,>86,>04,>91,>04,>A6,>19                          ; #UDG(#PC)
       byte >46,>0A,>9B,>38,>A7,>4B,>9A,>58                          ; #UDG(#PC)
       byte >AA,>68,>37,>01,>2A,>07,>9B,>7E                          ; #UDG(#PC)
       byte >9B,>87,>9B,>8F,>A8,>8F,>95,>A1                          ; #UDG(#PC)
       byte >2A,>1E,>95,>B8,>88,>BE,>24,>30                          ; #UDG(#PC)
       byte >79,>B5,>46,>B5,>4F,>27,>70,>27                          ; #UDG(#PC)
       byte >79,>23,>82,>23,>8F,>30,>84,>47                          ; #UDG(#PC)
       byte >89,>52,>80,>5B,>8B,>66,>85,>74                          ; #UDG(#PC)
       byte >85,>7D,>89,>80,>81,>88,>81,>99                          ; #UDG(#PC)
       byte >77,>9D,>70,>98,>4F,>98,>46,>9C                          ; #UDG(#PC)
       byte >3D,>9C,>30,>8F,>3B,>78,>36,>6D                          ; #UDG(#PC)
       byte >3F,>64,>34,>59,>3A,>4C,>3A,>42                          ; #UDG(#PC)
       byte >36,>3F,>3E,>37,>3E,>26,>47,>22                          ; #UDG(#PC)
       byte >24,>38,>18,>30,>24,>41,>15,>57                          ; #UDG(#PC)
       byte >25,>67,>18,>74,>24,>87,>18,>A6                          ; #UDG(#PC)
       byte >2E,>BB,>39,>BB,>0A,>79,>04,>86                          ; #UDG(#PC)
       byte >04,>91,>19,>A6,>0A,>46,>38,>9B                          ; #UDG(#PC)
       byte >4B,>A7,>58,>9A,>68,>AA,>01,>37                          ; #UDG(#PC)
       byte >07,>2A,>7E,>9B,>87,>9B,>8F,>9B                          ; #UDG(#PC)
       byte >8F,>A8,>A1,>95,>1E,>2A,>B8,>95                          ; #UDG(#PC)
       byte >BE,>88,>30,>24,>B5,>79,>B5,>46                          ; #UDG(#PC)
       byte >27,>4F,>27,>70,>23,>79,>23,>82                          ; #UDG(#PC)
       byte >30,>8F,>47,>84,>52,>89,>5B,>80                          ; #UDG(#PC)
       byte >66,>8B,>74,>85,>7D,>85,>80,>89                          ; #UDG(#PC)
       byte >88,>81,>99,>81,>9D,>77,>98,>70                          ; #UDG(#PC)
       byte >98,>4F,>9C,>46,>9C,>3D,>8F,>30                          ; #UDG(#PC)
       byte >78,>3B,>6D,>36,>64,>3F,>59,>34                          ; #UDG(#PC)
       byte >4C,>3A,>42,>3A,>3F,>36,>37,>3E                          ; #UDG(#PC)
       byte >26,>3E,>22,>47,>38,>24,>30,>18                          ; #UDG(#PC)
       byte >41,>24,>57,>15,>67,>25,>74,>18                          ; #UDG(#PC)
       byte >87,>24,>A6,>18,>BB,>2E,>BB,>39                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >18,>18,>18,>18,>18,>00,>18,>18                          ; #UDG(#PC)
       byte >28,>28,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >00,>18,>18,>00,>00,>18,>18,>00                          ; #UDG(#PC)
       byte >00,>62,>64,>08,>10,>26,>46,>00                          ; #UDG(#PC)
       byte >3C,>42,>99,>A1,>A1,>99,>42,>3C                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >10,>10,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >08,>18,>18,>18,>18,>18,>18,>08                          ; #UDG(#PC)
       byte >10,>18,>18,>18,>18,>18,>18,>10                          ; #UDG(#PC)
       byte >00,>14,>58,>3E,>7C,>1A,>28,>00                          ; #UDG(#PC)
       byte >00,>18,>18,>7E,>78,>18,>18,>00                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>00,>00,>20,>20                          ; #UDG(#PC)
       byte >00,>00,>00,>7E,>7E,>00,>00,>00                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>00,>00,>18,>18                          ; #UDG(#PC)
       byte >0C,>0C,>18,>18,>30,>30,>60,>60                          ; #UDG(#PC)
_bfcc:
       byte >7C,>FE,>C6,>C6,>C6,>FE,>7C,>00                          ; #UDG(#PC)
       byte >18,>38,>58,>18,>18,>18,>3C,>00                          ; #UDG(#PC)
       byte >7C,>FE,>06,>7C,>C0,>FE,>FE,>00                          ; #UDG(#PC)
       byte >FE,>FC,>08,>1C,>06,>FE,>FC,>00                          ; #UDG(#PC)
       byte >0C,>1C,>3C,>6C,>FE,>0C,>0C,>00                          ; #UDG(#PC)
       byte >FE,>FE,>C0,>FC,>06,>FE,>7C,>00                          ; #UDG(#PC)
       byte >7C,>FE,>C0,>FC,>C6,>FE,>7C,>00                          ; #UDG(#PC)
       byte >FE,>FC,>0C,>18,>18,>30,>30,>00                          ; #UDG(#PC)
       byte >7C,>FE,>C6,>7C,>C6,>FE,>7C,>00                          ; #UDG(#PC)
       byte >7C,>FE,>C6,>7E,>06,>FE,>7C,>00                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; #UDG(#PC)
       byte >38,>38,>6C,>7C,>EE,>EE,>C6,>00                          ; #UDG(#PC)
       byte >FC,>FE,>E6,>FC,>E6,>FE,>FC,>00                          ; #UDG(#PC)
       byte >3C,>7E,>F8,>E0,>F8,>7E,>3C,>00                          ; #UDG(#PC)
       byte >F8,>FC,>FE,>C6,>FE,>FC,>F8,>00                          ; #UDG(#PC)
       byte >F8,>F8,>E0,>FC,>E0,>FE,>FE,>00                          ; #UDG(#PC)
       byte >FE,>FE,>E0,>FC,>E0,>E0,>E0,>00                          ; #UDG(#PC)
       byte >3C,>7E,>F8,>E0,>FE,>7E,>3A,>00                          ; #UDG(#PC)
       byte >EE,>EE,>FE,>FE,>FE,>EE,>EE,>00                          ; #UDG(#PC)
       byte >7C,>7C,>38,>38,>38,>7C,>7C,>00                          ; #UDG(#PC)
       byte >0E,>0E,>0E,>0E,>EE,>7C,>38,>00                          ; #UDG(#PC)
       byte >EE,>EC,>F8,>F8,>F8,>EC,>EE,>00                          ; #UDG(#PC)
       byte >E0,>E0,>E0,>E0,>FE,>FE,>FE,>00                          ; #UDG(#PC)
       byte >82,>EE,>FE,>FE,>D6,>D6,>D6,>00                          ; #UDG(#PC)
       byte >8E,>CE,>EE,>FE,>EE,>E6,>E2,>00                          ; #UDG(#PC)
       byte >38,>7C,>FE,>EE,>FE,>7C,>38,>00                          ; #UDG(#PC)
       byte >FC,>FE,>E6,>FE,>FC,>E0,>E0,>00                          ; #UDG(#PC)
       byte >38,>7C,>FE,>EE,>FE,>7C,>3E,>00                          ; #UDG(#PC)
       byte >FC,>FE,>E6,>FE,>FC,>EC,>EE,>00                          ; #UDG(#PC)
       byte >7C,>FE,>F0,>7C,>1E,>FE,>7C,>00                          ; #UDG(#PC)
       byte >FE,>FE,>FE,>38,>38,>38,>38,>00                          ; #UDG(#PC)
       byte >EE,>EE,>EE,>EE,>FE,>FE,>7C,>00                          ; #UDG(#PC)
       byte >EE,>EE,>6C,>7C,>38,>38,>10,>00                          ; #UDG(#PC)
       byte >D6,>D6,>D6,>FE,>FE,>EE,>82,>00                          ; #UDG(#PC)
       byte >EE,>EE,>6C,>38,>6C,>EE,>EE,>00                          ; #UDG(#PC)
       byte >EE,>6C,>7C,>38,>38,>38,>38,>00                          ; #UDG(#PC)
       byte >FE,>FC,>F8,>10,>3E,>7E,>FE,>00                          ; #UDG(#PC)

* Sprite: Can
_c124:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >07,>E0                                                  ; {#SPRITE$4F(can)
       byte >18,>18                                                  ; 
       byte >2F,>F4                                                  ; 
       byte >7E,>1E                                                  ; 
       byte >3E,>34                                                  ; 
       byte >3E,>54                                                  ; 
       byte >3E,>EC                                                  ; 
       byte >3D,>DC                                                  ; 
       byte >3D,>BC                                                  ; 
       byte >39,>DC                                                  ; 
       byte >23,>BC                                                  ; 
       byte >27,>7C                                                  ; 
       byte >26,>BC                                                  ; 
       byte >2F,>FC                                                  ; 
       byte >38,>1C                                                  ; 
       byte >20,>C4                                                  ; 
       byte >5D,>22                                                  ; 
       byte >20,>C4                                                  ; 
       byte >18,>18                                                  ; 
       byte >07,>E0                                                  ; }

* Sprite: Money Bag
_c14d:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1F,>F8                                                  ; {#SPRITE$87(moneybag)
       byte >7F,>7E                                                  ; 
       byte >F8,>1E                                                  ; 
       byte >F0,>4F                                                  ; 
       byte >F8,>0F                                                  ; 
       byte >F9,>7F                                                  ; 
       byte >FC,>0F                                                  ; 
       byte >7F,>7F                                                  ; 
       byte >7F,>FF                                                  ; 
       byte >3E,>1E                                                  ; 
       byte >1D,>EE                                                  ; 
       byte >87,>B4                                                  ; 
       byte >7F,>18                                                  ; 
       byte >CE,>04                                                  ; 
       byte >11,>34                                                  ; 
       byte >0E,>C8                                                  ; }

* Sprite: Coin
_c16e:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >07,>A0                                                  ; {#SPRITE$82(coin)
       byte >1F,>E8                                                  ; 
       byte >3B,>74                                                  ; 
       byte >6A,>9A                                                  ; 
       byte >5F,>DA                                                  ; 
       byte >D8,>CD                                                  ; 
       byte >B0,>75                                                  ; 
       byte >FC,>75                                                  ; 
       byte >F2,>35                                                  ; 
       byte >C0,>1D                                                  ; 
       byte >C8,>1D                                                  ; 
       byte >76,>3A                                                  ; 
       byte >70,>3A                                                  ; 
       byte >38,>74                                                  ; 
       byte >1F,>E8                                                  ; 
       byte >07,>A0                                                  ; }

* Sprite: Gem
_c18f:
       byte >0D                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1F,>F8                                                  ; {#SPRITE$86(gem)
       byte >28,>14                                                  ; 
       byte >48,>12                                                  ; 
       byte >9A,>B1                                                  ; 
       byte >F7,>EF                                                  ; 
       byte >D5,>58                                                  ; 
       byte >A7,>B5                                                  ; 
       byte >F7,>F1                                                  ; 
       byte >08,>0F                                                  ; 
       byte >F7,>F1                                                  ; 
       byte >77,>52                                                  ; 
       byte >37,>D4                                                  ; 
       byte >17,>F8                                                  ; }

* Sprite: Candy
_c1aa:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >10,>00                                                  ; {#SPRITE$50(candy)
       byte >38,>00                                                  ; 
       byte >44,>00                                                  ; 
       byte >82,>00                                                  ; 
       byte >7F,>00                                                  ; 
       byte >3F,>80                                                  ; 
       byte >10,>40                                                  ; 
       byte >08,>20                                                  ; 
       byte >07,>F0                                                  ; 
       byte >03,>F8                                                  ; 
       byte >01,>04                                                  ; 
       byte >00,>82                                                  ; 
       byte >00,>7F                                                  ; 
       byte >00,>3E                                                  ; 
       byte >00,>14                                                  ; 
       byte >00,>08                                                  ; }

* Sprite: Chop
_c1cb:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0F,>FC                                                  ; {#SPRITE$51(chop)
       byte >10,>02                                                  ; 
       byte >11,>C1                                                  ; 
       byte >11,>C3                                                  ; 
       byte >18,>0E                                                  ; 
       byte >0F,>FC                                                  ; 
       byte >0F,>F8                                                  ; 
       byte >07,>F8                                                  ; 
       byte >07,>F0                                                  ; 
       byte >07,>F0                                                  ; 
       byte >03,>E0                                                  ; 
       byte >03,>E0                                                  ; 
       byte >03,>C0                                                  ; 
       byte >00,>00                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>C0                                                  ; 
       byte >07,>E0                                                  ; 
       byte >07,>60                                                  ; }

* Sprite: Lollipop
_c1f4:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>18                                                  ; {#SPRITE$52(lollipop)
       byte >00,>38                                                  ; 
       byte >00,>30                                                  ; 
       byte >00,>70                                                  ; 
       byte >00,>60                                                  ; 
       byte >00,>E0                                                  ; 
       byte >0F,>40                                                  ; 
       byte >3F,>C0                                                  ; 
       byte >7F,>E0                                                  ; 
       byte >7F,>E0                                                  ; 
       byte >FF,>F0                                                  ; 
       byte >CF,>F0                                                  ; 
       byte >CF,>F0                                                  ; 
       byte >C7,>F0                                                  ; 
       byte >61,>E0                                                  ; 
       byte >71,>E0                                                  ; 
       byte >3F,>C0                                                  ; 
       byte >0F,>00                                                  ; }

* Sprite: Ice Cream
_c219:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>01                                                  ; {#SPRITE$53(icecream)
       byte >00,>0F                                                  ; 
       byte >00,>54                                                  ; 
       byte >03,>FE                                                  ; 
       byte >15,>54                                                  ; 
       byte >3F,>FC                                                  ; 
       byte >7D,>54                                                  ; 
       byte >07,>F8                                                  ; 
       byte >C9,>D0                                                  ; 
       byte >D0,>F8                                                  ; 
       byte >E8,>D0                                                  ; 
       byte >F2,>70                                                  ; 
       byte >79,>50                                                  ; 
       byte >74,>60                                                  ; 
       byte >3D,>40                                                  ; 
       byte >0F,>00                                                  ; }

* Sprite: Sparkle
* 
* .
* 
* .
* 
* Frame 1.
_c23a:
       byte >0C                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$57(sparkle-01*)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >02,>00                                                  ; 
       byte >01,>40                                                  ; 
       byte >04,>20                                                  ; 
       byte >02,>80                                                  ; 
       byte >0A,>A0                                                  ; 
       byte >00,>50                                                  ; 
       byte >01,>00                                                  ; 
       byte >04,>40                                                  ; }
* Frame 2.
_c253:
       byte >0D                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$58(sparkle-02*)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>80                                                  ; 
       byte >02,>00                                                  ; 
       byte >09,>50                                                  ; 
       byte >04,>80                                                  ; 
       byte >02,>D0                                                  ; 
       byte >0B,>88                                                  ; 
       byte >01,>A0                                                  ; 
       byte >15,>08                                                  ; 
       byte >00,>A0                                                  ; 
       byte >02,>00                                                  ; }
* Frame 3.
_c26e:
       byte >0F                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$59(sparkle-03*)
       byte >01,>20                                                  ; 
       byte >02,>08                                                  ; 
       byte >80,>A0                                                  ; 
       byte >22,>14                                                  ; 
       byte >14,>60                                                  ; 
       byte >03,>50                                                  ; 
       byte >55,>82                                                  ; 
       byte >09,>74                                                  ; 
       byte >13,>40                                                  ; 
       byte >24,>50                                                  ; 
       byte >01,>94                                                  ; 
       byte >0A,>40                                                  ; 
       byte >00,>10                                                  ; 
       byte >01,>00                                                  ; }
* Frame 4.
_c28d:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>80                                                  ; {#SPRITE$5A(sparkle-04*)
       byte >12,>08                                                  ; 
       byte >00,>40                                                  ; 
       byte >2A,>02                                                  ; 
       byte >00,>A8                                                  ; 
       byte >85,>40                                                  ; 
       byte >12,>52                                                  ; 
       byte >45,>A8                                                  ; 
       byte >11,>14                                                  ; 
       byte >05,>28                                                  ; 
       byte >52,>52                                                  ; 
       byte >05,>00                                                  ; 
       byte >08,>90                                                  ; 
       byte >22,>44                                                  ; 
       byte >09,>20                                                  ; 
       byte >00,>40                                                  ; }
* #UDGARRAY*sparkle-04,25;sparkle-03;sparkle-02;sparkle-01(sparkle)

* Graphic: Cave Door Locked
_c2ae:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >FF,>1B,>18,>FF                                          ; {#GRAPHIC$0B(cave-door-locked)
       byte >03,>1B,>18,>B0                                          ; 
       byte >03,>1B,>18,>B0                                          ; 
       byte >07,>1B,>18,>98                                          ; 
       byte >0D,>33,>0C,>98                                          ; 
       byte >1A,>33,>0C,>98                                          ; 
       byte >3A,>33,>0C,>EC                                          ; 
       byte >7A,>33,>00,>58                                          ; 
       byte >5A,>63,>0E,>70                                          ; 
       byte >CE,>63,>17,>78                                          ; 
       byte >8C,>63,>19,>2C                                          ; 
       byte >0C,>63,>0E,>26                                          ; 
       byte >0C,>C3,>00,>23                                          ; 
       byte >1C,>C3,>03,>21                                          ; 
       byte >32,>C3,>03,>43                                          ; 
       byte >62,>43,>02,>46                                          ; 
       byte >F8,>00,>00,>86                                          ; 
       byte >7F,>C0,>03,>0C                                          ; 
       byte >0F,>38,>1C,>0C                                          ; 
       byte >03,>C7,>FC,>18                                          ; 
       byte >00,>F0,>DF,>38                                          ; 
       byte >00,>3D,>87,>F0                                          ; 
       byte >00,>0F,>00,>C0                                          ; 
       byte >00,>02,>00,>00                                          ; }

* Sprite: Spider
* 
* .
* 
* .
* 
* Frame 1.
_c310:
       byte >0E                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0C,>30                                                  ; {#SPRITE$5B(spider-01)
       byte >0C,>30                                                  ; 
       byte >C0,>03                                                  ; 
       byte >C6,>63                                                  ; 
       byte >60,>06                                                  ; 
       byte >1F,>F8                                                  ; 
       byte >39,>9C                                                  ; 
       byte >74,>2E                                                  ; 
       byte >76,>6E                                                  ; 
       byte >79,>9E                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >3F,>FC                                                  ; 
       byte >1F,>F8                                                  ; 
       byte >0F,>F0                                                  ; }
* Frame 2.
_c32d:
       byte >0E                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$5C(spider-02)
       byte >60,>06                                                  ; 
       byte >66,>66                                                  ; 
       byte >06,>60                                                  ; 
       byte >33,>CC                                                  ; 
       byte >1F,>F8                                                  ; 
       byte >39,>9C                                                  ; 
       byte >74,>2E                                                  ; 
       byte >76,>6E                                                  ; 
       byte >79,>9E                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >3F,>FC                                                  ; 
       byte >1F,>F8                                                  ; 
       byte >0F,>F0                                                  ; }

* Sprite: Spikey
* 
* .
* 
* .
* 
* Frame 1.
_c34a:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >03,>FF                                                  ; {#SPRITE$5D(spikey-01)
       byte >FF,>FC                                                  ; 
       byte >3F,>F0                                                  ; 
       byte >0F,>FC                                                  ; 
       byte >3F,>FF                                                  ; 
       byte >FF,>FC                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >13,>9E                                                  ; 
       byte >65,>2F                                                  ; 
       byte >ED,>68                                                  ; 
       byte >33,>9E                                                  ; 
       byte >3F,>F1                                                  ; 
       byte >67,>F8                                                  ; 
       byte >03,>B8                                                  ; 
       byte >03,>1C                                                  ; 
       byte >02,>00                                                  ; }
* Frame 2.
_c36b:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >FF,>80                                                  ; {#SPRITE$5E(spikey-02)
       byte >7F,>FF                                                  ; 
       byte >0F,>FC                                                  ; 
       byte >3F,>F0                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >1F,>FC                                                  ; 
       byte >33,>98                                                  ; 
       byte >65,>2F                                                  ; 
       byte >7D,>6E                                                  ; 
       byte >73,>98                                                  ; 
       byte >1F,>F8                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >7F,>6E                                                  ; 
       byte >63,>62                                                  ; 
       byte >01,>20                                                  ; }

* Sprite: Blob
* 
* .
* 
* .
* 
* Frame 1.
_c38c:
       byte >0B                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0E,>E0                                                  ; {#SPRITE$5F(blob-01)
       byte >1F,>F0                                                  ; 
       byte >39,>38                                                  ; 
       byte >34,>90                                                  ; 
       byte >36,>D8                                                  ; 
       byte >39,>38                                                  ; 
       byte >1F,>F0                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >1C,>70                                                  ; 
       byte >38,>38                                                  ; 
       byte >F0,>1E                                                  ; }
* Frame 2.
_c3a3:
       byte >09                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0E,>E0                                                  ; {#SPRITE$60(blob-02)
       byte >1F,>F0                                                  ; 
       byte >39,>38                                                  ; 
       byte >34,>98                                                  ; 
       byte >36,>D8                                                  ; 
       byte >39,>38                                                  ; 
       byte >1F,>F0                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >F8,>3E                                                  ; }

* Sprite: Ghoul
* 
* .
* 
* .
* 
* Frame 1.
_c3b6:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >01,>C0                                                  ; {#SPRITE$61(ghoul-01)
       byte >03,>80                                                  ; 
       byte >03,>00                                                  ; 
       byte >03,>00                                                  ; 
       byte >83,>81                                                  ; 
       byte >87,>C1                                                  ; 
       byte >8F,>E1                                                  ; 
       byte >CF,>F3                                                  ; 
       byte >DF,>F3                                                  ; 
       byte >DF,>FB                                                  ; 
       byte >DF,>FB                                                  ; 
       byte >DF,>FB                                                  ; 
       byte >D9,>9B                                                  ; 
       byte >D9,>9B                                                  ; 
       byte >19,>98                                                  ; 
       byte >19,>98                                                  ; 
       byte >19,>98                                                  ; 
       byte >1F,>F8                                                  ; 
       byte >0F,>F0                                                  ; 
       byte >07,>E0                                                  ; }
* Frame 2.
_c3df:
       byte >14                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >03,>80                                                  ; {#SPRITE$62(ghoul-02)
       byte >01,>C0                                                  ; 
       byte >00,>C0                                                  ; 
       byte >00,>C0                                                  ; 
       byte >01,>C0                                                  ; 
       byte >03,>E0                                                  ; 
       byte >87,>F1                                                  ; 
       byte >8F,>F1                                                  ; 
       byte >8F,>F9                                                  ; 
       byte >DF,>FB                                                  ; 
       byte >DF,>FB                                                  ; 
       byte >DF,>FB                                                  ; 
       byte >D9,>9B                                                  ; 
       byte >D9,>9B                                                  ; 
       byte >D9,>9B                                                  ; 
       byte >D9,>9B                                                  ; 
       byte >99,>99                                                  ; 
       byte >0F,>F0                                                  ; 
       byte >0F,>F0                                                  ; 
       byte >07,>E0                                                  ; }

* Sprite: Ghost
* 
* .
* 
* .
* 
* Frame 1.
_c408:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >03,>C0                                                  ; {#SPRITE$67(ghost-01)
       byte >07,>E0                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >3F,>FE                                                  ; 
       byte >1F,>FC                                                  ; 
       byte >1C,>EC                                                  ; 
       byte >18,>44                                                  ; 
       byte >18,>44                                                  ; 
       byte >1C,>44                                                  ; 
       byte >0C,>CC                                                  ; 
       byte >0F,>F8                                                  ; 
       byte >07,>F0                                                  ; 
       byte >03,>C0                                                  ; }
* Frame 2.
_c429:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >78,>0C                                                  ; {#SPRITE$68(ghost-02)
       byte >FC,>1E                                                  ; 
       byte >FE,>3F                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >7F,>FF                                                  ; 
       byte >3F,>FE                                                  ; 
       byte >1F,>FC                                                  ; 
       byte >1F,>FC                                                  ; 
       byte >1C,>EC                                                  ; 
       byte >18,>44                                                  ; 
       byte >18,>44                                                  ; 
       byte >1C,>44                                                  ; 
       byte >0C,>CC                                                  ; 
       byte >0F,>F8                                                  ; 
       byte >07,>F0                                                  ; 
       byte >03,>C0                                                  ; }

* Sprite: Bat
* 
* .
* 
* .
* 
* Frame 1.
_c44a:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$69(bat-01)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >04,>40                                                  ; 
       byte >0C,>60                                                  ; 
       byte >03,>80                                                  ; 
       byte >07,>C0                                                  ; 
       byte >06,>C0                                                  ; 
       byte >0D,>60                                                  ; 
       byte >1F,>F0                                                  ; 
       byte >1C,>70                                                  ; 
       byte >38,>38                                                  ; 
       byte >30,>18                                                  ; 
       byte >60,>0C                                                  ; 
       byte >40,>04                                                  ; 
       byte >C0,>06                                                  ; 
       byte >80,>02                                                  ; 
       byte >80,>02                                                  ; }
* Frame 2.
_c46f:
       byte >0E                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >80,>02                                                  ; {#SPRITE$6A(bat-02)
       byte >80,>02                                                  ; 
       byte >80,>02                                                  ; 
       byte >40,>04                                                  ; 
       byte >60,>0C                                                  ; 
       byte >64,>4C                                                  ; 
       byte >3C,>78                                                  ; 
       byte >3B,>B8                                                  ; 
       byte >17,>D0                                                  ; 
       byte >06,>C0                                                  ; 
       byte >05,>40                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >0C,>60                                                  ; 
       byte >08,>20                                                  ; }

* Graphic: Chicken
* 
* .
* 
* .
* 
* Empty.
_c48c:
       byte >06                                                      ; Width = #N(#PEEK(#PC)) bytes.
_c48d:
       byte >1E                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00,>0F,>FF,>F8,>00                                  ; {#GRAPHIC$13(chicken-empty)
       byte >00,>00,>FF,>FE,>3E,>00                                  ; 
       byte >00,>07,>FF,>FD,>DF,>80                                  ; 
       byte >00,>1F,>E7,>01,>E8,>C0                                  ; 
       byte >00,>7E,>E4,>F0,>E7,>60                                  ; 
       byte >01,>F6,>73,>FC,>73,>80                                  ; 
       byte >03,>33,>27,>F8,>33,>C0                                  ; 
       byte >04,>18,>0F,>FD,>38,>C0                                  ; 
       byte >08,>00,>0F,>FD,>18,>E0                                  ; 
       byte >00,>00,>1F,>FD,>18,>E0                                  ; 
       byte >00,>00,>1F,>FD,>18,>E0                                  ; 
       byte >00,>00,>3F,>FD,>18,>E0                                  ; 
       byte >00,>00,>3F,>FB,>38,>E0                                  ; 
       byte >00,>00,>7F,>FB,>38,>E8                                  ; 
       byte >00,>00,>7F,>F6,>71,>D8                                  ; 
       byte >00,>1E,>DF,>EE,>71,>DC                                  ; 
       byte >00,>0D,>3F,>DC,>F3,>BC                                  ; 
       byte >00,>02,>FF,>3C,>E3,>78                                  ; 
       byte >00,>05,>E0,>79,>E3,>70                                  ; 
       byte >00,>0B,>9E,>F1,>D8,>E0                                  ; 
       byte >00,>17,>3E,>E3,>BF,>C0                                  ; 
       byte >0C,>2E,>1F,>1B,>7F,>80                                  ; 
       byte >1E,>DC,>07,>FC,>FE,>00                                  ; 
       byte >37,>B8,>01,>BB,>F8,>00                                  ; 
       byte >33,>F0,>00,>3F,>E0,>00                                  ; 
       byte >1D,>E0,>00,>00,>00,>00                                  ; 
       byte >03,>C0,>00,>00,>00,>00                                  ; 
       byte >06,>E0,>00,>00,>00,>00                                  ; 
       byte >06,>60,>00,>00,>00,>00                                  ; 
       byte >03,>C0,>00,>00,>00,>00                                  ; }
* Full.
_c542:
       byte >06                                                      ; Width = #N(#PEEK(#PC)) bytes.
_c543:
       byte >1E                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00,>FF,>FF,>FE,>00                                  ; {#GRAPHIC$12(chicken-full)
       byte >00,>07,>FF,>FF,>FF,>80                                  ; 
       byte >00,>1F,>FF,>0F,>FF,>C0                                  ; 
       byte >00,>7F,>FE,>F7,>FF,>E0                                  ; 
       byte >01,>FF,>F9,>BB,>FF,>F0                                  ; 
       byte >03,>FF,>F7,>FD,>FF,>F8                                  ; 
       byte >07,>FF,>EF,>F5,>FF,>FC                                  ; 
       byte >0F,>FF,>DF,>DE,>FF,>EC                                  ; 
       byte >1F,>DF,>5D,>BE,>FF,>FE                                  ; 
       byte >36,>FD,>BF,>F6,>DE,>FE                                  ; 
       byte >3F,>FF,>B7,>FE,>FF,>FE                                  ; 
       byte >1B,>BF,>7E,>BE,>FF,>BA                                  ; 
       byte >0E,>FB,>7F,>FD,>BB,>FA                                  ; 
       byte >07,>BE,>F7,>7D,>FF,>FE                                  ; 
       byte >01,>F6,>FF,>DB,>FF,>FE                                  ; 
       byte >00,>DD,>FE,>F7,>FF,>7E                                  ; 
       byte >00,>3B,>77,>ED,>7F,>DE                                  ; 
       byte >00,>17,>FE,>DF,>FF,>EC                                  ; 
       byte >00,>0B,>FF,>3F,>FB,>F8                                  ; 
       byte >00,>1F,>C0,>FB,>FF,>B0                                  ; 
       byte >00,>1F,>BF,>FF,>BF,>E0                                  ; 
       byte >0C,>2F,>37,>BF,>FB,>C0                                  ; 
       byte >1E,>DE,>1D,>FB,>FF,>80                                  ; 
       byte >37,>B8,>07,>BF,>BE,>00                                  ; 
       byte >33,>F0,>01,>FB,>F8,>00                                  ; 
       byte >1D,>E0,>00,>3F,>E0,>00                                  ; 
       byte >03,>C0,>00,>00,>00,>00                                  ; 
       byte >06,>E0,>00,>00,>00,>00                                  ; 
       byte >06,>60,>00,>00,>00,>00                                  ; 
       byte >03,>C0,>00,>00,>00,>00                                  ; }

* Sprite: Pop
* 
* .
* 
* .
* 
* Frame 1.
_c5f8:
       byte >0B                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$6B(pop-01)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >03,>40                                                  ; 
       byte >05,>C0                                                  ; 
       byte >07,>60                                                  ; 
       byte >06,>A0                                                  ; 
       byte >03,>C0                                                  ; 
       byte >01,>00                                                  ; }
* Frame 2.
_c60f:
       byte >0D                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$6C(pop-02)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>80                                                  ; 
       byte >01,>A0                                                  ; 
       byte >0B,>48                                                  ; 
       byte >02,>F0                                                  ; 
       byte >1F,>40                                                  ; 
       byte >06,>F8                                                  ; 
       byte >07,>B0                                                  ; 
       byte >09,>C8                                                  ; 
       byte >02,>A0                                                  ; 
       byte >02,>90                                                  ; }
* Frame 3.
_c62a:
       byte >0F                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$6D(pop-03)
       byte >05,>00                                                  ; 
       byte >11,>10                                                  ; 
       byte >09,>10                                                  ; 
       byte >04,>24                                                  ; 
       byte >38,>08                                                  ; 
       byte >00,>10                                                  ; 
       byte >70,>00                                                  ; 
       byte >00,>0E                                                  ; 
       byte >10,>00                                                  ; 
       byte >64,>2C                                                  ; 
       byte >0A,>92                                                  ; 
       byte >12,>A8                                                  ; 
       byte >02,>80                                                  ; 
       byte >00,>80                                                  ; }
* Frame 4.
_c649:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >01,>00                                                  ; {#SPRITE$6E(pop-04)
       byte >11,>10                                                  ; 
       byte >08,>20                                                  ; 
       byte >00,>02                                                  ; 
       byte >40,>04                                                  ; 
       byte >20,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >C0,>00                                                  ; 
       byte >00,>03                                                  ; 
       byte >00,>00                                                  ; 
       byte >40,>02                                                  ; 
       byte >80,>01                                                  ; 
       byte >00,>00                                                  ; 
       byte >20,>04                                                  ; 
       byte >44,>82                                                  ; 
       byte >04,>80                                                  ; }

* Graphic: Wall Antlers
_c66a:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>03,>C0,>00                                          ; {#GRAPHIC$14(wall-antlers)
       byte >00,>04,>20,>00                                          ; 
       byte >00,>08,>10,>00                                          ; 
       byte >00,>13,>C8,>00                                          ; 
       byte >00,>27,>E4,>00                                          ; 
       byte >00,>2D,>B4,>00                                          ; 
       byte >00,>49,>92,>00                                          ; 
       byte >00,>7F,>FE,>00                                          ; 
       byte >03,>F9,>9F,>C0                                          ; 
       byte >07,>F5,>AF,>E0                                          ; 
       byte >0F,>F6,>6F,>F0                                          ; 
       byte >1C,>B9,>9D,>38                                          ; 
       byte >30,>9F,>F9,>0C                                          ; 
       byte >20,>8F,>F1,>04                                          ; 
       byte >00,>C0,>03,>00                                          ; 
       byte >00,>3F,>FC,>00                                          ; }

* Graphic: Wall Trophy
_c6ac:
       byte >02                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >03,>C0                                                  ; {#GRAPHIC$15(wall-trophy)
       byte >04,>20                                                  ; 
       byte >08,>10                                                  ; 
       byte >13,>C8                                                  ; 
       byte >27,>E4                                                  ; 
       byte >2D,>B4                                                  ; 
       byte >4D,>B2                                                  ; 
       byte >4F,>F2                                                  ; 
       byte >49,>92                                                  ; 
       byte >94,>29                                                  ; 
       byte >B6,>6D                                                  ; 
       byte >B9,>9D                                                  ; 
       byte >BF,>FD                                                  ; 
       byte >98,>19                                                  ; 
       byte >C0,>03                                                  ; 
       byte >3F,>FC                                                  ; }

* Graphic: Bookcase
_c6ce:
       byte >05                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >20                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1F,>FF,>FF,>FF,>F8                                      ; {#GRAPHIC$16(bookcase)
       byte >18,>00,>00,>00,>18                                      ; 
       byte >14,>00,>00,>00,>28                                      ; 
       byte >13,>FF,>FF,>FF,>C8                                      ; 
       byte >12,>00,>00,>00,>48                                      ; 
       byte >12,>00,>00,>00,>48                                      ; 
       byte >12,>00,>00,>00,>48                                      ; 
       byte >3F,>FF,>FF,>FF,>FC                                      ; 
       byte >30,>00,>00,>00,>0C                                      ; 
       byte >28,>00,>00,>00,>14                                      ; 
       byte >24,>00,>00,>00,>24                                      ; 
       byte >23,>FF,>FF,>FF,>C4                                      ; 
       byte >22,>00,>00,>00,>44                                      ; 
       byte >22,>00,>00,>00,>44                                      ; 
       byte >22,>00,>00,>00,>44                                      ; 
       byte >7F,>FF,>FF,>FF,>FE                                      ; 
       byte >60,>00,>00,>00,>06                                      ; 
       byte >50,>C6,>F6,>EF,>0A                                      ; 
       byte >48,>C7,>F6,>ED,>12                                      ; 
       byte >47,>CE,>F6,>EB,>E2                                      ; 
       byte >44,>CE,>F6,>ED,>22                                      ; 
       byte >44,>DC,>F6,>EB,>22                                      ; 
       byte >44,>DC,>F6,>ED,>22                                      ; 
       byte >44,>F8,>F6,>EB,>22                                      ; 
       byte >FF,>FF,>FF,>FF,>FF                                      ; 
       byte >00,>00,>00,>00,>00                                      ; 
       byte >FF,>FF,>FF,>FF,>FF                                      ; 
       byte >7F,>FF,>FF,>FF,>FE                                      ; 
       byte >3F,>FF,>FF,>FF,>FC                                      ; 
       byte >1F,>FF,>FF,>FF,>F8                                      ; 
       byte >0F,>FF,>FF,>FF,>F0                                      ; 
       byte >07,>FF,>FF,>FF,>E0                                      ; }

* Graphic: Trap
* 
* .
* 
* .
* 
* Open.
_c770:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >20                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>3C,>F0,>00                                          ; {#GRAPHIC$18(trap-open)
       byte >0E,>66,>F9,>C0                                          ; 
       byte >1F,>5E,>BB,>F8                                          ; 
       byte >3F,>5C,>D1,>FC                                          ; 
       byte >77,>58,>55,>FE                                          ; 
       byte >7B,>6B,>56,>0E                                          ; 
       byte >DD,>BB,>77,>F6                                          ; 
       byte >DF,>D8,>01,>8E                                          ; 
       byte >4F,>00,>00,>76                                          ; 
       byte >63,>00,>00,>F2                                          ; 
       byte >3E,>00,>00,>F0                                          ; 
       byte >00,>00,>00,>CE                                          ; 
       byte >7E,>00,>00,>1F                                          ; 
       byte >3F,>00,>00,>7F                                          ; 
       byte >DE,>00,>00,>5F                                          ; 
       byte >DB,>00,>00,>63                                          ; 
       byte >BE,>00,>00,>3E                                          ; 
       byte >E0,>00,>00,>00                                          ; 
       byte >0E,>00,>00,>3E                                          ; 
       byte >7E,>00,>00,>7F                                          ; 
       byte >4E,>00,>00,>43                                          ; 
       byte >73,>00,>00,>7D                                          ; 
       byte >3F,>00,>00,>0F                                          ; 
       byte >00,>00,>00,>E3                                          ; 
       byte >3F,>36,>7D,>78                                          ; 
       byte >7F,>EE,>FE,>BC                                          ; 
       byte >6F,>EE,>BE,>BC                                          ; 
       byte >2F,>DA,>BE,>CC                                          ; 
       byte >37,>DE,>BF,>78                                          ; 
       byte >19,>DA,>C7,>60                                          ; 
       byte >0F,>CE,>7E,>00                                          ; 
       byte >01,>C6,>00,>00                                          ; }
* Closed.
_c7f2:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >20                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>3C,>F0,>00                                          ; {#GRAPHIC$17(trap-closed)
       byte >0E,>66,>F9,>C0                                          ; 
       byte >1F,>5E,>BB,>F8                                          ; 
       byte >3F,>5C,>D1,>FC                                          ; 
       byte >77,>58,>55,>FE                                          ; 
       byte >7B,>6B,>56,>0E                                          ; 
       byte >DD,>BB,>77,>F6                                          ; 
       byte >DF,>D8,>01,>8E                                          ; 
       byte >4F,>FF,>FF,>76                                          ; 
       byte >63,>92,>49,>F2                                          ; 
       byte >3E,>92,>49,>F0                                          ; 
       byte >00,>FF,>F9,>CE                                          ; 
       byte >7E,>EA,>AD,>1F                                          ; 
       byte >3F,>FF,>F9,>7F                                          ; 
       byte >DE,>92,>49,>5F                                          ; 
       byte >DB,>92,>49,>63                                          ; 
       byte >BE,>92,>49,>3E                                          ; 
       byte >E0,>92,>49,>00                                          ; 
       byte >0E,>FF,>F9,>3E                                          ; 
       byte >7E,>EA,>AD,>7F                                          ; 
       byte >4E,>FF,>F9,>43                                          ; 
       byte >73,>92,>49,>7D                                          ; 
       byte >3F,>92,>49,>0F                                          ; 
       byte >00,>FF,>FF,>E3                                          ; 
       byte >3F,>36,>7D,>78                                          ; 
       byte >7F,>EE,>FE,>BC                                          ; 
       byte >6F,>EE,>BE,>BC                                          ; 
       byte >2F,>DA,>BE,>CC                                          ; 
       byte >37,>DE,>BF,>78                                          ; 
       byte >19,>DA,>C7,>60                                          ; 
       byte >0F,>CE,>7E,>00                                          ; 
       byte >01,>C6,>00,>00                                          ; }

* Graphic: Rug
_c874:
       byte >06                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >27                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>03,>80,>00,>02,>00                                  ; {#GRAPHIC$1A(rug)
       byte >00,>07,>C0,>00,>0D,>00                                  ; 
       byte >00,>07,>C0,>00,>1E,>00                                  ; 
       byte >00,>07,>C0,>00,>1F,>00                                  ; 
       byte >00,>03,>C0,>00,>1F,>00                                  ; 
       byte >00,>03,>80,>00,>3E,>00                                  ; 
       byte >00,>03,>80,>00,>3C,>00                                  ; 
       byte >00,>03,>80,>00,>7C,>00                                  ; 
       byte >00,>03,>80,>00,>78,>00                                  ; 
       byte >00,>03,>80,>00,>70,>00                                  ; 
       byte >00,>02,>80,>00,>F0,>00                                  ; 
       byte >00,>07,>80,>00,>B0,>00                                  ; 
       byte >00,>07,>C7,>E1,>F0,>00                                  ; 
       byte >00,>06,>7E,>3B,>20,>00                                  ; 
       byte >00,>07,>FD,>DF,>E0,>00                                  ; 
       byte >03,>CF,>1E,>3C,>E0,>00                                  ; 
       byte >0F,>FE,>EF,>FB,>70,>00                                  ; 
       byte >79,>BF,>1C,>FC,>DE,>00                                  ; 
       byte >BB,>D9,>FB,>67,>F3,>F0                                  ; 
       byte >FF,>F6,>FC,>DB,>1E,>7F                                  ; 
       byte >BB,>D9,>8F,>E6,>EF,>CE                                  ; 
       byte >E9,>BF,>76,>3F,>1C,>03                                  ; 
       byte >0F,>FB,>8D,>D9,>F0,>00                                  ; 
       byte >03,>CC,>FE,>36,>E0,>00                                  ; 
       byte >00,>07,>C7,>F9,>E0,>00                                  ; 
       byte >00,>07,>FF,>FF,>20,>00                                  ; 
       byte >00,>04,>C7,>E1,>F0,>00                                  ; 
       byte >00,>07,>80,>00,>B0,>00                                  ; 
       byte >00,>02,>80,>00,>F0,>00                                  ; 
       byte >00,>03,>80,>00,>50,>00                                  ; 
       byte >00,>02,>80,>00,>78,>00                                  ; 
       byte >00,>03,>80,>00,>7C,>00                                  ; 
       byte >00,>03,>80,>00,>3C,>00                                  ; 
       byte >00,>03,>80,>00,>3E,>00                                  ; 
       byte >00,>03,>C0,>00,>1F,>00                                  ; 
       byte >00,>07,>C0,>00,>1F,>00                                  ; 
       byte >00,>07,>C0,>00,>1E,>00                                  ; 
       byte >00,>07,>C0,>00,>0D,>00                                  ; 
       byte >00,>03,>80,>00,>02,>00                                  ; }

* Graphic Attributes: Wall Antlers
_c960:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >02                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >47,>47,>47,>47                                          ; {#GRAPHIC$14,1(wall-antlers-colour)
       byte >47,>47,>47,>47                                          ; }

* Graphic Attributes: Wall Trophy
_c96a:
       byte >02                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >02                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >45,>45                                                  ; {#GRAPHIC$15,1(wall-trophy-colour)
       byte >45,>45                                                  ; }

* Graphic Attributes: Bookcase
_c970:
       byte >05                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >04                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >46,>46,>46,>46,>46                                      ; {#GRAPHIC$16,1(bookcase-colour)
       byte >46,>46,>46,>46,>46                                      ; 
       byte >46,>45,>43,>44,>46                                      ; 
       byte >46,>46,>46,>46,>46                                      ; }

* Graphic Attributes: Trap
* 
* .
* 
* .
* 
* Open.
_c986:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >04                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >43,>43,>43,>43                                          ; {#GRAPHIC$18,1(trap-open-colour)
       byte >43,>00,>00,>43                                          ; 
       byte >43,>00,>00,>43                                          ; 
       byte >43,>43,>43,>43                                          ; }
* Closed.
_c998:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >04                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >43,>43,>43,>43                                          ; {#GRAPHIC$17,1(trap-closed-colour)
       byte >43,>46,>46,>43                                          ; 
       byte >43,>46,>46,>43                                          ; 
       byte >43,>43,>43,>43                                          ; }

* Graphic Attributes: Rug
_c9aa:
       byte >06                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >05                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >07,>07,>07,>07,>07,>07                                  ; {#GRAPHIC$1A,1(rug-colour)
       byte >07,>07,>07,>07,>07,>07                                  ; 
       byte >07,>07,>07,>07,>07,>07                                  ; 
       byte >07,>07,>07,>07,>07,>07                                  ; 
       byte >07,>07,>07,>07,>07,>07                                  ; }

* Graphic: A.C.G. Shield
_c9ca:
       byte >02                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >01,>80                                                  ; {#GRAPHIC$1B(acg-shield)
       byte >07,>E0                                                  ; 
       byte >0F,>F0                                                  ; 
       byte >1F,>D8                                                  ; 
       byte >30,>0C                                                  ; 
       byte >3F,>DC                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >54,>42                                                  ; 
       byte >D5,>DB                                                  ; 
       byte >C5,>D3                                                  ; 
       byte >D5,>DF                                                  ; 
       byte >C4,>43                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >E7,>E7                                                  ; 
       byte >81,>81                                                  ; }

* Graphic: Wall Shield
_c9ec:
       byte >02                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >01,>80                                                  ; {#GRAPHIC$1C(wall-shield)
       byte >07,>E0                                                  ; 
       byte >08,>10                                                  ; 
       byte >19,>98                                                  ; 
       byte >39,>9C                                                  ; 
       byte >30,>0C                                                  ; 
       byte >75,>AE                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >DC,>2F                                                  ; 
       byte >D7,>EB                                                  ; 
       byte >C4,>23                                                  ; 
       byte >D7,>EB                                                  ; 
       byte >FD,>7F                                                  ; 
       byte >E7,>E7                                                  ; 
       byte >81,>81                                                  ; }

* Graphic: Suit Of Armour
_ca0e:
       byte >02                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >20                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >30,>0C                                                  ; {#GRAPHIC$1D(suit-armour)
       byte >1C,>38                                                  ; 
       byte >1E,>7A                                                  ; 
       byte >0E,>72                                                  ; 
       byte >06,>62                                                  ; 
       byte >0A,>52                                                  ; 
       byte >1C,>3A                                                  ; 
       byte >0A,>52                                                  ; 
       byte >07,>E2                                                  ; 
       byte >47,>E7                                                  ; 
       byte >47,>E2                                                  ; 
       byte >07,>E0                                                  ; 
       byte >60,>06                                                  ; 
       byte >67,>E6                                                  ; 
       byte >A6,>65                                                  ; 
       byte >CC,>33                                                  ; 
       byte >AD,>B5                                                  ; 
       byte >6D,>B6                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >7F,>FE                                                  ; 
       byte >78,>1E                                                  ; 
       byte >37,>EC                                                  ; 
       byte >03,>C0                                                  ; 
       byte >07,>E0                                                  ; 
       byte >0E,>70                                                  ; 
       byte >19,>98                                                  ; 
       byte >07,>E0                                                  ; 
       byte >0F,>F0                                                  ; 
       byte >07,>E0                                                  ; 
       byte >03,>C0                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; }

* Graphic Attributes: A.C.G. Shield
_ca50:
       byte >02                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >02                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >43,>47                                                  ; {#GRAPHIC$1B,1(acg-shield-colour)
       byte >47,>43                                                  ; }

* Graphic Attributes: Wall Shield
_ca56:
       byte >02                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >02                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >FF,>FF                                                  ; {#GRAPHIC$1C,1(wall-shield-colour)
       byte >FF,>FF                                                  ; }

* Graphic Attributes: Suit Of Armour
_ca5c:
       byte >02                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >04                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >45,>45                                                  ; {#GRAPHIC$1D,1(suit-armour-colour)
       byte >45,>45                                                  ; 
       byte >45,>45                                                  ; 
       byte >45,>45                                                  ; }

* Graphic Attributes: Cave Door Shut
_ca66:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >FF,>47,>47,>FF                                          ; {#GRAPHIC$21,1(cave-door-shut-colour)
       byte >FF,>47,>47,>FF                                          ; 
       byte >FF,>FF,>FF,>FF                                          ; }

* Graphic Attributes: Door shut
_ca74:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >03                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >43,>47,>47,>43                                          ; {#GRAPHIC$1F,1(door-shut-colour)
       byte >43,>47,>47,>43                                          ; 
       byte >43,>43,>43,>43                                          ; }

* Graphic: Door shut
_ca82:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >FF,>3B,>DC,>FF                                          ; {#GRAPHIC$1F(door-shut)
       byte >1F,>3B,>DC,>F8                                          ; 
       byte >0C,>3B,>DC,>40                                          ; 
       byte >3E,>3B,>DC,>7C                                          ; 
       byte >7C,>00,>00,>3E                                          ; 
       byte >04,>7B,>CE,>20                                          ; 
       byte >F8,>7B,>D7,>1F                                          ; 
       byte >F8,>7B,>D1,>1F                                          ; 
       byte >08,>7B,>CE,>08                                          ; 
       byte >F0,>7B,>C0,>0F                                          ; 
       byte >F0,>00,>00,>0F                                          ; 
       byte >10,>FB,>DF,>08                                          ; 
       byte >F0,>FB,>DF,>1F                                          ; 
       byte >F8,>7B,>DE,>1F                                          ; 
       byte >CC,>3B,>DC,>33                                          ; 
       byte >3F,>0B,>D0,>7C                                          ; 
       byte >7D,>80,>01,>BE                                          ; 
       byte >3B,>F0,>0F,>DC                                          ; 
       byte >17,>BF,>FD,>E8                                          ; 
       byte >07,>7B,>DE,>E0                                          ; 
       byte >03,>7B,>DE,>C0                                          ; 
       byte >00,>77,>EE,>00                                          ; 
       byte >00,>07,>E0,>00                                          ; 
       byte >00,>00,>00,>00                                          ; }

* Graphic: Cave Door Shut
_cae4:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >FF,>3B,>DC,>FF                                          ; {#GRAPHIC$21(cave-door-shut)
       byte >03,>3B,>DC,>B0                                          ; 
       byte >03,>3B,>DC,>B0                                          ; 
       byte >07,>3B,>DC,>98                                          ; 
       byte >0D,>00,>00,>98                                          ; 
       byte >1A,>7B,>CE,>4E                                          ; 
       byte >3A,>7B,>D7,>EC                                          ; 
       byte >7A,>7B,>D1,>58                                          ; 
       byte >5A,>7B,>CE,>70                                          ; 
       byte >CE,>7B,>C0,>78                                          ; 
       byte >8C,>00,>00,>2C                                          ; 
       byte >0C,>FB,>DF,>26                                          ; 
       byte >0C,>FB,>DF,>23                                          ; 
       byte >1C,>7B,>DE,>21                                          ; 
       byte >32,>3B,>DC,>43                                          ; 
       byte >62,>0B,>D0,>46                                          ; 
       byte >F1,>00,>00,>86                                          ; 
       byte >7F,>C0,>03,>0C                                          ; 
       byte >0F,>38,>1C,>0C                                          ; 
       byte >03,>C7,>FC,>18                                          ; 
       byte >00,>F0,>DF,>38                                          ; 
       byte >00,>3D,>87,>F0                                          ; 
       byte >00,>0F,>00,>C0                                          ; 
       byte >00,>02,>00,>00                                          ; }

* Sprite: Mummy
* 
* .
* 
* .
* 
* Frame 1.
_cb46:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0F,>00                                                  ; {#SPRITE$6F(mummy-01)
       byte >0F,>78                                                  ; 
       byte >03,>78                                                  ; 
       byte >04,>30                                                  ; 
       byte >07,>70                                                  ; 
       byte >07,>40                                                  ; 
       byte >01,>F0                                                  ; 
       byte >07,>E0                                                  ; 
       byte >0E,>20                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >04,>20                                                  ; 
       byte >CF,>E5                                                  ; 
       byte >E8,>67                                                  ; 
       byte >F7,>CB                                                  ; 
       byte >5B,>BE                                                  ; 
       byte >17,>D4                                                  ; 
       byte >03,>80                                                  ; 
       byte >07,>C0                                                  ; 
       byte >0C,>60                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >0D,>60                                                  ; 
       byte >07,>C0                                                  ; 
       byte >03,>80                                                  ; }
* Frame 2.
_cb77:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0F,>E8                                                  ; {#SPRITE$70(mummy-02)
       byte >0F,>E8                                                  ; 
       byte >03,>30                                                  ; 
       byte >04,>70                                                  ; 
       byte >07,>40                                                  ; 
       byte >07,>F0                                                  ; 
       byte >01,>E0                                                  ; 
       byte >07,>E0                                                  ; 
       byte >07,>10                                                  ; 
       byte >07,>F0                                                  ; 
       byte >07,>F0                                                  ; 
       byte >02,>10                                                  ; 
       byte >AF,>E5                                                  ; 
       byte >78,>67                                                  ; 
       byte >F7,>CB                                                  ; 
       byte >5B,>BE                                                  ; 
       byte >17,>D4                                                  ; 
       byte >03,>80                                                  ; 
       byte >07,>C0                                                  ; 
       byte >0C,>60                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >0D,>60                                                  ; 
       byte >07,>C0                                                  ; 
       byte >03,>80                                                  ; }
* Frame 3.
_cba8:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>78                                                  ; {#SPRITE$71(mummy-03)
       byte >0F,>78                                                  ; 
       byte >0F,>30                                                  ; 
       byte >07,>70                                                  ; 
       byte >04,>40                                                  ; 
       byte >07,>70                                                  ; 
       byte >07,>70                                                  ; 
       byte >01,>E0                                                  ; 
       byte >07,>10                                                  ; 
       byte >07,>F0                                                  ; 
       byte >07,>F0                                                  ; 
       byte >02,>10                                                  ; 
       byte >A7,>F5                                                  ; 
       byte >E4,>37                                                  ; 
       byte >F3,>EB                                                  ; 
       byte >5B,>FE                                                  ; 
       byte >17,>F4                                                  ; 
       byte >01,>C0                                                  ; 
       byte >03,>E0                                                  ; 
       byte >06,>30                                                  ; 
       byte >07,>F0                                                  ; 
       byte >06,>B0                                                  ; 
       byte >03,>E0                                                  ; 
       byte >01,>C0                                                  ; }

* Sprite: Frankenstein
* 
* .
* 
* .
* 
* Frame 1.
_cbd9:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >3E,>00                                                  ; {#SPRITE$73(franken-01)
       byte >1E,>60                                                  ; 
       byte >00,>F0                                                  ; 
       byte >0E,>70                                                  ; 
       byte >0E,>B0                                                  ; 
       byte >0E,>C4                                                  ; 
       byte >4F,>E4                                                  ; 
       byte >4F,>EA                                                  ; 
       byte >A0,>0A                                                  ; 
       byte >AF,>EE                                                  ; 
       byte >EE,>EE                                                  ; 
       byte >FE,>FE                                                  ; 
       byte >FF,>FE                                                  ; 
       byte >7E,>FC                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >20,>08                                                  ; 
       byte >37,>D8                                                  ; 
       byte >24,>48                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >14,>50                                                  ; 
       byte >16,>D0                                                  ; 
       byte >10,>10                                                  ; 
       byte >1A,>B0                                                  ; 
       byte >0F,>E0                                                  ; }
* Frame 2.
_cc0a:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1E,>F0                                                  ; {#SPRITE$74(franken-02)
       byte >1E,>F0                                                  ; 
       byte >00,>00                                                  ; 
       byte >0E,>E0                                                  ; 
       byte >4E,>E4                                                  ; 
       byte >4E,>E4                                                  ; 
       byte >AF,>EA                                                  ; 
       byte >AF,>EA                                                  ; 
       byte >E0,>0E                                                  ; 
       byte >EF,>EE                                                  ; 
       byte >EF,>EE                                                  ; 
       byte >FE,>FE                                                  ; 
       byte >FF,>FE                                                  ; 
       byte >7E,>FC                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >20,>08                                                  ; 
       byte >37,>D8                                                  ; 
       byte >24,>48                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >14,>50                                                  ; 
       byte >16,>D0                                                  ; 
       byte >10,>10                                                  ; 
       byte >1A,>B0                                                  ; 
       byte >0F,>E0                                                  ; }
* Frame 3.
_cc3b:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>F8                                                  ; {#SPRITE$75(franken-03)
       byte >0C,>F0                                                  ; 
       byte >1E,>00                                                  ; 
       byte >1C,>E0                                                  ; 
       byte >1A,>E0                                                  ; 
       byte >46,>E0                                                  ; 
       byte >4F,>E0                                                  ; 
       byte >AE,>E4                                                  ; 
       byte >0A,>A0                                                  ; 
       byte >EF,>EA                                                  ; 
       byte >EF,>EE                                                  ; 
       byte >FE,>FE                                                  ; 
       byte >FF,>FE                                                  ; 
       byte >7E,>FC                                                  ; 
       byte >0F,>F0                                                  ; 
       byte >20,>08                                                  ; 
       byte >37,>D8                                                  ; 
       byte >24,>48                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >14,>50                                                  ; 
       byte >16,>D0                                                  ; 
       byte >10,>10                                                  ; 
       byte >1A,>B0                                                  ; 
       byte >0F,>E0                                                  ; }

* Sprite: Devil
* 
* .
* 
* .
* 
* Frame 1.
_cc6c:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0C,>07                                                  ; {#SPRITE$77(devil-01)
       byte >0C,>63                                                  ; 
       byte >00,>65                                                  ; 
       byte >0C,>04                                                  ; 
       byte >0C,>EC                                                  ; 
       byte >0E,>F8                                                  ; 
       byte >0F,>D0                                                  ; 
       byte >0F,>C0                                                  ; 
       byte >05,>40                                                  ; 
       byte >0B,>A0                                                  ; 
       byte >0D,>60                                                  ; 
       byte >AB,>A8                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >3F,>FC                                                  ; 
       byte >07,>C0                                                  ; 
       byte >0A,>A0                                                  ; 
       byte >11,>10                                                  ; 
       byte >14,>50                                                  ; 
       byte >16,>D0                                                  ; 
       byte >31,>18                                                  ; 
       byte >7B,>BC                                                  ; 
       byte >6F,>EC                                                  ; 
       byte >47,>C4                                                  ; 
       byte >40,>04                                                  ; }
* Frame 2.
_cc9d:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >06,>C7                                                  ; {#SPRITE$78(devil-02)
       byte >06,>C3                                                  ; 
       byte >00,>05                                                  ; 
       byte >06,>C4                                                  ; 
       byte >06,>CC                                                  ; 
       byte >06,>D8                                                  ; 
       byte >07,>D0                                                  ; 
       byte >07,>C0                                                  ; 
       byte >05,>40                                                  ; 
       byte >0B,>A0                                                  ; 
       byte >0D,>60                                                  ; 
       byte >AB,>AA                                                  ; 
       byte >FF,>FE                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >07,>C0                                                  ; 
       byte >0A,>A0                                                  ; 
       byte >11,>10                                                  ; 
       byte >14,>50                                                  ; 
       byte >16,>D0                                                  ; 
       byte >31,>18                                                  ; 
       byte >7B,>BC                                                  ; 
       byte >6F,>EC                                                  ; 
       byte >47,>C4                                                  ; 
       byte >40,>04                                                  ; }
* Frame 3.
_ccce:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>37                                                  ; {#SPRITE$79(devil-03)
       byte >06,>33                                                  ; 
       byte >06,>05                                                  ; 
       byte >00,>34                                                  ; 
       byte >07,>3C                                                  ; 
       byte >07,>78                                                  ; 
       byte >03,>F0                                                  ; 
       byte >07,>F0                                                  ; 
       byte >02,>A0                                                  ; 
       byte >05,>D0                                                  ; 
       byte >06,>B0                                                  ; 
       byte >A5,>D5                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >3F,>FC                                                  ; 
       byte >03,>E0                                                  ; 
       byte >05,>50                                                  ; 
       byte >08,>88                                                  ; 
       byte >0A,>28                                                  ; 
       byte >0B,>68                                                  ; 
       byte >18,>8C                                                  ; 
       byte >39,>CE                                                  ; 
       byte >37,>F6                                                  ; 
       byte >23,>E2                                                  ; 
       byte >20,>02                                                  ; }

* Sprite: Dracula
* 
* .
* 
* .
* 
* Frame 1.
_ccff:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>F0                                                  ; {#SPRITE$7B(dracula-01)
       byte >0C,>00                                                  ; 
       byte >1C,>C0                                                  ; 
       byte >38,>C0                                                  ; 
       byte >B4,>C2                                                  ; 
       byte >CE,>DE                                                  ; 
       byte >F7,>DE                                                  ; 
       byte >F7,>DE                                                  ; 
       byte >F8,>3E                                                  ; 
       byte >7F,>FC                                                  ; 
       byte >7F,>FC                                                  ; 
       byte >6B,>AC                                                  ; 
       byte >23,>88                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >3A,>B8                                                  ; 
       byte >72,>9C                                                  ; 
       byte >41,>04                                                  ; 
       byte >54,>54                                                  ; 
       byte >16,>D0                                                  ; 
       byte >19,>30                                                  ; 
       byte >1B,>B0                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >07,>C0                                                  ; }
* Frame 2.
_cd30:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1E,>F0                                                  ; {#SPRITE$7C(dracula-02)
       byte >0E,>E0                                                  ; 
       byte >00,>00                                                  ; 
       byte >06,>C0                                                  ; 
       byte >86,>C2                                                  ; 
       byte >F6,>DE                                                  ; 
       byte >F7,>DE                                                  ; 
       byte >F7,>DE                                                  ; 
       byte >F8,>3E                                                  ; 
       byte >7F,>FC                                                  ; 
       byte >7F,>FC                                                  ; 
       byte >6B,>AC                                                  ; 
       byte >23,>88                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >3A,>B8                                                  ; 
       byte >72,>9C                                                  ; 
       byte >41,>04                                                  ; 
       byte >54,>54                                                  ; 
       byte >16,>D0                                                  ; 
       byte >19,>30                                                  ; 
       byte >1B,>B0                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >07,>C0                                                  ; }
* Frame 3.
_cd61:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1E,>00                                                  ; {#SPRITE$7D(dracula-03)
       byte >00,>60                                                  ; 
       byte >06,>70                                                  ; 
       byte >06,>38                                                  ; 
       byte >86,>5A                                                  ; 
       byte >F6,>E6                                                  ; 
       byte >F7,>DE                                                  ; 
       byte >F7,>DE                                                  ; 
       byte >F8,>3E                                                  ; 
       byte >7F,>FC                                                  ; 
       byte >7F,>EC                                                  ; 
       byte >6B,>AC                                                  ; 
       byte >23,>88                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >3A,>B8                                                  ; 
       byte >72,>9C                                                  ; 
       byte >41,>04                                                  ; 
       byte >54,>54                                                  ; 
       byte >16,>D0                                                  ; 
       byte >19,>30                                                  ; 
       byte >1B,>B0                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >07,>C0                                                  ; }

* Sprite: Tombstone
_cd92:
       byte >15                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >22,>00                                                  ; {#SPRITE$8E(tombstone)
       byte >4B,>C0                                                  ; 
       byte >56,>80                                                  ; 
       byte >37,>60                                                  ; 
       byte >FB,>00                                                  ; 
       byte >7B,>80                                                  ; 
       byte >FD,>80                                                  ; 
       byte >7D,>CE                                                  ; 
       byte >9E,>AE                                                  ; 
       byte >9E,>77                                                  ; 
       byte >2F,>F9                                                  ; 
       byte >4F,>F6                                                  ; 
       byte >07,>EC                                                  ; 
       byte >07,>C0                                                  ; 
       byte >0F,>D8                                                  ; 
       byte >1F,>DC                                                  ; 
       byte >3D,>EC                                                  ; 
       byte >3D,>E2                                                  ; 
       byte >3A,>DC                                                  ; 
       byte >16,>B8                                                  ; 
       byte >00,>70                                                  ; }

* Sprite: Crucifix
_cdbd:
       byte >12                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >01,>80                                                  ; {#SPRITE$89(crucifix)
       byte >03,>C0                                                  ; 
       byte >03,>C0                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >01,>80                                                  ; 
       byte >03,>C0                                                  ; 
       byte >66,>66                                                  ; 
       byte >FD,>BF                                                  ; 
       byte >FD,>BF                                                  ; 
       byte >66,>66                                                  ; 
       byte >03,>C0                                                  ; 
       byte >01,>80                                                  ; 
       byte >03,>C0                                                  ; 
       byte >03,>C0                                                  ; 
       byte >01,>80                                                  ; }

* Sprite: Skull
_cde2:
       byte >0F                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >02,>D0                                                  ; {#SPRITE$88(skull)
       byte >03,>50                                                  ; 
       byte >04,>A8                                                  ; 
       byte >0C,>08                                                  ; 
       byte >1C,>C8                                                  ; 
       byte >38,>44                                                  ; 
       byte >30,>84                                                  ; 
       byte >76,>32                                                  ; 
       byte >7B,>5A                                                  ; 
       byte >73,>1A                                                  ; 
       byte >79,>12                                                  ; 
       byte >38,>02                                                  ; 
       byte >3F,>02                                                  ; 
       byte >1F,>FC                                                  ; 
       byte >07,>F0                                                  ; }

* Sprite: Witch
* 
* .
* 
* .
* 
* Left Frame 1.
_ce01:
       byte >16                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>0A                                                  ; {#SPRITE$8F(witch-left-01*)
       byte >07,>DA                                                  ; 
       byte >00,>BA                                                  ; 
       byte >3C,>D8                                                  ; 
       byte >07,>FC                                                  ; 
       byte >07,>FE                                                  ; 
       byte >07,>FE                                                  ; 
       byte >05,>FF                                                  ; 
       byte >1D,>FF                                                  ; 
       byte >3E,>F7                                                  ; 
       byte >E6,>F6                                                  ; 
       byte >C3,>78                                                  ; 
       byte >09,>60                                                  ; 
       byte >0F,>C0                                                  ; 
       byte >0F,>C0                                                  ; 
       byte >2F,>20                                                  ; 
       byte >3B,>40                                                  ; 
       byte >16,>E0                                                  ; 
       byte >0D,>F0                                                  ; 
       byte >03,>F8                                                  ; 
       byte >07,>FC                                                  ; 
       byte >08,>1F                                                  ; }
* Left Frame 2.
_ce2e:
       byte >16                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>80                                                  ; {#SPRITE$90(witch-left-02*)
       byte >07,>D5                                                  ; 
       byte >00,>BA                                                  ; 
       byte >3C,>D4                                                  ; 
       byte >07,>FC                                                  ; 
       byte >07,>FE                                                  ; 
       byte >07,>FE                                                  ; 
       byte >05,>FF                                                  ; 
       byte >0D,>FF                                                  ; 
       byte >1E,>F7                                                  ; 
       byte >76,>F6                                                  ; 
       byte >E3,>7C                                                  ; 
       byte >49,>60                                                  ; 
       byte >0F,>C0                                                  ; 
       byte >0F,>00                                                  ; 
       byte >2F,>20                                                  ; 
       byte >3B,>40                                                  ; 
       byte >16,>E0                                                  ; 
       byte >0D,>F0                                                  ; 
       byte >03,>F8                                                  ; 
       byte >07,>FC                                                  ; 
       byte >08,>1F                                                  ; }
* Right Frame 1.
_ce5b:
       byte >16                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >10,>00                                                  ; {#SPRITE$91(witch-right-01*)
       byte >AB,>E0                                                  ; 
       byte >5D,>00                                                  ; 
       byte >2B,>3C                                                  ; 
       byte >3F,>E0                                                  ; 
       byte >7F,>E0                                                  ; 
       byte >7F,>E0                                                  ; 
       byte >FF,>A0                                                  ; 
       byte >FF,>B0                                                  ; 
       byte >EF,>78                                                  ; 
       byte >6F,>6E                                                  ; 
       byte >3E,>C7                                                  ; 
       byte >06,>92                                                  ; 
       byte >03,>F0                                                  ; 
       byte >00,>F0                                                  ; 
       byte >04,>F4                                                  ; 
       byte >02,>DC                                                  ; 
       byte >07,>68                                                  ; 
       byte >0F,>B0                                                  ; 
       byte >1F,>C0                                                  ; 
       byte >3F,>E0                                                  ; 
       byte >F8,>10                                                  ; }
* Right Frame 2.
_ce88:
       byte >16                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >50,>00                                                  ; {#SPRITE$92(witch-right-02*)
       byte >AB,>E0                                                  ; 
       byte >5D,>00                                                  ; 
       byte >2B,>3C                                                  ; 
       byte >3F,>E0                                                  ; 
       byte >7F,>E0                                                  ; 
       byte >7F,>E0                                                  ; 
       byte >FF,>A0                                                  ; 
       byte >FF,>B8                                                  ; 
       byte >EF,>7C                                                  ; 
       byte >6F,>67                                                  ; 
       byte >3E,>C3                                                  ; 
       byte >06,>90                                                  ; 
       byte >03,>F0                                                  ; 
       byte >00,>F0                                                  ; 
       byte >04,>F4                                                  ; 
       byte >02,>DC                                                  ; 
       byte >07,>68                                                  ; 
       byte >0F,>B0                                                  ; 
       byte >1F,>C0                                                  ; 
       byte >3F,>E0                                                  ; 
       byte >F8,>10                                                  ; }
* #UDGTABLE(default,centre)
* { =h Left | =h Right }{
* #UDGARRAY*witch-left-01,25;witch-left-02(witch-left) |
* #UDGARRAY*witch-right-01,25;witch-right-02(witch-right)
* }
* UDGTABLE#

* Sprite: Monk
* 
* .
* 
* .
* 
* Left Frame 1.
_ceb5:
       byte >13                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0C,>CE                                                  ; {#SPRITE$93(monk-left-01*)
       byte >1F,>FC                                                  ; 
       byte >3F,>F8                                                  ; 
       byte >2F,>B0                                                  ; 
       byte >17,>B0                                                  ; 
       byte >3B,>10                                                  ; 
       byte >3D,>B0                                                  ; 
       byte >7E,>F0                                                  ; 
       byte >FF,>70                                                  ; 
       byte >E3,>70                                                  ; 
       byte >1D,>70                                                  ; 
       byte >0A,>E0                                                  ; 
       byte >15,>C6                                                  ; 
       byte >24,>3C                                                  ; 
       byte >47,>FC                                                  ; 
       byte >4F,>F8                                                  ; 
       byte >7F,>E0                                                  ; 
       byte >3F,>80                                                  ; 
       byte >1E,>00                                                  ; }
* Left Frame 2.
_cedc:
       byte >13                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >03,>00                                                  ; {#SPRITE$94(monk-left-02*)
       byte >1F,>FF                                                  ; 
       byte >0F,>FC                                                  ; 
       byte >37,>B0                                                  ; 
       byte >3B,>B0                                                  ; 
       byte >7D,>10                                                  ; 
       byte >7E,>D0                                                  ; 
       byte >FF,>70                                                  ; 
       byte >E7,>B0                                                  ; 
       byte >0B,>B0                                                  ; 
       byte >0D,>70                                                  ; 
       byte >0C,>E0                                                  ; 
       byte >17,>C0                                                  ; 
       byte >26,>1F                                                  ; 
       byte >47,>FC                                                  ; 
       byte >4F,>F8                                                  ; 
       byte >7F,>E0                                                  ; 
       byte >3F,>80                                                  ; 
       byte >1E,>00                                                  ; }
* Right Frame 1.
_cf03:
       byte >13                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>C0                                                  ; {#SPRITE$95(monk-right-01*)
       byte >FF,>F8                                                  ; 
       byte >3F,>F0                                                  ; 
       byte >0D,>EC                                                  ; 
       byte >0D,>DC                                                  ; 
       byte >08,>BE                                                  ; 
       byte >0D,>7E                                                  ; 
       byte >0E,>FF                                                  ; 
       byte >0D,>E7                                                  ; 
       byte >0D,>D0                                                  ; 
       byte >0E,>B0                                                  ; 
       byte >07,>30                                                  ; 
       byte >03,>E8                                                  ; 
       byte >F8,>64                                                  ; 
       byte >3F,>E2                                                  ; 
       byte >1F,>F2                                                  ; 
       byte >07,>F3                                                  ; 
       byte >01,>FC                                                  ; 
       byte >00,>78                                                  ; }
* Right Frame 2.
_cf2a:
       byte >13                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >73,>30                                                  ; {#SPRITE$96(monk-right-02*)
       byte >3F,>F8                                                  ; 
       byte >1F,>FC                                                  ; 
       byte >0D,>F4                                                  ; 
       byte >0D,>E8                                                  ; 
       byte >08,>DC                                                  ; 
       byte >0D,>BC                                                  ; 
       byte >0F,>7E                                                  ; 
       byte >0E,>FF                                                  ; 
       byte >0E,>C7                                                  ; 
       byte >0E,>B8                                                  ; 
       byte >07,>50                                                  ; 
       byte >63,>A8                                                  ; 
       byte >3C,>24                                                  ; 
       byte >3F,>E2                                                  ; 
       byte >1F,>F2                                                  ; 
       byte >07,>FE                                                  ; 
       byte >01,>FC                                                  ; 
       byte >00,>78                                                  ; }
* #UDGTABLE(default,centre)
* { =h Left | =h Right }{
* #UDGARRAY*monk-left-01,25;monk-left-02(monk-left) |
* #UDGARRAY*monk-right-01,25;monk-right-02(monk-right)
* }
* UDGTABLE#

* Sprite: Bat
* 
* .
* 
* .
* 
* Left Frame 1.
_cf51:
       byte >13                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$97(bat-left-01)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >67,>F0                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >BF,>FE                                                  ; 
       byte >DF,>80                                                  ; 
       byte >F7,>F0                                                  ; 
       byte >DC,>10                                                  ; 
       byte >25,>F8                                                  ; 
       byte >0B,>E8                                                  ; 
       byte >0C,>18                                                  ; 
       byte >07,>F8                                                  ; 
       byte >03,>F8                                                  ; 
       byte >00,>FC                                                  ; 
       byte >00,>1F                                                  ; }
* Left Frame 2.
_cf78:
       byte >0D                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>1F                                                  ; {#SPRITE$98(bat-left-02)
       byte >00,>FC                                                  ; 
       byte >03,>F8                                                  ; 
       byte >07,>04                                                  ; 
       byte >08,>38                                                  ; 
       byte >07,>90                                                  ; 
       byte >67,>E0                                                  ; 
       byte >FF,>9F                                                  ; 
       byte >BF,>FE                                                  ; 
       byte >DF,>F0                                                  ; 
       byte >F0,>00                                                  ; 
       byte >B0,>00                                                  ; 
       byte >20,>00                                                  ; }
* Right Frame 1.
_cf93:
       byte >0D                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >F8,>00                                                  ; {#SPRITE$99(bat-right-01)
       byte >3F,>00                                                  ; 
       byte >1F,>C0                                                  ; 
       byte >2F,>E0                                                  ; 
       byte >1C,>10                                                  ; 
       byte >09,>E0                                                  ; 
       byte >07,>E6                                                  ; 
       byte >F9,>FF                                                  ; 
       byte >7F,>FD                                                  ; 
       byte >0F,>FB                                                  ; 
       byte >00,>0F                                                  ; 
       byte >00,>0D                                                  ; 
       byte >00,>04                                                  ; }
* Right Frame 2.
_cfae:
       byte >13                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$9A(bat-right-02)
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >00,>00                                                  ; 
       byte >0F,>E6                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >7F,>FD                                                  ; 
       byte >01,>FB                                                  ; 
       byte >0F,>EF                                                  ; 
       byte >08,>6D                                                  ; 
       byte >1F,>A4                                                  ; 
       byte >27,>D0                                                  ; 
       byte >18,>30                                                  ; 
       byte >1F,>E0                                                  ; 
       byte >1F,>C0                                                  ; 
       byte >3F,>00                                                  ; 
       byte >F8,>00                                                  ; }

* Graphic: Barrel
_cfd5:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >20                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>0F,>F0,>00                                          ; {#GRAPHIC$19(barrel)
       byte >00,>70,>0E,>00                                          ; 
       byte >01,>87,>B1,>80                                          ; 
       byte >02,>7B,>DE,>40                                          ; 
       byte >04,>FD,>EF,>A0                                          ; 
       byte >0B,>7E,>F7,>D0                                          ; 
       byte >17,>BF,>7B,>E8                                          ; 
       byte >17,>DF,>BD,>E8                                          ; 
       byte >2F,>FF,>FF,>F4                                          ; 
       byte >6E,>63,>8F,>B6                                          ; 
       byte >5E,>49,>27,>BA                                          ; 
       byte >56,>49,>24,>2A                                          ; 
       byte >5E,>63,>8C,>BA                                          ; 
       byte >DC,>49,>24,>FB                                          ; 
       byte >EE,>49,>24,>F7                                          ; 
       byte >AF,>63,>8C,>B5                                          ; 
       byte >B7,>FF,>FF,>ED                                          ; 
       byte >BB,>DF,>F7,>DD                                          ; 
       byte >9D,>EF,>FB,>B9                                          ; 
       byte >CE,>77,>FE,>73                                          ; 
       byte >C7,>8F,>F1,>E3                                          ; 
       byte >63,>F0,>0F,>C6                                          ; 
       byte >70,>FF,>FF,>0E                                          ; 
       byte >38,>1F,>F8,>1C                                          ; 
       byte >1E,>00,>40,>78                                          ; 
       byte >0F,>C0,>23,>F0                                          ; 
       byte >03,>FF,>FF,>C0                                          ; 
       byte >00,>FF,>FF,>00                                          ; 
       byte >00,>1F,>F8,>00                                          ; 
       byte >00,>00,>00,>00                                          ; 
       byte >00,>00,>00,>00                                          ; 
       byte >00,>00,>00,>00                                          ; }

* Graphic Attributes: Barrel
_d057:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >04                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >46,>46,>46,>46                                          ; {#GRAPHIC$19,1(barrel-colour)
       byte >46,>46,>46,>46                                          ; 
       byte >46,>46,>46,>46                                          ; 
       byte >46,>46,>46,>46                                          ; }

* Graphic: A.C.G. Door
_d069:
       byte >08                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >28                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; {#GRAPHIC$23(acg-door)
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >00,>3C,>00,>00,>00,>00,>3C,>00                          ; 
       byte >00,>42,>00,>00,>00,>00,>42,>00                          ; 
       byte >00,>BD,>00,>00,>00,>00,>BD,>00                          ; 
       byte >00,>EF,>00,>00,>00,>00,>F7,>00                          ; 
       byte >FF,>EB,>FF,>FF,>7F,>FF,>F7,>FF                          ; 
       byte >00,>6A,>1F,>FF,>7F,>F8,>56,>00                          ; 
       byte >00,>5A,>3F,>FF,>7F,>FC,>52,>00                          ; 
       byte >00,>D6,>3F,>E3,>63,>FC,>6B,>00                          ; 
       byte >00,>D6,>7F,>D1,>51,>FE,>6B,>00                          ; 
       byte >00,>B6,>7F,>D1,>51,>FE,>69,>00                          ; 
       byte >00,>B6,>FF,>CD,>4D,>FF,>6D,>00                          ; 
       byte >01,>B6,>FF,>E3,>63,>FF,>6D,>80                          ; 
       byte >01,>A4,>FF,>FF,>FF,>FF,>25,>80                          ; 
       byte >01,>2C,>FF,>36,>30,>FF,>34,>80                          ; 
       byte >01,>6C,>FF,>34,>E6,>FF,>36,>80                          ; 
       byte >03,>6C,>FF,>04,>E4,>FF,>36,>C0                          ; 
       byte >03,>6C,>FF,>04,>E4,>FF,>36,>C0                          ; 
       byte >02,>6C,>FF,>34,>E7,>FF,>36,>40                          ; 
       byte >02,>6C,>FF,>34,>E7,>FF,>36,>40                          ; 
       byte >06,>CC,>7F,>8E,>30,>FE,>33,>60                          ; 
       byte >04,>CC,>7F,>FF,>FF,>FE,>33,>20                          ; 
       byte >07,>F4,>3F,>FF,>7F,>FC,>2F,>E0                          ; 
       byte >1F,>FC,>1F,>FF,>7F,>F8,>3F,>F8                          ; 
       byte >38,>0E,>0F,>FF,>7F,>F0,>70,>1C                          ; 
       byte >67,>F3,>03,>FF,>7F,>C0,>CF,>E6                          ; 
       byte >5F,>FD,>00,>7F,>FE,>00,>BF,>FA                          ; 
       byte >3F,>FE,>00,>07,>60,>00,>7F,>FC                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >7F,>FF,>FF,>FF,>FF,>FF,>FF,>FE                          ; 
       byte >7F,>FF,>FF,>FF,>FF,>FF,>FF,>FE                          ; 
       byte >FF,>FF,>FF,>FF,>FF,>FF,>FF,>FF                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; 
       byte >AA,>AA,>AA,>AA,>AA,>AA,>AA,>AA                          ; 
       byte >55,>55,>55,>55,>55,>55,>55,>56                          ; 
       byte >2A,>AA,>AA,>AA,>AA,>AA,>AA,>AC                          ; 
       byte >00,>00,>00,>00,>00,>00,>00,>00                          ; }

* Graphic Attributes: A.C.G. Door
_d1ab:
       byte >08                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >05                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >FF,>47,>43,>43,>43,>43,>47,>FF                          ; {#GRAPHIC$23,1(acg-door-colour)
       byte >FF,>47,>43,>43,>43,>43,>47,>FF                          ; 
       byte >47,>47,>43,>43,>43,>43,>47,>47                          ; 
       byte >47,>47,>43,>43,>43,>43,>47,>47                          ; 
       byte >46,>46,>46,>46,>46,>46,>46,>46                          ; }

* Sprite: A.C.G. Key
* 
* .
* 
* .
* 
* Key left.
_d1d5:
       byte >0B                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0C,>CE                                                  ; {#SPRITE$8B(acg-01)
       byte >0C,>DF                                                  ; 
       byte >0F,>D8                                                  ; 
       byte >0F,>D8                                                  ; 
       byte >0C,>D8                                                  ; 
       byte >0C,>DF                                                  ; 
       byte >07,>FE                                                  ; 
       byte >3F,>FF                                                  ; 
       byte >5F,>FF                                                  ; 
       byte >40,>00                                                  ; 
       byte >3F,>FF                                                  ; }
* Key middle.
_d1ec:
       byte >0F                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >3C,>00                                                  ; {#SPRITE$8C(acg-02)
       byte >7E,>00                                                  ; 
       byte >66,>00                                                  ; 
       byte >6E,>01                                                  ; 
       byte >60,>01                                                  ; 
       byte >7E,>03                                                  ; 
       byte >3C,>0F                                                  ; 
       byte >FF,>F0                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >00,>0F                                                  ; 
       byte >FF,>F0                                                  ; 
       byte >00,>0F                                                  ; 
       byte >00,>03                                                  ; 
       byte >00,>01                                                  ; 
       byte >00,>01                                                  ; }
* Key right.
_d20b:
       byte >13                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >1C,>00                                                  ; {#SPRITE$8D(acg-03)
       byte >7F,>00                                                  ; 
       byte >7F,>00                                                  ; 
       byte >C3,>80                                                  ; 
       byte >C3,>C0                                                  ; 
       byte >81,>DC                                                  ; 
       byte >81,>66                                                  ; 
       byte >1B,>42                                                  ; 
       byte >9F,>73                                                  ; 
       byte >C7,>B1                                                  ; 
       byte >C7,>B1                                                  ; 
       byte >9F,>73                                                  ; 
       byte >1B,>42                                                  ; 
       byte >81,>66                                                  ; 
       byte >81,>BC                                                  ; 
       byte >C3,>80                                                  ; 
       byte >F8,>80                                                  ; 
       byte >7F,>00                                                  ; 
       byte >1C,>00                                                  ; }
* #UDGTABLE(default)
* { =h Output: }
* { #SPRITE$8B(acg-01)#SPRITE$8C(acg-02)#SPRITE$8D(acg-03) }
* UDGTABLE#

* Sprite: Mushroom
_d232:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>70                                                  ; {#SPRITE$A0(mushroom)
       byte >00,>FC                                                  ; 
       byte >00,>7E                                                  ; 
       byte >00,>7E                                                  ; 
       byte >00,>FC                                                  ; 
       byte >00,>FC                                                  ; 
       byte >7E,>3C                                                  ; 
       byte >CF,>C8                                                  ; 
       byte >6F,>F0                                                  ; 
       byte >FF,>3C                                                  ; 
       byte >7F,>3E                                                  ; 
       byte >77,>F3                                                  ; 
       byte >33,>F3                                                  ; 
       byte >1F,>9E                                                  ; 
       byte >0F,>FC                                                  ; 
       byte >03,>F0                                                  ; }

* Graphic: Pumpkin Picture
_d253:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >01,>FF,>FF,>80                                          ; {#GRAPHIC$24(pumpkin-picture)
       byte >01,>FF,>FF,>80                                          ; 
       byte >01,>80,>01,>80                                          ; 
       byte >01,>87,>E1,>80                                          ; 
       byte >03,>8D,>31,>C0                                          ; 
       byte >03,>18,>98,>C0                                          ; 
       byte >03,>13,>C8,>C0                                          ; 
       byte >03,>16,>68,>C0                                          ; 
       byte >07,>1F,>F8,>E0                                          ; 
       byte >06,>19,>98,>60                                          ; 
       byte >06,>19,>98,>60                                          ; 
       byte >06,>0F,>F0,>60                                          ; 
       byte >0E,>00,>00,>70                                          ; 
       byte >0C,>00,>00,>30                                          ; 
       byte >0F,>FF,>FF,>F0                                          ; 
       byte >0F,>FF,>FF,>F0                                          ; }

* Graphic Attributes: Pumpkin Picture
_d295:
       byte >04                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >02                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >46,>46,>46,>46                                          ; {#GRAPHIC$24,1(pumpkin-picture-colour)
       byte >46,>46,>46,>46                                          ; }

* Sprite: Spanner
_d29f:
       byte >10                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >20,>00                                                  ; {#SPRITE$8A(spanner)
       byte >70,>00                                                  ; 
       byte >78,>00                                                  ; 
       byte >3C,>00                                                  ; 
       byte >1E,>00                                                  ; 
       byte >0F,>00                                                  ; 
       byte >07,>80                                                  ; 
       byte >03,>C0                                                  ; 
       byte >01,>E0                                                  ; 
       byte >00,>F8                                                  ; 
       byte >00,>7E                                                  ; 
       byte >00,>7F                                                  ; 
       byte >00,>7F                                                  ; 
       byte >00,>63                                                  ; 
       byte >00,>63                                                  ; 
       byte >00,>22                                                  ; }

* Sprite: Ghostlet
* 
* .
* 
* .
* 
* Frame 1.
_d2c0:
       byte >0B                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >09,>10                                                  ; {#SPRITE$4D(ghostlet-01)
       byte >DD,>B9                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >7F,>FF                                                  ; 
       byte >3F,>FE                                                  ; 
       byte >1C,>9C                                                  ; 
       byte >0A,>2C                                                  ; 
       byte >0B,>6C                                                  ; 
       byte >0C,>98                                                  ; 
       byte >07,>F0                                                  ; 
       byte >01,>E0                                                  ; }
* Frame 2.
_d2d7:
       byte >0B                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00                                                  ; {#SPRITE$4E(ghostlet-02)
       byte >00,>00                                                  ; 
       byte >01,>01                                                  ; 
       byte >D7,>D7                                                  ; 
       byte >FF,>FF                                                  ; 
       byte >F9,>3E                                                  ; 
       byte >74,>5C                                                  ; 
       byte >36,>D8                                                  ; 
       byte >19,>30                                                  ; 
       byte >0F,>E0                                                  ; 
       byte >03,>C0                                                  ; }

* Graphic: Skeleton
_d2ee:
       byte >05                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >28                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>00,>00,>00,>00                                      ; {#GRAPHIC$25(skeleton)
       byte >00,>00,>00,>00,>00                                      ; 
       byte >00,>00,>00,>00,>00                                      ; 
       byte >00,>00,>00,>00,>00                                      ; 
       byte >00,>00,>00,>00,>00                                      ; 
       byte >00,>00,>00,>00,>00                                      ; 
       byte >00,>00,>00,>00,>00                                      ; 
       byte >00,>00,>60,>00,>00                                      ; 
       byte >00,>E0,>78,>00,>00                                      ; 
       byte >00,>FC,>EC,>40,>00                                      ; 
       byte >00,>6E,>C6,>70,>00                                      ; 
       byte >00,>C1,>C3,>60,>00                                      ; 
       byte >00,>C6,>A1,>C0,>00                                      ; 
       byte >00,>BF,>30,>80,>00                                      ; 
       byte >00,>7C,>1C,>00,>00                                      ; 
       byte >00,>6B,>9F,>00,>00                                      ; 
       byte >FF,>50,>4E,>FF,>00                                      ; 
       byte >00,>24,>E1,>00,>00                                      ; 
       byte >00,>28,>10,>00,>00                                      ; 
       byte >00,>12,>60,>00,>00                                      ; 
       byte >00,>14,>30,>00,>00                                      ; 
       byte >00,>14,>18,>00,>00                                      ; 
       byte >00,>14,>46,>00,>00                                      ; 
       byte >00,>0C,>99,>00,>00                                      ; 
       byte >00,>02,>AE,>E0,>00                                      ; 
       byte >00,>06,>7B,>60,>00                                      ; 
       byte >50,>0C,>E7,>30,>00                                      ; 
       byte >27,>18,>87,>18,>50                                      ; 
       byte >17,>78,>FF,>0B,>98                                      ; 
       byte >07,>00,>7E,>03,>B0                                      ; 
       byte >05,>00,>3C,>03,>80                                      ; 
       byte >05,>00,>00,>00,>E0                                      ; 
       byte >0B,>00,>00,>00,>40                                      ; 
       byte >14,>00,>00,>00,>F0                                      ; 
       byte >14,>00,>00,>00,>28                                      ; 
       byte >68,>00,>00,>00,>2E                                      ; 
       byte >F0,>00,>00,>00,>1F                                      ; 
       byte >B8,>00,>00,>00,>1B                                      ; 
       byte >F8,>00,>00,>00,>1F                                      ; 
       byte >70,>00,>00,>00,>0E                                      ; }

* Graphic Attributes: Skeleton
_d3b8:
       byte >05                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >05                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >FF,>FF,>FF,>FF,>FF                                      ; {#GRAPHIC$25,1(skeleton-colour)
       byte >FF,>47,>47,>47,>FF                                      ; 
       byte >FF,>47,>47,>FF,>FF                                      ; 
       byte >47,>47,>47,>47,>47                                      ; 
       byte >47,>FF,>FF,>FF,>47                                      ; }

* Sprite: Hunchback
* 
* .
* 
* .
* 
* Frame 1.
_d3d3:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >00,>3C                                                  ; {#SPRITE$9B(hunchback-01*)
       byte >3C,>38                                                  ; 
       byte >1C,>00                                                  ; 
       byte >00,>38                                                  ; 
       byte >0E,>38                                                  ; 
       byte >0E,>38                                                  ; 
       byte >0F,>38                                                  ; 
       byte >67,>F8                                                  ; 
       byte >03,>F8                                                  ; 
       byte >60,>00                                                  ; 
       byte >77,>F8                                                  ; 
       byte >37,>38                                                  ; 
       byte >37,>78                                                  ; 
       byte >43,>9C                                                  ; 
       byte >1D,>8C                                                  ; 
       byte >06,>C2                                                  ; 
       byte >7B,>62                                                  ; 
       byte >7F,>72                                                  ; 
       byte >53,>62                                                  ; 
       byte >73,>44                                                  ; 
       byte >3E,>CC                                                  ; 
       byte >1E,>F8                                                  ; 
       byte >05,>F0                                                  ; 
       byte >03,>E0                                                  ; }
* Frame 2.
_d404:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0F,>3C                                                  ; {#SPRITE$9C(hunchback-02*)
       byte >07,>38                                                  ; 
       byte >00,>00                                                  ; 
       byte >07,>38                                                  ; 
       byte >07,>38                                                  ; 
       byte >07,>38                                                  ; 
       byte >07,>38                                                  ; 
       byte >37,>F8                                                  ; 
       byte >07,>F8                                                  ; 
       byte >30,>00                                                  ; 
       byte >27,>F8                                                  ; 
       byte >26,>78                                                  ; 
       byte >26,>F8                                                  ; 
       byte >03,>9C                                                  ; 
       byte >1D,>8C                                                  ; 
       byte >06,>CC                                                  ; 
       byte >7B,>66                                                  ; 
       byte >7F,>66                                                  ; 
       byte >53,>66                                                  ; 
       byte >73,>4C                                                  ; 
       byte >3E,>CC                                                  ; 
       byte >1E,>F8                                                  ; 
       byte >05,>F0                                                  ; 
       byte >03,>E0                                                  ; }
* Frame 3.
_d435:
       byte >18                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >0F,>00                                                  ; {#SPRITE$9D(hunchback-03*)
       byte >07,>3C                                                  ; 
       byte >00,>38                                                  ; 
       byte >07,>00                                                  ; 
       byte >07,>38                                                  ; 
       byte >07,>3C                                                  ; 
       byte >07,>3C                                                  ; 
       byte >67,>F8                                                  ; 
       byte >07,>F8                                                  ; 
       byte >60,>00                                                  ; 
       byte >77,>F8                                                  ; 
       byte >37,>38                                                  ; 
       byte >37,>38                                                  ; 
       byte >43,>9C                                                  ; 
       byte >1D,>8C                                                  ; 
       byte >06,>C2                                                  ; 
       byte >7B,>62                                                  ; 
       byte >7F,>72                                                  ; 
       byte >53,>62                                                  ; 
       byte >73,>44                                                  ; 
       byte >3E,>CC                                                  ; 
       byte >1E,>F8                                                  ; 
       byte >05,>F0                                                  ; 
       byte >03,>E0                                                  ; }
* #UDGARRAY*hunchback-01,25;hunchback-02;hunchback-03;hunchback-02(hunchback)

* Graphic: Barrel Stack
_d466:
       byte >05                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >1B                                                      ; Height = #N(#PEEK(#PC)) pixels.
       byte >03,>C0,>3C,>03,>C0                                      ; {#GRAPHIC$26(barrel-stack)
       byte >0F,>F0,>FF,>0F,>F0                                      ; 
       byte >1F,>F9,>FF,>9F,>F8                                      ; 
       byte >1F,>F9,>FF,>9F,>F8                                      ; 
       byte >2F,>F6,>FF,>6F,>F4                                      ; 
       byte >43,>C0,>3C,>03,>C4                                      ; 
       byte >30,>0F,>00,>F0,>0C                                      ; 
       byte >2C,>3F,>C3,>FC,>34                                      ; 
       byte >23,>7F,>E7,>FE,>C4                                      ; 
       byte >30,>7F,>E7,>FE,>0C                                      ; 
       byte >2C,>BF,>DB,>FC,>34                                      ; 
       byte >13,>8F,>00,>F1,>C8                                      ; 
       byte >10,>C0,>3C,>03,>08                                      ; 
       byte >0C,>B0,>FF,>0D,>30                                      ; 
       byte >03,>8D,>FF,>B1,>C0                                      ; 
       byte >00,>C1,>FF,>83,>00                                      ; 
       byte >00,>D2,>FF,>4B,>00                                      ; 
       byte >00,>4E,>3C,>72,>00                                      ; 
       byte >00,>43,>00,>C2,>00                                      ; 
       byte >00,>32,>C3,>4C,>00                                      ; 
       byte >00,>0E,>3C,>70,>00                                      ; 
       byte >00,>03,>00,>C0,>00                                      ; 
       byte >00,>02,>C3,>40,>00                                      ; 
       byte >00,>01,>3C,>80,>00                                      ; 
       byte >00,>01,>00,>80,>00                                      ; 
       byte >00,>00,>C3,>00,>00                                      ; 
       byte >00,>00,>3C,>00,>00                                      ; }

* Graphic Attributes: Barrel Stack
_d4ef:
       byte >05                                                      ; Width = #N(#PEEK(#PC)) bytes.
       byte >04                                                      ; Height = #N(#PEEK(#PC)) bytes.
       byte >43,>43,>43,>43,>43                                      ; {#GRAPHIC$26,1(barrel-stack-colour)
       byte >43,>43,>43,>43,>43                                      ; 
       byte >43,>43,>43,>43,>43                                      ; 
       byte >43,>43,>43,>43,>43                                      ; }

* Data block at D505
       byte >00,>00,>00,>00,>00,>00,>01,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>85,>3A,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00

* Player
player:                                ; ea90
       byte >00

* Player Room
playerroom:                            ; ea91
       byte >00,>00,>00,>00,>00,>00,>00

* Player Weapon
playerweapon:                          ; ea98
       byte >00,>00,>00,>00,>00,>00,>00,>00
_eaa0:
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at EAA8
_eaa8:
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
_eac8:
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
_eae0:
       byte >00,>00,>00,>00,>00,>00,>00,>00
_eae8:
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
_eb18:
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Food Items
fooditems:                             ; eb58
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
_edd8:
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at EE60
_ee60:
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00

* Data block at EEE0
_eee0:
       byte >00,>00,>00,>00,>00,>00,>00,>00
_eee8:
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
       byte >00,>00,>00,>00,>00,>00,>00,>00
