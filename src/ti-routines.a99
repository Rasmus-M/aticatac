*********************************************************************
*
* Setup environment
*
ti_setup_environment:
       mov  @rndsd,@rnd_seed
       li   one,>0100
       li   r0,>fffe
       mov  r0,@b255
       seto @frame
       li   sp,stack
       clr  @exx_flag
       .proc
       bl   @init_bits
;      bl   @copy_to_pad
       bl   @graphics_mode
       clr  @double_buffer_flag
       .ifeq hw_sprites,1
       bl   @ti_reset_sprite_pattern_allocation_table
       bl   @ti_reset_sprite_attr_table
       .endif
       .endproc
*// ti_setup_environment

*********************************************************************
*
* Init bits for bit operations
*
init_bits:
       li   r0,>0100
       li   r1,bits
       li   r2,8
init_bits_1:
       movb r0,*r1+
       sla  r0,1
       dec  r2
       jne  init_bits_1
       rt
*// init_bits

;*********************************************************************
;*
;* Copy routines to pad
;*
;copy_to_pad:
;       li   r0,draw_display_buffer_start
;       li   r1,draw_display_buffer_pad
;       li   r2,draw_display_buffer_end-draw_display_buffer_start
;copy_to_pad_1:
;       mov  *r0+,*r1+
;       dect r2
;       jne  copy_to_pad_1
;       rt
;*// copy_to_pad

*********************************************************************
*
* Set graphics mode
*
graphics_mode:
       lwpi ti_wrksp
       clr  r0
       li   r1,vdp_registers
       li   r2,8
graphics_mode_1:
       movb *r1+,@ti_r0lb
       bl   @vwtr                      ; Set register
       ai   r0,>0100
       dec  r2
       jne  graphics_mode_1
*      Clear VDP RAM
       clr  r0
       clr  r1
       li   r2,>4000
       bl   @vsmw
*      Disable sprites
       li   r0,sprite_attr_table
       li   r1,>d000
       bl   @vsbw
*      Init color table
       li   r0,color_table
       li   r1,>f100
       li   r2,>1800
       bl   @vsmw
*      Init name tables
       li   r0,name_table
       bl   @vwad
       bl   @ti_init_name_table
       li   r0,name_table_2
       bl   @vwad
       bl   @ti_init_name_table
*      Sprite patterns
;       li   r0,sprite_pattern_table
;       li   r1,SPR0
;       li   r2,32
;       bl   @vmbw
       lwpi wrksp
       rt
*      VDP registers
vdp_registers:
       byte >02                        ; Graphics II mode
       byte >e2                        ; 16K, display on, interrupt enabled
       byte name_table/>400            ; Name table
       byte >ff                        ; Color table
       byte pattern_table/>800+>03     ; Pattern table
       byte sprite_attr_table/>80      ; Sprite attribute table
       byte sprite_pattern_table/>800  ; Sprite pattern table
       byte >00                        ; Backdrop color
*// graphics_mode

*********************************************************************************
*
* Initialize name table for bitmap drawing
*
ti_init_name_table:
       clr  r1
       li   r2,768
ti_init_name_table_1:
       movb r1,@vdpwd
       ai   r1,>0100
       dec  r2
       jne  ti_init_name_table_1
       rt
*// ti_init_name_table

;*********************************************************************************
;*
;* Select name table 1
;*
;ti_select_name_table_1:
;       lwpi ti_wrksp
;       li   r0,>020e
;       bl   @vwtr
;       lwpi wrksp
;       rt
;*// ti_select_name_table_1
;
;*********************************************************************************
;*
;* Select name table 2
;*
;ti_select_name_table_2:
;       lwpi ti_wrksp
;       li   r0,>020f
;       bl   @vwtr
;       lwpi wrksp
;       rt
;*// ti_select_name_table_2

*********************************************************************************
*
* Display off
*
ti_display_off:
       lwpi ti_wrksp
       li   r0,>01a2
       bl   @vwtr
       lwpi wrksp
       rt
*// ti_display_off

*********************************************************************************
*
* Display off
*
ti_display_on:
       lwpi ti_wrksp
       li   r0,>01e2
       bl   @vwtr
       lwpi wrksp
       rt
*// ti_display_on

;*********************************************************************************
;*
;* Clear screen
;*
;ti_clear_screen:
;       .proc
;       bl   @ti_display_off
;;       bl   @module_player
;       li   r1,vdpwd
;       li   r0,pattern_table
;       bl   @vwad
;       bl   @ti_clear_screen_part
;       bl   @ti_clear_screen_part
;       bl   @ti_clear_screen_part
;       li   r0,color_table
;       bl   @vwad
;       bl   @ti_clear_screen_part
;       bl   @ti_clear_screen_part
;       bl   @ti_clear_screen_part
;       bl   @ti_display_on
;       .endproc
;*// ti_clear_screen
;
;ti_clear_screen_part:
;       .proc
;       li   r2,>800
;ti_clear_screen_part_1:
;       clr  *r1
;       dec  r2
;       jne  ti_clear_screen_part_1
;;       bl   @module_player
;       .endproc

;*********************************************************************************
;*
;* Set color of whole screen
;*
;* a: zx attribute
;*
;ti_set_screen_color:
;       .proc
;       movb @ti_colors(a),r1
;       li   r0,color_table+(3*256)
;       li   r2,5*256
;       bl   @vsmw
;;       bl   @module_player
;       li   r0,color_table+(8*256)
;       li   r2,5*256
;       bl   @vsmw
;;       bl   @module_player
;       li   r0,color_table+(13*256)
;       li   r2,5*256
;       bl   @vsmw
;;       bl   @module_player
;       .endproc
;*// ti_set_screen_color

*********************************************************************************
*
* Set border color
*
* a: zx color
*
ti_set_border_color:
       .proc
       movb @ti_colors(a),r0
       srl  r0,12
       ori  r0,>0700
       bl   @vwtr
       .endproc
*// ti_set_border_color

;*********************************************************************
;*
;* Draw graphics
;*
;* r0 (r13): VDP address
;* r1 (r14): Source address
;* r2 (r15) MSB: width in characters
;* r2 (r15) LSB: height in characters
;*
;ti_draw_graphics:
;       .proc
;       lwpi ti_wrksp
;       mov  r13,r0
;       mov  r14,r1
;       mov  r15,r2                     ; Width and height
;       andi r2,>00ff                   ; Height
;       mov  r15,r4                     ; Width and height
;       srl  r4,8                       ; Width
;       mov  @row_src_skip,r5
;       li   r6,vdpwd
;       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
;ti_draw_graphics_1:
;       movb @ti_r0lb,@vdpwa            ; Send low byte of VDP RAM write address
;       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
;       mov  r4,r3                      ; Width in characters
;ti_draw_graphics_2:
;       movb *r1+,*r6
;       movb *r1+,*r6
;       movb *r1+,*r6
;       movb *r1+,*r6
;       movb *r1+,*r6
;       movb *r1+,*r6
;       movb *r1+,*r6
;       movb *r1+,*r6
;       dec  r3
;       jne  ti_draw_graphics_2
;       ai   r0,256                     ; Next character row
;       a    r5,r1                      ; Skip source bytes
;       dec  r2
;       jne  ti_draw_graphics_1
;       lwpi wrksp
;;       bl   @module_player
;       .endproc
;row_src_skip:
;       data 0
;*// ti_draw_graphics
;
;*********************************************************************
;*
;* Draw color area
;*
;* r0 (r13): VDP offset in color table
;* r1 (r14) LSB: ZX attribute to draw
;* r2 (r15) MSB: width in characters
;* r2 (r15) LSB: height in characters
;*
;ti_draw_color_area:
;       .proc
;       lwpi ti_wrksp
;       mov  r13,r0
;       mov  r14,r1
;       movb @ti_colors(r1),r1
;       mov  r15,r2                     ; Width and height
;       andi r2,>00ff                   ; Height
;       mov  r15,r4                     ; Width and height
;       srl  r4,8                       ; Width
;       li   r6,vdpwd
;       ori  r0,>4000 + color_table     ; Set read/write bits 14 and 15 to write (01) + color table base
;ti_draw_color_area_1:
;       movb @ti_r0lb,@vdpwa            ; Send low byte of VDP RAM write address
;       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
;       mov  r4,r3                      ; Width in characters
;ti_draw_color_area_2:
;       movb r1,*r6
;       movb r1,*r6
;       movb r1,*r6
;       movb r1,*r6
;       movb r1,*r6
;       movb r1,*r6
;       movb r1,*r6
;       movb r1,*r6
;       dec  r3
;       jne  ti_draw_color_area_2
;       ai   r0,256                     ; Next character row
;       dec  r2
;       jne  ti_draw_color_area_1
;       lwpi wrksp
;;       bl   @module_player
;       .endproc
;*// ti_draw_color_area
;
;*********************************************************************************
;*
;* Draw attribute
;*
;* a: zx attribute
;* r1: address in zx attribute file
;*
;ti_draw_attribute:
;*      VDP write address
;       ai   r1,-zx_attrs
;       sla  r1,3
;       ai   r1,color_table+>4000
;*      Set VDP write address
;       movb @r1lb,@vdpwa               ; Send low byte of VDP RAM write address
;       movb r1,@vdpwa                ; Send high byte of VDP RAM write address
;*      Color
;       swpb a
;       movb @ti_colors(a),r0
;       swpb a
;*      Draw
;       li   r2,vdpwd
;       movb r0,*r2
;       movb r0,*r2
;       movb r0,*r2
;       movb r0,*r2
;       movb r0,*r2
;       movb r0,*r2
;       movb r0,*r2
;       movb r0,*r2
;       rt
;*// ti_draw_attribute
;
;*********************************************************************************
;*
;* Get TI-99 color from ZX Spectrum color
;*
;* a: Colour-byte FBPPPIII
;*  - I - Ink colour (0-7)
;*  - P - Paper colour (0-7)
;*  - B - Bright (0-No, 1-Yes)
;*  - F - Flash  (0-No, 1-Yes)
;*
;* On return r0 MSB contains the TI color FFFFBBBB.
;*
;ti_color:
;       clr  r0                       ; Result
;       mov  a,r2
;       andi r2,>4000                 ; Bright bit
;       srl  r2,3
;*      Foreground
;       mov  a,r1
;       andi r1,>0700                 ; Foreground bits
;       soc  r2,r1
;       swpb r1
;       movb @ti_pal(r1),r0
;       sla  r0,4
;*      Background
;       mov  a,r1
;       andi r1,>3800                 ; Background bits
;       srl  r1,3
;       soc  r2,r1
;       swpb r1
;       socb @ti_pal(r1),r0
;       rt
;
;* Spectrum palette
;* 0  Black,    1 D Blue,   2 D Red,     3 D Magenta
;* 4  D Green,  5 D Cyan,   6 D Yellow,  7 Grey
;* 8  Black,    9 Blue,    10 Red,      11 Magenta
;* 12 Green,   13 Cyan,    14 Yellow,   15 White
;
;* TI palette
;* 0  Trans,    1 Black,    2 M Green,   3 L Green
;* 4  D Blue,   5 L Blue,   6 D Red,     7 Cyan
;* 8  M Red,    9 L Red,   10 D Yellow, 11 L Yellow
;* 12 D Green, 13 Magenta, 14 Gray,     15 White
;
;ti_pal  byte 1,4,6,13,12,7,10,14,1,5,8,13,2,7,11,15
;* Not used: 3 L Green, 9 L Red
;* Not available: D Cyan, D Magenta
;*// ti_color

*********************************************************************************
*
* Upload main ZX screen buffer
*
ti_upload_zx_screen:
       lwpi ti_wrksp
       mov  @wrksp+20,r10
       clr  r0
       li   r14,zx_screen
       li   r15,zx_attrs
       bl   @upload_screen_part
       li   r0,>800
       li   r14,zx_screen+>800
       li   r15,zx_attrs+>100
       bl   @upload_screen_part
       li   r0,>1000
       li   r14,zx_screen+>1000
       li   r15,zx_attrs+>200
       bl   @upload_screen_part
       lwpi wrksp
       rt
*// ti_upload_zx_screen

*********************************************************************************
*
* Upload screen part
*
* r0: VDP table offset
* r14: Screen address
* r15: Attributes address
*
upload_screen_part:
       .proc
       li   r13,vdpwd
       li   r1,>0100
*      Patterns
       ai   r0,pattern_table
       bl   @vwad
       mov  r14,r4
       a    r1,r14
       mov  r14,r5
       a    r1,r14
       mov  r14,r6
       a    r1,r14
       mov  r14,r7
       a    r1,r14
       mov  r14,r8
       a    r1,r14
       mov  r14,r9
       a    r1,r14
       mov  r14,r11
       a    r1,r14
       mov  r14,r12
       a    r1,r14
       li   r3,256
upload_screen_part_1:
       movb *r4+,*r13
       movb *r5+,*r13
       movb *r6+,*r13
       movb *r7+,*r13
       movb *r8+,*r13
       movb *r9+,*r13
       movb *r11+,*r13
       movb *r12+,*r13
       dec  r3
       jne  upload_screen_part_1
*      Colors
       ai   r0,color_table-pattern_table
       bl   @vwad
       li   r2,>100
upload_screen_part_2:
       movb *r15+,r1
       srl  r1,8
       movb @ti_colors(r1),r0
       movb r0,*r13
       movb r0,*r13
       movb r0,*r13
       movb r0,*r13
       movb r0,*r13
       movb r0,*r13
       movb r0,*r13
       movb r0,*r13
       dec  r2
       jne  upload_screen_part_2
       .endproc
*// upload_screen_part

*********************************************************************************
*
* Upload the area covered by a background graphics entity
*
* ix: entity
*
ti_upload_zx_attributes:
       .proc
       li   r0,color_table
       bl   @vwad
       li   r0,zx_attrs
       li   r2,768
       li   af_,vdpwd
ti_upload_zx_attributes_1:
       movb *r0+,r1
       srl  r1,8
       movb @ti_colors(r1),r1
       movb r1,*af_
       movb r1,*af_
       movb r1,*af_
       movb r1,*af_
       movb r1,*af_
       movb r1,*af_
       movb r1,*af_
       movb r1,*af_
       dec  r2
       jne  ti_upload_zx_attributes_1
       .endproc
*// ti_upload_zx_attributes

*********************************************************************************
*
* Upload the area covered by a background graphics entity
*
* ix: entity
*
ti_upload_bgrnd_entity_area:
       .proc
       movb *ix,@c
       bl   @get_gfx_data
       jmp  ti_upload_entity_area
*// ti_upload_bgrnd_entity_area:

*********************************************************************************
*
* Upload the area covered by a sprite graphics entity
*
* ix: entity
*
ti_upload_sprite_entity_area:
       .proc
       bl   @get_sprite_addr_ix
       movb *de,@c
       movb @bytes+2,b
       movb @entity_x(ix),r0
       andi r0,>0700
       jeq  !
       ab   one,b
!
       jmp  ti_upload_entity_area
*// ti_upload_sprite_entity_area

*********************************************************************************
*
* Upload the specified area
*
* h: y in pixels
* l: x in pixels
* b: Width in bytes
* c: Height in pixels
*
ti_upload_specified_area:
       .proc
       jmp  _upload_area
*// ti_upload_spcified_area:

*********************************************************************************
*
* Upload the area covered by a graphics entity
*
* ix: entity
* b: Width in bytes
* c: Height in pixels
*
* Branch target
*
ti_upload_entity_area:
*      Source address
       movb @entity_y(ix),h            ; y
       sb   @c,h                       ; y - height
       ab   one,h                      ; y - height + 1
       movb h,a                        ; Save unaligned y coordinate
       movb @entity_x(ix),@l           ; x
_upload_area:
       andi hl,>f8f8                   ; Align to character
       mov  hl,hl_                     ; Save coordinates
       bl   @xy_to_display             ; Calculate source screen address
*      Height
       andi a,>0700                    ; Top offset from character boundary
       ab   @c,a                       ; Add height
       czc  @w0700,a                   ; Aligned?
       jeq  !                          ; Jump if so
       ab   @bytes+8,a                 ; If not, h += 8
       andi a,>f800                    ; h = (h + 8) % 8
!      srl  a,3                        ; Height in characters
*      VDP address
       mov  hl_,r0                     ; yyyyy000xxxxx000
       mov  r0,r1                      ; yyyyy000xxxxx000
       srl  r1,3                       ; 000yyyyy000xxxxx
       movb r1,r0                      ; 000yyyyyxxxxx000 This is the VDP address
*      Prepare for drawing
       srl af,8
       mov af,af_
       srl  bc,8
       mov  bc,bc_
       li   r1,vdpwd
       mov  r0,r2                      ; Save VDP address
*      Patterns
upload_entity_area_1:
       bl   @vwad
       mov  bc_,bc
upload_entity_area_2:
       movb *hl,*r1
       ab   one,hl
       movb *hl,*r1
       ab   one,hl
       movb *hl,*r1
       ab   one,hl
       movb *hl,*r1
       ab   one,hl
       movb *hl,*r1
       ab   one,hl
       movb *hl,*r1
       ab   one,hl
       movb *hl,*r1
       ab   one,hl
       movb *hl,*r1
       ab   one,hl
       ai   hl,->0800+1
       dec  bc
       jne  upload_entity_area_2
*      End of row
       s    bc_,hl
       coc  @w00e0,hl
       jne  !
       szc  @w00e0,hl
       ai   hl,>0800
       jmp  !!
!      ai   hl,32
!      ai   r0,>0100
       dec  af
       jne  upload_entity_area_1
*      Colours
       mov  hl_,hl
       bl   @xy_to_attr
       mov  r2,r0                      ; Saved VDP address
       ai   r0,>2000                   ; Move to colours
       mov  af_,af
upload_entity_area_3:
       bl   @vwad
       mov  bc_,bc
upload_entity_area_4:
       movb *hl+,d
       srl  de,8
       movb @ti_colors(de),d
       movb d,*r1
       movb d,*r1
       movb d,*r1
       movb d,*r1
       movb d,*r1
       movb d,*r1
       movb d,*r1
       movb d,*r1
       dec  bc
       jne  upload_entity_area_4
       s    bc_,hl
       ai   hl,32
       ai   r0,>0100
       dec  af
       jne  upload_entity_area_3
upload_entity_area_5:
       .endproc
w0700: data >0700
w00e0: data >00e0
*// ti_upload_entity_area

*********************************************************************
*
* Reset sprite pattern allocation table
*
ti_reset_sprite_pattern_allocation_table:
       li   r0,sprite_pattern_allocation_table
       li   r2,n_sprite_patterns
ti_reset_sprite_pattern_allocation_table_1:
       seto *r0+
       dect r2
       jne  ti_reset_sprite_pattern_allocation_table_1
       clr  @next_sprite_pattern_index
*
       li   r0,sprite_pattern_usage_table
       li   r2,n_sprite_patterns
ti_reset_sprite_pattern_usage_table_1:
       seto *r0+
       dect r2
       jne  ti_reset_sprite_pattern_usage_table_1
       rt
*// ti_reset_sprite_pattern_allocation_table

*********************************************************************
*
* Upload sprite graphics for a single sprite if not already uploaded
*
* a: Index (zero based) of sprite graphics
* de: Address of sprite graphics
*
sprite_pattern_table_offset:
       equ  sprite_pattern_allocation_table-sprite_pattern_usage_table

ti_upload_sprite_patterns:
       mov  af,r1                      ; r14 in ti_wrksp
       mov  de,r2                      ; r15 in ti_wrksp
       lwpi ti_wrksp
*      Check if already allocated
       srl  r14,8
       cb   @sprite_pattern_allocation_table(r14),@b255
       jne  ti_upload_sprite_patterns_10    ; Already allocated
*      Calculate number patterns needed
       movb *r15,r3                    ; Height
       jeq  ti_upload_sprite_patterns_10
       clr  r12
       srl  r3,8                       ; To LSB
       mov  r3,r4                      ; Copy height
       srl  r4,4                       ; height / 16
       andi r3,15
       jeq  ti_upload_sprite_patterns_13
       inc  r4                         ; r4 is number of patterns of 16 rows to use
       li   r12,>8000                  ; Set bit indicating 2 patterns
*      Allocate pattern
ti_upload_sprite_patterns_13:
       mov  @next_sprite_pattern_index,r0   ; Next pattern index
       mov  r0,r1                           ; Copy of next pattern index
       a    r4,r1                           ; Add number of patterns needed
       ci   r1,64                           ; Are we outside the limit of 64 patterns?
       jle  ti_upload_sprite_patterns_11    ; Jump if not
*      Need to reuse patterns
       li   r1,sprite_pattern_usage_table   ; Search from the start
       movb @b255,@sprite_pattern_usage_table+n_sprite_patterns-1 ; Ensure we get a hit at the end of the of the table
ti_upload_sprite_patterns_15:
       li   r0,>0400                                           ; Look for an entity that hasn't been draw for the last 4 frames
ti_upload_sprite_patterns_12:
       cb   *r1+,r0
       jl   ti_upload_sprite_patterns_12
       ci   r1,sprite_pattern_usage_table+n_sprite_patterns    ; Was it at the end of the table?
       jeq  ti_upload_sprite_patterns_10                       ; If so we give up
       movb @sprite_pattern_table_offset-1(r1),r0              ; Get the sprite pattern index that was allocated to this entity
       cb   r0,@b255                                       ; Check if it had an alllocated pattern
       jeq  ti_upload_sprite_patterns_15                   ; If not, continue searching
       coc  r12,r0                                         ; Check if the same number of patterns are allocated
       jne  ti_upload_sprite_patterns_15                   ; If not, continue searching
       dec  r1                                             ; Backtrack one
       sb   *r1,*r1                                        ; Mark as used
       movb @b255,@sprite_pattern_table_offset(r1)         ; Unmark old pattern allocation
       movb r0,@sprite_pattern_allocation_table(r14)       ; Mark new pattern allocation
       andi r0,>3f00
       swpb r0
       jmp  ti_upload_sprite_patterns_16
ti_upload_sprite_patterns_11:
       mov  r0,r1                                          ; Copy pattern index
       swpb r1
       socb r12,r1                                         ; Apply bit for 2 patterns
       movb r1,@sprite_pattern_allocation_table(r14)       ; Mark new pattern allocation
       a    r4,@next_sprite_pattern_index
*      VDP address
ti_upload_sprite_patterns_16:
       ci   r0,>003f
       jne  !
       nop
!      sla  r0,5                       ; pattern index * 32
       ai   r0,sprite_pattern_table
       bl   @vwad
       li   r13,vdpwd
*      Calculate sprite data source address
       movb *r15+,r3                   ; Height
       srl  r3,8                       ; To LSB
       mov  r3,r5                      ; Copy height
       dec  r5                         ; Height - 1
       sla  r5,1                       ; 2 bytes per row
       a    r5,r15                     ; To first row of sprite (sprites are upside down)
ti_upload_sprite_patterns_1
*      Calculate number of rows
       li   r5,16                      ; Try to upload 16 rows
       c    r3,r5                      ; Less than 16 rows left?
       jl   ti_upload_sprite_patterns_2
       clr  r6                         ; No blanks to upload
       jmp  ti_upload_sprite_patterns_3
ti_upload_sprite_patterns_2:
       mov  r3,r5                      ; Cap at number of rows left
       li   r6,16
       s    r3,r6                      ; Number of blanks to upload
ti_upload_sprite_patterns_3:
       mov  r5,r7                      ; Copy number of rows in this pattern
       mov  r6,r8                      ; Copy number of blanks in this pattern
       s    r5,r3                      ; Total rows -= drawn rows
       mov  r15,r9                     ; Copy sprite graphics address
*      Column 1
ti_upload_sprite_patterns_4:
       movb *r15,*r13                  ; Write pattern byte to VDP
       dect r15                        ; One row up in sprite graphics
       dec  r5
       jne  ti_upload_sprite_patterns_4
       mov  r6,r6                      ; Any blanks?
       jeq  ti_upload_sprite_patterns_6
ti_upload_sprite_patterns_5:
       movb @zero,*r13                 ; Upload blank
       dec  r6
       jne  ti_upload_sprite_patterns_5
*      Column 2
ti_upload_sprite_patterns_6:
       mov  r9,r15
       inc  r15
ti_upload_sprite_patterns_7:
       movb *r15,*r13                  ; Write pattern byte to VDP
       dect r15                        ; One row up in sprite graphics
       dec  r7
       jne  ti_upload_sprite_patterns_7
       mov  r8,r8                      ; Any blanks?
       jeq  ti_upload_sprite_patterns_9
ti_upload_sprite_patterns_8:
       movb @zero,*r13                 ; Upload blank
       dec  r8
       jne  ti_upload_sprite_patterns_8
ti_upload_sprite_patterns_9:
*      Next sprite
       dec  r15
       dec  r4
       jne  ti_upload_sprite_patterns_1
ti_upload_sprite_patterns_10:
       lwpi wrksp
       rt
*// ti_upload_sprite_patterns

*********************************************************************************
*
* Deallocate sprite patterns
*
* ix: Address of entity
*
ti_deallocate_sprite_patterns:
       movb *ix,r1
       srl  r1,8
       movb @b255,@sprite_pattern_allocation_table(r1)
       rt
*// ti_deallocate_sprite_patterns

*********************************************************************************
*
* Update sprite pattern usage table
*
ti_update_sprite_pattern_usage_table:
       seto r0
       li   r1,sprite_pattern_usage_table
       li   r2,sprite_pattern_usage_table+n_sprite_patterns-1
       movb @zero,*r2
ti_update_sprite_pattern_usage_table_1:
       cb   *r1+,r0
       jeq  ti_update_sprite_pattern_usage_table_1
       ab   one,@-1(r1)
       c    r1,r2
       jl   ti_update_sprite_pattern_usage_table_1
       rt
*// ti_update_sprite_pattern_usage_table

*********************************************************************************
*
* Prepare for drawing hardware sprites
*
ti_init_sprite_attr_table:
       mov  @double_buffer_flag,r0
       andi r0,>80
       ai   r0,sprite_attr_table
       mov  r0,@sprite_attr_table_addr
       movb @vdpsta,r0
       rt
*// ti_init_sprite_attr_table

*********************************************************************************
*
* Upload a hardware sprite to the TMS9918A sprite attribute table
*
* ix: Address of entity to draw
* Address to draw at in the ZX Spectrum screen (xxxsslllrrrccccc)
*
ti_draw_sprite:
       .proc
       bl   @get_sprite_addr_ix        ; Now a=sprite index and de=sprite graphics
       bl   @ti_upload_sprite_patterns ; Upload patterns as needed
       mov  @sprite_attr_table_addr,r0
       bl   @vwad
       li   r2,1                       ; Number of hardware sprites to allocate
       cb   *de,@bytes+16              ; Check height
       jle  ti_draw_sprite_1
       inc  r2                         ; Allocate 2
ti_draw_sprite_1:
*      x
       movb @entity_x(ix),a_
       movb a_,r0
       andi r0,>0700
       jne  !
       movb @bytes+2,@width_bytes
       jmp  !!
!      mov  @bytes+3,@width_bytes
*      y
!      movb @entity_y(ix),r0           ; y (bottom)
       sb   *de,r0                     ; top = y - height
       movb *de,@height_lines
*      Pattern
       srl  af,8
       movb a,@sprite_pattern_usage_table(af)    ; Mark as used (zero)
       movb @sprite_pattern_allocation_table(af),a
       andi a,>3f00
       sla  a,2
*      Colour
       movb @entity_flags(ix),r1
       srl  r1,8
       movb @ti_colors(r1),r1          ; Get TI color
       srl  r1,4
ti_draw_sprite_2:
*      y
       movb r0,@vdpwd
       ab   @bytes+16,r0
*      x
       movb a_,@vdpwd
*      Pattern
       movb a,@vdpwd
       ab   @bytes+4,a
*      Colour
       movb r1,@vdpwd
*      Update address
       a    @w4,@sprite_attr_table_addr
*      Next sprite
       dec  r2
       jne ti_draw_sprite_2
       clr  af
       .endproc
w4:    data 4
*// ti_draw_sprite

*********************************************************************
*
* Close hardware sprite table
*
ti_close_sprite_attr_table:
       .proc
       mov  @sprite_attr_table_addr,r0
       bl   @vwad
       li   r0,>d000                    ; Write sprite attribute table terminator
       movb r0,@vdpwd
       bl   @ti_vsync
       mov  @double_buffer_flag,r0
       andi r0,1
       ori  r0,>0500+(sprite_attr_table/>80)
       bl   @vwtr
       inv  @double_buffer_flag
       .endproc
*// ti_close_sprite_attr_table

*********************************************************************
*
* Reset hardware sprite table
*
ti_reset_sprite_attr_table:
       .proc
       li   r0,sprite_attr_table
       li   r1,>d000
       li   r2,256
       bl   @vsmw
       clr  @sprite_attr_table_addr
       .endproc
*// ti_reset_sprite_attr_table

*********************************************************************
*
* VDP Write To Register
*
* R0 MSB: VDP register to write to
* R0 LSB: Value to write
*
vwtr:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte (value) to write to VDP register
       swpb r0
       ori  r0,>8000                   ; Set up a VDP register write operation (10)
       movb r0,@vdpwa                  ; Send high byte (address) of VDP register
       rt
*// vwtr

*********************************************************************
*
* VDP Set Write Address
*
* R0: Write address in VDP RAM
*
vwad:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       rt
*// vwad

*********************************************************************
*
* VDP Single Byte Write
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
*
vsbw:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       movb r1,@vdpwd                  ; Write byte to VDP RAM
       rt
*// vsbw

*********************************************************************
*
* VDP multiple Byte Write
*
* R0: Write address in VDP RAM
* R1: Starting read address in CPU RAM
* R2: Number of bytes to send
*
vmbw:
       swpb r0
       movb r0,@vdpwa                  ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       li   r0,vdpwd
vmbw_1:
       movb *r1+,*r0                   ; Write byte to VDP RAM
       dec  r2
       jne  vmbw_1
       rt
*// vmbw

*********************************************************************
*
* VDP Single Byte Multiple Write
*
* R0: Write address in VDP RAM
* R1: MSB of R1 sent to VDP RAM
* R2: Number of bytes to write to VDP RAM
*
vsmw:
       swpb r0
       movb  r0,@vdpwa                 ; Send low byte of VDP RAM write address
       swpb r0
       ori  r0,>4000                   ; Set read/write bits 14 and 15 to write (01)
       movb r0,@vdpwa                  ; Send high byte of VDP RAM write address
       li   r0,vdpwd
vsmw_1:
       movb r1,*r0                     ; Write byte to VDP RAM
       dec  r2                         ; Byte counter
       jne  vsmw_1
       rt
*// vsmw

*********************************************************************
*
* VDP Set Read Address
*
* R0: Read address in VDP RAM
*
;vrad:
;       swpb r0
;       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
;       swpb r0
;       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
;       rt
;*// vrad

;*********************************************************************
;*
;* VDP Single Byte Read
;*
;* R0:  Read address in VDP RAM
;* R1:  MSB of R1 set to byte from VDP RAM
;*
;vsbr:
;       swpb r0
;       movb r0,@vdpwa                  ; Send low byte of VDP RAM read address
;       swpb r0
;       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
;       nop
;       movb @vdprd,r1                  ; Read byte from VDP RAM
;       rt
;*// vsbr

;*********************************************************************
;*
;* VDP Multiple Byte Read
;*
;* R0: Starting read address in VDP RAM
;* R1: Starting write address in CPU RAM
;* R2: Number of bytes to read from VDP RAM
;*
;* Modifies R0-R2
;*
;vmbr:
;       swpb r0
;       movb  r0,@vdpwa                 ; Send low byte of VDP RAM read address
;       swpb r0
;       andi r0,>3fff                   ; Set read/write bits 14 and 15 to read (00)
;       movb r0,@vdpwa                  ; Send high byte of VDP RAM read address
;       li   r0,vdprd
;vmbr_1:
;       movb *r0,*r1+                   ; Read byte from VDP RAM
;       dec  r2                         ; Byte counter
;       jne  vmbr_1                     ; Check if finished
;       rt
;*// vmbr

*********************************************************************
*
* Check key
*
* r0: Column in MSB: >0000 - >0700, Row in LSB: >0006 - >0014
*
*       Column   0      1    2    3    4    5     6       7
*     Row
*     >0006      =      .    ,    M    N    /    Fire    Fire
*     >0008    Space    L    K    J    H    ;    Left    Left
*     >000A    Enter    O    I    U    Y    P    Right   Right
*     >000C             9    8    7    6    0    Down    Down
*     >000E    Fctn     2    3    4    5    1    Up      Up
*     >0010    Shift    S    D    F    G    A
*     >0012    Ctrl     W    E    R    T    Q
*     >0014             X    C    V    B    Z
*
* On return NEQ means that the key is pressed
*
KEY_FI EQU  >0606
KEY_LF EQU  >0608
KEY_RG EQU  >060A
KEY_DN EQU  >060C
KEY_UP EQU  >060E
KEY_CM EQU  >0206
KEY_FS EQU  >0106
KEY_0  EQU  >050C
KEY_1  EQU  >050E
KEY_2  EQU  >010E
KEY_3  EQU  >020E
KEY_4  EQU  >030E
KEY_5  EQU  >040E
KEY_6  EQU  >040C
KEY_7  EQU  >030C
KEY_8  EQU  >020C
KEY_9  EQU  >010C
KEY_A  EQU  >0510
KEY_B  EQU  >0414
KEY_C  EQU  >0214
KEY_D  EQU  >0210
KEY_E  EQU  >0212
KEY_F  EQU  >0310
KEY_G  EQU  >0410
KEY_H  EQU  >0408
KEY_I  EQU  >020A
KEY_J  EQU  >0308
KEY_K  EQU  >0208
KEY_L  EQU  >0108
KEY_M  EQU  >0306
KEY_N  EQU  >0406
KEY_O  EQU  >010A
KEY_P  EQU  >050A
KEY_Q  EQU  >0512
KEY_R  EQU  >0312
KEY_S  EQU  >0110
KEY_T  EQU  >0412
KEY_U  EQU  >030A
KEY_V  EQU  >0314
KEY_W  EQU  >0112
KEY_X  EQU  >0114
KEY_Y  EQU  >040A
KEY_Z  EQU  >0514
KEY_SP EQU  >0008
KEY_EN EQU  >000A
KEY_FN EQU  >000E
KEY_SH EQU  >0010
KEY_CT EQU  >0012
JOY_FI EQU  >0606
JOY_LT EQU  >0608
JOY_RT EQU  >060A
JOY_DN EQU  >060C
JOY_UP EQU  >060E
*
ti_check_key:
       li   r12,>0024                  ; CRU address of the column decoder
       ldcr r0,3                       ; Select column
       andi r0,>00ff
       mov  r0,r12                     ; Select row
       tb   0                          ; Test key, EQ if not pressed
       rt
*// ti_check_key

***************************************************************************
*
* Wait for fire key
*
ti_wait_fire:
       .proc
ti_wait_fire_1:
       li   r0,KEY_SP
       bl   @ti_check_key
       jne  ti_wait_fire_2
       li   r0,KEY_FI
       bl   @ti_check_key
       jne  ti_wait_fire_2
       li   r0,KEY_EN
       bl   @ti_check_key
       jeq  ti_wait_fire_1
ti_wait_fire_2:
       .endproc
*// ti_wait_fire

***************************************************************************
*
* Check quit
*
ti_check_quit:
       clr  r1                         ; Test column 0
       li   r12,>0024                  ; Address for column selection
       ldcr r1,3                       ; Select column
       li   r12,>0006                  ; Address to read rows
       stcr r1,8
       andi r1,>1100
       jeq  ti_quit
*      Return
       rt
*      Quit
ti_quit:
       clr  @>83c4                     ; Reset user ISR address
       seto @>6000                     ; Select first ROM bank
       blwp @>0000
*// ti_check_quit

;*********************************************************************
;*
;* Scan keyboard
;*
;ti_keyscan:
;       .proc
;       lwpi gplws
;       movb @zero,@kscan_device
;       bl   @kscan
;       lwpi wrksp
;       movb @kscan_status,a
;       andi a,>2000
;       jeq  !
;       movb @kscan_key,a
;!      .endproc
;*// ti_keyscan

;*********************************************************************
;*
;* Generate a pseudo random number within the given limit
;*
;* a: Maximum number (0 - 255) exclusive
;*
;* On return a contains the number [0; a[
;*
;ti_rnd_range:
;       .proc                           ; Push return address onto the stack
;       bl   @ti_rnd                    ; Generate a random number in r0
;       andi r0,>00ff                 ; Clear MSB: [0-255]
;       mov  af,r1                    ; range in MSB
;       srl  r1,8                     ; range in LSB
;       mpy  r1,r0                  ; range * [0-255]
;       srl  r1,8                     ; (range * [0-255]) / 256
;       mov  r1,a                     ; Copy result back
;       swpb a                          ; to MSB
;       .endproc                        ; Pop return address off the stack
;*// ti_rnd_range

*********************************************************************
*
* Generate a pseudo random number
*
* On return r0 contains the number, which is also stored at @rnd_seed
*
* r1 and r2 are modified
*
ti_rnd:
       li   r1,28643                 ; A prime number to multiply by
       mpy  @rnd_seed,r1             ; Multiply by last random number
       ai   r2,31873                 ; Add a prime number
       src  r2,7                     ; Mix up the number to break odd/even pattern
       mov  r2,@rnd_seed             ; Save this number for next time
       mov  r2,r0
       rt
*// ti_rnd

*********************************************************************
*
* Wait for vertical retrace (CRU)
*
ti_vsync:
       .proc
       movb @vdpsta,@vdp_status
ti_vsync_1:
       clr  r12
       tb   2                          ; Test CRU bit for VDP interrupt
       jeq  ti_vsync_1
;       bl   @module_player
       .endproc
*// ti_vsync

*********************************************************************
*
* CPU space clear
*
ti_clear:
       clr  r0
clear_1:
       movb r0,*hl+
       dec  bc
       jne  clear_1
       rt
*// ti_clear

;*********************************************************************
;*
;* Wait for r0 frames
;*
;ti_delay:
;       .proc
;ti_delay_1:
;       bl   @ti_vsync
;       dec  r0
;       jne  ti_delay_1
;       .endproc
;*// ti_delay

*********************************************************************
*
* For routines that set or reset the carry flag on return
*
return_with_eq:
       .pop  r11
return_with_eq_1:
       c    r0,r0
       rt

return_with_carry:
       .pop  r11
return_with_carry_1:
       seto r0
       inc  r0
       rt

return_without_carry:
       .pop  r11
return_without_carry_1:
       clr  r0
       inc  r0
       rt

*********************************************************************
*
* EXX
*
exx_routine:
       mov  bc,r0
       mov  bc_,bc
       mov  r0,bc_
       mov  hl,r0
       mov  hl_,hl
       mov  r0,hl_
       mov  de,r0
       mov  de_,de
       mov  r0,de_
;      inv  @exx_flag
       rt
*// exx_routine

*********************************************************************
*
* DAA
*
daa_routine:
       mov  a,r0
       andi r0,>0f00
       cb   r0,@bytes+>09
       jle  !
       ab   @bytes+>06,a
!      mov  a,r0
       andi r0,>f000                   ; Ensure carry is cleared by shift
       srl  r0,4
       cb   r0,@bytes+>09
       jle  !
       ab   @bytes+>60,a
!      rt
*// daa_routine
